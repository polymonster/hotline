{
    // configure build tools
    tools<windows>: {
        pmfx: "hotline-data/bin/win32/pmfx/pmfx.exe"
        texturec: "hotline-data/bin/win32/texturec/texturec.exe"
        pmfx_dev: "py -3 ../pmfx-shader/pmfx.py"
    }

    tools<mac>: {
        pmfx_dev: "python3 ../pmfx-shader/pmfx.py"
    }

    tools_help: {
        pmfx: {
            help_arg: "-help"
        }
        texturec: {
            help_arg: "-help"
        }
        pmfx_dev(pmfx): {}
    }

    tools_update: {
        pmfx: {
            tag_name: latest
            repository: "https://api.github.com/repos/polymonster/pmfx-shader/releases"
            asset_name<windows>: Windows-x64.zip
        }
    }

    // ensure -run always comes last
    post_build_order: [
        "cargo_examples"
        "run"
    ]

    // build client executable and plugin dynamic libs
    hotline: {
        jsn_vars: {
            config_flags: ""
            config: "debug"
        }
        client: {
            type: shell
            commands: [
                "cargo build --manifest-path plugins/Cargo.toml ${config_flags}"
            ]
        }
        plugins: {
            type: shell
            commands: [
                "cargo build ${config_flags}"
            ]
        }
    }

    // generic build jobs, platform agnostic
    base: {
        jsn_vars: {
            data_dir: "target/data"
            temp_dir: "target/temp"
            src_data_dir: "hotline-data/src"
            src_shader_dir: "shaders"
        }

        // clean build and temp dirs
        clean: {
            directories: [
                "${data_dir}"
                "${temp_dir}"
            ]
        }

        // copy generic data
        copy_base: {
            type: copy
            files: [
                // copy fonts to data dir
                ["${src_data_dir}/fonts", "${data_dir}/fonts"]

                // default imgui layouts form the client.. todo. move to target
                ["plugins/imgui.ini", "target/debug/imgui.ini"]
                ["plugins/imgui.ini", "target/debug/imgui.ini"]
                ["plugins/imgui.ini", "target/debug/deps/imgui.ini"]

                // default user config for the client
                ["plugins/user_config.json", "target/user_config.json"]

                // copy prebuilt dds-textures
                ["${src_data_dir}/textures/**.dds", "${data_dir}/textures"]
            ]
        }

        // convert png, jpg, tga, gif to dds and pack cubemaps / arrays
        texturec: {
            args: [
                "-f %{input_file}"
                "%{export_args}"
                "-o %{output_file}"
            ]
            files: [
                ["${src_data_dir}/textures", "${data_dir}/textures"]
            ]
            excludes: [
                "*.DS_Store"
                "export.jsn"
                "*.txt"
                "*.dds"
            ]
            change_ext: ".dds"
            dependencies: true
        }
    }

    // windows specific data, will also build (base)
    win32-data(base): {
        pmfx: {
            args: [
                "-shader_platform hlsl"
                "-shader_version 6_3"
                "-i ${src_shader_dir}/"
                "-o ${data_dir}/shaders"
                "-t ${temp_dir}/shaders"
                "-num_threads 1"
                "-args"
                "-Zpr"
            ]
        }
        pmfx_dev: {
            explicit: true
            args: [
                "-shader_platform hlsl"
                "-shader_version 6_3"
                "-i ${src_shader_dir}/"
                "-o ${data_dir}/shaders"
                "-t ${temp_dir}/shaders"
                "-num_threads 1"
                "-f"
                "-args"
                "-Zpr"
            ]
        }
    }

    mac-data(base): {
        pmfx_dev: {
            explicit: true
            args: [
                "-shader_platform metal"
                "-shader_version 6_0"
                "-metal_version 2.3"
                "-metal_sdk macosx"
                "-discrete_binding 0"
                "-discrete_binding 1"
                "-i ${src_shader_dir}"
                "-o ${data_dir}/shaders"
                "-t ${temp_dir}/shaders"
                "-num_threads 1"
                "-f"
                "-args"
                "-Zpr"
            ]
        }
    }

    rt_shaders: {
        jsn_vars: {
            output_dir: "target/data/shaders"
        }
        shell: {
            commands: [
                "hotline-data\\bin\\win32\\pmfx\\bin\\dxc\\dxc.exe -T lib_6_3 -E MyRaygenShader -Fo ${output_dir}/raygen.cso -I . shaders/raytracing_example.hlsl"
                "hotline-data\\bin\\win32\\pmfx\\bin\\dxc\\dxc.exe -T lib_6_3 -E MyClosestHitShader -Fo ${output_dir}/closesthit.cso -I . shaders/raytracing_example.hlsl"
                "hotline-data\\bin\\win32\\pmfx\\bin\\dxc\\dxc.exe -T lib_6_3 -E MyMissShader -Fo ${output_dir}/miss.cso -I . shaders/raytracing_example.hlsl"
                "hotline-data\\bin\\win32\\pmfx\\bin\\dxc\\dxc.exe -T lib_6_3 -Fo ${output_dir}/lib.cso -I . shaders/raytracing_example.hlsl"

            ]
        }
    }

    // win32 debug client, plugins and data
    win32-debug(win32-data, hotline): {
        copy: {
            files: [
                // copies the win pix event run time for inserting pix events
                ["hotline-data/bin/win32/WinPixEventRuntime.dll", "target/${config}/WinPixEventRuntime.dll"]
                ["hotline-data/bin/win32/WinPixEventRuntime.dll", "target/${config}/examples/WinPixEventRuntime.dll"]
            ]
        }

        // launch client
        run: {
            explicit: true
            type: shell
            commands: [
                ".\\target\\${config}\\client.exe"
            ]
        }
    }
    // win32 release client, plugins and data
    win32-release(win32-debug): {
        jsn_vars: {
            config_flags: "--release"
            config: "release"
        }
    }

    // win32 examples
    win32-examples(win32-data): {
        cargo_examples: {
            type: shell
            commands: [
                "cargo build --examples"
            ]
        }
    }

    // runs cargo test single threaded to make it more firendly for using d3d devices and client instances
    test: {
        cargo_test: {
            type: shell
            commands: [
                "cargo test -- --test-threads=1 --nocapture"
            ]
        }
    }
}