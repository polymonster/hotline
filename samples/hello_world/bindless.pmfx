struct vs_input {
    float4 position : POSITION; 
    float4 colour : COLOR;
};

struct ps_input {
    float4 position : SV_POSITION;
    float4 colour : COLOR;
};

struct ps_output {
    float4 colour : SV_Target;
};

cbuffer push_constants : register(b7, space0) {
    float4 my_rgba;
};

cbuffer mush_constants : register(b8, space0) {
    float4 by_bbbs;
};

struct data {
    float4 rgba;
};

Texture2D texture0[6] : register(t0); 
SamplerState sampler0 : register(s0);
ConstantBuffer<data> cbuffer0[6] : register(b0);

ps_input vs_main(vs_input input) {
    ps_input output;
    output.position = input.position;
    output.colour = input.colour;
    return output;
}

ps_output ps_main(ps_input input) {
    ps_output output;

    float4 final = float4(0.0, 0.0, 0.0, 0.0);
    float2 uv = input.colour.rg * float2(1.0, -1.0);

    sampler0;

    float4 r0 = texture0[0].Sample(sampler0, uv * 2.0);
    float4 r1 = texture0[1].Sample(sampler0, uv * 2.0);
    float4 r2 = texture0[2].Sample(sampler0, uv * 2.0);
    float4 r3 = texture0[3].Sample(sampler0, uv * 2.0);
    r3 += texture0[3].Sample(sampler0, (input.colour.rg * 2.0) + float2(1.0, 0.0));

    r3 *= my_rgba;
    r3 *= by_bbbs;

    if(input.colour.r < 0.5 && input.colour.g < 0.5)
    {
        final = r0;
    }
    else if(input.colour.r < 0.5 && input.colour.g > 0.5)
    {
        final = r1;
    }
    else if(input.colour.r > 0.5 && input.colour.g > 0.5)
    {
        final = r2;
    }
    else if(input.colour.r > 0.5 && input.colour.g < 0.5)
    {
        final = r3;
    }

    final *= cbuffer0[4].rgba;
    output.colour = final;
    return output;
}

pmfx: {
    pipelines: {
        bindless: {
            vs: vs_main,
            ps: ps_main,
            push_constants: [
                "push_constants"
                "mush_constants"
            ]
            static_samplers: [
                [sampler0, "wrap_linear"]
            ]
        }
    }
}
