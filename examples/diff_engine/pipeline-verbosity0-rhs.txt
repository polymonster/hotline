// guid: bb4c643600000000
// githash: 0x0ee78208
// compiler version: 11.0.0.0 build 482 revision ee78208
// profile: vertex
// srt: yes
// variant: vertex
// code-size: 1376
// header-size: 400
.pragma argument(target=common; chiprev=trinity-proto2)
.shader
  type(GS)
  sgpr_count(70)
  vgpr_count(28)
  user_sgpr_count(16)
  cxxsymbol("shaders::material_vv")
  wavemode(wave64)
  set_shader_type("geometry")  // v_primitive_id in v2
  num_prims(64)
  num_verts(64)
  amp_factor(1)
  passthrough(1)
  gs_vgpr_component_count(3)
  es_vgpr_component_count(3)
  prim_shader(vs)
  float_mode(kFloatModeRoundNearestEven|kFloatModeFlushDenormIn|kFloatModeFlushDenormOut, kFloatModeRoundNearestEven|kFloatModeAllowDenormIn|kFloatModeAllowDenormOut)
  dx10_clamp(1)
  user_sgpr_usage([0:3], kShaderInputUsageImmShaderResourceTable, 0) // s[8:11]
  user_sgpr_usage([4:7], kShaderInputUsageImmConstBuffer, 0) // s[12:15]
  user_sgpr_usage([8:11], kShaderInputUsageImmConstBuffer, 2) // s[16:19]
  user_sgpr_usage([12:13], kShaderInputUsagePtrVertexBufferTable, 0) // s[20:21]
  user_sgpr_usage([14:15], kShaderInputUsagePtrVertexAttribDescTable, 0) // s[22:23]
  vertex_input_semantic(v[9:11], 0, "kTypeFloat3")
  vertex_input_semantic(v[12:14], 1, "kTypeFloat3")
  vertex_input_semantic(v[15:17], 2, "kTypeFloat3")
  vertex_input_semantic(v[18:19], 3, "kTypeFloat2")
  vs_output_semantic(param0, 0xf, fp32)
  vs_output_semantic(param1, 0x10, fp32)
  vs_output_semantic(param2, 0x11, fp32)
  vs_output_semantic(param3, 0x12, fp32)
  vs_output_semantic(param4, 0x13, fp32)

  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  s_inst_prefetch 0x3                                                    // 00000000: SOPP, BFA00003, 
  s_bfe_u32 vcc1, s3, #0x80008                                           // 00000004: SOP2, 93EBFF03 00080008, 
  s_and_b32 s0, s3, #0xff                                                // 0000000C: SOP2, 8700FF03 000000FF, 
  s_lshl_b32 vcc0, vcc1, 12                                              // 00000014: SOP2, 8F6A8C6B, 
  s_or_b32 m0, s0, vcc0                                                  // 00000018: SOP2, 887C6A00,  1cy stall (vcc0)
  s_nop 0x0                                                              // 0000001C: SOPP, BF800000, 
  s_sendmsg sendmsg(kMsgGsAllocReq)                                      // 00000020: SOPP, BF900009,  7cy stall (sa_m0)
  s_sub_i32 vcc0, 64, vcc1                                               // 00000024: SOP2, 81EA6BC0, 
  s_lshr_b64 exec[0:1], -1, vcc0                                         // 00000028: SOP2, 90FE6AC1,  1cy stall (vcc0)
  exp prim, v0, off, off, off done                                       // 0000002C: EXP, F8000941 00000000, 
  s_sub_i32 vcc0, 64, s0                                                 // 00000034: SOP2, 81EA00C0, 
  s_waitcnt expcnt(0)                                                    // 00000038: SOPP, BF8CFF0F, 
  s_lshr_b64 exec[0:1], -1, vcc0                                         // 0000003C: SOP2, 90FE6AC1, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\common.pssli */
  /* 50: float3 position : POSITION; */
  s_load_dwordx4 s[0:3], s[22:23], null                                  // 00000040: SMEM, F408000B FA000000, 
  s_mov_b32 s22, #0x22c0204                                              // 00000048: SOP1, BE9603FF 022C0204, 
  s_mov_b32 s23, #0xfac03ac                                              // 00000050: SOP1, BE9703FF 0FAC03AC, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_buffer_load_dword s40, s[16:19], null                                // 00000058: SMEM, F4200A08 FA000000,  6cy stall (sa_sdst)
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  s_buffer_load_dwordx16 s[24:39], s[12:15], null                        // 00000060: SMEM, F4300606 FA000000, 
  s_waitcnt lgkmcnt(0)                                                   // 00000068: SOPP, BF8CC07F, 34cy stall (lgkm_cnt)
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\common.pssli */
  /* 50: float3 position : POSITION; */
  s_lshl_b32 vcc1, s0, 4                                                 // 0000006C: SOP2, 8F6B8400, 
  s_bfe_u32 vcc0, s0, #0x1001a                                           // 00000070: SOP2, 93EAFF00 0001001A, 
  s_and_b32 vcc1, vcc1, #0x1f0                                           // 00000078: SOP2, 876BFF6B 000001F0, 
  s_cmp_eq_u32 0, vcc0                                                   // 00000080: SOPC, BF066A80, 
  s_load_dwordx4 s[4:7], s[20:21], vcc1                                  // 00000084: SMEM, F408010A D6000000,  8cy stall (sa_sdst)
  s_cselect_b64 s[12:13], exec[0:1], 0                                   // 0000008C: SOP2, 858C807E, 
  s_bfe_u32 s14, s0, #0x70007                                            // 00000090: SOP2, 938EFF00 00070007, 
  s_bfe_u32 vcc0, s0, #0x20005                                           // 00000098: SOP2, 93EAFF00 00020005, 
  s_lshl_b32 s15, s14, 12                                                // 000000A0: SOP2, 8F0F8C0E, 
  s_lshl4_add_u32 vcc1, vcc0, #0xc0000                                   // 000000A4: SOP2, 98EBFF6A 000C0000, 
  s_waitcnt lgkmcnt(0)                                                   // 000000AC: SOPP, BF8CC07F, 26cy stall (lgkm_cnt)
  s_and_b32 vcc0, s7, #0xfff80000                                        // 000000B0: SOP2, 876AFF07 FFF80000, 
  v_cndmask_b32 v0, v8, v5, s[12:13]                                     // 000000B8: VOP3, D5010000 00320B08, 
  s_or_b32 vcc0, vcc0, s15                                               // 000000C0: SOP2, 886A0F6A,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u64 s[12:13], s[22:23], vcc1                                     // 000000C4: SOP2, 948C6B16, 
  s_bfe_u32 s0, s0, #0xc000e                                             // 000000C8: SOP2, 9380FF00 000C000E, 
  s_or_b32 vcc0, vcc0, s12                                               // 000000D0: SOP2, 886A0C6A, 
  s_cmp_eq_u32 s14, 0                                                    // 000000D4: SOPC, BF06800E, 
  s_nop 0x0                                                              // 000000D8: SOPP, BF800000, 
  s_cselect_b32 s7, s7, vcc0                                             // 000000DC: SOP2, 85076A07, 
  /* 51: float3 normal : NORMAL; */
  s_lshl_b32 vcc0, s1, 4                                                 // 000000E0: SOP2, 8F6A8401, 
  /* 50: float3 position : POSITION; */
  buffer_load_format_xyz v[12:14], v0, s[4:7], s0 idxen                  // 000000E4: MUBUF, E0082000 00010C00,  8cy stall (sa_sdst)
  /* 52: float3 tangent : TEXCOORD0; */
  s_lshl_b32 vcc1, s2, 4                                                 // 000000EC: SOP2, 8F6B8402, 
  /* 51: float3 normal : NORMAL; */
  s_and_b32 vcc0, vcc0, #0x1f0                                           // 000000F0: SOP2, 876AFF6A 000001F0, 
  /* 52: float3 tangent : TEXCOORD0; */
  s_and_b32 vcc1, vcc1, #0x1f0                                           // 000000F8: SOP2, 876BFF6B 000001F0, 
  /* 51: float3 normal : NORMAL; */
  s_load_dwordx4 s[16:19], s[20:21], vcc0                                // 00000100: SMEM, F408040A D4000000,  8cy stall (sa_sdst)
  s_bfe_u32 vcc0, s1, #0x1001a                                           // 00000108: SOP2, 93EAFF01 0001001A, 
  /* 52: float3 tangent : TEXCOORD0; */
  s_load_dwordx4 s[60:63], s[20:21], vcc1                                // 00000110: SMEM, F4080F0A D6000000,  8cy stall (sa_sdst)
  /* 51: float3 normal : NORMAL; */
  s_cmp_eq_u32 0, vcc0                                                   // 00000118: SOPC, BF066A80, 
  s_nop 0x0                                                              // 0000011C: SOPP, BF800000, 
  s_cselect_b64 s[12:13], exec[0:1], 0                                   // 00000120: SOP2, 858C807E, 
  s_bfe_u32 s41, s1, #0x70007                                            // 00000124: SOP2, 93A9FF01 00070007, 
  s_bfe_u32 vcc1, s1, #0x20005                                           // 0000012C: SOP2, 93EBFF01 00020005, 
  s_lshl_b32 vcc0, s41, 12                                               // 00000134: SOP2, 8F6A8C29, 
  s_lshl4_add_u32 vcc1, vcc1, #0xc0000                                   // 00000138: SOP2, 98EBFF6B 000C0000, 
  s_waitcnt lgkmcnt(0)                                                   // 00000140: SOPP, BF8CC07F, 24cy stall (lgkm_cnt)
  s_and_b32 s0, s19, #0xfff80000                                         // 00000144: SOP2, 8700FF13 FFF80000, 
  s_bfe_u32 s1, s1, #0xc000e                                             // 0000014C: SOP2, 9381FF01 000C000E, 
  v_cndmask_b32 v0, v8, v5, s[12:13]                                     // 00000154: VOP3, D5010000 00320B08, 
  s_or_b32 s12, s0, vcc0                                                 // 0000015C: SOP2, 880C6A00,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u64 vcc[0:1], s[22:23], vcc1                                     // 00000160: SOP2, 94EA6B16, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_lshl_b32 s56, s40, 6                                                 // 00000164: SOP2, 8F388628, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\common.pssli */
  /* 51: float3 normal : NORMAL; */
  s_or_b32 vcc1, s12, vcc0                                               // 00000168: SOP2, 886B6A0C, 
  /* 53: float2 uv : TEXCOORD1; */
  s_lshl_b32 vcc0, s3, 4                                                 // 0000016C: SOP2, 8F6A8403, 
  s_and_b32 vcc0, vcc0, #0x1f0                                           // 00000170: SOP2, 876AFF6A 000001F0,  1cy stall (vcc0)
  /* 51: float3 normal : NORMAL; */
  s_cmp_eq_u32 s41, 0                                                    // 00000178: SOPC, BF068029, 
  /* 53: float2 uv : TEXCOORD1; */
  s_load_dwordx4 s[64:67], s[20:21], vcc0                                // 0000017C: SMEM, F408100A D4000000,  8cy stall (sa_sdst)
  /* 51: float3 normal : NORMAL; */
  s_cselect_b32 s19, s19, vcc1                                           // 00000184: SOP2, 85136B13, 
  /* 52: float3 tangent : TEXCOORD0; */
  s_bfe_u32 vcc0, s2, #0x1001a                                           // 00000188: SOP2, 93EAFF02 0001001A, 
  s_bfe_u32 s42, s2, #0x70007                                            // 00000190: SOP2, 93AAFF02 00070007, 
  s_cmp_eq_u32 0, vcc0                                                   // 00000198: SOPC, BF066A80, 
  /* 51: float3 normal : NORMAL; */
  buffer_load_format_xyz v[0:2], v0, s[16:19], s1 idxen                  // 0000019C: MUBUF, E0082000 01040000,  8cy stall (sa_sdst)
  /* 52: float3 tangent : TEXCOORD0; */
  s_cselect_b64 s[0:1], exec[0:1], 0                                     // 000001A4: SOP2, 8580807E, 
  s_bfe_u32 vcc1, s2, #0x20005                                           // 000001A8: SOP2, 93EBFF02 00020005, 
  s_and_b32 s4, s63, #0xfff80000                                         // 000001B0: SOP2, 8704FF3F FFF80000, 
  s_lshl_b32 vcc0, s42, 12                                               // 000001B8: SOP2, 8F6A8C2A, 
  s_lshl4_add_u32 vcc1, vcc1, #0xc0000                                   // 000001BC: SOP2, 98EBFF6B 000C0000, 
  s_or_b32 s16, s4, vcc0                                                 // 000001C4: SOP2, 88106A04, 
  s_bfe_u64 vcc[0:1], s[22:23], vcc1                                     // 000001C8: SOP2, 94EA6B16, 
  v_cndmask_b32 v3, v8, v5, s[0:1]                                       // 000001CC: VOP3, D5010003 00020B08,  2cy stall (vm_vsrc)
  s_or_b32 vcc0, s16, vcc0                                               // 000001D4: SOP2, 886A6A10,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u32 vcc1, s2, #0xc000e                                           // 000001D8: SOP2, 93EBFF02 000C000E, 
  s_cmp_eq_u32 s42, 0                                                    // 000001E0: SOPC, BF06802A, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_buffer_load_dwordx16 s[40:55], s[8:11], s56                          // 000001E4: SMEM, F4300A04 70000000,  8cy stall (sa_sdst)
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\common.pssli */
  /* 52: float3 tangent : TEXCOORD0; */
  s_cselect_b32 s63, s63, vcc0                                           // 000001EC: SOP2, 853F6A3F, 
  /* 53: float2 uv : TEXCOORD1; */
  s_bfe_u32 vcc0, s3, #0x1001a                                           // 000001F0: SOP2, 93EAFF03 0001001A, 
  /* 52: float3 tangent : TEXCOORD0; */
  buffer_load_format_xyz v[9:11], v3, s[60:63], vcc1 idxen               // 000001F8: MUBUF, E0082000 6B0F0903,  8cy stall (sa_sdst)
  /* 53: float2 uv : TEXCOORD1; */
  s_cmp_eq_u32 0, vcc0                                                   // 00000200: SOPC, BF066A80, 
  s_nop 0x0                                                              // 00000204: SOPP, BF800000, 
  s_cselect_b64 s[0:1], exec[0:1], 0                                     // 00000208: SOP2, 8580807E, 
  s_bfe_u32 s2, s3, #0x70007                                             // 0000020C: SOP2, 9382FF03 00070007, 
  s_bfe_u32 vcc1, s3, #0x20005                                           // 00000214: SOP2, 93EBFF03 00020005, 
  s_waitcnt lgkmcnt(0)                                                   // 0000021C: SOPP, BF8CC07F, 17cy stall (lgkm_cnt)
  s_and_b32 s4, s67, #0xfff80000                                         // 00000220: SOP2, 8704FF43 FFF80000, 
  s_lshl_b32 vcc0, s2, 12                                                // 00000228: SOP2, 8F6A8C02, 
  s_lshl4_add_u32 vcc1, vcc1, #0xc0000                                   // 0000022C: SOP2, 98EBFF6B 000C0000, 
  s_or_b32 s4, s4, vcc0                                                  // 00000234: SOP2, 88046A04, 
  s_bfe_u64 vcc[0:1], s[22:23], vcc1                                     // 00000238: SOP2, 94EA6B16, 
  v_cndmask_b32 v3, v8, v5, s[0:1]                                       // 0000023C: VOP3, D5010003 00020B08, 
  s_or_b32 vcc1, s4, vcc0                                                // 00000244: SOP2, 886B6A04,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u32 vcc0, s3, #0xc000e                                           // 00000248: SOP2, 93EAFF03 000C000E, 
  s_cmp_eq_u32 s2, 0                                                     // 00000250: SOPC, BF068002, 
  s_nop 0x0                                                              // 00000254: SOPP, BF800000, 
  s_cselect_b32 s67, s67, vcc1                                           // 00000258: SOP2, 85436B43, 
  buffer_load_format_xy v[3:4], v3, s[64:67], vcc0 idxen                 // 0000025C: MUBUF, E0042000 6A100303,  8cy stall (sa_sdst)
  s_waitcnt vmcnt(3)                                                     // 00000264: SOPP, BF8C3F73, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\1jnuqdwd.uwb\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 17: float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0)); */
  v_mad_f32 v7, s40, v12, s52                                            // 00000268: VOP3, D5410007 00D21828,  8cy stall (vm_vsrc)
  v_mad_f32 v15, v12, s41, s53                                           // 00000270: VOP3, D541000F 00D4530C, 
  v_mad_f32 v8, v12, s42, s54                                            // 00000278: VOP3, D5410008 00D8550C, 
  v_mad_f32 v12, v12, s43, s55                                           // 00000280: VOP3, D541000C 00DC570C, 
  v_mad_f32 v5, s44, v13, v7                                             // 00000288: VOP3, D5410005 041E1A2C, 
  v_mac_f32 v15, s45, v13                                                // 00000290: VOP2, 3E1E1A2D, 
  v_mad_f32 v6, v13, s46, v8                                             // 00000294: VOP3, D5410006 04205D0D, 
  v_mac_f32 v12, s47, v13                                                // 0000029C: VOP2, 3E181A2F, 
  v_mac_f32 v5, s48, v14                                                 // 000002A0: VOP2, 3E0A1C30, 
  v_mad_f32 v7, v14, s49, v15                                            // 000002A4: VOP3, D5410007 043C630E, 
  v_mac_f32 v6, s50, v14                                                 // 000002AC: VOP2, 3E0C1C32, 
  v_mad_f32 v8, v14, s51, v12                                            // 000002B0: VOP3, D5410008 0430670E, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mul_f32 v14, s25, v5                                                 // 000002B8: VOP2, 101C0A19, 
  v_mul_f32 v12, s26, v5                                                 // 000002BC: VOP2, 10180A1A, 
  v_mul_f32 v16, s24, v5                                                 // 000002C0: VOP2, 10200A18, 
  v_mul_f32 v15, s27, v5                                                 // 000002C4: VOP2, 101E0A1B, 
  v_mac_f32 v14, s29, v7                                                 // 000002C8: VOP2, 3E1C0E1D, 
  v_mad_f32 v20, s30, v7, v12                                            // 000002CC: VOP3, D5410014 04320E1E, 
  v_mac_f32 v16, s28, v7                                                 // 000002D4: VOP2, 3E200E1C, 
  v_mad_f32 v17, s31, v7, v15                                            // 000002D8: VOP3, D5410011 043E0E1F, 
  v_mac_f32 v20, s34, v6                                                 // 000002E0: VOP2, 3E280C22, 
  v_mad_f32 v26, s32, v6, v16                                            // 000002E4: VOP3, D541001A 04420C20, 
  v_mac_f32 v17, s35, v6                                                 // 000002EC: VOP2, 3E220C23, 
  s_waitcnt vmcnt(2)                                                     // 000002F0: SOPP, BF8C3F72, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v18, s40, v0                                                 // 000002F4: VOP2, 10240028, 
  v_mul_f32 v19, s41, v0                                                 // 000002F8: VOP2, 10260029, 
  v_mul_f32 v25, s42, v0                                                 // 000002FC: VOP2, 1032002A, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mac_f32 v26, s36, v8                                                 // 00000300: VOP2, 3E341024, 
  v_mac_f32 v20, s38, v8                                                 // 00000304: VOP2, 3E281026, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mad_f32 v12, s44, v1, v18                                            // 00000308: VOP3, D541000C 044A022C, 
  v_mad_f32 v13, v1, s45, v19                                            // 00000310: VOP3, D541000D 044C5B01, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mad_f32 v18, s33, v6, v14                                            // 00000318: VOP3, D5410012 043A0C21, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v25, s46, v1                                                 // 00000320: VOP2, 3E32022E, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mad_f32 v19, s39, v8, v17                                            // 00000324: VOP3, D5410013 04461027, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v12, s48, v2                                                 // 0000032C: VOP2, 3E180430, 
  v_mac_f32 v13, s49, v2                                                 // 00000330: VOP2, 3E1A0431, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mac_f32 v18, s37, v8                                                 // 00000334: VOP2, 3E241025, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v25, s50, v2                                                 // 00000338: VOP2, 3E320432, 
  s_waitcnt vmcnt(1)                                                     // 0000033C: SOPP, BF8C3F71, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mul_f32 v14, s40, v9                                                 // 00000340: VOP2, 101C1228, 
  v_mul_f32 v22, s41, v9                                                 // 00000344: VOP2, 102C1229, 
  v_mul_f32 v21, s42, v9                                                 // 00000348: VOP2, 102A122A, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v23, v12, v12                                                // 0000034C: VOP2, 102E190C, 
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  exp pos0, v26, v18, v20, v19 done                                      // 00000350: EXP, F80008CF 1314121A, 13cy stall (va_vdst)
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mac_f32 v14, s44, v10                                                // 00000358: VOP2, 3E1C142C, 
  v_mad_f32 v15, v10, s45, v22                                           // 0000035C: VOP3, D541000F 04585B0A, 
  v_mac_f32 v21, s46, v10                                                // 00000364: VOP2, 3E2A142E, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v23, v13, v13                                                // 00000368: VOP2, 3E2E1B0D, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mul_f32 v17, v0, v10                                                 // 0000036C: VOP2, 10221500, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mac_f32 v14, s48, v11                                                // 00000370: VOP2, 3E1C1630, 
  v_mac_f32 v15, s49, v11                                                // 00000374: VOP2, 3E1E1631, 
  v_mad_f32 v16, v11, s50, v21                                           // 00000378: VOP3, D5410010 0454650B, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v23, v25, v25                                                // 00000380: VOP2, 3E2E3319, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mul_f32 v24, v9, v2                                                  // 00000384: VOP2, 10300509, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mul_f32 v22, v14, v14                                                // 00000388: VOP2, 102C1D0E, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mul_f32 v21, v1, v11                                                 // 0000038C: VOP2, 102A1701, 
  v_mac_f32 v17, -v1, v9                                                 // 00000390: VOP3, D51F0011 20021301, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_rsq_f32 v9, v23                                                      // 00000398: VOP1, 7E125D17, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mad_f32 v0, v11, -v0, v24                                            // 0000039C: VOP3, D5410000 4462010B,  4cy stall (trans VALU wave64)
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mac_f32 v22, v15, v15                                                // 000003A4: VOP2, 3E2C1F0F, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mac_f32 v21, -v2, v10                                                // 000003A8: VOP3, D51F0015 20021502, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v10, v9, v12                                                 // 000003B0: VOP2, 10141909, 
  v_mul_f32 v11, v9, v13                                                 // 000003B4: VOP2, 10161B09, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mad_f32 v1, v16, v16, v22                                            // 000003B8: VOP3, D5410001 045A2110, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v9, v9, v25                                                  // 000003C0: VOP2, 10123309, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_rsq_f32 v12, v1                                                      // 000003C4: VOP1, 7E185D01,  1cy stall (v1)
  v_mul_f32 v13, v12, v14                                                // 000003C8: VOP2, 101A1D0C,  8cy stall (v12)
  v_mul_f32 v14, v12, v15                                                // 000003CC: VOP2, 101C1F0C, 
  v_mul_f32 v12, v12, v16                                                // 000003D0: VOP2, 1018210C, 
  s_waitcnt vmcnt(0)                                                     // 000003D4: SOPP, BF8C3F70, 
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  exp param0, v3, v4, off, off                                           // 000003D8: EXP, F8000203 00000403, 12cy stall (va_vdst)
  exp param1, v10, v11, v9, off                                          // 000003E0: EXP, F8000217 00090B0A, 
  exp param2, v13, v14, v12, off                                         // 000003E8: EXP, F8000227 000C0E0D, 
  exp param3, v21, v0, v17, off                                          // 000003F0: EXP, F8000237 00110015, 
  exp param4, v5, v7, v6, v8                                             // 000003F8: EXP, F800024F 08060705, 
  /* 36: } */
  s_endpgm                                                               // 00000400: SOPP, BF810000, 

/*
=== resources:
 0) class: srt        slot: 0   name:srt            type: ShaderResourceTable
 1) class: cb         slot: 0   name:ViewConstants  type: ConstantBuffer<ViewConstants>
 2) class: cb         slot: 2   name:DrawConstants  type: ConstantBuffer<DrawConstants>
 3) class: input      slot: 0   name:input.position semantic: POSITION index: 0 type: float3
 4) class: input      slot: 1   name:input.normal   semantic: NORMAL index: 0 type: float3
 5) class: input      slot: 2   name:input.tangent  semantic: TEXCOORD index: 0 type: float3
 6) class: input      slot: 3   name:input.uv       semantic: TEXCOORD index: 1 type: float2
 7) class: output     slot: 0   name:main.uv        semantic: TEXCOORD index: 0 type: float2
 8) class: output     slot: 1   name:main.normal    semantic: TEXCOORD index: 1 type: float3
 9) class: output     slot: 2   name:main.tangent   semantic: TEXCOORD index: 2 type: float3
10) class: output     slot: 3   name:main.bitangent semantic: TEXCOORD index: 3 type: float3
11) class: output     slot: 4   name:main.worldPos  semantic: TEXCOORD index: 4 type: float4
12) class: output     slot: 5   name:main.position  semantic: S_POSITION index: 0 type: float4

=== user-types:
struct MaterialProperties  { // size=32
 float4 m_albedoColor;    // offset:0, unused
 float4 m_emissiveColor;  // offset:16, unused
};

struct MaterialSRT  { // size=96
 RegularBuffer<unsigned int> m_materialFlags;             // offset:0, unused
 RegularBuffer<MaterialProperties> m_materialProperties;  // offset:16, unused
 RegularBuffer<Texture2D<float4>> m_albedoTexture;        // offset:32, unused
 RegularBuffer<Texture2D<float4>> m_normalTexture;        // offset:48, unused
 RegularBuffer<Texture2D<float4>> m_roughnessTexture;     // offset:64, unused
 RegularBuffer<Texture2D<float4>> m_emissiveTexture;      // offset:80, unused
};

struct ShaderResourceTable  { // size=24
 RegularBuffer<float4x4> m_worldMatrix;  // offset:0
 MaterialSRT* m_material;                // offset:16, unused
};

struct ViewConstants  { // size=208
 float4x4 m_viewProjectionMatrix;         // offset:0
 float4x4 m_inverseViewProjectionMatrix;  // offset:64, unused
 float4 m_viewPosition;                   // offset:128, unused
 float4 m_lightDirection;                 // offset:144, unused
 float4 m_shadowFocusNearFar;             // offset:160, unused
 float4 m_cascadeFocusFar;                // offset:176, unused
 float4 m_time;                           // offset:192, unused
};

struct DrawConstants  { // size=16
 unsigned int m_entityIndex;  // offset:0
 int m_lodIndex;              // offset:4, unused
 unsigned int m_debugOption;  // offset:8, unused
 unsigned int m_unused;       // offset:12, unused
};

*/