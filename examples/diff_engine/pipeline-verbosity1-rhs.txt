>> pass 0/2: finalize unparse
>> pass 1/2: dominance analysis
>> pass 2/2: validate graph

Pass List:
>> pass 0/799: attach options
    attach options (ED6904A2)
>> pass 1/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 2/799: validate graph
    validate graph (0045C2BE)
>> pass 3/799: R10PrepareNggVs
    R10PrepareNggVs (7CBA6C00)
>> pass 4/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 5/799: validate graph
    validate graph (0045C2BE)
>> pass 6/799: inline hull shader patch constant function
    inline hull shader patch constant function (B88B43F7)
>> pass 7/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 8/799: validate graph
    validate graph (0045C2BE)
>> pass 9/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %10 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %159 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6
    %166 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7
    %167 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8
    %168 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9
    %169 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0
    %170 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %14 temp: temp(0) * 1/int32[64] - '__function_shader_read_only_vgpr'

  %19 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_gpuPrintfFunctionShaderAbi'

  %47 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_gpuNggValidateFunctionShaderAbi'

  %67 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_nullFunctionShaderAbi'

  %85 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_orderedcount_check_abi'

  %105 temp: lds(0) * 1/int32[8] - 'lds_prefixSumBuffer'

  %106 temp: lds(0) * 4/fp32[256][5] - 'pos_compaction'[GsVertexOutput][Sroa]

  %107 temp: lds(0) * 4/int32[256][32] - 'param_compaction'[GsVertexOutput][Sroa]

  %108 temp: lds(0) * 1/int32[256] - 'index_compaction'[GsIndexOutput][Sroa]

  %109 temp: lds(0) * 1/int32[256] - 'primid_compaction'[GsIndexOutput][Sroa]

  %115 temp: temp(0) * struct (PrintfNoArg) {} - 's_invalid'

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %10[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]
    cubemapTexture(96 - 96) -- %159[0:+32]
    brdfLUT(97 - 97) -- %160[0:+32]
    albedoTexture(98 - 98) -- %161[0:+32]
    normalTexture(99 - 99) -- %162[0:+32]
    roughnessTexture(100 - 100) -- %163[0:+32]
    emissiveTexture(101 - 101) -- %164[0:+32]
    shadowmapTexture0(102 - 102) -- %165[0:+32]
    shadowmapTexture1(103 - 103) -- %166[0:+32]
    shadowmapTexture2(104 - 104) -- %167[0:+32]
    shadowmapTexture3(105 - 105) -- %168[0:+32]
    samplerWrapLinear(107 - 107) -- %169[0:+16]
    samplerShadowCompare(109 - 109) -- %170[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %10[0:+24]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %22 temp(0) * 1/int32 GETELEMPTR %19, int32{0}, int32{0}
        %24 void ST int32{4}, %22
        %25 temp(0) * 1/int32 GETELEMPTR %19, int32{0}, int32{1}
        %28 void ST int32{40}, %25
        %29 temp(0) * 1/int32 GETELEMPTR %19, int32{0}, int32{2}
        %32 void ST int32{16}, %29
        %33 temp(0) * 1/int32 GETELEMPTR %19, int32{0}, int32{3}
        %35 void ST int32{16}, %33
        %36 temp(0) * 1/int32 GETELEMPTR %19, int32{0}, int32{4}
        %37 void ST int32{0}, %36
        %38 temp(0) * 1/int32 GETELEMPTR %19, int32{0}, int32{5}
        %40 void ST int32{0}, %38
        %41 temp(0) * 1/int64 GETELEMPTR %19, int32{0}, int32{6}
        %43 void ST int64{0}, %41
        %44 temp(0) * 1/int64 GETELEMPTR %19, int32{0}, int32{7}
        %46 void ST int64{0}, %44
        %49 temp(0) * 1/int32 GETELEMPTR %47, int32{0}, int32{0}
        %50 void ST int32{4}, %49
        %51 temp(0) * 1/int32 GETELEMPTR %47, int32{0}, int32{1}
        %53 void ST int32{12}, %51
        %54 temp(0) * 1/int32 GETELEMPTR %47, int32{0}, int32{2}
        %55 void ST int32{16}, %54
        %56 temp(0) * 1/int32 GETELEMPTR %47, int32{0}, int32{3}
        %57 void ST int32{16}, %56
        %58 temp(0) * 1/int32 GETELEMPTR %47, int32{0}, int32{4}
        %60 void ST int32{64}, %58
        %61 temp(0) * 1/int32 GETELEMPTR %47, int32{0}, int32{5}
        %62 void ST int32{0}, %61
        %63 temp(0) * 1/int64 GETELEMPTR %47, int32{0}, int32{6}
        %64 void ST int64{0}, %63
        %65 temp(0) * 1/int64 GETELEMPTR %47, int32{0}, int32{7}
        %66 void ST int64{0}, %65
        %69 temp(0) * 1/int32 GETELEMPTR %67, int32{0}, int32{0}
        %70 void ST int32{4}, %69
        %71 temp(0) * 1/int32 GETELEMPTR %67, int32{0}, int32{1}
        %72 void ST int32{16}, %71
        %73 temp(0) * 1/int32 GETELEMPTR %67, int32{0}, int32{2}
        %74 void ST int32{16}, %73
        %75 temp(0) * 1/int32 GETELEMPTR %67, int32{0}, int32{3}
        %76 void ST int32{0}, %75
        %77 temp(0) * 1/int32 GETELEMPTR %67, int32{0}, int32{4}
        %78 void ST int32{0}, %77
        %79 temp(0) * 1/int32 GETELEMPTR %67, int32{0}, int32{5}
        %80 void ST int32{0}, %79
        %81 temp(0) * 1/int64 GETELEMPTR %67, int32{0}, int32{6}
        %82 void ST int64{0}, %81
        %83 temp(0) * 1/int64 GETELEMPTR %67, int32{0}, int32{7}
        %84 void ST int64{0}, %83
        %87 temp(0) * 1/int32 GETELEMPTR %85, int32{0}, int32{0}
        %88 void ST int32{4}, %87
        %89 temp(0) * 1/int32 GETELEMPTR %85, int32{0}, int32{1}
        %90 void ST int32{16}, %89
        %91 temp(0) * 1/int32 GETELEMPTR %85, int32{0}, int32{2}
        %92 void ST int32{16}, %91
        %93 temp(0) * 1/int32 GETELEMPTR %85, int32{0}, int32{3}
        %95 void ST int32{8}, %93
        %96 temp(0) * 1/int32 GETELEMPTR %85, int32{0}, int32{4}
        %97 void ST int32{0}, %96
        %98 temp(0) * 1/int32 GETELEMPTR %85, int32{0}, int32{5}
        %99 void ST int32{0}, %98
        %100 temp(0) * 1/int64 GETELEMPTR %85, int32{0}, int32{6}
        %101 void ST int64{0}, %100
        %102 temp(0) * 1/int64 GETELEMPTR %85, int32{0}, int32{7}
        %103 void ST int64{0}, %102
        %8 void BR 
        --> block:471

      block:471
        <-- block:7
        %11 generic(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} CONV_reinterp %10
        %171 temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} 'output': INSTA 
        %172 temp(0) * 4/fp32[4]:column_major 'worldMatrix': INSTA 
        %173 generic(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %11, int32{0}, int32{0}
        %174 1/int32 LD %153
        %175 temp(0) * generic(0) * 4/fp32[4]:column_major INSTA 
        %194 void CALL 'column_major float4x4 const& RegularBuffer::operator[](uint) const', byval %174, byref %175, byref %173
        %195 generic(0) * 4/fp32[4]:column_major LD %175
        %196 generic(0) * 4/fp32 GETELEMPTR %195, int32{0}, int32{0}
        %197 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{0}
        %198 4/fp32 LD %196
        %199 void ST %198, %197
        %200 generic(0) * 4/fp32 GETELEMPTR %195, int32{0}, int32{1}
        %201 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{1}
        %202 4/fp32 LD %200
        %203 void ST %202, %201
        %204 generic(0) * 4/fp32 GETELEMPTR %195, int32{0}, int32{2}
        %205 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{2}
        %206 4/fp32 LD %204
        %207 void ST %206, %205
        %208 generic(0) * 4/fp32 GETELEMPTR %195, int32{0}, int32{3}
        %209 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{3}
        %210 4/fp32 LD %208
        %211 void ST %210, %209
        %212 temp(0) * 4/fp32 'worldPos': INSTA 
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %215 3/fp32 SHUF %214.xyz
        %217 4/fp32 SHUF %215.xyz-,  fp32{1.0}.---x
        %276 void CALL 'float4 mul(column_major float4x4, float4)', byref %172, byval %217, byref %212
        %277 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %278 4/fp32 LD %212
        %279 void ST %278, %277
        %280 4/fp32 LD %212
        %281 temp(0) * 4/fp32 INSTA 
        %282 void CALL 'float4 mul(column_major float4x4, float4)', byref %145, byval %280, byref %281
        %283 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %284 4/fp32 LD %281
        %285 void ST %284, %283
        %286 temp(0) * 3/fp32[3]:column_major 'worldRotationMatrix': INSTA 
        %287 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{0}
        %288 4/fp32 LD %287
        %289 1/fp32 EXTRCOEFF %288, int32{0}
        %290 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{1}
        %291 4/fp32 LD %290
        %292 1/fp32 EXTRCOEFF %291, int32{0}
        %293 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{2}
        %294 4/fp32 LD %293
        %295 1/fp32 EXTRCOEFF %294, int32{0}
        %296 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{3}
        %297 4/fp32 LD %296
        %298 1/fp32 EXTRCOEFF %297, int32{0}
        %299 4/fp32 SHUF %289.x---,  %292.-x--,  %295.--x-,  %298.---x
        %300 3/fp32 SHUF %299.xyz
        %301 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{0}
        %302 3/fp32 LD %301
        %303 1/fp32 EXTRCOEFF %300, int32{0}
        %304 3/fp32 INSCOEFF %302, %303, int32{0}
        %305 void ST %304, %301
        %306 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{1}
        %307 3/fp32 LD %306
        %308 1/fp32 EXTRCOEFF %300, int32{1}
        %309 3/fp32 INSCOEFF %307, %308, int32{0}
        %310 void ST %309, %306
        %311 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{2}
        %312 3/fp32 LD %311
        %313 1/fp32 EXTRCOEFF %300, int32{2}
        %314 3/fp32 INSCOEFF %312, %313, int32{0}
        %315 void ST %314, %311
        %316 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{0}
        %317 4/fp32 LD %316
        %318 1/fp32 EXTRCOEFF %317, int32{1}
        %319 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{1}
        %320 4/fp32 LD %319
        %321 1/fp32 EXTRCOEFF %320, int32{1}
        %322 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{2}
        %323 4/fp32 LD %322
        %324 1/fp32 EXTRCOEFF %323, int32{1}
        %325 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{3}
        %326 4/fp32 LD %325
        %327 1/fp32 EXTRCOEFF %326, int32{1}
        %328 4/fp32 SHUF %318.x---,  %321.-x--,  %324.--x-,  %327.---x
        %329 3/fp32 SHUF %328.xyz
        %330 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{0}
        %331 3/fp32 LD %330
        %332 1/fp32 EXTRCOEFF %329, int32{0}
        %333 3/fp32 INSCOEFF %331, %332, int32{1}
        %334 void ST %333, %330
        %335 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{1}
        %336 3/fp32 LD %335
        %337 1/fp32 EXTRCOEFF %329, int32{1}
        %338 3/fp32 INSCOEFF %336, %337, int32{1}
        %339 void ST %338, %335
        %340 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{2}
        %341 3/fp32 LD %340
        %342 1/fp32 EXTRCOEFF %329, int32{2}
        %343 3/fp32 INSCOEFF %341, %342, int32{1}
        %344 void ST %343, %340
        %345 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{0}
        %346 4/fp32 LD %345
        %347 1/fp32 EXTRCOEFF %346, int32{2}
        %348 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{1}
        %349 4/fp32 LD %348
        %350 1/fp32 EXTRCOEFF %349, int32{2}
        %351 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{2}
        %352 4/fp32 LD %351
        %353 1/fp32 EXTRCOEFF %352, int32{2}
        %354 temp(0) * 4/fp32 GETELEMPTR %172, int32{0}, int32{3}
        %355 4/fp32 LD %354
        %356 1/fp32 EXTRCOEFF %355, int32{2}
        %357 4/fp32 SHUF %347.x---,  %350.-x--,  %353.--x-,  %356.---x
        %358 3/fp32 SHUF %357.xyz
        %359 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{0}
        %360 3/fp32 LD %359
        %361 1/fp32 EXTRCOEFF %358, int32{0}
        %362 3/fp32 INSCOEFF %360, %361, int32{2}
        %363 void ST %362, %359
        %364 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{1}
        %365 3/fp32 LD %364
        %366 1/fp32 EXTRCOEFF %358, int32{1}
        %367 3/fp32 INSCOEFF %365, %366, int32{2}
        %368 void ST %367, %364
        %369 temp(0) * 3/fp32 GETELEMPTR %286, int32{0}, int32{2}
        %370 3/fp32 LD %369
        %371 1/fp32 EXTRCOEFF %358, int32{2}
        %372 3/fp32 INSCOEFF %370, %371, int32{2}
        %373 void ST %372, %369
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %376 temp(0) * 3/fp32 INSTA 
        %418 void CALL 'float3 mul(column_major float3x3, float3)', byref %286, byval %375, byref %376
        %419 3/fp32 LD %376
        %420 3/fp32 NRM %419
        %421 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %422 void ST %420, %421
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %425 temp(0) * 3/fp32 INSTA 
        %426 void CALL 'float3 mul(column_major float3x3, float3)', byref %286, byval %424, byref %425
        %427 3/fp32 LD %425
        %428 3/fp32 NRM %427
        %429 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %430 void ST %428, %429
        %431 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %432 3/fp32 LD %431
        %433 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %434 3/fp32 LD %433
        %435 temp(0) * 3/fp32 INSTA 
        %463 void CALL 'float3 cross(float3, float3)', byval %432, byval %434, byref %435
        %464 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %465 3/fp32 LD %435
        %466 void ST %465, %464
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %468 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %469 2/fp32 LD %467
        %470 void ST %469, %468
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:471
        --> 


  func:column_major float4x4 const& RegularBuffer::operator[](uint) const
    arguments:
      %181 in    arg: 1/int32 - 'address'
      %184 out   arg: temp(0) * generic(0) * 4/fp32[4]:column_major - 'operator[]'
      %185 inout arg: temp(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major - 'this'

    dwarf:
      operator[](113 - 113)

    body:
      block:178 - entry
        <-- 
        --> block:192

      block:192
        <-- block:178
        %182 temp(0) * 1/int32 INSTA 
        %183 void ST %181, %182
        %186 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %185
        %187 1/int32 LD %182
        %188 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %186
        %189 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %188, int32{0}, %187
        %190 generic(0) * 4/fp32[4]:column_major CONV_reinterp %189
        %191 void ST %190, %184
        %193 void BR 
        --> block:177

      block:177 - exit
        <-- block:192
        --> 


  func:float4 mul(column_major float4x4, float4)
    arguments:
      %223 in    arg: temp(0) * 4/fp32[4]:column_major - 'mtx'
      %224 in    arg: 4/fp32 - 'v'
      %227 out   arg: temp(0) * 4/fp32 - 'mul'

    dwarf:
      mul(115 - 115)

    body:
      block:220 - entry
        <-- 
        --> block:274

      block:274
        <-- block:220
        %225 temp(0) * 4/fp32 INSTA 
        %226 void ST %224, %225
        %228 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{0}
        %229 4/fp32 LD %228
        %230 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{1}
        %231 4/fp32 LD %230
        %232 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{2}
        %233 4/fp32 LD %232
        %234 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{3}
        %235 4/fp32 LD %234
        %236 4/fp32 SHUF %229.x---,  %231.-x--,  %233.--x-,  %235.---x
        %237 4/fp32 LD %225
        %238 1/fp32 DOT4 %236, %237
        %239 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{0}
        %240 4/fp32 LD %239
        %241 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{1}
        %242 4/fp32 LD %241
        %243 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{2}
        %244 4/fp32 LD %243
        %245 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{3}
        %246 4/fp32 LD %245
        %247 4/fp32 SHUF %240.y---,  %242.-y--,  %244.--y-,  %246.---y
        %248 4/fp32 LD %225
        %249 1/fp32 DOT4 %247, %248
        %250 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{0}
        %251 4/fp32 LD %250
        %252 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{1}
        %253 4/fp32 LD %252
        %254 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{2}
        %255 4/fp32 LD %254
        %256 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{3}
        %257 4/fp32 LD %256
        %258 4/fp32 SHUF %251.z---,  %253.-z--,  %255.--z-,  %257.---z
        %259 4/fp32 LD %225
        %260 1/fp32 DOT4 %258, %259
        %261 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{0}
        %262 4/fp32 LD %261
        %263 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{1}
        %264 4/fp32 LD %263
        %265 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{2}
        %266 4/fp32 LD %265
        %267 temp(0) * 4/fp32 GETELEMPTR %223, int32{0}, int32{3}
        %268 4/fp32 LD %267
        %269 4/fp32 SHUF %262.w---,  %264.-w--,  %266.--w-,  %268.---w
        %270 4/fp32 LD %225
        %271 1/fp32 DOT4 %269, %270
        %272 4/fp32 SHUF %238.x---,  %249.-x--,  %260.--x-,  %271.---x
        %273 void ST %272, %227
        %275 void BR 
        --> block:219

      block:219 - exit
        <-- block:274
        --> 


  func:float3 mul(column_major float3x3, float3)
    arguments:
      %382 in    arg: temp(0) * 3/fp32[3]:column_major - 'mtx'
      %383 in    arg: 3/fp32 - 'v'
      %386 out   arg: temp(0) * 3/fp32 - 'mul'

    dwarf:
      mul(119 - 119)

    body:
      block:379 - entry
        <-- 
        --> block:416

      block:416
        <-- block:379
        %384 temp(0) * 3/fp32 INSTA 
        %385 void ST %383, %384
        %387 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{0}
        %388 3/fp32 LD %387
        %389 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{1}
        %390 3/fp32 LD %389
        %391 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{2}
        %392 3/fp32 LD %391
        %393 3/fp32 SHUF %388.x--,  %390.-x-,  %392.--x
        %394 3/fp32 LD %384
        %395 1/fp32 DOT3 %393, %394
        %396 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{0}
        %397 3/fp32 LD %396
        %398 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{1}
        %399 3/fp32 LD %398
        %400 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{2}
        %401 3/fp32 LD %400
        %402 3/fp32 SHUF %397.y--,  %399.-y-,  %401.--y
        %403 3/fp32 LD %384
        %404 1/fp32 DOT3 %402, %403
        %405 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{0}
        %406 3/fp32 LD %405
        %407 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{1}
        %408 3/fp32 LD %407
        %409 temp(0) * 3/fp32 GETELEMPTR %382, int32{0}, int32{2}
        %410 3/fp32 LD %409
        %411 3/fp32 SHUF %406.z--,  %408.-z-,  %410.--z
        %412 3/fp32 LD %384
        %413 1/fp32 DOT3 %411, %412
        %414 3/fp32 SHUF %395.x--,  %404.-x-,  %413.--x
        %415 void ST %414, %386
        %417 void BR 
        --> block:378

      block:378 - exit
        <-- block:416
        --> 


  func:float3 cross(float3, float3)
    arguments:
      %441 in    arg: 3/fp32 - 'a'
      %444 in    arg: 3/fp32 - 'b'
      %447 out   arg: temp(0) * 3/fp32 - 'cross'

    dwarf:
      cross(121 - 121)

    body:
      block:438 - entry
        <-- 
        --> block:461

      block:461
        <-- block:438
        %442 temp(0) * 3/fp32 INSTA 
        %443 void ST %441, %442
        %445 temp(0) * 3/fp32 INSTA 
        %446 void ST %444, %445
        %448 3/fp32 LD %442
        %449 3/fp32 SHUF %448.yzx
        %450 3/fp32 LD %445
        %451 3/fp32 SHUF %450.zxy
        %452 3/fp32 MUL %449, %451
        %453 3/fp32 LD %442
        %454 3/fp32 SHUF %453.zxy
        %455 3/fp32 LD %445
        %456 3/fp32 SHUF %455.yzx
        %457 3/fp32 MUL %454, %456
        %458 3/fp32 NEG %457
        %459 3/fp32 ADD %452, %458
        %460 void ST %459, %447
        %462 void BR 
        --> block:437

      block:437 - exit
        <-- block:461
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %479 temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} 'ctx': INSTA 
        %979 void CALL 'Ngg::NggCtx BuildNggCtx(uint)', byval int32{3}, byref %479
        %980 temp(0) * 1/int32 'options': INSTA 
        %981 temp(0) * 1/int32 INSTA 
        %982 1/int32 intr.get_ngg_options 
        %983 void ST int32{545}, %981
        %984 1/int32 LD %981
        %985 void ST %984, %980
        %986 temp(0) * 1/int32 'isSingleWave': INSTA 
        %987 1/int32 LD %980
        %988 1/int32 AND %987, int32{1}
        %989 1/int32 CMOV.ne (int32{0}, %988) int32{1}, int32{0}
        %990 void ST %989, %986
        %991 temp(0) * 1/int32 'enableCulling': INSTA 
        %992 1/int32 LD %980
        %993 1/int32 AND %992, int32{2}
        %994 1/int32 CMOV.ne (int32{0}, %993) int32{1}, int32{0}
        %995 void ST %994, %991
        %996 temp(0) * 1/int32 'enableCompaction': INSTA 
        %997 1/int32 LD %980
        %998 1/int32 AND %997, int32{8}
        %999 1/int32 CMOV.ne (int32{0}, %998) int32{1}, int32{0}
        %1000 void ST %999, %996
        %1001 temp(0) * 1/int32 'enableKillPrim': INSTA 
        %1002 1/int32 LD %980
        %1003 1/int32 AND %1002, int32{16}
        %1004 1/int32 CMOV.ne (int32{0}, %1003) int32{1}, int32{0}
        %1005 void ST %1004, %1001
        %1006 temp(0) * 1/int32 'enablePassthru': INSTA 
        %1007 1/int32 LD %980
        %1008 1/int32 AND %1007, int32{32}
        %1009 1/int32 CMOV.ne (int32{0}, %1008) int32{1}, int32{0}
        %1010 void ST %1009, %1006
        %1011 temp(0) * 1/int32 'enablePrimId': INSTA 
        %1012 1/int32 LD %980
        %1013 1/int32 AND %1012, int32{64}
        %1014 1/int32 CMOV.ne (int32{0}, %1013) int32{1}, int32{0}
        %1015 void ST %1014, %1011
        %1016 temp(0) * 1/int32 'useStdlibCulling': INSTA 
        %1018 1/int32 LD %980
        %1019 1/int32 AND %1018, int32{128}
        %1020 1/int32 CMOV.ne (int32{0}, %1019) int32{1}, int32{0}
        %1021 void ST %1020, %1016
        %1022 temp(0) * 1/int32 'is_gen5': INSTA 
        %1023 void CALL 'bool IsGen5()', byref %1022
        %1024 1/int32 LD %986
        %1025 1/int1 CMP.ne %1024, int32{0}
        %1030 void BRC %1025
        --> block:1026, block:1060

      block:1026 - if-then
        <-- block:1028
        %1031 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{1}
        %1032 void ST int32{0}, %1031
        %1033 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{0}
        %1034 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %1035 1/int32 LD %1033
        %1036 void ST %1035, %1034
        %1037 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{4}
        %1038 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %1039 1/int32 LD %1037
        %1040 void ST %1039, %1038
        %1041 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{5}
        %1042 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{7}
        %1043 1/int32 LD %1041
        %1044 void ST %1043, %1042
        %1027 void BR 
        --> block:1060

      block:1060 - if-predicate
        <-- block:1026, block:1028
        %1045 1/int32 LD %1006
        %1046 1/int32 CMOV.eq (%1045, int32{0}) int32{1}, int32{0}
        %1047 1/int32 LD %991
        %1048 1/int32 CMOV.eq (%1047, int32{0}) int32{1}, int32{0}
        %1049 1/int32 OR %1046, %1048
        %1051 void intr.OUTPUT_ERROR %1049, "inconsistent passthrough setup" has_side_effects pinned
        %1052 1/int32 LD %986
        %1053 1/int32 CMOV.eq (%1052, int32{0}) int32{1}, int32{0}
        %1054 1/int32 LD %996
        %1055 1/int32 CMOV.eq (%1054, int32{0}) int32{1}, int32{0}
        %1056 1/int32 AND %1053, %1055
        %1057 1/int1 CMP.ne %1056, int32{0}
        %1062 void BRC %1057
        --> block:1058, block:1109

      block:1058 - if-then
        <-- block:1060
        %1102 void CALL 'void __ldsBarrier(bool)', byval int32{0}
        %1059 void BR 
        --> block:1109

      block:1109 - if-predicate
        <-- block:1058, block:1060
        %1103 1/int32 LD %1006
        %1104 1/int1 CMP.ne %1103, int32{0}
        %1111 void BRC %1104
        --> block:1120, block:2474

      block:2474 - if-predicate
        <-- block:1109
        %2460 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} 'vsOutput': INSTA 
        %2461 1/int32 LD %986
        %2462 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{0}
        %2463 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{5}
        %2464 1/int32 LD %2462
        %2465 1/int32 LD %2463
        %2466 1/int32 CMOV.ult (%2464, %2465) int32{1}, int32{0}
        %2467 temp(0) * 1/int32 INSTA 
        %2468 1/int32 intr.FORCE_FLATTEN_IF %2461, %2466
        %2469 void ST %2468, %2467
        %2470 1/int32 LD %2467
        %2471 1/int1 CMP.ne %2470, int32{0}
        %2476 void BRC %2471
        --> block:2642, block:3091

      block:2642 - if-predicate
        <-- block:2474
        %2477 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{8}
        %2478 1/int32 LD %2477
        %2479 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{10}
        %2480 1/int32 LD %2479
        %2481 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{11}
        %2482 1/int32 LD %2481
        %2483 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{12}
        %2484 1/int32 LD %2483
        %2485 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %2486 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %2478, %2480, %2482, %2484 has_side_effects pinned
        %2487 void ST %2486, %2485
        %2488 temp(0) * 4/fp32 GETELEMPTR %2485, int32{0}, int32{0}, int32{0}
        %2489 temp(0) * 4/fp32 GETELEMPTR %2460, int32{0}, int32{0}, int32{0}
        %2490 4/fp32 LD %2488
        %2491 void ST %2490, %2489
        %2492 temp(0) * 4/fp32 GETELEMPTR %2485, int32{0}, int32{0}, int32{1}
        %2493 temp(0) * 4/fp32 GETELEMPTR %2460, int32{0}, int32{0}, int32{1}
        %2494 4/fp32 LD %2492
        %2495 void ST %2494, %2493
        %2496 temp(0) * 4/fp32 GETELEMPTR %2485, int32{0}, int32{0}, int32{2}
        %2497 temp(0) * 4/fp32 GETELEMPTR %2460, int32{0}, int32{0}, int32{2}
        %2498 4/fp32 LD %2496
        %2499 void ST %2498, %2497
        %2500 temp(0) * 4/fp32 GETELEMPTR %2485, int32{0}, int32{0}, int32{3}
        %2501 temp(0) * 4/fp32 GETELEMPTR %2460, int32{0}, int32{0}, int32{3}
        %2502 4/fp32 LD %2500
        %2503 void ST %2502, %2501
        %2504 temp(0) * 4/fp32 GETELEMPTR %2485, int32{0}, int32{0}, int32{4}
        %2505 temp(0) * 4/fp32 GETELEMPTR %2460, int32{0}, int32{0}, int32{4}
        %2506 4/fp32 LD %2504
        %2507 void ST %2506, %2505
        %2508 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{0}
        %2509 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{0}
        %2510 4/int32 LD %2508
        %2511 void ST %2510, %2509
        %2512 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{1}
        %2513 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{1}
        %2514 4/int32 LD %2512
        %2515 void ST %2514, %2513
        %2516 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{2}
        %2517 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{2}
        %2518 4/int32 LD %2516
        %2519 void ST %2518, %2517
        %2520 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{3}
        %2521 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{3}
        %2522 4/int32 LD %2520
        %2523 void ST %2522, %2521
        %2524 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{4}
        %2525 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{4}
        %2526 4/int32 LD %2524
        %2527 void ST %2526, %2525
        %2528 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{5}
        %2529 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{5}
        %2530 4/int32 LD %2528
        %2531 void ST %2530, %2529
        %2532 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{6}
        %2533 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{6}
        %2534 4/int32 LD %2532
        %2535 void ST %2534, %2533
        %2536 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{7}
        %2537 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{7}
        %2538 4/int32 LD %2536
        %2539 void ST %2538, %2537
        %2540 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{8}
        %2541 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{8}
        %2542 4/int32 LD %2540
        %2543 void ST %2542, %2541
        %2544 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{9}
        %2545 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{9}
        %2546 4/int32 LD %2544
        %2547 void ST %2546, %2545
        %2548 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{10}
        %2549 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{10}
        %2550 4/int32 LD %2548
        %2551 void ST %2550, %2549
        %2552 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{11}
        %2553 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{11}
        %2554 4/int32 LD %2552
        %2555 void ST %2554, %2553
        %2556 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{12}
        %2557 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{12}
        %2558 4/int32 LD %2556
        %2559 void ST %2558, %2557
        %2560 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{13}
        %2561 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{13}
        %2562 4/int32 LD %2560
        %2563 void ST %2562, %2561
        %2564 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{14}
        %2565 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{14}
        %2566 4/int32 LD %2564
        %2567 void ST %2566, %2565
        %2568 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{15}
        %2569 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{15}
        %2570 4/int32 LD %2568
        %2571 void ST %2570, %2569
        %2572 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{16}
        %2573 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{16}
        %2574 4/int32 LD %2572
        %2575 void ST %2574, %2573
        %2576 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{17}
        %2577 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{17}
        %2578 4/int32 LD %2576
        %2579 void ST %2578, %2577
        %2580 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{18}
        %2581 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{18}
        %2582 4/int32 LD %2580
        %2583 void ST %2582, %2581
        %2584 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{19}
        %2585 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{19}
        %2586 4/int32 LD %2584
        %2587 void ST %2586, %2585
        %2588 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{20}
        %2589 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{20}
        %2590 4/int32 LD %2588
        %2591 void ST %2590, %2589
        %2592 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{21}
        %2593 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{21}
        %2594 4/int32 LD %2592
        %2595 void ST %2594, %2593
        %2596 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{22}
        %2597 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{22}
        %2598 4/int32 LD %2596
        %2599 void ST %2598, %2597
        %2600 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{23}
        %2601 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{23}
        %2602 4/int32 LD %2600
        %2603 void ST %2602, %2601
        %2604 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{24}
        %2605 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{24}
        %2606 4/int32 LD %2604
        %2607 void ST %2606, %2605
        %2608 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{25}
        %2609 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{25}
        %2610 4/int32 LD %2608
        %2611 void ST %2610, %2609
        %2612 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{26}
        %2613 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{26}
        %2614 4/int32 LD %2612
        %2615 void ST %2614, %2613
        %2616 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{27}
        %2617 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{27}
        %2618 4/int32 LD %2616
        %2619 void ST %2618, %2617
        %2620 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{28}
        %2621 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{28}
        %2622 4/int32 LD %2620
        %2623 void ST %2622, %2621
        %2624 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{29}
        %2625 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{29}
        %2626 4/int32 LD %2624
        %2627 void ST %2626, %2625
        %2628 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{30}
        %2629 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{30}
        %2630 4/int32 LD %2628
        %2631 void ST %2630, %2629
        %2632 temp(0) * 4/int32 GETELEMPTR %2485, int32{0}, int32{1}, int32{31}
        %2633 temp(0) * 4/int32 GETELEMPTR %2460, int32{0}, int32{1}, int32{31}
        %2634 4/int32 LD %2632
        %2635 void ST %2634, %2633
        %2636 1/int32 LD %991
        %2637 1/int32 LD %1016
        %2638 1/int32 AND %2636, %2637
        %2639 1/int1 CMP.ne %2638, int32{0}
        %2644 void BRC %2639
        --> block:2896, block:2472

      block:2896 - if-predicate
        <-- block:2642
        %2645 temp(0) * 4/fp32[5] GETELEMPTR %2460, int32{0}, int32{0}
        %2646 temp(0) * 4/fp32 GETELEMPTR %2645, int32{0}, int32{0}
        %2647 4/fp32 LD %2646
        %2828 void CALL 'void __cull_func_prepare_vertex(Ngg::NggCtx, float4, uint)', byref %479, byval %2647, byval int32{0}
        %2829 temp(0) * 1/int32 INSTA 
        %2891 void CALL 'bool __require_stdlib_stereo_culling()', byref %2829
        %2892 1/int32 LD %2829
        %2893 1/int1 CMP.ne %2892, int32{0}
        %2898 void BRC %2893
        --> block:2894, block:2640

      block:2894 - if-then
        <-- block:2896
        %2899 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} CONV_reinterp %474
        %2900 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} CONV_reinterp %2460
        %2901 temp(0) * 4/fp32 INSTA 
        %3081 void CALL 'float4 __get_right_eye_position(Ngg::NggVsConfig const&, Ngg::NggVsOutput const&)', byval %2899, byval %2900, byref %2901
        %3082 4/fp32 LD %2901
        %3083 void CALL 'void __cull_func_prepare_vertex(Ngg::NggCtx, float4, uint)', byref %479, byval %3082, byval int32{1}
        %2895 void BR 
        --> block:2640

      block:2640 - if-then
        <-- block:2894, block:2896
        %2641 void BR 
        --> block:2472

      block:2472 - if-then
        <-- block:2640, block:2642
        %2473 void BR 
        --> block:3091

      block:3091 - if-predicate
        <-- block:2472, block:2474
        %3084 temp(0) * 1/int32 'visiblePrim': INSTA 
        %3085 1/int32 LD %991
        %3086 1/int1 CMP.ne %3085, int32{0}
        %3093 void BRC %3086
        --> block:3110, block:3087

      block:3087 - if-else
        <-- block:3091
        %3379 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %3380 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %3381 1/int32 LD %3379
        %3382 1/int32 LD %3380
        %3383 1/int32 CMOV.ult (%3381, %3382) int32{1}, int32{0}
        %3384 void ST %3383, %3084
        %3088 void BR 
        --> block:3402

      block:3110 - if-predicate
        <-- block:3091
        %3094 void ST int32{0}, %3084
        %3095 1/int32 LD %986
        %3096 void CALL 'void __ldsBarrier(bool)', byval %3095
        %3097 1/int32 LD %986
        %3098 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %3099 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %3100 1/int32 LD %3098
        %3101 1/int32 LD %3099
        %3102 1/int32 CMOV.ult (%3100, %3101) int32{1}, int32{0}
        %3103 temp(0) * 1/int32 INSTA 
        %3104 1/int32 intr.FORCE_FLATTEN_IF %3097, %3102
        %3105 void ST %3104, %3103
        %3106 1/int32 LD %3103
        %3107 1/int1 CMP.ne %3106, int32{0}
        %3112 void BRC %3107
        --> block:3119, block:3089

      block:3119 - if-predicate
        <-- block:3110
        %3113 1/int32 LD %1016
        %3114 1/int1 CMP.ne %3113, int32{0}
        %3121 void BRC %3114
        --> block:3364, block:3115

      block:3115 - if-else
        <-- block:3119
        %3373 temp(0) * 1/int32 INSTA 
        %3374 1/int32 intr.ngg_cull_func  has_side_effects
        %3375 void ST %3374, %3373
        %3376 1/int32 LD %3373
        %3377 1/int32 CMOV.eq (%3376, int32{0}) int32{1}, int32{0}
        %3378 void ST %3377, %3084
        %3116 void BR 
        --> block:3108

      block:3364 - if-predicate
        <-- block:3119
        %3122 temp(0) * 1/int32 INSTA 
        %3355 void CALL 'bool __cull_func_stdlib(Ngg::NggCtx, uint)', byref %479, byval int32{0}, byref %3122
        %3356 1/int32 LD %3122
        %3357 void ST %3356, %3084
        %3358 temp(0) * 1/int32 INSTA 
        %3359 void CALL 'bool __require_stdlib_stereo_culling()', byref %3358
        %3360 1/int32 LD %3358
        %3361 1/int1 CMP.ne %3360, int32{0}
        %3366 void BRC %3361
        --> block:3362, block:3117

      block:3362 - if-then
        <-- block:3364
        %3367 temp(0) * 1/int32 INSTA 
        %3368 void CALL 'bool __cull_func_stdlib(Ngg::NggCtx, uint)', byref %479, byval int32{1}, byref %3367
        %3369 1/int32 LD %3084
        %3370 1/int32 LD %3367
        %3371 1/int32 OR %3369, %3370
        %3372 void ST %3371, %3084
        %3363 void BR 
        --> block:3117

      block:3117 - if-then
        <-- block:3362, block:3364
        %3118 void BR 
        --> block:3108

      block:3108 - if-then
        <-- block:3115, block:3117
        %3109 void BR 
        --> block:3089

      block:3089 - if-then
        <-- block:3108, block:3110
        %3090 void BR 
        --> block:3402

      block:3402 - if-predicate
        <-- block:3087, block:3089
        %3385 temp(0) * 1/int32 'primForExport': INSTA 
        %3386 temp(0) * 1/int32 'primIdForExport': INSTA 
        %3387 void CALL 'uint __get_primitive_id()', byref %3386
        %3388 temp(0) * 1/int32 'primGroupVertCount': INSTA 
        %3389 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{7}
        %3390 1/int32 LD %3389
        %3391 void ST %3390, %3388
        %3392 temp(0) * 1/int32 'primGroupPrimCount': INSTA 
        %3393 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %3394 1/int32 LD %3393
        %3395 void ST %3394, %3392
        %3396 1/int32 LD %996
        %3397 1/int1 CMP.ne %3396, int32{0}
        %3404 void BRC %3397
        --> block:3414, block:5686

      block:5686 - if-predicate
        <-- block:3402
        %5678 temp(0) * 1/int32 'kb': INSTA 
        %5679 1/int32 LD %1001
        %5680 temp(0) * 1/int32 INSTA 
        %5681 1/int1 CMP.ne %5679, int32{0}
        %5688 void BRC %5681
        --> block:5684, block:5682

      block:5682 - if-else
        <-- block:5686
        %5692 void ST int32{0}, %5680
        %5683 void BR 
        --> block:3398

      block:5684 - if-then
        <-- block:5686
        %5689 1/int32 LD %3084
        %5690 1/int32 CMOV.eq (%5689, int32{0}) int32{1}, int32{0}
        %5691 void ST %5690, %5680
        %5685 void BR 
        --> block:3398

      block:3398 - if-else
        <-- block:5682, block:5684
        %5693 1/int32 LD %5680
        %5694 void ST %5693, %5678
        %5695 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %5696 temp(0) * 1/int32 GETELEMPTR %5695, int32{0}, int32{0}
        %5697 1/int32 LD %5696
        %5698 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %5699 temp(0) * 1/int32 GETELEMPTR %5698, int32{0}, int32{1}
        %5700 1/int32 LD %5699
        %5701 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %5702 temp(0) * 1/int32 GETELEMPTR %5701, int32{0}, int32{2}
        %5703 1/int32 LD %5702
        %5704 1/int32 LD %5678
        %5705 temp(0) * 1/int32 INSTA 
        %5706 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval %5697, byval %5700, byval %5703, byval %5704, byref %5705
        %5707 1/int32 LD %5705
        %5708 void ST %5707, %3385
        %3399 void BR 
        --> block:5721

      block:3414 - if-predicate
        <-- block:3402
        %3405 temp(0) * 1/int32 'primCompactionIndex': INSTA 
        %3406 void ST int32{0}, %3405
        %3407 1/int32 LD %1001
        %3408 1/int32 CMOV.eq (int32{0}, %3407) int32{1}, int32{0}
        %3409 1/int1 CMP.ne %3408, int32{0}
        %3416 void BRC %3409
        --> block:3412, block:3410

      block:3410 - if-else
        <-- block:3414
        %4025 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %4026 1/int32 LD %4025
        %4027 void ST %4026, %3392
        %3411 void BR 
        --> block:4045

      block:3412 - if-then
        <-- block:3414
        %3417 1/int32 LD %3084
        %3418 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{0}
        %3419 1/int32 LD %3418
        %3420 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{1}
        %3421 1/int32 LD %3420
        %3422 1/int32 LD %986
        %3423 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %4008 void CALL 'Ngg::PrefixSumResult __prefixSum(uint, uint, uint, bool)', byval %3417, byval %3419, byval %3421, byval %3422, byref %3423
        %4009 temp(0) * 1/int32 'i': INSTA 
        %4010 temp(0) * 1/int32 GETELEMPTR %3423, int32{0}, int32{0}
        %4011 1/int32 LD %4010
        %4012 void ST %4011, %4009
        %4013 temp(0) * 1/int32 'gc': INSTA 
        %4014 temp(0) * 1/int32 GETELEMPTR %3423, int32{0}, int32{1}
        %4015 1/int32 LD %4014
        %4016 void ST %4015, %4013
        %4017 temp(0) * 1/int32 'c': INSTA 
        %4018 temp(0) * 1/int32 GETELEMPTR %3423, int32{0}, int32{2}
        %4019 1/int32 LD %4018
        %4020 void ST %4019, %4017
        %4021 1/int32 LD %4009
        %4022 void ST %4021, %3405
        %4023 1/int32 LD %4013
        %4024 void ST %4023, %3392
        %3413 void BR 
        --> block:4045

      block:4045 - if-predicate
        <-- block:3410, block:3412
        %4028 1/int32 LD %986
        %4029 void CALL 'void __ldsBarrier(bool)', byval %4028
        %4030 temp(0) * 1/int32 'shouldCompact': INSTA 
        %4031 1/int32 LD %3392
        %4032 1/int32 CMOV.ugt (%4031, int32{0}) int32{1}, int32{0}
        %4033 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %4034 1/int32 LD %3392
        %4035 1/int32 LD %4033
        %4036 1/int32 CMOV.ne (%4034, %4035) int32{1}, int32{0}
        %4037 1/int32 AND %4032, %4036
        %4038 void ST %4037, %4030
        %4039 1/int32 LD %4030
        %4040 1/int1 CMP.ne %4039, int32{0}
        %4047 void BRC %4040
        --> block:4921, block:5674

      block:5674 - if-predicate
        <-- block:4045
        %5656 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %5657 temp(0) * 1/int32 GETELEMPTR %5656, int32{0}, int32{0}
        %5658 1/int32 LD %5657
        %5659 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %5660 temp(0) * 1/int32 GETELEMPTR %5659, int32{0}, int32{1}
        %5661 1/int32 LD %5660
        %5662 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %5663 temp(0) * 1/int32 GETELEMPTR %5662, int32{0}, int32{2}
        %5664 1/int32 LD %5663
        %5665 temp(0) * 1/int32 INSTA 
        %5666 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval %5658, byval %5661, byval %5664, byval int32{0}, byref %5665
        %5667 1/int32 LD %5665
        %5668 void ST %5667, %3385
        %5669 1/int32 LD %3392
        %5670 1/int32 CMOV.eq (int32{0}, %5669) int32{1}, int32{0}
        %5671 1/int1 CMP.ne %5670, int32{0}
        %5676 void BRC %5671
        --> block:5672, block:4041

      block:5672 - if-then
        <-- block:5674
        %5677 void ST int32{0}, %3388
        %5673 void BR 
        --> block:4041

      block:4041 - if-else
        <-- block:5672, block:5674
        %4042 void BR 
        --> block:3400

      block:4921 - if-predicate
        <-- block:4045
        %4048 temp(0) * 1/int32 'activeVert': INSTA 
        %4049 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} CONV_reinterp %479
        %4050 1/int32 LD %3084
        %4566 void CALL 'uint FindLiveVerts(Ngg::NggCtx const&, bool)', byval %4049, byval %4050, byref %4048
        %4567 1/int32 LD %4048
        %4568 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{0}
        %4569 1/int32 LD %4568
        %4570 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{1}
        %4571 1/int32 LD %4570
        %4572 1/int32 LD %986
        %4573 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %4574 void CALL 'Ngg::PrefixSumResult __prefixSum(uint, uint, uint, bool)', byval %4567, byval %4569, byval %4571, byval %4572, byref %4573
        %4575 temp(0) * 1/int32 'iv': INSTA 
        %4576 temp(0) * 1/int32 GETELEMPTR %4573, int32{0}, int32{0}
        %4577 1/int32 LD %4576
        %4578 void ST %4577, %4575
        %4579 temp(0) * 1/int32 'gcv': INSTA 
        %4580 temp(0) * 1/int32 GETELEMPTR %4573, int32{0}, int32{1}
        %4581 1/int32 LD %4580
        %4582 void ST %4581, %4579
        %4583 temp(0) * 1/int32 'cv': INSTA 
        %4584 temp(0) * 1/int32 GETELEMPTR %4573, int32{0}, int32{2}
        %4585 1/int32 LD %4584
        %4586 void ST %4585, %4583
        %4587 1/int32 LD %4579
        %4588 void ST %4587, %3388
        %4589 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} CONV_reinterp %479
        %4590 1/int32 LD %4048
        %4591 1/int32 CMOV.ne (%4590, int32{0}) int32{1}, int32{0}
        %4592 1/int32 LD %3084
        %4593 1/int32 LD %4575
        %4912 void CALL 'void ReindexPrimitives(Ngg::NggCtx&, bool, bool, uint)', byval %4589, byval %4591, byval %4592, byval %4593
        %4913 temp(0) * 1/int32 'kb': INSTA 
        %4914 1/int32 LD %1001
        %4915 temp(0) * 1/int32 INSTA 
        %4916 1/int1 CMP.ne %4914, int32{0}
        %4923 void BRC %4916
        --> block:4919, block:4917

      block:4917 - if-else
        <-- block:4921
        %4927 void ST int32{0}, %4915
        %4918 void BR 
        --> block:4043

      block:4919 - if-then
        <-- block:4921
        %4924 1/int32 LD %3084
        %4925 1/int32 CMOV.eq (%4924, int32{0}) int32{1}, int32{0}
        %4926 void ST %4925, %4915
        %4920 void BR 
        --> block:4043

      block:4043 - if-then
        <-- block:4917, block:4919
        %4928 1/int32 LD %4915
        %4929 void ST %4928, %4913
        %4930 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %4931 temp(0) * 1/int32 GETELEMPTR %4930, int32{0}, int32{0}
        %4932 1/int32 LD %4931
        %4933 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %4934 temp(0) * 1/int32 GETELEMPTR %4933, int32{0}, int32{1}
        %4935 1/int32 LD %4934
        %4936 temp(0) * 1/int32[6] GETELEMPTR %479, int32{0}, int32{9}
        %4937 temp(0) * 1/int32 GETELEMPTR %4936, int32{0}, int32{2}
        %4938 1/int32 LD %4937
        %4939 1/int32 LD %4913
        %4940 temp(0) * 1/int32 INSTA 
        %4996 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval %4932, byval %4935, byval %4938, byval %4939, byref %4940
        %4997 1/int32 LD %4940
        %4998 void ST %4997, %3385
        %4999 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} CONV_reinterp %474
        %5000 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %5001 1/int32 LD %5000
        %5002 1/int32 LD %4048
        %5003 1/int32 CMOV.ne (%5002, int32{0}) int32{1}, int32{0}
        %5004 1/int32 LD %4575
        %5005 1/int32 LD %3388
        %5006 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} CONV_reinterp %2460
        %5007 1/int32 LD %3084
        %5008 1/int32 LD %3405
        %5009 1/int32 LD %3392
        %5010 generic(0) * 1/int32 CONV_reinterp %3385
        %5011 generic(0) * 1/int32 CONV_reinterp %3386
        %5655 void CALL 'void PerformCompaction(Ngg::NggVsConfig const&, uint, bool, uint, uint, Ngg::NggVsOutput&, bool, uint, uint, uint&, uint&)', byval %4999, byval %5001, byval %5003, byval %5004, byval %5005, byval %5006, byval %5007, byval %5008, byval %5009, byval %5010, byval %5011
        %4044 void BR 
        --> block:3400

      block:3400 - if-then
        <-- block:4041, block:4043
        %3401 void BR 
        --> block:5721

      block:5721 - if-predicate
        <-- block:3398, block:3400
        %5709 temp(0) * 1/int32 'war9294': INSTA 
        %5711 1/int32 LD %980
        %5712 1/int32 AND %5711, int32{512}
        %5713 1/int32 CMOV.ne (int32{0}, %5712) int32{1}, int32{0}
        %5714 void ST %5713, %5709
        %5715 temp(0) * 1/int32 'requiresWar': INSTA 
        %5716 void ST int32{0}, %5715
        %5717 1/int32 LD %991
        %5718 1/int1 CMP.ne %5717, int32{0}
        %5723 void BRC %5718
        --> block:5731, block:5747

      block:5731 - if-predicate
        <-- block:5721
        %5724 1/int32 LD %3392
        %5725 1/int32 CMOV.eq (int32{0}, %5724) int32{1}, int32{0}
        %5726 1/int32 LD %5709
        %5727 1/int32 AND %5726, %5725
        %5728 1/int1 CMP.ne %5727, int32{0}
        %5733 void BRC %5728
        --> block:5729, block:5719

      block:5729 - if-then
        <-- block:5731
        %5734 void ST int32{1}, %3392
        %5735 void ST int32{1}, %3388
        %5736 temp(0) * 1/int32 INSTA 
        %5737 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval int32{0}, byval int32{0}, byval int32{0}, byval int32{0}, byref %5736
        %5738 1/int32 LD %5736
        %5739 void ST %5738, %3385
        %5740 void ST int32{1}, %5715
        %5730 void BR 
        --> block:5719

      block:5719 - if-then
        <-- block:5729, block:5731
        %5720 void BR 
        --> block:5747

      block:5747 - if-predicate
        <-- block:5719, block:5721
        %5741 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{1}
        %5742 1/int32 LD %5741
        %5743 1/int32 CMOV.eq (%5742, int32{0}) int32{1}, int32{0}
        %5744 1/int1 CMP.ne %5743, int32{0}
        %5749 void BRC %5744
        --> block:5745, block:5767

      block:5745 - if-then
        <-- block:5747
        %5750 1/int32 LD %3392
        %5751 1/int32 LD %3388
        %5752 void CALL 'void SendAllocMessage(uint, uint)', byval %5750, byval %5751
        %5746 void BR 
        --> block:5767

      block:5767 - if-predicate
        <-- block:5745, block:5747
        %5753 1/int32 LD %986
        %5754 1/int32 LD %5709
        %5755 1/int32 AND %5753, %5754
        %5756 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %5757 1/int32 LD %5756
        %5758 1/int32 LD %3392
        %5759 1/int32 CMOV.ult (%5757, %5758) int32{1}, int32{0}
        %5760 temp(0) * 1/int32 INSTA 
        %5761 1/int32 intr.FORCE_FLATTEN_IF %5755, %5759
        %5762 void ST %5761, %5760
        %5763 1/int32 LD %5760
        %5764 1/int1 CMP.ne %5763, int32{0}
        %5769 void BRC %5764
        --> block:5765, block:5788

      block:5765 - if-then
        <-- block:5767
        %5770 1/int32 LD %3385
        %5771 1/int32 LD %3386
        %5772 1/int32 LD %1011
        %5773 void CALL 'void ExportNggIndex(uint, uint, bool)', byval %5770, byval %5771, byval %5772
        %5766 void BR 
        --> block:5788

      block:5788 - if-predicate
        <-- block:5765, block:5767
        %5774 1/int32 LD %986
        %5775 1/int32 LD %5709
        %5776 1/int32 AND %5774, %5775
        %5777 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %5778 1/int32 LD %5777
        %5779 1/int32 LD %3388
        %5780 1/int32 CMOV.ult (%5778, %5779) int32{1}, int32{0}
        %5781 temp(0) * 1/int32 INSTA 
        %5782 1/int32 intr.FORCE_FLATTEN_IF %5776, %5780
        %5783 void ST %5782, %5781
        %5784 1/int32 LD %5781
        %5785 1/int1 CMP.ne %5784, int32{0}
        %5790 void BRC %5785
        --> block:5786, block:1105

      block:5786 - if-then
        <-- block:5788
        %5791 1/int32 LD %5715
        %5792 void CALL 'void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)', byref %474, byref %2460, byval %5791
        %5787 void BR 
        --> block:1105

      block:1105 - if-else
        <-- block:5786, block:5788
        %1106 void BR 
        --> block:477

      block:1120 - if-predicate
        <-- block:1109
        %1112 temp(0) * 1/int32 'primForExport': INSTA 
        %1113 1/int32 LD %1022
        %1114 temp(0) * 1/int32 INSTA 
        %1115 1/int1 CMP.ne %1113, int32{0}
        %1122 void BRC %1115
        --> block:1118, block:1116

      block:1116 - if-else
        <-- block:1120
        %1128 temp(0) * 1/int32 INSTA 
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %1130 void ST %1129, %1128
        %1131 1/int32 LD %1128
        %1132 void ST %1131, %1114
        %1117 void BR 
        --> block:1148

      block:1118 - if-then
        <-- block:1120
        %1123 temp(0) * 1/int32 INSTA 
        %1124 1/int32 intr.READSPECIALVECTORREG int32{88} 'v_vtx0_vtx1_vtx2_gs_instance'
        %1125 void ST %1124, %1123
        %1126 1/int32 LD %1123
        %1127 void ST %1126, %1114
        %1119 void BR 
        --> block:1148

      block:1148 - if-predicate
        <-- block:1116, block:1118
        %1133 1/int32 LD %1114
        %1134 void ST %1133, %1112
        %1135 temp(0) * 1/int32 'useLateAlloc': INSTA 
        %1137 1/int32 LD %980
        %1138 1/int32 AND %1137, int32{1024}
        %1139 1/int32 CMOV.ne (int32{0}, %1138) int32{1}, int32{0}
        %1140 void ST %1139, %1135
        %1141 1/int32 LD %1135
        %1142 1/int32 CMOV.eq (%1141, int32{0}) int32{1}, int32{0}
        %1143 1/int1 CMP.ne %1142, int32{0}
        %1150 void BRC %1143
        --> block:1160, block:2228

      block:2228 - if-predicate
        <-- block:1148
        %2212 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} 'vsOutput': INSTA 
        %2213 1/int32 LD %986
        %2214 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %2215 1/int32 LD %2214
        %2216 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{7}
        %2217 1/int32 LD %2216
        %2218 temp(0) * 1/int32 INSTA 
        %2219 void CALL 'bool EnableLanes(uint, uint)', byval %2215, byval %2217, byref %2218
        %2220 1/int32 LD %2218
        %2221 temp(0) * 1/int32 INSTA 
        %2222 1/int32 intr.FORCE_FLATTEN_IF %2213, %2220
        %2223 void ST %2222, %2221
        %2224 1/int32 LD %2221
        %2225 1/int1 CMP.ne %2224, int32{0}
        %2230 void BRC %2225
        --> block:2226, block:2391

      block:2226 - if-then
        <-- block:2228
        %2231 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{8}
        %2232 1/int32 LD %2231
        %2233 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{10}
        %2234 1/int32 LD %2233
        %2235 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{11}
        %2236 1/int32 LD %2235
        %2237 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{12}
        %2238 1/int32 LD %2237
        %2239 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %2240 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %2232, %2234, %2236, %2238 has_side_effects pinned
        %2241 void ST %2240, %2239
        %2242 temp(0) * 4/fp32 GETELEMPTR %2239, int32{0}, int32{0}, int32{0}
        %2243 temp(0) * 4/fp32 GETELEMPTR %2212, int32{0}, int32{0}, int32{0}
        %2244 4/fp32 LD %2242
        %2245 void ST %2244, %2243
        %2246 temp(0) * 4/fp32 GETELEMPTR %2239, int32{0}, int32{0}, int32{1}
        %2247 temp(0) * 4/fp32 GETELEMPTR %2212, int32{0}, int32{0}, int32{1}
        %2248 4/fp32 LD %2246
        %2249 void ST %2248, %2247
        %2250 temp(0) * 4/fp32 GETELEMPTR %2239, int32{0}, int32{0}, int32{2}
        %2251 temp(0) * 4/fp32 GETELEMPTR %2212, int32{0}, int32{0}, int32{2}
        %2252 4/fp32 LD %2250
        %2253 void ST %2252, %2251
        %2254 temp(0) * 4/fp32 GETELEMPTR %2239, int32{0}, int32{0}, int32{3}
        %2255 temp(0) * 4/fp32 GETELEMPTR %2212, int32{0}, int32{0}, int32{3}
        %2256 4/fp32 LD %2254
        %2257 void ST %2256, %2255
        %2258 temp(0) * 4/fp32 GETELEMPTR %2239, int32{0}, int32{0}, int32{4}
        %2259 temp(0) * 4/fp32 GETELEMPTR %2212, int32{0}, int32{0}, int32{4}
        %2260 4/fp32 LD %2258
        %2261 void ST %2260, %2259
        %2262 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{0}
        %2263 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{0}
        %2264 4/int32 LD %2262
        %2265 void ST %2264, %2263
        %2266 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{1}
        %2267 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{1}
        %2268 4/int32 LD %2266
        %2269 void ST %2268, %2267
        %2270 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{2}
        %2271 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{2}
        %2272 4/int32 LD %2270
        %2273 void ST %2272, %2271
        %2274 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{3}
        %2275 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{3}
        %2276 4/int32 LD %2274
        %2277 void ST %2276, %2275
        %2278 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{4}
        %2279 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{4}
        %2280 4/int32 LD %2278
        %2281 void ST %2280, %2279
        %2282 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{5}
        %2283 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{5}
        %2284 4/int32 LD %2282
        %2285 void ST %2284, %2283
        %2286 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{6}
        %2287 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{6}
        %2288 4/int32 LD %2286
        %2289 void ST %2288, %2287
        %2290 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{7}
        %2291 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{7}
        %2292 4/int32 LD %2290
        %2293 void ST %2292, %2291
        %2294 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{8}
        %2295 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{8}
        %2296 4/int32 LD %2294
        %2297 void ST %2296, %2295
        %2298 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{9}
        %2299 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{9}
        %2300 4/int32 LD %2298
        %2301 void ST %2300, %2299
        %2302 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{10}
        %2303 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{10}
        %2304 4/int32 LD %2302
        %2305 void ST %2304, %2303
        %2306 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{11}
        %2307 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{11}
        %2308 4/int32 LD %2306
        %2309 void ST %2308, %2307
        %2310 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{12}
        %2311 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{12}
        %2312 4/int32 LD %2310
        %2313 void ST %2312, %2311
        %2314 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{13}
        %2315 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{13}
        %2316 4/int32 LD %2314
        %2317 void ST %2316, %2315
        %2318 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{14}
        %2319 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{14}
        %2320 4/int32 LD %2318
        %2321 void ST %2320, %2319
        %2322 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{15}
        %2323 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{15}
        %2324 4/int32 LD %2322
        %2325 void ST %2324, %2323
        %2326 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{16}
        %2327 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{16}
        %2328 4/int32 LD %2326
        %2329 void ST %2328, %2327
        %2330 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{17}
        %2331 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{17}
        %2332 4/int32 LD %2330
        %2333 void ST %2332, %2331
        %2334 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{18}
        %2335 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{18}
        %2336 4/int32 LD %2334
        %2337 void ST %2336, %2335
        %2338 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{19}
        %2339 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{19}
        %2340 4/int32 LD %2338
        %2341 void ST %2340, %2339
        %2342 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{20}
        %2343 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{20}
        %2344 4/int32 LD %2342
        %2345 void ST %2344, %2343
        %2346 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{21}
        %2347 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{21}
        %2348 4/int32 LD %2346
        %2349 void ST %2348, %2347
        %2350 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{22}
        %2351 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{22}
        %2352 4/int32 LD %2350
        %2353 void ST %2352, %2351
        %2354 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{23}
        %2355 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{23}
        %2356 4/int32 LD %2354
        %2357 void ST %2356, %2355
        %2358 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{24}
        %2359 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{24}
        %2360 4/int32 LD %2358
        %2361 void ST %2360, %2359
        %2362 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{25}
        %2363 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{25}
        %2364 4/int32 LD %2362
        %2365 void ST %2364, %2363
        %2366 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{26}
        %2367 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{26}
        %2368 4/int32 LD %2366
        %2369 void ST %2368, %2367
        %2370 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{27}
        %2371 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{27}
        %2372 4/int32 LD %2370
        %2373 void ST %2372, %2371
        %2374 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{28}
        %2375 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{28}
        %2376 4/int32 LD %2374
        %2377 void ST %2376, %2375
        %2378 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{29}
        %2379 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{29}
        %2380 4/int32 LD %2378
        %2381 void ST %2380, %2379
        %2382 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{30}
        %2383 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{30}
        %2384 4/int32 LD %2382
        %2385 void ST %2384, %2383
        %2386 temp(0) * 4/int32 GETELEMPTR %2239, int32{0}, int32{1}, int32{31}
        %2387 temp(0) * 4/int32 GETELEMPTR %2212, int32{0}, int32{1}, int32{31}
        %2388 4/int32 LD %2386
        %2389 void ST %2388, %2387
        %2227 void BR 
        --> block:2391

      block:2391
        <-- block:2226, block:2228
        %2390 1/int32 intr.ISOLATE  has_side_effects dependent_on_side_effects pinned
        %2392 void BR 
        --> block:2409

      block:2409 - if-predicate
        <-- block:2391, block:2395
        %2400 1/int32 LD %1022
        %2401 1/int32 CMOV.eq (%2400, int32{0}) int32{1}, int32{0}
        %2402 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{1}
        %2403 1/int32 LD %2402
        %2404 1/int32 CMOV.eq (%2403, int32{0}) int32{1}, int32{0}
        %2405 1/int32 AND %2401, %2404
        %2406 1/int1 CMP.ne %2405, int32{0}
        %2411 void BRC %2406
        --> block:2407, block:2432

      block:2407 - if-then
        <-- block:2409
        %2412 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %2413 1/int32 LD %2412
        %2414 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{7}
        %2415 1/int32 LD %2414
        %2416 void CALL 'void SendAllocMessage(uint, uint)', byval %2413, byval %2415
        %2408 void BR 
        --> block:2432

      block:2432 - if-predicate
        <-- block:2407, block:2409
        %2417 1/int32 LD %986
        %2418 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %2419 1/int32 LD %2418
        %2420 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %2421 1/int32 LD %2420
        %2422 temp(0) * 1/int32 INSTA 
        %2423 void CALL 'bool EnableLanes(uint, uint)', byval %2419, byval %2421, byref %2422
        %2424 1/int32 LD %2422
        %2425 temp(0) * 1/int32 INSTA 
        %2426 1/int32 intr.FORCE_FLATTEN_IF %2417, %2424
        %2427 void ST %2426, %2425
        %2428 1/int32 LD %2425
        %2429 1/int1 CMP.ne %2428, int32{0}
        %2434 void BRC %2429
        --> block:2430, block:2456

      block:2430 - if-then
        <-- block:2432
        %2435 1/int32 LD %1112
        %2436 temp(0) * 1/int32 INSTA 
        %2437 void CALL 'uint __get_primitive_id()', byref %2436
        %2438 1/int32 LD %2436
        %2439 1/int32 LD %1011
        %2440 void CALL 'void ExportNggIndex(uint, uint, bool)', byval %2435, byval %2438, byval %2439
        %2431 void BR 
        --> block:2456

      block:2456 - if-predicate
        <-- block:2430, block:2432
        %2441 1/int32 LD %986
        %2442 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %2443 1/int32 LD %2442
        %2444 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{7}
        %2445 1/int32 LD %2444
        %2446 temp(0) * 1/int32 INSTA 
        %2447 void CALL 'bool EnableLanes(uint, uint)', byval %2443, byval %2445, byref %2446
        %2448 1/int32 LD %2446
        %2449 temp(0) * 1/int32 INSTA 
        %2450 1/int32 intr.FORCE_FLATTEN_IF %2441, %2448
        %2451 void ST %2450, %2449
        %2452 1/int32 LD %2449
        %2453 1/int1 CMP.ne %2452, int32{0}
        %2458 void BRC %2453
        --> block:2454, block:2393

      block:2454 - if-then
        <-- block:2456
        %2459 void CALL 'void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)', byref %474, byref %2212, byval int32{0}
        %2455 void BR 
        --> block:2393

      block:2393 - do-while-body
        <-- block:2454, block:2456
        %2394 void BR 
        --> block:2395

      block:2395 - do-while-condition[unroll:never,licm:never,rotate:never,unswitch:never]
        <-- block:2393
        %2398 1/int32 intr.ISOLATE  has_side_effects dependent_on_side_effects pinned
        %2399 1/int1 CMP.ne int32{0}, %2398
        %2397 void BRC %2399
        --> block:2409, block:1144

      block:1144 - if-else
        <-- block:2395
        %1145 void BR 
        --> block:1107

      block:1160 - if-predicate
        <-- block:1148
        %1151 1/int32 LD %1022
        %1152 1/int32 CMOV.eq (%1151, int32{0}) int32{1}, int32{0}
        %1153 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{1}
        %1154 1/int32 LD %1153
        %1155 1/int32 CMOV.eq (%1154, int32{0}) int32{1}, int32{0}
        %1156 1/int32 AND %1152, %1155
        %1157 1/int1 CMP.ne %1156, int32{0}
        %1162 void BRC %1157
        --> block:1158, block:1311

      block:1158 - if-then
        <-- block:1160
        %1163 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %1164 1/int32 LD %1163
        %1165 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{7}
        %1166 1/int32 LD %1165
        %1205 void CALL 'void SendAllocMessage(uint, uint)', byval %1164, byval %1166
        %1159 void BR 
        --> block:1311

      block:1311 - if-predicate
        <-- block:1158, block:1160
        %1206 1/int32 LD %986
        %1207 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %1208 1/int32 LD %1207
        %1209 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{6}
        %1210 1/int32 LD %1209
        %1211 temp(0) * 1/int32 INSTA 
        %1302 void CALL 'bool EnableLanes(uint, uint)', byval %1208, byval %1210, byref %1211
        %1303 1/int32 LD %1211
        %1304 temp(0) * 1/int32 INSTA 
        %1305 1/int32 intr.FORCE_FLATTEN_IF %1206, %1303
        %1306 void ST %1305, %1304
        %1307 1/int32 LD %1304
        %1308 1/int1 CMP.ne %1307, int32{0}
        %1313 void BRC %1308
        --> block:1309, block:1413

      block:1309 - if-then
        <-- block:1311
        %1314 1/int32 LD %1112
        %1315 temp(0) * 1/int32 INSTA 
        %1329 void CALL 'uint __get_primitive_id()', byref %1315
        %1330 1/int32 LD %1315
        %1331 1/int32 LD %1011
        %1397 void CALL 'void ExportNggIndex(uint, uint, bool)', byval %1314, byval %1330, byval %1331
        %1310 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:1309, block:1311
        %1398 1/int32 LD %986
        %1399 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{3}
        %1400 1/int32 LD %1399
        %1401 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{7}
        %1402 1/int32 LD %1401
        %1403 temp(0) * 1/int32 INSTA 
        %1404 void CALL 'bool EnableLanes(uint, uint)', byval %1400, byval %1402, byref %1403
        %1405 1/int32 LD %1403
        %1406 temp(0) * 1/int32 INSTA 
        %1407 1/int32 intr.FORCE_FLATTEN_IF %1398, %1405
        %1408 void ST %1407, %1406
        %1409 1/int32 LD %1406
        %1410 1/int1 CMP.ne %1409, int32{0}
        %1415 void BRC %1410
        --> block:1411, block:1146

      block:1411 - if-then
        <-- block:1413
        %1416 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} 'vsOutput': INSTA 
        %1417 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{8}
        %1418 1/int32 LD %1417
        %1419 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{10}
        %1420 1/int32 LD %1419
        %1421 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{11}
        %1422 1/int32 LD %1421
        %1423 temp(0) * 1/int32 GETELEMPTR %479, int32{0}, int32{12}
        %1424 1/int32 LD %1423
        %1425 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %1418, %1420, %1422, %1424 has_side_effects pinned
        %1427 void ST %1426, %1425
        %1428 temp(0) * 4/fp32 GETELEMPTR %1425, int32{0}, int32{0}, int32{0}
        %1429 temp(0) * 4/fp32 GETELEMPTR %1416, int32{0}, int32{0}, int32{0}
        %1430 4/fp32 LD %1428
        %1431 void ST %1430, %1429
        %1432 temp(0) * 4/fp32 GETELEMPTR %1425, int32{0}, int32{0}, int32{1}
        %1433 temp(0) * 4/fp32 GETELEMPTR %1416, int32{0}, int32{0}, int32{1}
        %1434 4/fp32 LD %1432
        %1435 void ST %1434, %1433
        %1436 temp(0) * 4/fp32 GETELEMPTR %1425, int32{0}, int32{0}, int32{2}
        %1437 temp(0) * 4/fp32 GETELEMPTR %1416, int32{0}, int32{0}, int32{2}
        %1438 4/fp32 LD %1436
        %1439 void ST %1438, %1437
        %1440 temp(0) * 4/fp32 GETELEMPTR %1425, int32{0}, int32{0}, int32{3}
        %1441 temp(0) * 4/fp32 GETELEMPTR %1416, int32{0}, int32{0}, int32{3}
        %1442 4/fp32 LD %1440
        %1443 void ST %1442, %1441
        %1444 temp(0) * 4/fp32 GETELEMPTR %1425, int32{0}, int32{0}, int32{4}
        %1445 temp(0) * 4/fp32 GETELEMPTR %1416, int32{0}, int32{0}, int32{4}
        %1446 4/fp32 LD %1444
        %1447 void ST %1446, %1445
        %1448 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{0}
        %1449 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{0}
        %1450 4/int32 LD %1448
        %1451 void ST %1450, %1449
        %1452 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{1}
        %1453 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{1}
        %1454 4/int32 LD %1452
        %1455 void ST %1454, %1453
        %1456 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{2}
        %1457 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{2}
        %1458 4/int32 LD %1456
        %1459 void ST %1458, %1457
        %1460 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{3}
        %1461 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{3}
        %1462 4/int32 LD %1460
        %1463 void ST %1462, %1461
        %1464 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{4}
        %1465 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{4}
        %1466 4/int32 LD %1464
        %1467 void ST %1466, %1465
        %1468 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{5}
        %1469 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{5}
        %1470 4/int32 LD %1468
        %1471 void ST %1470, %1469
        %1472 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{6}
        %1473 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{6}
        %1474 4/int32 LD %1472
        %1475 void ST %1474, %1473
        %1476 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{7}
        %1477 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{7}
        %1478 4/int32 LD %1476
        %1479 void ST %1478, %1477
        %1480 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{8}
        %1481 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{8}
        %1482 4/int32 LD %1480
        %1483 void ST %1482, %1481
        %1484 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{9}
        %1485 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{9}
        %1486 4/int32 LD %1484
        %1487 void ST %1486, %1485
        %1488 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{10}
        %1489 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{10}
        %1490 4/int32 LD %1488
        %1491 void ST %1490, %1489
        %1492 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{11}
        %1493 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{11}
        %1494 4/int32 LD %1492
        %1495 void ST %1494, %1493
        %1496 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{12}
        %1497 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{12}
        %1498 4/int32 LD %1496
        %1499 void ST %1498, %1497
        %1500 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{13}
        %1501 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{13}
        %1502 4/int32 LD %1500
        %1503 void ST %1502, %1501
        %1504 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{14}
        %1505 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{14}
        %1506 4/int32 LD %1504
        %1507 void ST %1506, %1505
        %1508 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{15}
        %1509 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{15}
        %1510 4/int32 LD %1508
        %1511 void ST %1510, %1509
        %1512 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{16}
        %1513 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{16}
        %1514 4/int32 LD %1512
        %1515 void ST %1514, %1513
        %1516 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{17}
        %1517 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{17}
        %1518 4/int32 LD %1516
        %1519 void ST %1518, %1517
        %1520 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{18}
        %1521 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{18}
        %1522 4/int32 LD %1520
        %1523 void ST %1522, %1521
        %1524 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{19}
        %1525 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{19}
        %1526 4/int32 LD %1524
        %1527 void ST %1526, %1525
        %1529 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{20}
        %1530 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{20}
        %1531 4/int32 LD %1529
        %1532 void ST %1531, %1530
        %1533 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{21}
        %1534 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{21}
        %1535 4/int32 LD %1533
        %1536 void ST %1535, %1534
        %1537 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{22}
        %1538 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{22}
        %1539 4/int32 LD %1537
        %1540 void ST %1539, %1538
        %1541 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{23}
        %1542 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{23}
        %1543 4/int32 LD %1541
        %1544 void ST %1543, %1542
        %1546 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{24}
        %1547 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{24}
        %1548 4/int32 LD %1546
        %1549 void ST %1548, %1547
        %1550 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{25}
        %1551 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{25}
        %1552 4/int32 LD %1550
        %1553 void ST %1552, %1551
        %1555 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{26}
        %1556 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{26}
        %1557 4/int32 LD %1555
        %1558 void ST %1557, %1556
        %1560 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{27}
        %1561 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{27}
        %1562 4/int32 LD %1560
        %1563 void ST %1562, %1561
        %1565 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{28}
        %1566 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{28}
        %1567 4/int32 LD %1565
        %1568 void ST %1567, %1566
        %1570 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{29}
        %1571 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{29}
        %1572 4/int32 LD %1570
        %1573 void ST %1572, %1571
        %1575 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{30}
        %1576 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{30}
        %1577 4/int32 LD %1575
        %1578 void ST %1577, %1576
        %1580 temp(0) * 4/int32 GETELEMPTR %1425, int32{0}, int32{1}, int32{31}
        %1581 temp(0) * 4/int32 GETELEMPTR %1416, int32{0}, int32{1}, int32{31}
        %1582 4/int32 LD %1580
        %1583 void ST %1582, %1581
        %2211 void CALL 'void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)', byref %474, byref %1416, byval int32{0}
        %1412 void BR 
        --> block:1146

      block:1146 - if-then
        <-- block:1411, block:1413
        %1147 void BR 
        --> block:1107

      block:1107 - if-then
        <-- block:1144, block:1146
        %1108 void BR 
        --> block:477

      block:477
        <-- block:1105, block:1107
        %478 void BR 
        --> block:5793

      block:5793 - return-block
        <-- block:477
        %5794 void BR 
        --> block:475

      block:475 - exit
        <-- block:5793
        --> 


  func:Ngg::NggCtx BuildNggCtx(uint)
    arguments:
      %485 in    arg: 1/int32 - 'vertCountPerPrim'
      %488 out   arg: temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'BuildNggCtx'

    dwarf:
      BuildNggCtx(151 - 151)

    body:
      block:482 - entry
        <-- 
        --> block:501

      block:501 - if-predicate
        <-- block:482
        %486 temp(0) * 1/int32 INSTA 
        %487 void ST %485, %486
        %489 temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} 'ctx': INSTA 
        %490 temp(0) * 1/int32 INSTA 
        %491 1/int32 intr.GET_WAVEMODE 
        %492 void ST %491, %490
        %493 1/int32 LD %490
        %494 1/int32 CMOV.eq (%493, int32{1}) int32{1}, int32{0}
        %495 temp(0) * 1/int32 INSTA 
        %496 1/int1 CMP.ne %494, int32{0}
        %503 void BRC %496
        --> block:499, block:497

      block:497 - if-else
        <-- block:501
        %513 temp(0) * 1/int32 INSTA 
        %514 1/int32 intr.v_mbcnt_lo_u32_b32 int32{-1}, int32{0} uniform_width
        %515 void ST %514, %513
        %516 1/int32 LD %513
        %517 void ST %516, %495
        %498 void BR 
        --> block:555

      block:499 - if-then
        <-- block:501
        %504 temp(0) * 1/int32 INSTA 
        %505 1/int32 intr.v_mbcnt_lo_u32_b32 int32{-1}, int32{0} uniform_width
        %506 void ST %505, %504
        %507 1/int32 LD %504
        %508 temp(0) * 1/int32 INSTA 
        %509 1/int32 intr.v_mbcnt_hi_u32_b32 int32{-1}, %507 uniform_width
        %510 void ST %509, %508
        %511 1/int32 LD %508
        %512 void ST %511, %495
        %500 void BR 
        --> block:555

      block:555 - if-predicate
        <-- block:497, block:499
        %518 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{0}
        %519 1/int32 LD %495
        %520 void ST %519, %518
        %521 temp(0) * 1/int32 INSTA 
        %540 void CALL 'uint __gs_wave_in_subgroup()', byref %521
        %541 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{1}
        %542 1/int32 LD %521
        %543 void ST %542, %541
        %544 temp(0) * 1/int32 INSTA 
        %545 1/int32 intr.GET_WAVEMODE 
        %546 void ST %545, %544
        %547 1/int32 LD %544
        %548 1/int32 CMOV.eq (%547, int32{1}) int32{1}, int32{0}
        %549 temp(0) * 1/int32 INSTA 
        %550 1/int1 CMP.ne %548, int32{0}
        %557 void BRC %550
        --> block:553, block:551

      block:551 - if-else
        <-- block:555
        %560 void ST int32{32}, %549
        %552 void BR 
        --> block:688

      block:553 - if-then
        <-- block:555
        %558 void ST int32{64}, %549
        %554 void BR 
        --> block:688

      block:688 - if-predicate
        <-- block:551, block:553
        %561 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{2}
        %562 1/int32 LD %549
        %563 void ST %562, %561
        %564 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{0}
        %565 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{1}
        %566 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{2}
        %567 1/int32 LD %565
        %568 1/int32 LD %566
        %569 1/int32 MUL %567, %568
        %570 1/int32 LD %564
        %571 1/int32 ADD %570, %569
        %572 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{3}
        %573 void ST %571, %572
        %574 temp(0) * 1/int32 INSTA 
        %591 void CALL 'uint __get_wave_prim_count()', byref %574
        %592 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{4}
        %593 1/int32 LD %574
        %594 void ST %593, %592
        %595 temp(0) * 1/int32 INSTA 
        %610 void CALL 'uint __get_wave_vert_count()', byref %595
        %611 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{5}
        %612 1/int32 LD %595
        %613 void ST %612, %611
        %614 temp(0) * 1/int32 INSTA 
        %633 void CALL 'uint __get_subgroup_prim_count()', byref %614
        %634 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{6}
        %635 1/int32 LD %614
        %636 void ST %635, %634
        %637 temp(0) * 1/int32 INSTA 
        %653 void CALL 'uint __get_subgroup_vert_count()', byref %637
        %654 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{7}
        %655 1/int32 LD %637
        %656 void ST %655, %654
        %657 temp(0) * 1/int32 INSTA 
        %680 void CALL 'bool IsGen5()', byref %657
        %681 1/int32 LD %657
        %682 1/int32 CMOV.eq (%681, int32{0}) int32{1}, int32{0}
        %683 1/int1 CMP.ne %682, int32{0}
        %690 void BRC %683
        --> block:724, block:684

      block:684 - if-else
        <-- block:688
        %913 temp(0) * 1/int32 'v0v1v2': INSTA 
        %915 temp(0) * 1/int32 INSTA 
        %916 1/int32 intr.READSPECIALVECTORREG int32{88} 'v_vtx0_vtx1_vtx2_gs_instance'
        %917 void ST %916, %915
        %918 1/int32 LD %915
        %919 void ST %918, %913
        %920 1/int32 LD %913
        %921 1/int32 AND %920, int32{255}
        %922 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %923 temp(0) * 1/int32 GETELEMPTR %922, int32{0}, int32{0}
        %924 void ST %921, %923
        %925 1/int32 LD %913
        %926 1/int32 LSHR %925, int32{9}
        %927 1/int32 AND %926, int32{255}
        %928 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %929 temp(0) * 1/int32 GETELEMPTR %928, int32{0}, int32{1}
        %930 void ST %927, %929
        %932 1/int32 LD %913
        %933 1/int32 LSHR %932, int32{18}
        %934 1/int32 AND %933, int32{255}
        %935 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %936 temp(0) * 1/int32 GETELEMPTR %935, int32{0}, int32{2}
        %937 void ST %934, %936
        %685 void BR 
        --> block:977

      block:724 - if-predicate
        <-- block:688
        %691 temp(0) * 1/int32 'kIndexGran': INSTA 
        %692 void ST int32{4}, %691
        %693 temp(0) * 1/int32 INSTA 
        %709 void CALL 'uint __get_prim_vtx0_offset_gen23()', byref %693
        %710 1/int32 LD %693
        %711 1/int32 LD %691
        %712 1/int32 UDIV %710, %711
        %713 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %714 temp(0) * 1/int32 GETELEMPTR %713, int32{0}, int32{0}
        %715 void ST %712, %714
        %716 1/int32 LD %486
        %717 1/int32 CMOV.ugt (%716, int32{1}) int32{1}, int32{0}
        %718 temp(0) * 1/int32 INSTA 
        %719 1/int1 CMP.ne %717, int32{0}
        %726 void BRC %719
        --> block:722, block:720

      block:720 - if-else
        <-- block:724
        %747 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %748 temp(0) * 1/int32 GETELEMPTR %747, int32{0}, int32{0}
        %749 1/int32 LD %748
        %750 void ST %749, %718
        %721 void BR 
        --> block:763

      block:722 - if-then
        <-- block:724
        %727 temp(0) * 1/int32 INSTA 
        %742 void CALL 'uint __get_prim_vtx1_offset_gen23()', byref %727
        %743 1/int32 LD %727
        %744 1/int32 LD %691
        %745 1/int32 UDIV %743, %744
        %746 void ST %745, %718
        %723 void BR 
        --> block:763

      block:763 - if-predicate
        <-- block:720, block:722
        %751 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %752 temp(0) * 1/int32 GETELEMPTR %751, int32{0}, int32{1}
        %753 1/int32 LD %718
        %754 void ST %753, %752
        %755 1/int32 LD %486
        %756 1/int32 CMOV.ugt (%755, int32{2}) int32{1}, int32{0}
        %757 temp(0) * 1/int32 INSTA 
        %758 1/int1 CMP.ne %756, int32{0}
        %765 void BRC %758
        --> block:761, block:759

      block:759 - if-else
        <-- block:763
        %787 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %788 temp(0) * 1/int32 GETELEMPTR %787, int32{0}, int32{1}
        %789 1/int32 LD %788
        %790 void ST %789, %757
        %760 void BR 
        --> block:803

      block:761 - if-then
        <-- block:763
        %766 temp(0) * 1/int32 INSTA 
        %782 void CALL 'uint __get_prim_vtx2_offset_gen23()', byref %766
        %783 1/int32 LD %766
        %784 1/int32 LD %691
        %785 1/int32 UDIV %783, %784
        %786 void ST %785, %757
        %762 void BR 
        --> block:803

      block:803 - if-predicate
        <-- block:759, block:761
        %791 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %792 temp(0) * 1/int32 GETELEMPTR %791, int32{0}, int32{2}
        %793 1/int32 LD %757
        %794 void ST %793, %792
        %795 1/int32 LD %486
        %796 1/int32 CMOV.ugt (%795, int32{3}) int32{1}, int32{0}
        %797 temp(0) * 1/int32 INSTA 
        %798 1/int1 CMP.ne %796, int32{0}
        %805 void BRC %798
        --> block:801, block:799

      block:799 - if-else
        <-- block:803
        %826 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %827 temp(0) * 1/int32 GETELEMPTR %826, int32{0}, int32{2}
        %828 1/int32 LD %827
        %829 void ST %828, %797
        %800 void BR 
        --> block:842

      block:801 - if-then
        <-- block:803
        %806 temp(0) * 1/int32 INSTA 
        %821 void CALL 'uint __get_prim_vtx3_offset_gen23()', byref %806
        %822 1/int32 LD %806
        %823 1/int32 LD %691
        %824 1/int32 UDIV %822, %823
        %825 void ST %824, %797
        %802 void BR 
        --> block:842

      block:842 - if-predicate
        <-- block:799, block:801
        %830 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %831 temp(0) * 1/int32 GETELEMPTR %830, int32{0}, int32{3}
        %832 1/int32 LD %797
        %833 void ST %832, %831
        %834 1/int32 LD %486
        %835 1/int32 CMOV.ugt (%834, int32{4}) int32{1}, int32{0}
        %836 temp(0) * 1/int32 INSTA 
        %837 1/int1 CMP.ne %835, int32{0}
        %844 void BRC %837
        --> block:840, block:838

      block:838 - if-else
        <-- block:842
        %866 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %867 temp(0) * 1/int32 GETELEMPTR %866, int32{0}, int32{3}
        %868 1/int32 LD %867
        %869 void ST %868, %836
        %839 void BR 
        --> block:882

      block:840 - if-then
        <-- block:842
        %845 temp(0) * 1/int32 INSTA 
        %861 void CALL 'uint __get_prim_vtx4_offset_gen23()', byref %845
        %862 1/int32 LD %845
        %863 1/int32 LD %691
        %864 1/int32 UDIV %862, %863
        %865 void ST %864, %836
        %841 void BR 
        --> block:882

      block:882 - if-predicate
        <-- block:838, block:840
        %870 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %871 temp(0) * 1/int32 GETELEMPTR %870, int32{0}, int32{4}
        %872 1/int32 LD %836
        %873 void ST %872, %871
        %874 1/int32 LD %486
        %875 1/int32 CMOV.ugt (%874, int32{5}) int32{1}, int32{0}
        %876 temp(0) * 1/int32 INSTA 
        %877 1/int1 CMP.ne %875, int32{0}
        %884 void BRC %877
        --> block:880, block:878

      block:878 - if-else
        <-- block:882
        %905 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %906 temp(0) * 1/int32 GETELEMPTR %905, int32{0}, int32{4}
        %907 1/int32 LD %906
        %908 void ST %907, %876
        %879 void BR 
        --> block:686

      block:880 - if-then
        <-- block:882
        %885 temp(0) * 1/int32 INSTA 
        %900 void CALL 'uint __get_prim_vtx5_offset_gen23()', byref %885
        %901 1/int32 LD %885
        %902 1/int32 LD %691
        %903 1/int32 UDIV %901, %902
        %904 void ST %903, %876
        %881 void BR 
        --> block:686

      block:686 - if-then
        <-- block:878, block:880
        %909 temp(0) * 1/int32[6] GETELEMPTR %488, int32{0}, int32{9}
        %910 temp(0) * 1/int32 GETELEMPTR %909, int32{0}, int32{5}
        %911 1/int32 LD %876
        %912 void ST %911, %910
        %687 void BR 
        --> block:977

      block:977
        <-- block:684, block:686
        %938 temp(0) * 1/int32 INSTA 
        %952 void CALL 'uint __get_vertex_index()', byref %938
        %953 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{8}
        %954 1/int32 LD %938
        %955 void ST %954, %953
        %956 temp(0) * 1/int32 INSTA 
        %957 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %958 void ST %957, %956
        %959 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{10}
        %960 1/int32 LD %956
        %961 void ST %960, %959
        %963 temp(0) * 1/int32 INSTA 
        %964 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %965 void ST %964, %963
        %966 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{11}
        %968 1/int32 LD %963
        %969 void ST %968, %966
        %971 temp(0) * 1/int32 INSTA 
        %972 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %973 void ST %972, %971
        %974 temp(0) * 1/int32 GETELEMPTR %488, int32{0}, int32{12}
        %975 1/int32 LD %971
        %976 void ST %975, %974
        %978 void BR 
        --> block:481

      block:481 - exit
        <-- block:977
        --> 


  func:uint __gs_wave_in_subgroup()
    arguments:
      %523 out   arg: temp(0) * 1/int32 - '__gs_wave_in_subgroup'

    dwarf:
      __gs_wave_in_subgroup(154 - 154)

    body:
      block:525 - entry
        <-- 
        --> block:538

      block:538
        <-- block:525
        %529 temp(0) * 1/int32 INSTA 
        %530 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %531 void ST %530, %529
        %533 1/int32 LD %529
        %534 1/int32 LSHR %533, int32{24}
        %536 1/int32 AND %534, int32{15}
        %537 void ST %536, %523
        %539 void BR 
        --> block:524

      block:524 - exit
        <-- block:538
        --> 


  func:uint __get_wave_prim_count()
    arguments:
      %576 out   arg: temp(0) * 1/int32 - '__get_wave_prim_count'

    dwarf:
      __get_wave_prim_count(284 - 284)

    body:
      block:578 - entry
        <-- 
        --> block:589

      block:589
        <-- block:578
        %581 temp(0) * 1/int32 INSTA 
        %582 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %583 void ST %582, %581
        %584 1/int32 LD %581
        %585 1/int32 LSHR %584, int32{8}
        %587 1/int32 AND %585, int32{255}
        %588 void ST %587, %576
        %590 void BR 
        --> block:577

      block:577 - exit
        <-- block:589
        --> 


  func:uint __get_wave_vert_count()
    arguments:
      %597 out   arg: temp(0) * 1/int32 - '__get_wave_vert_count'

    dwarf:
      __get_wave_vert_count(286 - 286)

    body:
      block:599 - entry
        <-- 
        --> block:608

      block:608
        <-- block:599
        %602 temp(0) * 1/int32 INSTA 
        %603 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %604 void ST %603, %602
        %605 1/int32 LD %602
        %606 1/int32 AND %605, int32{255}
        %607 void ST %606, %597
        %609 void BR 
        --> block:598

      block:598 - exit
        <-- block:608
        --> 


  func:uint __get_subgroup_prim_count()
    arguments:
      %616 out   arg: temp(0) * 1/int32 - '__get_subgroup_prim_count'

    dwarf:
      __get_subgroup_prim_count(288 - 288)

    body:
      block:618 - entry
        <-- 
        --> block:631

      block:631
        <-- block:618
        %622 temp(0) * 1/int32 INSTA 
        %623 1/int32 intr.READSPECIALSCALARREG int32{79} 's_gs_control_wave_id'
        %624 void ST %623, %622
        %626 1/int32 LD %622
        %627 1/int32 LSHR %626, int32{22}
        %629 1/int32 AND %627, int32{511}
        %630 void ST %629, %616
        %632 void BR 
        --> block:617

      block:617 - exit
        <-- block:631
        --> 


  func:uint __get_subgroup_vert_count()
    arguments:
      %639 out   arg: temp(0) * 1/int32 - '__get_subgroup_vert_count'

    dwarf:
      __get_subgroup_vert_count(290 - 290)

    body:
      block:641 - entry
        <-- 
        --> block:651

      block:651
        <-- block:641
        %644 temp(0) * 1/int32 INSTA 
        %645 1/int32 intr.READSPECIALSCALARREG int32{79} 's_gs_control_wave_id'
        %646 void ST %645, %644
        %647 1/int32 LD %644
        %648 1/int32 LSHR %647, int32{12}
        %649 1/int32 AND %648, int32{511}
        %650 void ST %649, %639
        %652 void BR 
        --> block:640

      block:640 - exit
        <-- block:651
        --> 


  func:bool IsGen5()
    arguments:
      %659 out   arg: temp(0) * 1/int32 - 'IsGen5'

    dwarf:
      IsGen5(292 - 292)

    body:
      block:661 - entry
        <-- 
        --> block:678

      block:678
        <-- block:661
        %664 temp(0) * 1/int32 'target': INSTA 
        %665 temp(0) * 1/int32 INSTA 
        %666 1/int32 intr.GET_TARGET 
        %667 void ST %666, %665
        %668 1/int32 LD %665
        %669 void ST %668, %664
        %671 1/int32 LD %664
        %672 1/int32 CMOV.eq (int32{9}, %671) int32{1}, int32{0}
        %674 1/int32 LD %664
        %675 1/int32 CMOV.eq (int32{10}, %674) int32{1}, int32{0}
        %676 1/int32 OR %672, %675
        %677 void ST %676, %659
        %679 void BR 
        --> block:660

      block:660 - exit
        <-- block:678
        --> 


  func:uint __get_prim_vtx0_offset_gen23()
    arguments:
      %695 out   arg: temp(0) * 1/int32 - '__get_prim_vtx0_offset_gen23'

    dwarf:
      __get_prim_vtx0_offset_gen23(296 - 296)

    body:
      block:697 - entry
        <-- 
        --> block:707

      block:707
        <-- block:697
        %701 temp(0) * 1/int32 INSTA 
        %702 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %703 void ST %702, %701
        %704 1/int32 LD %701
        %705 1/int32 AND %704, int32{65535}
        %706 void ST %705, %695
        %708 void BR 
        --> block:696

      block:696 - exit
        <-- block:707
        --> 


  func:uint __get_prim_vtx1_offset_gen23()
    arguments:
      %729 out   arg: temp(0) * 1/int32 - '__get_prim_vtx1_offset_gen23'

    dwarf:
      __get_prim_vtx1_offset_gen23(298 - 298)

    body:
      block:731 - entry
        <-- 
        --> block:740

      block:740
        <-- block:731
        %734 temp(0) * 1/int32 INSTA 
        %735 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %736 void ST %735, %734
        %737 1/int32 LD %734
        %738 1/int32 LSHR %737, int32{16}
        %739 void ST %738, %729
        %741 void BR 
        --> block:730

      block:730 - exit
        <-- block:740
        --> 


  func:uint __get_prim_vtx2_offset_gen23()
    arguments:
      %768 out   arg: temp(0) * 1/int32 - '__get_prim_vtx2_offset_gen23'

    dwarf:
      __get_prim_vtx2_offset_gen23(300 - 300)

    body:
      block:770 - entry
        <-- 
        --> block:780

      block:780
        <-- block:770
        %774 temp(0) * 1/int32 INSTA 
        %775 1/int32 intr.READSPECIALVECTORREG int32{84} 'v_vtx2_vtx3_offset'
        %776 void ST %775, %774
        %777 1/int32 LD %774
        %778 1/int32 AND %777, int32{65535}
        %779 void ST %778, %768
        %781 void BR 
        --> block:769

      block:769 - exit
        <-- block:780
        --> 


  func:uint __get_prim_vtx3_offset_gen23()
    arguments:
      %808 out   arg: temp(0) * 1/int32 - '__get_prim_vtx3_offset_gen23'

    dwarf:
      __get_prim_vtx3_offset_gen23(302 - 302)

    body:
      block:810 - entry
        <-- 
        --> block:819

      block:819
        <-- block:810
        %813 temp(0) * 1/int32 INSTA 
        %814 1/int32 intr.READSPECIALVECTORREG int32{84} 'v_vtx2_vtx3_offset'
        %815 void ST %814, %813
        %816 1/int32 LD %813
        %817 1/int32 LSHR %816, int32{16}
        %818 void ST %817, %808
        %820 void BR 
        --> block:809

      block:809 - exit
        <-- block:819
        --> 


  func:uint __get_prim_vtx4_offset_gen23()
    arguments:
      %847 out   arg: temp(0) * 1/int32 - '__get_prim_vtx4_offset_gen23'

    dwarf:
      __get_prim_vtx4_offset_gen23(304 - 304)

    body:
      block:849 - entry
        <-- 
        --> block:859

      block:859
        <-- block:849
        %853 temp(0) * 1/int32 INSTA 
        %854 1/int32 intr.READSPECIALVECTORREG int32{85} 'v_vtx4_vtx5_offset'
        %855 void ST %854, %853
        %856 1/int32 LD %853
        %857 1/int32 AND %856, int32{65535}
        %858 void ST %857, %847
        %860 void BR 
        --> block:848

      block:848 - exit
        <-- block:859
        --> 


  func:uint __get_prim_vtx5_offset_gen23()
    arguments:
      %887 out   arg: temp(0) * 1/int32 - '__get_prim_vtx5_offset_gen23'

    dwarf:
      __get_prim_vtx5_offset_gen23(306 - 306)

    body:
      block:889 - entry
        <-- 
        --> block:898

      block:898
        <-- block:889
        %892 temp(0) * 1/int32 INSTA 
        %893 1/int32 intr.READSPECIALVECTORREG int32{85} 'v_vtx4_vtx5_offset'
        %894 void ST %893, %892
        %895 1/int32 LD %892
        %896 1/int32 LSHR %895, int32{16}
        %897 void ST %896, %887
        %899 void BR 
        --> block:888

      block:888 - exit
        <-- block:898
        --> 


  func:uint __get_vertex_index()
    arguments:
      %940 out   arg: temp(0) * 1/int32 - '__get_vertex_index'

    dwarf:
      __get_vertex_index(309 - 309)

    body:
      block:942 - entry
        <-- 
        --> block:950

      block:950
        <-- block:942
        %945 temp(0) * 1/int32 INSTA 
        %946 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %947 void ST %946, %945
        %948 1/int32 LD %945
        %949 void ST %948, %940
        %951 void BR 
        --> block:941

      block:941 - exit
        <-- block:950
        --> 


  func:void __ldsBarrier(bool)
    arguments:
      %1068 in    arg: 1/int32 - 'singleWave'

    dwarf:
      __ldsBarrier(327 - 327)

    body:
      block:1065 - entry
        <-- 
        --> block:1076

      block:1076 - if-predicate
        <-- block:1065
        %1069 temp(0) * 1/int32 INSTA 
        %1070 void ST %1068, %1069
        %1071 1/int32 LD %1069
        %1072 1/int32 CMOV.eq (int32{0}, %1071) int32{1}, int32{0}
        %1073 1/int1 CMP.ne %1072, int32{0}
        %1078 void BRC %1073
        --> block:1074, block:1066

      block:1074 - if-then
        <-- block:1076
        %1099 void CALL 'void ThreadGroupMemoryBarrierSync()'
        %1075 void BR 
        --> block:1066

      block:1066
        <-- block:1074, block:1076
        %1067 void BR 
        --> block:1100

      block:1100 - return-block
        <-- block:1066
        %1101 void BR 
        --> block:1064

      block:1064 - exit
        <-- block:1100
        --> 


  func:void ThreadGroupMemoryBarrierSync()
    arguments:
      none

    dwarf:
      ThreadGroupMemoryBarrierSync(330 - 330)

    body:
      block:1081 - entry
        <-- 
        --> block:1082

      block:1082
        <-- block:1081
        %1084 temp(0) * 1/int64 'behaviour': INSTA 
        %1091 void ST int64{23}, %1084
        %1095 1/int64 LD %1084
        %1096 void intr.BARRIER int64{4294967295}, %1095 has_side_effects dependent_on_side_effects
        %1083 void BR 
        --> block:1097

      block:1097 - return-block
        <-- block:1082
        %1098 void BR 
        --> block:1080

      block:1080 - exit
        <-- block:1097
        --> 


  func:void SendAllocMessage(uint, uint)
    arguments:
      %1172 in    arg: 1/int32 - 'numPrim'
      %1175 in    arg: 1/int32 - 'numVerts'

    dwarf:
      SendAllocMessage(344 - 344)

    body:
      block:1169 - entry
        <-- 
        --> block:1170

      block:1170
        <-- block:1169
        %1173 temp(0) * 1/int32 INSTA 
        %1174 void ST %1172, %1173
        %1176 temp(0) * 1/int32 INSTA 
        %1177 void ST %1175, %1176
        %1178 temp(0) * 1/int32 'm0': INSTA 
        %1179 1/int32 LD %1173
        %1180 1/int32 LD %1176
        %1200 void CALL 'uint make_m0_for_gsallocreq(uint, uint)', byval %1179, byval %1180, byref %1178
        %1201 1/int32 LD %1178
        %1202 void intr.s_sendmsg %1201, int32{9} has_side_effects dependent_on_side_effects
        %1171 void BR 
        --> block:1203

      block:1203 - return-block
        <-- block:1170
        %1204 void BR 
        --> block:1168

      block:1168 - exit
        <-- block:1203
        --> 


  func:uint make_m0_for_gsallocreq(uint, uint)
    arguments:
      %1186 in    arg: 1/int32 - 'outPrims'
      %1189 in    arg: 1/int32 - 'outVerts'
      %1192 out   arg: temp(0) * 1/int32 - 'make_m0_for_gsallocreq'

    dwarf:
      make_m0_for_gsallocreq(346 - 346)

    body:
      block:1183 - entry
        <-- 
        --> block:1198

      block:1198
        <-- block:1183
        %1187 temp(0) * 1/int32 INSTA 
        %1188 void ST %1186, %1187
        %1190 temp(0) * 1/int32 INSTA 
        %1191 void ST %1189, %1190
        %1193 1/int32 LD %1187
        %1194 1/int32 SHL %1193, int32{12}
        %1195 1/int32 LD %1190
        %1196 1/int32 OR %1194, %1195
        %1197 void ST %1196, %1192
        %1199 void BR 
        --> block:1182

      block:1182 - exit
        <-- block:1198
        --> 


  func:bool EnableLanes(uint, uint)
    arguments:
      %1217 in    arg: 1/int32 - 'tid'
      %1220 in    arg: 1/int32 - 'count'
      %1223 out   arg: temp(0) * 1/int32 - 'EnableLanes'

    dwarf:
      EnableLanes(361 - 361)

    body:
      block:1214 - entry
        <-- 
        --> block:1249

      block:1249 - if-predicate
        <-- block:1214
        %1218 temp(0) * 1/int32 INSTA 
        %1219 void ST %1217, %1218
        %1221 temp(0) * 1/int32 INSTA 
        %1222 void ST %1220, %1221
        %1224 temp(0) * 1/int32 'options': INSTA 
        %1225 temp(0) * 1/int32 INSTA 
        %1226 1/int32 intr.get_ngg_options 
        %1227 void ST int32{545}, %1225
        %1228 1/int32 LD %1225
        %1229 void ST %1228, %1224
        %1230 temp(0) * 1/int32 'w64': INSTA 
        %1231 temp(0) * 1/int32 INSTA 
        %1232 1/int32 intr.GET_WAVEMODE 
        %1233 void ST %1232, %1231
        %1234 1/int32 LD %1231
        %1235 1/int32 CMOV.eq (%1234, int32{1}) int32{1}, int32{0}
        %1236 void ST %1235, %1230
        %1237 temp(0) * 1/int32 'isSingleWave': INSTA 
        %1238 1/int32 LD %1224
        %1239 1/int32 AND %1238, int32{1}
        %1240 1/int32 CMOV.ne (int32{0}, %1239) int32{1}, int32{0}
        %1241 void ST %1240, %1237
        %1242 1/int32 LD %1237
        %1243 1/int32 CMOV.eq (%1242, int32{0}) int32{1}, int32{0}
        %1244 1/int1 CMP.ne %1243, int32{0}
        %1251 void BRC %1244
        --> block:1256, block:1264

      block:1264 - if-predicate
        <-- block:1249
        %1258 1/int32 LD %1230
        %1259 1/int1 CMP.ne %1258, int32{0}
        %1266 void BRC %1259
        --> block:1284, block:1300

      block:1300
        <-- block:1264
        %1286 temp(0) * 1/int32 'm': INSTA 
        %1288 1/int32 LD %1221
        %1289 1/int32 NEG %1288
        %1290 1/int32 ADD int32{32}, %1289
        %1291 1/int32 LSHR int32{-1}, %1290
        %1292 void ST %1291, %1286
        %1293 1/int32 LD %1286
        %1294 temp(0) * 1/int32 INSTA 
        %1295 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %1293 uniform_width
        %1296 void ST %1295, %1294
        %1297 1/int32 LD %1294
        %1298 1/int32 CMOV.ne (%1297, int32{0}) int32{1}, int32{0}
        %1299 void ST %1298, %1223
        %1301 void BR 
        --> block:1213

      block:1284
        <-- block:1264
        %1267 temp(0) * 1/int64 'm': INSTA 
        %1271 1/int32 LD %1221
        %1272 1/int32 NEG %1271
        %1273 1/int32 ADD int32{64}, %1272
        %1274 1/int64 CONV %1273
        %1275 1/int64 LSHR int64{-1}, %1274
        %1276 void ST %1275, %1267
        %1277 1/int64 LD %1267
        %1278 temp(0) * 1/int32 INSTA 
        %1279 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %1277 uniform_width
        %1280 void ST %1279, %1278
        %1281 1/int32 LD %1278
        %1282 1/int32 CMOV.ne (%1281, int32{0}) int32{1}, int32{0}
        %1283 void ST %1282, %1223
        %1285 void BR 
        --> block:1213

      block:1256
        <-- block:1249
        %1252 1/int32 LD %1218
        %1253 1/int32 LD %1221
        %1254 1/int32 CMOV.ult (%1252, %1253) int32{1}, int32{0}
        %1255 void ST %1254, %1223
        %1257 void BR 
        --> block:1213

      block:1213 - exit
        <-- block:1256, block:1284, block:1300
        --> 


  func:uint __get_primitive_id()
    arguments:
      %1317 out   arg: temp(0) * 1/int32 - '__get_primitive_id'

    dwarf:
      __get_primitive_id(369 - 369)

    body:
      block:1319 - entry
        <-- 
        --> block:1327

      block:1327
        <-- block:1319
        %1322 temp(0) * 1/int32 INSTA 
        %1323 1/int32 intr.READSPECIALVECTORREG int32{64} 'v_gs_primitive_id'
        %1324 void ST %1323, %1322
        %1325 1/int32 LD %1322
        %1326 void ST %1325, %1317
        %1328 void BR 
        --> block:1318

      block:1318 - exit
        <-- block:1327
        --> 


  func:void ExportNggIndex(uint, uint, bool)
    arguments:
      %1337 in    arg: 1/int32 - 'index'
      %1340 in    arg: 1/int32 - 'primId'
      %1343 in    arg: 1/int32 - 'enablePrimId'

    dwarf:
      ExportNggIndex(371 - 371)

    body:
      block:1334 - entry
        <-- 
        --> block:1364

      block:1364 - if-predicate
        <-- block:1334
        %1338 temp(0) * 1/int32 INSTA 
        %1339 void ST %1337, %1338
        %1341 temp(0) * 1/int32 INSTA 
        %1342 void ST %1340, %1341
        %1344 temp(0) * 1/int32 INSTA 
        %1345 void ST %1343, %1344
        %1346 temp(0) * 1/int32 'indexExpMask': INSTA 
        %1357 1/int32 LD %1344
        %1358 temp(0) * 1/int32 INSTA 
        %1359 1/int1 CMP.ne %1357, int32{0}
        %1366 void BRC %1359
        --> block:1362, block:1360

      block:1360 - if-else
        <-- block:1364
        %1371 void ST int32{0}, %1358
        %1361 void BR 
        --> block:1383

      block:1362 - if-then
        <-- block:1364
        %1370 void ST int32{131072}, %1358
        %1363 void BR 
        --> block:1383

      block:1383 - if-predicate
        <-- block:1360, block:1362
        %1372 1/int32 LD %1358
        %1373 1/int32 OR int32{2162708}, %1372
        %1374 void ST %1373, %1346
        %1375 temp(0) * 1/int32 'Y': INSTA 
        %1376 1/int32 LD %1344
        %1377 temp(0) * 1/int32 INSTA 
        %1378 1/int1 CMP.ne %1376, int32{0}
        %1385 void BRC %1378
        --> block:1381, block:1379

      block:1379 - if-else
        <-- block:1383
        %1388 void ST int32{0}, %1377
        %1380 void BR 
        --> block:1335

      block:1381 - if-then
        <-- block:1383
        %1386 1/int32 LD %1341
        %1387 void ST %1386, %1377
        %1382 void BR 
        --> block:1335

      block:1335
        <-- block:1379, block:1381
        %1389 1/int32 LD %1377
        %1390 void ST %1389, %1375
        %1391 1/int32 LD %1338
        %1392 1/int32 LD %1375
        %1393 1/int32 LD %1346
        %1394 void intr.EXPORT %1391, %1392, int32{0}, int32{0}, %1393, int32{0}
        %1336 void BR 
        --> block:1395

      block:1395 - return-block
        <-- block:1335
        %1396 void BR 
        --> block:1333

      block:1333 - exit
        <-- block:1395
        --> 


  func:void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)
    arguments:
      %1590 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'
      %1591 in    arg: temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} - 'vsOutput'
      %1592 in    arg: 1/int32 - 'skipParam'

    dwarf:
      ExportPosAndParams(382 - 382)

    body:
      block:1587 - entry
        <-- 
        --> block:1606

      block:1606 - if-predicate
        <-- block:1587
        %1593 temp(0) * 1/int32 INSTA 
        %1594 void ST %1592, %1593
        %1595 temp(0) * 1/int32 'doneIndex': INSTA 
        %1596 temp(0) * 1/int32[5] GETELEMPTR %1590, int32{0}, int32{1}
        %1597 temp(0) * 1/int32 GETELEMPTR %1596, int32{0}, int32{4}
        %1598 1/int32 LD %1597
        %1599 1/int32 CMOV.ne (int32{0}, %1598) int32{1}, int32{0}
        %1600 temp(0) * 1/int32 INSTA 
        %1601 1/int1 CMP.ne %1599, int32{0}
        %1608 void BRC %1601
        --> block:1604, block:1620

      block:1620 - if-predicate
        <-- block:1606
        %1610 temp(0) * 1/int32[5] GETELEMPTR %1590, int32{0}, int32{1}
        %1611 temp(0) * 1/int32 GETELEMPTR %1610, int32{0}, int32{3}
        %1612 1/int32 LD %1611
        %1613 1/int32 CMOV.ne (int32{0}, %1612) int32{1}, int32{0}
        %1614 temp(0) * 1/int32 INSTA 
        %1615 1/int1 CMP.ne %1613, int32{0}
        %1622 void BRC %1615
        --> block:1618, block:1634

      block:1634 - if-predicate
        <-- block:1620
        %1624 temp(0) * 1/int32[5] GETELEMPTR %1590, int32{0}, int32{1}
        %1625 temp(0) * 1/int32 GETELEMPTR %1624, int32{0}, int32{2}
        %1626 1/int32 LD %1625
        %1627 1/int32 CMOV.ne (int32{0}, %1626) int32{1}, int32{0}
        %1628 temp(0) * 1/int32 INSTA 
        %1629 1/int1 CMP.ne %1627, int32{0}
        %1636 void BRC %1629
        --> block:1632, block:1648

      block:1648 - if-predicate
        <-- block:1634
        %1638 temp(0) * 1/int32[5] GETELEMPTR %1590, int32{0}, int32{1}
        %1639 temp(0) * 1/int32 GETELEMPTR %1638, int32{0}, int32{1}
        %1640 1/int32 LD %1639
        %1641 1/int32 CMOV.ne (int32{0}, %1640) int32{1}, int32{0}
        %1642 temp(0) * 1/int32 INSTA 
        %1643 1/int1 CMP.ne %1641, int32{0}
        %1650 void BRC %1643
        --> block:1646, block:1644

      block:1644 - if-else
        <-- block:1648
        %1652 void ST int32{0}, %1642
        %1645 void BR 
        --> block:1630

      block:1646 - if-then
        <-- block:1648
        %1651 void ST int32{1}, %1642
        %1647 void BR 
        --> block:1630

      block:1630 - if-else
        <-- block:1644, block:1646
        %1653 1/int32 LD %1642
        %1654 void ST %1653, %1628
        %1631 void BR 
        --> block:1616

      block:1632 - if-then
        <-- block:1634
        %1637 void ST int32{2}, %1628
        %1633 void BR 
        --> block:1616

      block:1616 - if-else
        <-- block:1630, block:1632
        %1655 1/int32 LD %1628
        %1656 void ST %1655, %1614
        %1617 void BR 
        --> block:1602

      block:1618 - if-then
        <-- block:1620
        %1623 void ST int32{3}, %1614
        %1619 void BR 
        --> block:1602

      block:1602 - if-else
        <-- block:1616, block:1618
        %1657 1/int32 LD %1614
        %1658 void ST %1657, %1600
        %1603 void BR 
        --> block:1815

      block:1604 - if-then
        <-- block:1606
        %1609 void ST int32{4}, %1600
        %1605 void BR 
        --> block:1815

      block:1815 - if-predicate
        <-- block:1602, block:1604
        %1659 1/int32 LD %1600
        %1660 void ST %1659, %1595
        %1661 temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} INSTA 
        %1662 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %1661, int32{0}, int32{0}
        %1663 void ST %1590, %1662
        %1664 temp(0) * temp(0) * 1/int32 GETELEMPTR %1661, int32{0}, int32{1}
        %1665 void ST %1595, %1664
        %1666 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1661, int32{0}, int32{2}
        %1667 void ST %1591, %1666
        %1809 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1661
        %1810 1/int32 LD %1593
        %1811 1/int32 CMOV.eq (%1810, int32{0}) int32{1}, int32{0}
        %1812 1/int1 CMP.ne %1811, int32{0}
        %1817 void BRC %1812
        --> block:1813, block:1588

      block:1813 - if-then
        <-- block:1815
        %1818 temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} INSTA 
        %1819 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %1818, int32{0}, int32{0}
        %1820 void ST %1590, %1819
        %1821 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1818, int32{0}, int32{1}
        %1822 void ST %1591, %1821
        %2208 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1818
        %1814 void BR 
        --> block:1588

      block:1588
        <-- block:1813, block:1815
        %1589 void BR 
        --> block:2209

      block:2209 - return-block
        <-- block:1588
        %2210 void BR 
        --> block:1586

      block:1586 - exit
        <-- block:2209
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1669 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(395 - 395)

    body:
      block:1671 - entry
        <-- 
        --> block:1672

      block:1672
        <-- block:1671
        %1757 void CALL 'void @lambda_90::operator()(int) const', byval int32{0}, byref %1669
        %1806 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1669
        %1673 void BR 
        --> block:1807

      block:1807 - return-block
        <-- block:1672
        %1808 void BR 
        --> block:1670

      block:1670 - exit
        <-- block:1807
        --> 


  func:void @lambda_90::operator()(int) const
    arguments:
      %1679 in    arg: 1/int32 - 'p'
      %1682 inout arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'this'

    dwarf:
      operator()(400 - 400)

    body:
      block:1676 - entry
        <-- 
        --> block:1696

      block:1696 - if-predicate
        <-- block:1676
        %1680 temp(0) * 1/int32 INSTA 
        %1681 void ST %1679, %1680
        %1683 temp(0) * 1/int32 'expOpts': INSTA 
        %1684 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %1682, int32{0}, int32{0}
        %1685 temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %1684
        %1686 temp(0) * 1/int32[5] GETELEMPTR %1685, int32{0}, int32{1}
        %1687 1/int32 LD %1680
        %1688 temp(0) * 1/int32 GETELEMPTR %1686, int32{0}, %1687
        %1689 1/int32 LD %1688
        %1690 void ST %1689, %1683
        %1691 1/int32 LD %1683
        %1692 1/int32 CMOV.ne (int32{0}, %1691) int32{1}, int32{0}
        %1693 1/int1 CMP.ne %1692, int32{0}
        %1698 void BRC %1693
        --> block:1716, block:1677

      block:1716 - if-predicate
        <-- block:1696
        %1699 temp(0) * 1/int32 'opts': INSTA 
        %1703 1/int32 LD %1683
        %1704 1/int32 AND %1703, int32{-2097153}
        %1705 temp(0) * temp(0) * 1/int32 GETELEMPTR %1682, int32{0}, int32{1}
        %1706 temp(0) * 1/int32 LD %1705
        %1707 1/int32 LD %1680
        %1708 1/int32 LD %1706
        %1709 1/int32 CMOV.eq (%1707, %1708) int32{1}, int32{0}
        %1710 temp(0) * 1/int32 INSTA 
        %1711 1/int1 CMP.ne %1709, int32{0}
        %1718 void BRC %1711
        --> block:1714, block:1712

      block:1712 - if-else
        <-- block:1716
        %1721 void ST int32{0}, %1710
        %1713 void BR 
        --> block:1694

      block:1714 - if-then
        <-- block:1716
        %1720 void ST int32{2097152}, %1710
        %1715 void BR 
        --> block:1694

      block:1694 - if-then
        <-- block:1712, block:1714
        %1722 1/int32 LD %1710
        %1723 1/int32 OR %1704, %1722
        %1724 void ST %1723, %1699
        %1725 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1682, int32{0}, int32{2}
        %1726 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1725
        %1727 temp(0) * 4/fp32[5] GETELEMPTR %1726, int32{0}, int32{0}
        %1728 1/int32 LD %1680
        %1729 temp(0) * 4/fp32 GETELEMPTR %1727, int32{0}, %1728
        %1730 4/fp32 LD %1729
        %1731 1/fp32 SHUF %1730.x
        %1732 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1682, int32{0}, int32{2}
        %1733 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1732
        %1734 temp(0) * 4/fp32[5] GETELEMPTR %1733, int32{0}, int32{0}
        %1735 1/int32 LD %1680
        %1736 temp(0) * 4/fp32 GETELEMPTR %1734, int32{0}, %1735
        %1737 4/fp32 LD %1736
        %1738 1/fp32 SHUF %1737.y
        %1739 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1682, int32{0}, int32{2}
        %1740 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1739
        %1741 temp(0) * 4/fp32[5] GETELEMPTR %1740, int32{0}, int32{0}
        %1742 1/int32 LD %1680
        %1743 temp(0) * 4/fp32 GETELEMPTR %1741, int32{0}, %1742
        %1744 4/fp32 LD %1743
        %1745 1/fp32 SHUF %1744.z
        %1746 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1682, int32{0}, int32{2}
        %1747 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1746
        %1748 temp(0) * 4/fp32[5] GETELEMPTR %1747, int32{0}, int32{0}
        %1749 1/int32 LD %1680
        %1750 temp(0) * 4/fp32 GETELEMPTR %1748, int32{0}, %1749
        %1751 4/fp32 LD %1750
        %1752 1/fp32 SHUF %1751.w
        %1753 1/int32 LD %1699
        %1754 void intr.EXPORT %1731, %1738, %1745, %1752, %1753, int32{0}
        %1695 void BR 
        --> block:1677

      block:1677
        <-- block:1694, block:1696
        %1678 void BR 
        --> block:1755

      block:1755 - return-block
        <-- block:1677
        %1756 void BR 
        --> block:1675

      block:1675 - exit
        <-- block:1755
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1759 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(407 - 407)

    body:
      block:1761 - entry
        <-- 
        --> block:1762

      block:1762
        <-- block:1761
        %1764 void CALL 'void @lambda_90::operator()(int) const', byval int32{1}, byref %1759
        %1803 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1759
        %1763 void BR 
        --> block:1804

      block:1804 - return-block
        <-- block:1762
        %1805 void BR 
        --> block:1760

      block:1760 - exit
        <-- block:1804
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1766 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(415 - 415)

    body:
      block:1768 - entry
        <-- 
        --> block:1769

      block:1769
        <-- block:1768
        %1771 void CALL 'void @lambda_90::operator()(int) const', byval int32{2}, byref %1766
        %1800 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1766
        %1770 void BR 
        --> block:1801

      block:1801 - return-block
        <-- block:1769
        %1802 void BR 
        --> block:1767

      block:1767 - exit
        <-- block:1801
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1773 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(423 - 423)

    body:
      block:1775 - entry
        <-- 
        --> block:1776

      block:1776
        <-- block:1775
        %1778 void CALL 'void @lambda_90::operator()(int) const', byval int32{3}, byref %1773
        %1797 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1773
        %1777 void BR 
        --> block:1798

      block:1798 - return-block
        <-- block:1776
        %1799 void BR 
        --> block:1774

      block:1774 - exit
        <-- block:1798
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1780 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(431 - 431)

    body:
      block:1782 - entry
        <-- 
        --> block:1783

      block:1783
        <-- block:1782
        %1785 void CALL 'void @lambda_90::operator()(int) const', byval int32{4}, byref %1780
        %1794 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1780
        %1784 void BR 
        --> block:1795

      block:1795 - return-block
        <-- block:1783
        %1796 void BR 
        --> block:1781

      block:1781 - exit
        <-- block:1795
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1787 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(439 - 439)

    body:
      block:1789 - entry
        <-- 
        --> block:1790

      block:1790
        <-- block:1789
        %1791 void BR 
        --> block:1792

      block:1792 - return-block
        <-- block:1790
        %1793 void BR 
        --> block:1788

      block:1788 - exit
        <-- block:1792
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1824 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(451 - 451)

    body:
      block:1826 - entry
        <-- 
        --> block:1827

      block:1827
        <-- block:1826
        %1886 void CALL 'void @lambda_91::operator()(int) const', byval int32{0}, byref %1824
        %2205 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1824
        %1828 void BR 
        --> block:2206

      block:2206 - return-block
        <-- block:1827
        %2207 void BR 
        --> block:1825

      block:1825 - exit
        <-- block:2206
        --> 


  func:void @lambda_91::operator()(int) const
    arguments:
      %1834 in    arg: 1/int32 - 'p'
      %1837 inout arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'this'

    dwarf:
      operator()(456 - 456)

    body:
      block:1831 - entry
        <-- 
        --> block:1851

      block:1851 - if-predicate
        <-- block:1831
        %1835 temp(0) * 1/int32 INSTA 
        %1836 void ST %1834, %1835
        %1838 temp(0) * 1/int32 'expOpts': INSTA 
        %1839 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %1837, int32{0}, int32{0}
        %1840 temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %1839
        %1841 temp(0) * 1/int32[32] GETELEMPTR %1840, int32{0}, int32{2}
        %1842 1/int32 LD %1835
        %1843 temp(0) * 1/int32 GETELEMPTR %1841, int32{0}, %1842
        %1844 1/int32 LD %1843
        %1845 void ST %1844, %1838
        %1846 1/int32 LD %1838
        %1847 1/int32 CMOV.ne (int32{0}, %1846) int32{1}, int32{0}
        %1848 1/int1 CMP.ne %1847, int32{0}
        %1853 void BRC %1848
        --> block:1849, block:1832

      block:1849 - if-then
        <-- block:1851
        %1854 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1837, int32{0}, int32{1}
        %1855 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1854
        %1856 temp(0) * 4/int32[32] GETELEMPTR %1855, int32{0}, int32{1}
        %1857 1/int32 LD %1835
        %1858 temp(0) * 4/int32 GETELEMPTR %1856, int32{0}, %1857
        %1859 4/int32 LD %1858
        %1860 1/int32 SHUF %1859.x
        %1861 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1837, int32{0}, int32{1}
        %1862 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1861
        %1863 temp(0) * 4/int32[32] GETELEMPTR %1862, int32{0}, int32{1}
        %1864 1/int32 LD %1835
        %1865 temp(0) * 4/int32 GETELEMPTR %1863, int32{0}, %1864
        %1866 4/int32 LD %1865
        %1867 1/int32 SHUF %1866.y
        %1868 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1837, int32{0}, int32{1}
        %1869 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1868
        %1870 temp(0) * 4/int32[32] GETELEMPTR %1869, int32{0}, int32{1}
        %1871 1/int32 LD %1835
        %1872 temp(0) * 4/int32 GETELEMPTR %1870, int32{0}, %1871
        %1873 4/int32 LD %1872
        %1874 1/int32 SHUF %1873.z
        %1875 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1837, int32{0}, int32{1}
        %1876 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1875
        %1877 temp(0) * 4/int32[32] GETELEMPTR %1876, int32{0}, int32{1}
        %1878 1/int32 LD %1835
        %1879 temp(0) * 4/int32 GETELEMPTR %1877, int32{0}, %1878
        %1880 4/int32 LD %1879
        %1881 1/int32 SHUF %1880.w
        %1882 1/int32 LD %1838
        %1883 void intr.EXPORT %1860, %1867, %1874, %1881, %1882, int32{0}
        %1850 void BR 
        --> block:1832

      block:1832
        <-- block:1849, block:1851
        %1833 void BR 
        --> block:1884

      block:1884 - return-block
        <-- block:1832
        %1885 void BR 
        --> block:1830

      block:1830 - exit
        <-- block:1884
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1888 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(463 - 463)

    body:
      block:1890 - entry
        <-- 
        --> block:1891

      block:1891
        <-- block:1890
        %1893 void CALL 'void @lambda_91::operator()(int) const', byval int32{1}, byref %1888
        %2202 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1888
        %1892 void BR 
        --> block:2203

      block:2203 - return-block
        <-- block:1891
        %2204 void BR 
        --> block:1889

      block:1889 - exit
        <-- block:2203
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1895 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(471 - 471)

    body:
      block:1897 - entry
        <-- 
        --> block:1898

      block:1898
        <-- block:1897
        %1900 void CALL 'void @lambda_91::operator()(int) const', byval int32{2}, byref %1895
        %2199 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1895
        %1899 void BR 
        --> block:2200

      block:2200 - return-block
        <-- block:1898
        %2201 void BR 
        --> block:1896

      block:1896 - exit
        <-- block:2200
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1902 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(479 - 479)

    body:
      block:1904 - entry
        <-- 
        --> block:1905

      block:1905
        <-- block:1904
        %1907 void CALL 'void @lambda_91::operator()(int) const', byval int32{3}, byref %1902
        %2196 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1902
        %1906 void BR 
        --> block:2197

      block:2197 - return-block
        <-- block:1905
        %2198 void BR 
        --> block:1903

      block:1903 - exit
        <-- block:2197
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1909 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(487 - 487)

    body:
      block:1911 - entry
        <-- 
        --> block:1912

      block:1912
        <-- block:1911
        %1914 void CALL 'void @lambda_91::operator()(int) const', byval int32{4}, byref %1909
        %2193 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1909
        %1913 void BR 
        --> block:2194

      block:2194 - return-block
        <-- block:1912
        %2195 void BR 
        --> block:1910

      block:1910 - exit
        <-- block:2194
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1916 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(495 - 495)

    body:
      block:1918 - entry
        <-- 
        --> block:1919

      block:1919
        <-- block:1918
        %1921 void CALL 'void @lambda_91::operator()(int) const', byval int32{5}, byref %1916
        %2190 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1916
        %1920 void BR 
        --> block:2191

      block:2191 - return-block
        <-- block:1919
        %2192 void BR 
        --> block:1917

      block:1917 - exit
        <-- block:2191
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1923 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(503 - 503)

    body:
      block:1925 - entry
        <-- 
        --> block:1926

      block:1926
        <-- block:1925
        %1928 void CALL 'void @lambda_91::operator()(int) const', byval int32{6}, byref %1923
        %2187 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1923
        %1927 void BR 
        --> block:2188

      block:2188 - return-block
        <-- block:1926
        %2189 void BR 
        --> block:1924

      block:1924 - exit
        <-- block:2188
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1930 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(511 - 511)

    body:
      block:1932 - entry
        <-- 
        --> block:1933

      block:1933
        <-- block:1932
        %1935 void CALL 'void @lambda_91::operator()(int) const', byval int32{7}, byref %1930
        %2184 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1930
        %1934 void BR 
        --> block:2185

      block:2185 - return-block
        <-- block:1933
        %2186 void BR 
        --> block:1931

      block:1931 - exit
        <-- block:2185
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1937 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(519 - 519)

    body:
      block:1939 - entry
        <-- 
        --> block:1940

      block:1940
        <-- block:1939
        %1942 void CALL 'void @lambda_91::operator()(int) const', byval int32{8}, byref %1937
        %2181 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1937
        %1941 void BR 
        --> block:2182

      block:2182 - return-block
        <-- block:1940
        %2183 void BR 
        --> block:1938

      block:1938 - exit
        <-- block:2182
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1944 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(527 - 527)

    body:
      block:1946 - entry
        <-- 
        --> block:1947

      block:1947
        <-- block:1946
        %1949 void CALL 'void @lambda_91::operator()(int) const', byval int32{9}, byref %1944
        %2178 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1944
        %1948 void BR 
        --> block:2179

      block:2179 - return-block
        <-- block:1947
        %2180 void BR 
        --> block:1945

      block:1945 - exit
        <-- block:2179
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1951 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(535 - 535)

    body:
      block:1953 - entry
        <-- 
        --> block:1954

      block:1954
        <-- block:1953
        %1956 void CALL 'void @lambda_91::operator()(int) const', byval int32{10}, byref %1951
        %2175 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1951
        %1955 void BR 
        --> block:2176

      block:2176 - return-block
        <-- block:1954
        %2177 void BR 
        --> block:1952

      block:1952 - exit
        <-- block:2176
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1958 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(543 - 543)

    body:
      block:1960 - entry
        <-- 
        --> block:1961

      block:1961
        <-- block:1960
        %1963 void CALL 'void @lambda_91::operator()(int) const', byval int32{11}, byref %1958
        %2172 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1958
        %1962 void BR 
        --> block:2173

      block:2173 - return-block
        <-- block:1961
        %2174 void BR 
        --> block:1959

      block:1959 - exit
        <-- block:2173
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1965 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(551 - 551)

    body:
      block:1967 - entry
        <-- 
        --> block:1968

      block:1968
        <-- block:1967
        %1970 void CALL 'void @lambda_91::operator()(int) const', byval int32{12}, byref %1965
        %2169 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1965
        %1969 void BR 
        --> block:2170

      block:2170 - return-block
        <-- block:1968
        %2171 void BR 
        --> block:1966

      block:1966 - exit
        <-- block:2170
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1972 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(559 - 559)

    body:
      block:1974 - entry
        <-- 
        --> block:1975

      block:1975
        <-- block:1974
        %1977 void CALL 'void @lambda_91::operator()(int) const', byval int32{13}, byref %1972
        %2166 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1972
        %1976 void BR 
        --> block:2167

      block:2167 - return-block
        <-- block:1975
        %2168 void BR 
        --> block:1973

      block:1973 - exit
        <-- block:2167
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1979 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(567 - 567)

    body:
      block:1981 - entry
        <-- 
        --> block:1982

      block:1982
        <-- block:1981
        %1984 void CALL 'void @lambda_91::operator()(int) const', byval int32{14}, byref %1979
        %2163 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1979
        %1983 void BR 
        --> block:2164

      block:2164 - return-block
        <-- block:1982
        %2165 void BR 
        --> block:1980

      block:1980 - exit
        <-- block:2164
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1986 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(575 - 575)

    body:
      block:1988 - entry
        <-- 
        --> block:1989

      block:1989
        <-- block:1988
        %1991 void CALL 'void @lambda_91::operator()(int) const', byval int32{15}, byref %1986
        %2160 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1986
        %1990 void BR 
        --> block:2161

      block:2161 - return-block
        <-- block:1989
        %2162 void BR 
        --> block:1987

      block:1987 - exit
        <-- block:2161
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1993 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(583 - 583)

    body:
      block:1995 - entry
        <-- 
        --> block:1996

      block:1996
        <-- block:1995
        %1998 void CALL 'void @lambda_91::operator()(int) const', byval int32{16}, byref %1993
        %2157 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1993
        %1997 void BR 
        --> block:2158

      block:2158 - return-block
        <-- block:1996
        %2159 void BR 
        --> block:1994

      block:1994 - exit
        <-- block:2158
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2000 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(591 - 591)

    body:
      block:2002 - entry
        <-- 
        --> block:2003

      block:2003
        <-- block:2002
        %2005 void CALL 'void @lambda_91::operator()(int) const', byval int32{17}, byref %2000
        %2154 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2000
        %2004 void BR 
        --> block:2155

      block:2155 - return-block
        <-- block:2003
        %2156 void BR 
        --> block:2001

      block:2001 - exit
        <-- block:2155
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2007 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(599 - 599)

    body:
      block:2009 - entry
        <-- 
        --> block:2010

      block:2010
        <-- block:2009
        %2012 void CALL 'void @lambda_91::operator()(int) const', byval int32{18}, byref %2007
        %2151 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2007
        %2011 void BR 
        --> block:2152

      block:2152 - return-block
        <-- block:2010
        %2153 void BR 
        --> block:2008

      block:2008 - exit
        <-- block:2152
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2014 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(607 - 607)

    body:
      block:2016 - entry
        <-- 
        --> block:2017

      block:2017
        <-- block:2016
        %2019 void CALL 'void @lambda_91::operator()(int) const', byval int32{19}, byref %2014
        %2148 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2014
        %2018 void BR 
        --> block:2149

      block:2149 - return-block
        <-- block:2017
        %2150 void BR 
        --> block:2015

      block:2015 - exit
        <-- block:2149
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2021 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(615 - 615)

    body:
      block:2023 - entry
        <-- 
        --> block:2024

      block:2024
        <-- block:2023
        %2026 void CALL 'void @lambda_91::operator()(int) const', byval int32{20}, byref %2021
        %2145 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2021
        %2025 void BR 
        --> block:2146

      block:2146 - return-block
        <-- block:2024
        %2147 void BR 
        --> block:2022

      block:2022 - exit
        <-- block:2146
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2028 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(623 - 623)

    body:
      block:2030 - entry
        <-- 
        --> block:2031

      block:2031
        <-- block:2030
        %2033 void CALL 'void @lambda_91::operator()(int) const', byval int32{21}, byref %2028
        %2142 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2028
        %2032 void BR 
        --> block:2143

      block:2143 - return-block
        <-- block:2031
        %2144 void BR 
        --> block:2029

      block:2029 - exit
        <-- block:2143
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2035 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(631 - 631)

    body:
      block:2037 - entry
        <-- 
        --> block:2038

      block:2038
        <-- block:2037
        %2040 void CALL 'void @lambda_91::operator()(int) const', byval int32{22}, byref %2035
        %2139 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2035
        %2039 void BR 
        --> block:2140

      block:2140 - return-block
        <-- block:2038
        %2141 void BR 
        --> block:2036

      block:2036 - exit
        <-- block:2140
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2042 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(639 - 639)

    body:
      block:2044 - entry
        <-- 
        --> block:2045

      block:2045
        <-- block:2044
        %2047 void CALL 'void @lambda_91::operator()(int) const', byval int32{23}, byref %2042
        %2136 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2042
        %2046 void BR 
        --> block:2137

      block:2137 - return-block
        <-- block:2045
        %2138 void BR 
        --> block:2043

      block:2043 - exit
        <-- block:2137
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2049 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(647 - 647)

    body:
      block:2051 - entry
        <-- 
        --> block:2052

      block:2052
        <-- block:2051
        %2054 void CALL 'void @lambda_91::operator()(int) const', byval int32{24}, byref %2049
        %2133 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2049
        %2053 void BR 
        --> block:2134

      block:2134 - return-block
        <-- block:2052
        %2135 void BR 
        --> block:2050

      block:2050 - exit
        <-- block:2134
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2056 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(655 - 655)

    body:
      block:2058 - entry
        <-- 
        --> block:2059

      block:2059
        <-- block:2058
        %2061 void CALL 'void @lambda_91::operator()(int) const', byval int32{25}, byref %2056
        %2130 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2056
        %2060 void BR 
        --> block:2131

      block:2131 - return-block
        <-- block:2059
        %2132 void BR 
        --> block:2057

      block:2057 - exit
        <-- block:2131
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2063 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(663 - 663)

    body:
      block:2065 - entry
        <-- 
        --> block:2066

      block:2066
        <-- block:2065
        %2068 void CALL 'void @lambda_91::operator()(int) const', byval int32{26}, byref %2063
        %2127 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2063
        %2067 void BR 
        --> block:2128

      block:2128 - return-block
        <-- block:2066
        %2129 void BR 
        --> block:2064

      block:2064 - exit
        <-- block:2128
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2070 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(671 - 671)

    body:
      block:2072 - entry
        <-- 
        --> block:2073

      block:2073
        <-- block:2072
        %2075 void CALL 'void @lambda_91::operator()(int) const', byval int32{27}, byref %2070
        %2124 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2070
        %2074 void BR 
        --> block:2125

      block:2125 - return-block
        <-- block:2073
        %2126 void BR 
        --> block:2071

      block:2071 - exit
        <-- block:2125
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2077 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(679 - 679)

    body:
      block:2079 - entry
        <-- 
        --> block:2080

      block:2080
        <-- block:2079
        %2082 void CALL 'void @lambda_91::operator()(int) const', byval int32{28}, byref %2077
        %2121 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2077
        %2081 void BR 
        --> block:2122

      block:2122 - return-block
        <-- block:2080
        %2123 void BR 
        --> block:2078

      block:2078 - exit
        <-- block:2122
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2084 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(687 - 687)

    body:
      block:2086 - entry
        <-- 
        --> block:2087

      block:2087
        <-- block:2086
        %2089 void CALL 'void @lambda_91::operator()(int) const', byval int32{29}, byref %2084
        %2118 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2084
        %2088 void BR 
        --> block:2119

      block:2119 - return-block
        <-- block:2087
        %2120 void BR 
        --> block:2085

      block:2085 - exit
        <-- block:2119
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2091 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(695 - 695)

    body:
      block:2093 - entry
        <-- 
        --> block:2094

      block:2094
        <-- block:2093
        %2096 void CALL 'void @lambda_91::operator()(int) const', byval int32{30}, byref %2091
        %2115 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2091
        %2095 void BR 
        --> block:2116

      block:2116 - return-block
        <-- block:2094
        %2117 void BR 
        --> block:2092

      block:2092 - exit
        <-- block:2116
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2098 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(703 - 703)

    body:
      block:2100 - entry
        <-- 
        --> block:2101

      block:2101
        <-- block:2100
        %2103 void CALL 'void @lambda_91::operator()(int) const', byval int32{31}, byref %2098
        %2112 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2098
        %2102 void BR 
        --> block:2113

      block:2113 - return-block
        <-- block:2101
        %2114 void BR 
        --> block:2099

      block:2099 - exit
        <-- block:2113
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2105 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(711 - 711)

    body:
      block:2107 - entry
        <-- 
        --> block:2108

      block:2108
        <-- block:2107
        %2109 void BR 
        --> block:2110

      block:2110 - return-block
        <-- block:2108
        %2111 void BR 
        --> block:2106

      block:2106 - exit
        <-- block:2110
        --> 


  func:void __cull_func_prepare_vertex(Ngg::NggCtx, float4, uint)
    arguments:
      %2653 in    arg: temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %2654 in    arg: 4/fp32 - 'pos'
      %2657 in    arg: 1/int32 - 'eye'

    dwarf:
      __cull_func_prepare_vertex(726 - 726)

    body:
      block:2650 - entry
        <-- 
        --> block:2768

      block:2768 - if-predicate
        <-- block:2650
        %2655 temp(0) * 4/fp32 INSTA 
        %2656 void ST %2654, %2655
        %2658 temp(0) * 1/int32 INSTA 
        %2659 void ST %2657, %2658
        %2660 temp(0) * 1/int32 'nggData': INSTA 
        %2717 void CALL 'uint __get_gs_flags()', byref %2660
        %2718 temp(0) * 1/int32 'ogl_clip_space': INSTA 
        %2719 1/int32 LD %2660
        %2720 1/int32 AND %2719, int32{8}
        %2721 1/int32 CMOV.ne (int32{0}, %2720) int32{1}, int32{0}
        %2722 void ST %2721, %2718
        %2723 temp(0) * 1/int32 'clip_x_pos': INSTA 
        %2724 4/fp32 LD %2655
        %2725 1/fp32 SHUF %2724.x
        %2726 4/fp32 LD %2655
        %2727 1/fp32 SHUF %2726.w
        %2728 1/int32 CMOV.fle (%2725, %2727) int32{1}, int32{0}
        %2729 void ST %2728, %2723
        %2730 temp(0) * 1/int32 'clip_y_pos': INSTA 
        %2731 4/fp32 LD %2655
        %2732 1/fp32 SHUF %2731.y
        %2733 4/fp32 LD %2655
        %2734 1/fp32 SHUF %2733.w
        %2735 1/int32 CMOV.fle (%2732, %2734) int32{1}, int32{0}
        %2736 void ST %2735, %2730
        %2737 temp(0) * 1/int32 'clip_z_pos': INSTA 
        %2738 4/fp32 LD %2655
        %2739 1/fp32 SHUF %2738.z
        %2740 4/fp32 LD %2655
        %2741 1/fp32 SHUF %2740.w
        %2742 1/int32 CMOV.fle (%2739, %2741) int32{1}, int32{0}
        %2743 void ST %2742, %2737
        %2744 temp(0) * 1/int32 'clip_x_neg': INSTA 
        %2745 4/fp32 LD %2655
        %2746 1/fp32 SHUF %2745.w
        %2747 1/fp32 NEG %2746
        %2748 4/fp32 LD %2655
        %2749 1/fp32 SHUF %2748.x
        %2750 1/int32 CMOV.fge (%2749, %2747) int32{1}, int32{0}
        %2751 void ST %2750, %2744
        %2752 temp(0) * 1/int32 'clip_y_neg': INSTA 
        %2753 4/fp32 LD %2655
        %2754 1/fp32 SHUF %2753.w
        %2755 1/fp32 NEG %2754
        %2756 4/fp32 LD %2655
        %2757 1/fp32 SHUF %2756.y
        %2758 1/int32 CMOV.fge (%2757, %2755) int32{1}, int32{0}
        %2759 void ST %2758, %2752
        %2760 temp(0) * 1/int32 'clip_z_neg': INSTA 
        %2761 1/int32 LD %2718
        %2762 temp(0) * 1/fp32 INSTA 
        %2763 1/int1 CMP.ne %2761, int32{0}
        %2770 void BRC %2763
        --> block:2766, block:2764

      block:2764 - if-else
        <-- block:2768
        %2776 void ST fp32{0.0}, %2762
        %2765 void BR 
        --> block:2651

      block:2766 - if-then
        <-- block:2768
        %2771 4/fp32 LD %2655
        %2772 1/fp32 SHUF %2771.w
        %2773 1/fp32 NEG %2772
        %2774 void ST %2773, %2762
        %2767 void BR 
        --> block:2651

      block:2651
        <-- block:2764, block:2766
        %2777 4/fp32 LD %2655
        %2778 1/fp32 SHUF %2777.z
        %2779 1/fp32 LD %2762
        %2780 1/int32 CMOV.fge (%2778, %2779) int32{1}, int32{0}
        %2781 void ST %2780, %2760
        %2782 temp(0) * 1/int32 'flags': INSTA 
        %2784 1/int32 LD %2723
        %2785 1/int32 SHL %2784, int32{0}
        %2786 1/int32 LD %2730
        %2787 1/int32 SHL %2786, int32{1}
        %2788 1/int32 OR %2785, %2787
        %2789 1/int32 LD %2737
        %2790 1/int32 SHL %2789, int32{2}
        %2791 1/int32 OR %2788, %2790
        %2792 1/int32 LD %2744
        %2793 1/int32 SHL %2792, int32{3}
        %2794 1/int32 OR %2791, %2793
        %2795 1/int32 LD %2752
        %2796 1/int32 SHL %2795, int32{4}
        %2797 1/int32 OR %2794, %2796
        %2798 1/int32 LD %2760
        %2799 1/int32 SHL %2798, int32{5}
        %2800 1/int32 OR %2797, %2799
        %2801 1/int32 XOR int32{63}, %2800
        %2802 void ST %2801, %2782
        %2803 temp(0) * 1/int32 'wneg': INSTA 
        %2805 4/fp32 LD %2655
        %2806 1/fp32 SHUF %2805.w
        %2807 1/int32 CMOV.flt (%2806, fp32{0.0}) int32{1}, int32{0}
        %2808 void ST %2807, %2803
        %2809 4/fp32 LD %2655
        %2810 1/fp32 SHUF %2809.w
        %2811 2/fp32 SHUF %2810.xx
        %2812 4/fp32 LD %2655
        %2813 2/fp32 SHUF %2812.xy
        %2814 2/fp32 FDIV %2813, %2811
        %2815 1/int32 LD %2782
        %2816 1/fp32 CONV_reinterp %2815
        %2817 1/int32 LD %2803
        %2818 1/fp32 CONV_reinterp %2817
        %2819 4/fp32 SHUF %2814.xy--,  %2816.--x-,  %2818.---x
        %2820 1/int32 LD %2658
        %2821 lds(0) * 4/fp32[256] GETELEMPTR %106, int32{0}, %2820
        %2822 temp(0) * 1/int32 GETELEMPTR %2653, int32{0}, int32{3}
        %2823 1/int32 LD %2822
        %2824 lds(0) * 4/fp32 GETELEMPTR %2821, int32{0}, %2823
        %2825 void ST %2819, %2824
        %2652 void BR 
        --> block:2826

      block:2826 - return-block
        <-- block:2651
        %2827 void BR 
        --> block:2649

      block:2649 - exit
        <-- block:2826
        --> 


  func:uint __get_gs_flags()
    arguments:
      %2662 out   arg: temp(0) * 1/int32 - '__get_gs_flags'

    dwarf:
      __get_gs_flags(728 - 728)

    body:
      block:2664 - entry
        <-- 
        --> block:2681

      block:2681 - if-predicate
        <-- block:2664
        %2667 temp(0) * 1/int32 'options': INSTA 
        %2668 temp(0) * 1/int32 INSTA 
        %2669 1/int32 intr.get_ngg_options 
        %2670 void ST int32{545}, %2668
        %2671 1/int32 LD %2668
        %2672 void ST %2671, %2667
        %2673 1/int32 LD %2667
        %2674 1/int32 AND int32{256}, %2673
        %2675 1/int32 CMOV.ne (int32{0}, %2674) int32{1}, int32{0}
        %2676 1/int1 CMP.ne %2675, int32{0}
        %2683 void BRC %2676
        --> block:2690, block:2701

      block:2701 - if-predicate
        <-- block:2681
        %2693 1/int32 LD %2667
        %2694 1/int32 AND int32{2048}, %2693
        %2695 1/int32 CMOV.ne (int32{0}, %2694) int32{1}, int32{0}
        %2696 1/int1 CMP.ne %2695, int32{0}
        %2703 void BRC %2696
        --> block:2708, block:2715

      block:2715
        <-- block:2701
        %2710 temp(0) * 1/int32 INSTA 
        %2711 1/int32 intr.READ_SHADER_INPUT int32{21}, int32{0}
        %2712 void ST %2711, %2710
        %2713 1/int32 LD %2710
        %2714 void ST %2713, %2662
        %2716 void BR 
        --> block:2663

      block:2708
        <-- block:2701
        %2704 1/int32 LD %2667
        %2705 1/int32 LSHR %2704, int32{16}
        %2706 1/int32 AND %2705, int32{31}
        %2707 void ST %2706, %2662
        %2709 void BR 
        --> block:2663

      block:2690
        <-- block:2681
        %2685 temp(0) * 1/int32 INSTA 
        %2686 1/int32 intr.READSPECIALSCALARREG int32{77} 's_gs_user_data_addr_lo'
        %2687 void ST %2686, %2685
        %2688 1/int32 LD %2685
        %2689 void ST %2688, %2662
        %2691 void BR 
        --> block:2663

      block:2663 - exit
        <-- block:2690, block:2708, block:2715
        --> 


  func:bool __require_stdlib_stereo_culling()
    arguments:
      %2831 out   arg: temp(0) * 1/int32 - '__require_stdlib_stereo_culling'

    dwarf:
      __require_stdlib_stereo_culling(768 - 768)

    body:
      block:2833 - entry
        <-- 
        --> block:2847

      block:2847 - if-predicate
        <-- block:2833
        %2836 temp(0) * 1/int32 'stereomode': INSTA 
        %2837 temp(0) * 1/int32 INSTA 
        %2838 1/int32 intr.get_stereo_mode 
        %2839 void ST int32{0}, %2837
        %2840 1/int32 LD %2837
        %2841 void ST %2840, %2836
        %2842 1/int32 LD %2836
        %2843 1/int32 CMOV.eq (%2842, int32{0}) int32{1}, int32{0}
        %2844 1/int1 CMP.ne %2843, int32{0}
        %2849 void BRC %2844
        --> block:2851, block:2877

      block:2877 - if-predicate
        <-- block:2847
        %2853 temp(0) * 1/int32 'options': INSTA 
        %2854 temp(0) * 1/int32 INSTA 
        %2855 1/int32 intr.get_ngg_options 
        %2856 void ST int32{545}, %2854
        %2857 1/int32 LD %2854
        %2858 void ST %2857, %2853
        %2859 temp(0) * 1/int32 'enableCulling': INSTA 
        %2860 1/int32 LD %2853
        %2861 1/int32 AND %2860, int32{2}
        %2862 1/int32 CMOV.ne (int32{0}, %2861) int32{1}, int32{0}
        %2863 void ST %2862, %2859
        %2864 temp(0) * 1/int32 'useStdlibCulling': INSTA 
        %2865 1/int32 LD %2853
        %2866 1/int32 AND %2865, int32{128}
        %2867 1/int32 CMOV.ne (int32{0}, %2866) int32{1}, int32{0}
        %2868 void ST %2867, %2864
        %2869 1/int32 LD %2859
        %2870 1/int32 CMOV.eq (%2869, int32{0}) int32{1}, int32{0}
        %2871 1/int32 LD %2864
        %2872 1/int32 CMOV.eq (%2871, int32{0}) int32{1}, int32{0}
        %2873 1/int32 OR %2870, %2872
        %2874 1/int1 CMP.ne %2873, int32{0}
        %2879 void BRC %2874
        --> block:2881, block:2889

      block:2889
        <-- block:2877
        %2883 temp(0) * 1/int32 'nggData': INSTA 
        %2884 void CALL 'uint __get_gs_flags()', byref %2883
        %2885 1/int32 LD %2883
        %2886 1/int32 AND %2885, int32{16}
        %2887 1/int32 CMOV.ne (int32{0}, %2886) int32{1}, int32{0}
        %2888 void ST %2887, %2831
        %2890 void BR 
        --> block:2832

      block:2881
        <-- block:2877
        %2880 void ST int32{0}, %2831
        %2882 void BR 
        --> block:2832

      block:2851
        <-- block:2847
        %2850 void ST int32{0}, %2831
        %2852 void BR 
        --> block:2832

      block:2832 - exit
        <-- block:2851, block:2881, block:2889
        --> 


  func:float4 __get_right_eye_position(Ngg::NggVsConfig const&, Ngg::NggVsOutput const&)
    arguments:
      %2907 in    arg: generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'
      %2910 in    arg: generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} - 'vsOutput'
      %2913 out   arg: temp(0) * 4/fp32 - '__get_right_eye_position'

    dwarf:
      __get_right_eye_position(782 - 782)

    body:
      block:2904 - entry
        <-- 
        --> block:2931

      block:2931 - if-predicate
        <-- block:2904
        %2908 temp(0) * generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} INSTA 
        %2909 void ST %2907, %2908
        %2911 temp(0) * generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %2912 void ST %2910, %2911
        %2914 temp(0) * 1/int32 'stereomode': INSTA 
        %2915 temp(0) * 1/int32 INSTA 
        %2916 1/int32 intr.get_stereo_mode 
        %2917 void ST int32{0}, %2915
        %2918 1/int32 LD %2915
        %2919 void ST %2918, %2914
        %2920 1/int32 LD %2914
        %2921 1/int32 CMOV.ne (%2920, int32{0}) int32{1}, int32{0}
        %2923 void intr.OUTPUT_ERROR %2921, "error: calling __get_right_eye_position with stereomode == kStereoModeOff" has_side_effects pinned
        %2924 1/int32 LD %2914
        %2925 1/int32 CMOV.eq (%2924, int32{1}) int32{1}, int32{0}
        %2926 1/int1 CMP.ne %2925, int32{0}
        %2933 void BRC %2926
        --> block:2946, block:3019

      block:3019 - if-predicate
        <-- block:2931
        %3012 1/int32 LD %2914
        %3013 1/int32 CMOV.eq (%3012, int32{2}) int32{1}, int32{0}
        %3014 1/int1 CMP.ne %3013, int32{0}
        %3021 void BRC %3014
        --> block:3040, block:3049

      block:3049 - if-predicate
        <-- block:3019
        %3042 1/int32 LD %2914
        %3043 1/int32 CMOV.eq (%3042, int32{3}) int32{1}, int32{0}
        %3044 1/int1 CMP.ne %3043, int32{0}
        %3051 void BRC %3044
        --> block:3073, block:3045

      block:3045 - if-else
        <-- block:3049
        %3076 void intr.OUTPUT_ERROR int32{0}, "error: invalid stereo mode" has_side_effects pinned
        %3046 void BR 
        --> block:3015

      block:3015 - if-else
        <-- block:3045
        %3016 void BR 
        --> block:2927

      block:2927 - if-else
        <-- block:3015
        %2928 void BR 
        --> block:3079

      block:3079
        <-- block:2927
        %3077 4/fp32 SHUF fp32{0.0}.xxxx
        %3078 void ST %3077, %2913
        %3080 void BR 
        --> block:2903

      block:3073
        <-- block:3049
        %3052 temp(0) * 4/fp32 'p0': INSTA 
        %3053 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2911
        %3054 generic(0) * 4/fp32[5] GETELEMPTR %3053, int32{0}, int32{0}
        %3055 generic(0) * 4/fp32 GETELEMPTR %3054, int32{0}, int32{0}
        %3056 4/fp32 LD %3055
        %3057 void ST %3056, %3052
        %3058 temp(0) * 1/fp32 'xo': INSTA 
        %3059 temp(0) * 1/int32 INSTA 
        %3060 1/int32 intr.READ_SHADER_INPUT int32{22}, int32{0}
        %3061 void ST %3060, %3059
        %3062 1/int32 LD %3059
        %3063 1/fp32 CONV_reinterp %3062
        %3064 void ST %3063, %3058
        %3065 4/fp32 LD %3052
        %3066 1/fp32 SHUF %3065.x
        %3067 1/fp32 LD %3058
        %3068 1/fp32 ADD %3066, %3067
        %3069 4/fp32 LD %3052
        %3070 3/fp32 SHUF %3069.yzw
        %3071 4/fp32 SHUF %3068.x---,  %3070.-xyz
        %3072 void ST %3071, %2913
        %3074 void BR 
        --> block:2903

      block:3040
        <-- block:3019
        %3022 temp(0) * 4/fp32 'p0': INSTA 
        %3023 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2911
        %3024 generic(0) * 4/fp32[5] GETELEMPTR %3023, int32{0}, int32{0}
        %3025 generic(0) * 4/fp32 GETELEMPTR %3024, int32{0}, int32{0}
        %3026 4/fp32 LD %3025
        %3027 void ST %3026, %3022
        %3028 temp(0) * 4/fp32 'p1': INSTA 
        %3029 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2911
        %3030 generic(0) * 4/fp32[5] GETELEMPTR %3029, int32{0}, int32{0}
        %3031 generic(0) * 4/fp32 GETELEMPTR %3030, int32{0}, int32{1}
        %3032 4/fp32 LD %3031
        %3033 void ST %3032, %3028
        %3034 4/fp32 LD %3028
        %3035 1/fp32 SHUF %3034.w
        %3036 4/fp32 LD %3022
        %3037 3/fp32 SHUF %3036.yzw
        %3038 4/fp32 SHUF %3035.x---,  %3037.-xyz
        %3039 void ST %3038, %2913
        %3041 void BR 
        --> block:2903

      block:2946 - if-predicate
        <-- block:2931
        %2934 temp(0) * 1/int32 'lastIndex': INSTA 
        %2935 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %2908
        %2936 generic(0) * 1/int32[5] GETELEMPTR %2935, int32{0}, int32{1}
        %2937 generic(0) * 1/int32 GETELEMPTR %2936, int32{0}, int32{4}
        %2938 1/int32 LD %2937
        %2939 1/int32 CMOV.ne (int32{0}, %2938) int32{1}, int32{0}
        %2940 temp(0) * 1/int32 INSTA 
        %2941 1/int1 CMP.ne %2939, int32{0}
        %2948 void BRC %2941
        --> block:2944, block:2961

      block:2961 - if-predicate
        <-- block:2946
        %2950 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %2908
        %2951 generic(0) * 1/int32[5] GETELEMPTR %2950, int32{0}, int32{1}
        %2952 generic(0) * 1/int32 GETELEMPTR %2951, int32{0}, int32{3}
        %2953 1/int32 LD %2952
        %2954 1/int32 CMOV.ne (int32{0}, %2953) int32{1}, int32{0}
        %2955 temp(0) * 1/int32 INSTA 
        %2956 1/int1 CMP.ne %2954, int32{0}
        %2963 void BRC %2956
        --> block:2959, block:2976

      block:2976 - if-predicate
        <-- block:2961
        %2965 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %2908
        %2966 generic(0) * 1/int32[5] GETELEMPTR %2965, int32{0}, int32{1}
        %2967 generic(0) * 1/int32 GETELEMPTR %2966, int32{0}, int32{2}
        %2968 1/int32 LD %2967
        %2969 1/int32 CMOV.ne (int32{0}, %2968) int32{1}, int32{0}
        %2970 temp(0) * 1/int32 INSTA 
        %2971 1/int1 CMP.ne %2969, int32{0}
        %2978 void BRC %2971
        --> block:2974, block:2991

      block:2991 - if-predicate
        <-- block:2976
        %2980 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %2908
        %2981 generic(0) * 1/int32[5] GETELEMPTR %2980, int32{0}, int32{1}
        %2982 generic(0) * 1/int32 GETELEMPTR %2981, int32{0}, int32{1}
        %2983 1/int32 LD %2982
        %2984 1/int32 CMOV.ne (int32{0}, %2983) int32{1}, int32{0}
        %2985 temp(0) * 1/int32 INSTA 
        %2986 1/int1 CMP.ne %2984, int32{0}
        %2993 void BRC %2986
        --> block:2989, block:2987

      block:2987 - if-else
        <-- block:2991
        %2995 void ST int32{0}, %2985
        %2988 void BR 
        --> block:2972

      block:2989 - if-then
        <-- block:2991
        %2994 void ST int32{1}, %2985
        %2990 void BR 
        --> block:2972

      block:2972 - if-else
        <-- block:2987, block:2989
        %2996 1/int32 LD %2985
        %2997 void ST %2996, %2970
        %2973 void BR 
        --> block:2957

      block:2974 - if-then
        <-- block:2976
        %2979 void ST int32{2}, %2970
        %2975 void BR 
        --> block:2957

      block:2957 - if-else
        <-- block:2972, block:2974
        %2998 1/int32 LD %2970
        %2999 void ST %2998, %2955
        %2958 void BR 
        --> block:2942

      block:2959 - if-then
        <-- block:2961
        %2964 void ST int32{3}, %2955
        %2960 void BR 
        --> block:2942

      block:2942 - if-else
        <-- block:2957, block:2959
        %3000 1/int32 LD %2955
        %3001 void ST %3000, %2940
        %2943 void BR 
        --> block:3010

      block:2944 - if-then
        <-- block:2946
        %2949 void ST int32{4}, %2940
        %2945 void BR 
        --> block:3010

      block:3010
        <-- block:2942, block:2944
        %3002 1/int32 LD %2940
        %3003 void ST %3002, %2934
        %3004 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2911
        %3005 generic(0) * 4/fp32[5] GETELEMPTR %3004, int32{0}, int32{0}
        %3006 1/int32 LD %2934
        %3007 generic(0) * 4/fp32 GETELEMPTR %3005, int32{0}, %3006
        %3008 4/fp32 LD %3007
        %3009 void ST %3008, %2913
        %3011 void BR 
        --> block:2903

      block:2903 - exit
        <-- block:3010, block:3040, block:3073, block:3079
        --> 


  func:bool __cull_func_stdlib(Ngg::NggCtx, uint)
    arguments:
      %3128 in    arg: temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %3129 in    arg: 1/int32 - 'eye'
      %3132 out   arg: temp(0) * 1/int32 - '__cull_func_stdlib'

    dwarf:
      __cull_func_stdlib(796 - 796)

    body:
      block:3125 - entry
        <-- 
        --> block:3303

      block:3303 - if-predicate
        <-- block:3125
        %3130 temp(0) * 1/int32 INSTA 
        %3131 void ST %3129, %3130
        %3133 temp(0) * 1/int32 'nggData': INSTA 
        %3134 void CALL 'uint __get_gs_flags()', byref %3133
        %3135 temp(0) * 1/int32 'cullFront': INSTA 
        %3136 1/int32 LD %3133
        %3137 1/int32 AND %3136, int32{1}
        %3138 1/int32 CMOV.ne (int32{0}, %3137) int32{1}, int32{0}
        %3139 void ST %3138, %3135
        %3140 temp(0) * 1/int32 'cullBack': INSTA 
        %3141 1/int32 LD %3133
        %3142 1/int32 AND %3141, int32{2}
        %3143 1/int32 CMOV.ne (int32{0}, %3142) int32{1}, int32{0}
        %3144 void ST %3143, %3140
        %3145 temp(0) * 1/int32 'offscreenCheck': INSTA 
        %3146 1/int32 LD %3133
        %3147 1/int32 AND %3146, int32{4}
        %3148 1/int32 CMOV.ne (int32{0}, %3147) int32{1}, int32{0}
        %3149 void ST %3148, %3145
        %3150 temp(0) * 4/fp32 'pc0': INSTA 
        %3151 1/int32 LD %3130
        %3152 lds(0) * 4/fp32[256] GETELEMPTR %106, int32{0}, %3151
        %3153 temp(0) * 1/int32[6] GETELEMPTR %3128, int32{0}, int32{9}
        %3154 temp(0) * 1/int32 GETELEMPTR %3153, int32{0}, int32{0}
        %3155 1/int32 LD %3154
        %3156 lds(0) * 4/fp32 GETELEMPTR %3152, int32{0}, %3155
        %3157 4/fp32 LD %3156
        %3158 void ST %3157, %3150
        %3159 temp(0) * 4/fp32 'pc1': INSTA 
        %3160 1/int32 LD %3130
        %3161 lds(0) * 4/fp32[256] GETELEMPTR %106, int32{0}, %3160
        %3162 temp(0) * 1/int32[6] GETELEMPTR %3128, int32{0}, int32{9}
        %3163 temp(0) * 1/int32 GETELEMPTR %3162, int32{0}, int32{1}
        %3164 1/int32 LD %3163
        %3165 lds(0) * 4/fp32 GETELEMPTR %3161, int32{0}, %3164
        %3166 4/fp32 LD %3165
        %3167 void ST %3166, %3159
        %3168 temp(0) * 4/fp32 'pc2': INSTA 
        %3169 1/int32 LD %3130
        %3170 lds(0) * 4/fp32[256] GETELEMPTR %106, int32{0}, %3169
        %3171 temp(0) * 1/int32[6] GETELEMPTR %3128, int32{0}, int32{9}
        %3172 temp(0) * 1/int32 GETELEMPTR %3171, int32{0}, int32{2}
        %3173 1/int32 LD %3172
        %3174 lds(0) * 4/fp32 GETELEMPTR %3170, int32{0}, %3173
        %3175 4/fp32 LD %3174
        %3176 void ST %3175, %3168
        %3177 temp(0) * 3/int32 'clip_flags': INSTA 
        %3178 4/fp32 LD %3150
        %3179 1/fp32 SHUF %3178.z
        %3180 4/fp32 LD %3159
        %3181 1/fp32 SHUF %3180.z
        %3182 4/fp32 LD %3168
        %3183 1/fp32 SHUF %3182.z
        %3184 3/fp32 SHUF %3179.x--,  %3181.-x-,  %3183.--x
        %3185 3/int32 CONV_reinterp %3184
        %3186 void ST %3185, %3177
        %3187 temp(0) * 3/int32 'negw': INSTA 
        %3188 4/fp32 LD %3150
        %3189 1/fp32 SHUF %3188.w
        %3190 4/fp32 LD %3159
        %3191 1/fp32 SHUF %3190.w
        %3192 4/fp32 LD %3168
        %3193 1/fp32 SHUF %3192.w
        %3194 3/fp32 SHUF %3189.x--,  %3191.-x-,  %3193.--x
        %3195 3/int32 CONV_reinterp %3194
        %3196 void ST %3195, %3187
        %3197 temp(0) * 1/int32 'determinat_reflect': INSTA 
        %3198 3/int32 LD %3187
        %3199 1/int32 SHUF %3198.x
        %3200 3/int32 LD %3187
        %3201 1/int32 SHUF %3200.y
        %3202 1/int32 XOR %3199, %3201
        %3203 3/int32 LD %3187
        %3204 1/int32 SHUF %3203.z
        %3205 1/int32 XOR %3202, %3204
        %3206 void ST %3205, %3197
        %3207 temp(0) * 1/int32 'clip_flags_and': INSTA 
        %3208 3/int32 LD %3177
        %3209 1/int32 SHUF %3208.x
        %3210 3/int32 LD %3177
        %3211 1/int32 SHUF %3210.y
        %3212 1/int32 AND %3209, %3211
        %3213 3/int32 LD %3177
        %3214 1/int32 SHUF %3213.z
        %3215 1/int32 AND %3212, %3214
        %3216 void ST %3215, %3207
        %3217 temp(0) * 1/int32 'fullyOutside': INSTA 
        %3218 1/int32 LD %3207
        %3219 1/int32 CMOV.ne (int32{0}, %3218) int32{1}, int32{0}
        %3220 1/int32 LD %3145
        %3221 1/int32 AND %3220, %3219
        %3222 void ST %3221, %3217
        %3223 temp(0) * 1/int32 'clip_flags_or': INSTA 
        %3224 3/int32 LD %3177
        %3225 1/int32 SHUF %3224.x
        %3226 3/int32 LD %3177
        %3227 1/int32 SHUF %3226.y
        %3228 1/int32 OR %3225, %3227
        %3229 3/int32 LD %3177
        %3230 1/int32 SHUF %3229.z
        %3231 1/int32 OR %3228, %3230
        %3232 void ST %3231, %3223
        %3233 temp(0) * 1/int32 'znear_clip': INSTA 
        %3235 1/int32 LD %3223
        %3236 1/int32 AND %3235, int32{32}
        %3237 1/int32 CMOV.ne (int32{0}, %3236) int32{1}, int32{0}
        %3238 void ST %3237, %3233
        %3239 temp(0) * 2/fp32[3] 'proj_pos': INSTA 
        %3240 temp(0) * 2/fp32 GETELEMPTR %3239, int32{0}, int32{0}
        %3241 4/fp32 LD %3150
        %3242 2/fp32 SHUF %3241.xy
        %3243 void ST %3242, %3240
        %3244 temp(0) * 2/fp32 GETELEMPTR %3239, int32{0}, int32{1}
        %3245 4/fp32 LD %3159
        %3246 2/fp32 SHUF %3245.xy
        %3247 void ST %3246, %3244
        %3248 temp(0) * 2/fp32 GETELEMPTR %3239, int32{0}, int32{2}
        %3249 4/fp32 LD %3168
        %3250 2/fp32 SHUF %3249.xy
        %3251 void ST %3250, %3248
        %3252 temp(0) * 2/fp32 'vtx0': INSTA 
        %3253 temp(0) * 2/fp32 GETELEMPTR %3239, int32{0}, int32{0}
        %3254 2/fp32 LD %3253
        %3255 void ST %3254, %3252
        %3256 temp(0) * 2/fp32 'vtx1': INSTA 
        %3257 temp(0) * 2/fp32 GETELEMPTR %3239, int32{0}, int32{1}
        %3258 2/fp32 LD %3257
        %3259 void ST %3258, %3256
        %3260 temp(0) * 2/fp32 'vtx2': INSTA 
        %3261 temp(0) * 2/fp32 GETELEMPTR %3239, int32{0}, int32{2}
        %3262 2/fp32 LD %3261
        %3263 void ST %3262, %3260
        %3264 temp(0) * 2/fp32 'delta_10': INSTA 
        %3265 2/fp32 LD %3256
        %3266 2/fp32 LD %3252
        %3267 2/fp32 NEG %3266
        %3268 2/fp32 ADD %3265, %3267
        %3269 void ST %3268, %3264
        %3270 temp(0) * 2/fp32 'delta_20': INSTA 
        %3271 2/fp32 LD %3260
        %3272 2/fp32 LD %3252
        %3273 2/fp32 NEG %3272
        %3274 2/fp32 ADD %3271, %3273
        %3275 void ST %3274, %3270
        %3276 temp(0) * 1/fp32 'det': INSTA 
        %3277 2/fp32 LD %3264
        %3278 1/fp32 SHUF %3277.x
        %3279 2/fp32 LD %3270
        %3280 1/fp32 SHUF %3279.y
        %3281 1/fp32 MUL %3278, %3280
        %3282 2/fp32 LD %3264
        %3283 1/fp32 SHUF %3282.y
        %3284 2/fp32 LD %3270
        %3285 1/fp32 SHUF %3284.x
        %3286 1/fp32 MUL %3283, %3285
        %3287 1/fp32 NEG %3286
        %3288 1/fp32 ADD %3281, %3287
        %3289 temp(0) * 1/fp32 INSTA 
        %3290 1/fp32 intr.INVARIANT %3288
        %3291 void ST %3290, %3289
        %3292 1/fp32 LD %3289
        %3293 void ST %3292, %3276
        %3294 temp(0) * 1/fp32 'a': INSTA 
        %3295 1/int32 LD %3197
        %3296 1/int32 CMOV.ne (%3295, int32{0}) int32{1}, int32{0}
        %3297 temp(0) * 1/fp32 INSTA 
        %3298 1/int1 CMP.ne %3296, int32{0}
        %3305 void BRC %3298
        --> block:3301, block:3299

      block:3299 - if-else
        <-- block:3303
        %3311 1/fp32 LD %3276
        %3312 void ST %3311, %3297
        %3300 void BR 
        --> block:3353

      block:3301 - if-then
        <-- block:3303
        %3308 1/fp32 LD %3276
        %3309 1/fp32 MUL %3308, fp32{-1.0}
        %3310 void ST %3309, %3297
        %3302 void BR 
        --> block:3353

      block:3353
        <-- block:3299, block:3301
        %3313 1/fp32 LD %3297
        %3314 void ST %3313, %3294
        %3315 temp(0) * 1/int32 'isFrontFacingCCW': INSTA 
        %3316 1/fp32 LD %3294
        %3317 1/int32 CMOV.fgt (%3316, fp32{0.0}) int32{1}, int32{0}
        %3318 temp(0) * 1/int32 INSTA 
        %3319 1/int32 intr.INVARIANT %3317
        %3320 void ST %3319, %3318
        %3321 1/int32 LD %3318
        %3322 void ST %3321, %3315
        %3323 temp(0) * 1/int32 'isFrontFacingCW': INSTA 
        %3324 1/fp32 LD %3294
        %3325 1/int32 CMOV.flt (%3324, fp32{0.0}) int32{1}, int32{0}
        %3326 temp(0) * 1/int32 INSTA 
        %3327 1/int32 intr.INVARIANT %3325
        %3328 void ST %3327, %3326
        %3329 1/int32 LD %3326
        %3330 void ST %3329, %3323
        %3331 temp(0) * 1/int32 'backface': INSTA 
        %3332 1/int32 LD %3315
        %3333 1/int32 CMOV.eq (%3332, int32{0}) int32{1}, int32{0}
        %3334 1/int32 LD %3140
        %3335 1/int32 AND %3334, %3333
        %3336 1/int32 LD %3323
        %3337 1/int32 CMOV.eq (%3336, int32{0}) int32{1}, int32{0}
        %3338 1/int32 LD %3135
        %3339 1/int32 AND %3338, %3337
        %3340 1/int32 OR %3335, %3339
        %3341 void ST %3340, %3331
        %3342 temp(0) * 1/int32 'frontface': INSTA 
        %3343 1/int32 LD %3331
        %3344 1/int32 CMOV.eq (%3343, int32{0}) int32{1}, int32{0}
        %3345 1/int32 LD %3233
        %3346 1/int32 OR %3344, %3345
        %3347 void ST %3346, %3342
        %3348 1/int32 LD %3217
        %3349 1/int32 CMOV.eq (%3348, int32{0}) int32{1}, int32{0}
        %3350 1/int32 LD %3342
        %3351 1/int32 AND %3349, %3350
        %3352 void ST %3351, %3132
        %3354 void BR 
        --> block:3124

      block:3124 - exit
        <-- block:3353
        --> 


  func:Ngg::PrefixSumResult __prefixSum(uint, uint, uint, bool)
    arguments:
      %3429 in    arg: 1/int32 - 'pred'
      %3432 in    arg: 1/int32 - 'tid'
      %3435 in    arg: 1/int32 - 'waveIndex'
      %3438 in    arg: 1/int32 - 'isSingleWave'
      %3441 out   arg: temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} - '__prefixSum'

    dwarf:
      __prefixSum(810 - 810)

    body:
      block:3426 - entry
        <-- 
        --> block:3592

      block:3592 - if-predicate
        <-- block:3426
        %3430 temp(0) * 1/int32 INSTA 
        %3431 void ST %3429, %3430
        %3433 temp(0) * 1/int32 INSTA 
        %3434 void ST %3432, %3433
        %3436 temp(0) * 1/int32 INSTA 
        %3437 void ST %3435, %3436
        %3439 temp(0) * 1/int32 INSTA 
        %3440 void ST %3438, %3439
        %3442 1/int32 LD %3430
        %3443 temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} INSTA 
        %3579 void CALL 'Ngg::pair<uint, uint> ballotAndCount(uint)', byval %3442, byref %3443
        %3580 temp(0) * 1/int32 'i': INSTA 
        %3581 temp(0) * 1/int32 GETELEMPTR %3443, int32{0}, int32{0}
        %3582 1/int32 LD %3581
        %3583 void ST %3582, %3580
        %3584 temp(0) * 1/int32 'c': INSTA 
        %3585 temp(0) * 1/int32 GETELEMPTR %3443, int32{0}, int32{1}
        %3586 1/int32 LD %3585
        %3587 void ST %3586, %3584
        %3588 1/int32 LD %3439
        %3589 1/int1 CMP.ne %3588, int32{0}
        %3594 void BRC %3589
        --> block:3617, block:3954

      block:3954 - if-predicate
        <-- block:3592
        %3619 1/int32 LD %3580
        %3620 1/int32 LD %3584
        %3621 1/int32 LD %3433
        %3622 1/int32 LD %3436
        %3623 1/int32 LD %3439
        %3624 temp(0) * struct (Ngg::PartialPrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %3926 void CALL 'Ngg::PartialPrefixSumResult __prefixSum(uint, uint, uint, uint, bool)', byval %3619, byval %3620, byval %3621, byval %3622, byval %3623, byref %3624
        %3927 temp(0) * 1/int32 'idx': INSTA 
        %3928 temp(0) * 1/int32 GETELEMPTR %3624, int32{0}, int32{0}
        %3929 1/int32 LD %3928
        %3930 void ST %3929, %3927
        %3931 temp(0) * 1/int32 'gc': INSTA 
        %3932 temp(0) * 1/int32 GETELEMPTR %3624, int32{0}, int32{1}
        %3933 1/int32 LD %3932
        %3934 void ST %3933, %3931
        %3935 temp(0) * 1/int32 'start': INSTA 
        %3936 temp(0) * 1/int32 GETELEMPTR %3624, int32{0}, int32{2}
        %3937 1/int32 LD %3936
        %3938 void ST %3937, %3935
        %3939 temp(0) * 1/int32 'w64': INSTA 
        %3940 temp(0) * 1/int32 INSTA 
        %3941 1/int32 intr.GET_WAVEMODE 
        %3942 void ST %3941, %3940
        %3943 1/int32 LD %3940
        %3944 1/int32 CMOV.eq (%3943, int32{1}) int32{1}, int32{0}
        %3945 void ST %3944, %3939
        %3946 temp(0) * 1/int32 'maxLanes': INSTA 
        %3947 1/int32 LD %3939
        %3948 temp(0) * 1/int32 INSTA 
        %3949 1/int1 CMP.ne %3947, int32{0}
        %3956 void BRC %3949
        --> block:3952, block:3950

      block:3950 - if-else
        <-- block:3954
        %3958 void ST int32{32}, %3948
        %3951 void BR 
        --> block:3971

      block:3952 - if-then
        <-- block:3954
        %3957 void ST int32{64}, %3948
        %3953 void BR 
        --> block:3971

      block:3971 - if-predicate
        <-- block:3950, block:3952
        %3959 1/int32 LD %3948
        %3960 void ST %3959, %3946
        %3961 temp(0) * 1/int32 'lc': INSTA 
        %3962 1/int32 LD %3935
        %3963 1/int32 LD %3931
        %3964 1/int32 CMOV.ugt (%3962, %3963) int32{1}, int32{0}
        %3965 temp(0) * 1/int32 INSTA 
        %3966 1/int1 CMP.ne %3964, int32{0}
        %3973 void BRC %3966
        --> block:3969, block:3967

      block:3967 - if-else
        <-- block:3971
        %3975 1/int32 LD %3931
        %3976 1/int32 LD %3935
        %3977 1/int32 NEG %3976
        %3978 1/int32 ADD %3975, %3977
        %3979 1/int32 LD %3946
        %3980 1/int32 UMIN %3979, %3978
        %3981 void ST %3980, %3965
        %3968 void BR 
        --> block:4006

      block:3969 - if-then
        <-- block:3971
        %3974 void ST int32{0}, %3965
        %3970 void BR 
        --> block:4006

      block:4006
        <-- block:3967, block:3969
        %3982 1/int32 LD %3965
        %3983 void ST %3982, %3961
        %3984 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %3985 temp(0) * 1/int32 GETELEMPTR %3984, int32{0}, int32{0}
        %3986 1/int32 LD %3927
        %3987 void ST %3986, %3985
        %3988 temp(0) * 1/int32 GETELEMPTR %3984, int32{0}, int32{1}
        %3989 1/int32 LD %3931
        %3990 void ST %3989, %3988
        %3991 temp(0) * 1/int32 GETELEMPTR %3984, int32{0}, int32{2}
        %3992 1/int32 LD %3961
        %3993 void ST %3992, %3991
        %3994 temp(0) * 1/int32 GETELEMPTR %3984, int32{0}, int32{0}
        %3995 temp(0) * 1/int32 GETELEMPTR %3441, int32{0}, int32{0}
        %3996 1/int32 LD %3994
        %3997 void ST %3996, %3995
        %3998 temp(0) * 1/int32 GETELEMPTR %3984, int32{0}, int32{1}
        %3999 temp(0) * 1/int32 GETELEMPTR %3441, int32{0}, int32{1}
        %4000 1/int32 LD %3998
        %4001 void ST %4000, %3999
        %4002 temp(0) * 1/int32 GETELEMPTR %3984, int32{0}, int32{2}
        %4003 temp(0) * 1/int32 GETELEMPTR %3441, int32{0}, int32{2}
        %4004 1/int32 LD %4002
        %4005 void ST %4004, %4003
        %4007 void BR 
        --> block:3425

      block:3617
        <-- block:3592
        %3595 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %3596 temp(0) * 1/int32 GETELEMPTR %3595, int32{0}, int32{0}
        %3597 1/int32 LD %3580
        %3598 void ST %3597, %3596
        %3599 temp(0) * 1/int32 GETELEMPTR %3595, int32{0}, int32{1}
        %3600 1/int32 LD %3584
        %3601 void ST %3600, %3599
        %3602 temp(0) * 1/int32 GETELEMPTR %3595, int32{0}, int32{2}
        %3603 1/int32 LD %3584
        %3604 void ST %3603, %3602
        %3605 temp(0) * 1/int32 GETELEMPTR %3595, int32{0}, int32{0}
        %3606 temp(0) * 1/int32 GETELEMPTR %3441, int32{0}, int32{0}
        %3607 1/int32 LD %3605
        %3608 void ST %3607, %3606
        %3609 temp(0) * 1/int32 GETELEMPTR %3595, int32{0}, int32{1}
        %3610 temp(0) * 1/int32 GETELEMPTR %3441, int32{0}, int32{1}
        %3611 1/int32 LD %3609
        %3612 void ST %3611, %3610
        %3613 temp(0) * 1/int32 GETELEMPTR %3595, int32{0}, int32{2}
        %3614 temp(0) * 1/int32 GETELEMPTR %3441, int32{0}, int32{2}
        %3615 1/int32 LD %3613
        %3616 void ST %3615, %3614
        %3618 void BR 
        --> block:3425

      block:3425 - exit
        <-- block:3617, block:4006
        --> 


  func:Ngg::pair<uint, uint> ballotAndCount(uint)
    arguments:
      %3449 in    arg: 1/int32 - 'pred'
      %3452 out   arg: temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} - 'ballotAndCount'

    dwarf:
      ballotAndCount(817 - 817)

    body:
      block:3446 - entry
        <-- 
        --> block:3463

      block:3463 - if-predicate
        <-- block:3446
        %3450 temp(0) * 1/int32 INSTA 
        %3451 void ST %3449, %3450
        %3453 temp(0) * 1/int32 INSTA 
        %3454 1/int32 intr.GET_WAVEMODE 
        %3455 void ST %3454, %3453
        %3456 1/int32 LD %3453
        %3457 1/int32 CMOV.eq (%3456, int32{1}) int32{1}, int32{0}
        %3458 1/int1 CMP.ne %3457, int32{0}
        %3465 void BRC %3458
        --> block:3526, block:3577

      block:3577
        <-- block:3463
        %3528 temp(0) * 1/int32 'b': INSTA 
        %3529 1/int32 LD %3450
        %3547 void CALL 'uint ballot(int)', byval %3529, byref %3528
        %3548 temp(0) * 1/int32 'c': INSTA 
        %3549 1/int32 LD %3528
        %3550 temp(0) * 1/int32 INSTA 
        %3551 1/int32 intr.s_bcnt1_i32_b32 %3549 uniform_width
        %3552 void ST %3551, %3550
        %3553 1/int32 LD %3550
        %3554 void ST %3553, %3548
        %3555 temp(0) * 1/int32 'i': INSTA 
        %3556 1/int32 LD %3528
        %3557 temp(0) * 1/int32 INSTA 
        %3558 1/int32 intr.v_mbcnt_lo_u32_b32 %3556, int32{0} uniform_width
        %3559 void ST %3558, %3557
        %3560 1/int32 LD %3557
        %3561 void ST %3560, %3555
        %3562 temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} INSTA 
        %3563 temp(0) * 1/int32 GETELEMPTR %3562, int32{0}, int32{0}
        %3564 1/int32 LD %3555
        %3565 void ST %3564, %3563
        %3566 temp(0) * 1/int32 GETELEMPTR %3562, int32{0}, int32{1}
        %3567 1/int32 LD %3548
        %3568 void ST %3567, %3566
        %3569 temp(0) * 1/int32 GETELEMPTR %3562, int32{0}, int32{0}
        %3570 temp(0) * 1/int32 GETELEMPTR %3452, int32{0}, int32{0}
        %3571 1/int32 LD %3569
        %3572 void ST %3571, %3570
        %3573 temp(0) * 1/int32 GETELEMPTR %3562, int32{0}, int32{1}
        %3574 temp(0) * 1/int32 GETELEMPTR %3452, int32{0}, int32{1}
        %3575 1/int32 LD %3573
        %3576 void ST %3575, %3574
        %3578 void BR 
        --> block:3445

      block:3526
        <-- block:3463
        %3466 temp(0) * 1/int64 'b': INSTA 
        %3467 1/int32 LD %3450
        %3485 void CALL 'ulong ballot(int)', byval %3467, byref %3466
        %3486 temp(0) * 1/int32 'c': INSTA 
        %3487 1/int64 LD %3466
        %3488 temp(0) * 1/int32 INSTA 
        %3489 1/int32 intr.s_bcnt1_i32_b64 %3487 uniform_width
        %3490 void ST %3489, %3488
        %3491 1/int32 LD %3488
        %3492 void ST %3491, %3486
        %3493 temp(0) * 2/int32 'u': INSTA 
        %3494 1/int64 LD %3466
        %3495 2/int32 CONV_reinterp %3494
        %3496 void ST %3495, %3493
        %3497 temp(0) * 1/int32 'i': INSTA 
        %3498 2/int32 LD %3493
        %3499 1/int32 SHUF %3498.y
        %3500 2/int32 LD %3493
        %3501 1/int32 SHUF %3500.x
        %3502 temp(0) * 1/int32 INSTA 
        %3503 1/int32 intr.v_mbcnt_lo_u32_b32 %3501, int32{0} uniform_width
        %3504 void ST %3503, %3502
        %3505 1/int32 LD %3502
        %3506 temp(0) * 1/int32 INSTA 
        %3507 1/int32 intr.v_mbcnt_hi_u32_b32 %3499, %3505 uniform_width
        %3508 void ST %3507, %3506
        %3509 1/int32 LD %3506
        %3510 void ST %3509, %3497
        %3511 temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} INSTA 
        %3512 temp(0) * 1/int32 GETELEMPTR %3511, int32{0}, int32{0}
        %3513 1/int32 LD %3497
        %3514 void ST %3513, %3512
        %3515 temp(0) * 1/int32 GETELEMPTR %3511, int32{0}, int32{1}
        %3516 1/int32 LD %3486
        %3517 void ST %3516, %3515
        %3518 temp(0) * 1/int32 GETELEMPTR %3511, int32{0}, int32{0}
        %3519 temp(0) * 1/int32 GETELEMPTR %3452, int32{0}, int32{0}
        %3520 1/int32 LD %3518
        %3521 void ST %3520, %3519
        %3522 temp(0) * 1/int32 GETELEMPTR %3511, int32{0}, int32{1}
        %3523 temp(0) * 1/int32 GETELEMPTR %3452, int32{0}, int32{1}
        %3524 1/int32 LD %3522
        %3525 void ST %3524, %3523
        %3527 void BR 
        --> block:3445

      block:3445 - exit
        <-- block:3526, block:3577
        --> 


  func:ulong ballot(int)
    arguments:
      %3473 in    arg: 1/int32 - 'pred'
      %3476 out   arg: temp(0) * 1/int64 - 'ballot'

    dwarf:
      ballot(822 - 822)

    body:
      block:3470 - entry
        <-- 
        --> block:3483

      block:3483
        <-- block:3470
        %3474 temp(0) * 1/int32 INSTA 
        %3475 void ST %3473, %3474
        %3477 1/int32 LD %3474
        %3478 temp(0) * 1/int64 INSTA 
        %3479 1/int64 intr.v_cmp_ne_u32 %3477, int32{0} uniform_width pinned
        %3480 void ST %3479, %3478
        %3481 1/int64 LD %3478
        %3482 void ST %3481, %3476
        %3484 void BR 
        --> block:3469

      block:3469 - exit
        <-- block:3483
        --> 


  func:uint ballot(int)
    arguments:
      %3535 in    arg: 1/int32 - 'pred'
      %3538 out   arg: temp(0) * 1/int32 - 'ballot'

    dwarf:
      ballot(827 - 827)

    body:
      block:3532 - entry
        <-- 
        --> block:3545

      block:3545
        <-- block:3532
        %3536 temp(0) * 1/int32 INSTA 
        %3537 void ST %3535, %3536
        %3539 1/int32 LD %3536
        %3540 temp(0) * 1/int32 INSTA 
        %3541 1/int32 intr.v_cmp_ne_u32 %3539, int32{0} uniform_width pinned
        %3542 void ST %3541, %3540
        %3543 1/int32 LD %3540
        %3544 void ST %3543, %3538
        %3546 void BR 
        --> block:3531

      block:3531 - exit
        <-- block:3545
        --> 


  func:Ngg::PartialPrefixSumResult __prefixSum(uint, uint, uint, uint, bool)
    arguments:
      %3630 in    arg: 1/int32 - 'i'
      %3633 in    arg: 1/int32 - 'c'
      %3636 in    arg: 1/int32 - 'tid'
      %3639 in    arg: 1/int32 - 'waveIndex'
      %3642 in    arg: 1/int32 - 'isSingleWave'
      %3645 out   arg: temp(0) * struct (Ngg::PartialPrefixSumResult) {1/int32, 1/int32, 1/int32} - '__prefixSum'

    dwarf:
      __prefixSum(834 - 834)

    body:
      block:3627 - entry
        <-- 
        --> block:3661

      block:3661 - if-predicate
        <-- block:3627
        %3631 temp(0) * 1/int32 INSTA 
        %3632 void ST %3630, %3631
        %3634 temp(0) * 1/int32 INSTA 
        %3635 void ST %3633, %3634
        %3637 temp(0) * 1/int32 INSTA 
        %3638 void ST %3636, %3637
        %3640 temp(0) * 1/int32 INSTA 
        %3641 void ST %3639, %3640
        %3643 temp(0) * 1/int32 INSTA 
        %3644 void ST %3642, %3643
        %3646 temp(0) * 1/int32 'w64': INSTA 
        %3647 temp(0) * 1/int32 INSTA 
        %3648 1/int32 intr.GET_WAVEMODE 
        %3649 void ST %3648, %3647
        %3650 1/int32 LD %3647
        %3651 1/int32 CMOV.eq (%3650, int32{1}) int32{1}, int32{0}
        %3652 void ST %3651, %3646
        %3653 temp(0) * 1/int32 'maxWaveCount': INSTA 
        %3654 1/int32 LD %3646
        %3655 temp(0) * 1/int32 INSTA 
        %3656 1/int1 CMP.ne %3654, int32{0}
        %3663 void BRC %3656
        --> block:3659, block:3657

      block:3657 - if-else
        <-- block:3661
        %3665 void ST int32{8}, %3655
        %3658 void BR 
        --> block:3715

      block:3659 - if-then
        <-- block:3661
        %3664 void ST int32{4}, %3655
        %3660 void BR 
        --> block:3715

      block:3715 - if-predicate
        <-- block:3657, block:3659
        %3666 1/int32 LD %3655
        %3667 void ST %3666, %3653
        %3669 temp(0) * 1/int32 INSTA 
        %3709 void CALL 'uint __predicate(ulong)', byval int64{1}, byref %3669
        %3710 1/int32 LD %3669
        %3711 1/int32 CMOV.ne (%3710, int32{0}) int32{1}, int32{0}
        %3712 1/int1 CMP.ne %3711, int32{0}
        %3717 void BRC %3712
        --> block:3713, block:3758

      block:3713 - if-then
        <-- block:3715
        %3718 1/int32 LD %3640
        %3719 lds(0) * 1/int32 GETELEMPTR %105, int32{0}, %3718
        %3720 1/int32 LD %3634
        %3721 void ST %3720, %3719
        %3714 void BR 
        --> block:3758

      block:3758 - if-predicate
        <-- block:3713, block:3715
        %3722 1/int32 LD %3643
        %3723 void CALL 'void __ldsBarrier(bool)', byval %3722
        %3724 temp(0) * 1/int32 'data': INSTA 
        %3725 void ST int32{0}, %3724
        %3726 temp(0) * 1/int64 'exec': INSTA 
        %3727 temp(0) * 1/int32 INSTA 
        %3743 void CALL 'uint __get_gs_thread_group_size()', byref %3727
        %3744 1/int32 LD %3727
        %3745 temp(0) * 1/int64 INSTA 
        %3746 1/int64 intr.s_bfm_b64 %3744, int32{0} uniform_width
        %3747 void ST %3746, %3745
        %3748 1/int64 LD %3745
        %3749 void ST %3748, %3726
        %3750 1/int64 LD %3726
        %3751 temp(0) * 1/int32 INSTA 
        %3752 void CALL 'uint __predicate(ulong)', byval %3750, byref %3751
        %3753 1/int32 LD %3751
        %3754 1/int32 CMOV.ne (%3753, int32{0}) int32{1}, int32{0}
        %3755 1/int1 CMP.ne %3754, int32{0}
        %3760 void BRC %3755
        --> block:3756, block:3817

      block:3756 - if-then
        <-- block:3758
        %3761 1/int32 LD %3637
        %3762 lds(0) * 1/int32 GETELEMPTR %105, int32{0}, %3761
        %3763 1/int32 LD %3762
        %3764 void ST %3763, %3724
        %3757 void BR 
        --> block:3817

      block:3817 - if-predicate
        <-- block:3756, block:3758
        %3765 1/int32 LD %3724
        %3766 1/int32 LD %3724
        %3770 temp(0) * 1/int32 INSTA 
        %3771 void ST int32{15}, %3770
        %3772 1/int32 LD %3770
        %3773 temp(0) * 1/int32 INSTA 
        %3774 void ST int32{15}, %3773
        %3775 1/int32 LD %3773
        %3776 temp(0) * 1/int32 INSTA 
        %3777 void ST int32{0}, %3776
        %3778 1/int32 LD %3776
        %3779 temp(0) * 1/int32 INSTA 
        %3780 1/int32 intr.v_mov_dpp16 %3765, %3766, int32{273}, int32{1}, %3772, %3775, %3778 uniform_width pinned
        %3781 void ST %3780, %3779
        %3782 1/int32 LD %3779
        %3783 1/int32 LD %3724
        %3784 temp(0) * 1/int32 INSTA 
        %3785 1/int32 intr.v_add_nc_u32 %3782, %3783 uniform_width
        %3786 void ST %3785, %3784
        %3787 1/int32 LD %3784
        %3788 void ST %3787, %3724
        %3789 1/int32 LD %3724
        %3790 1/int32 LD %3724
        %3793 temp(0) * 1/int32 INSTA 
        %3794 void ST int32{15}, %3793
        %3795 1/int32 LD %3793
        %3796 temp(0) * 1/int32 INSTA 
        %3797 void ST int32{15}, %3796
        %3798 1/int32 LD %3796
        %3799 temp(0) * 1/int32 INSTA 
        %3800 void ST int32{0}, %3799
        %3801 1/int32 LD %3799
        %3802 temp(0) * 1/int32 INSTA 
        %3803 1/int32 intr.v_mov_dpp16 %3789, %3790, int32{274}, int32{1}, %3795, %3798, %3801 uniform_width pinned
        %3804 void ST %3803, %3802
        %3805 1/int32 LD %3802
        %3806 1/int32 LD %3724
        %3807 temp(0) * 1/int32 INSTA 
        %3808 1/int32 intr.v_add_nc_u32 %3805, %3806 uniform_width
        %3809 void ST %3808, %3807
        %3810 1/int32 LD %3807
        %3811 void ST %3810, %3724
        %3812 1/int32 LD %3646
        %3813 1/int32 CMOV.eq (%3812, int32{0}) int32{1}, int32{0}
        %3814 1/int1 CMP.ne %3813, int32{0}
        %3819 void BRC %3814
        --> block:3815, block:3872

      block:3815 - if-then
        <-- block:3817
        %3820 1/int32 LD %3724
        %3821 1/int32 LD %3724
        %3824 temp(0) * 1/int32 INSTA 
        %3825 void ST int32{15}, %3824
        %3826 1/int32 LD %3824
        %3827 temp(0) * 1/int32 INSTA 
        %3828 void ST int32{15}, %3827
        %3829 1/int32 LD %3827
        %3830 temp(0) * 1/int32 INSTA 
        %3831 void ST int32{0}, %3830
        %3832 1/int32 LD %3830
        %3833 temp(0) * 1/int32 INSTA 
        %3834 1/int32 intr.v_mov_dpp16 %3820, %3821, int32{276}, int32{1}, %3826, %3829, %3832 uniform_width pinned
        %3835 void ST %3834, %3833
        %3836 1/int32 LD %3833
        %3837 1/int32 LD %3724
        %3838 temp(0) * 1/int32 INSTA 
        %3839 1/int32 intr.v_add_nc_u32 %3836, %3837 uniform_width
        %3840 void ST %3839, %3838
        %3841 1/int32 LD %3838
        %3842 void ST %3841, %3724
        %3816 void BR 
        --> block:3872

      block:3872 - if-predicate
        <-- block:3815, block:3817
        %3843 temp(0) * 1/int32 'gc': INSTA 
        %3844 1/int32 LD %3724
        %3845 1/int32 LD %3653
        %3847 1/int32 ADD %3845, int32{-1}
        %3848 temp(0) * 1/int32 INSTA 
        %3849 1/int32 intr.v_readlane_b32 %3844, %3847 uniform_width pinned
        %3850 void ST %3849, %3848
        %3851 1/int32 LD %3848
        %3852 void ST %3851, %3843
        %3853 temp(0) * 1/int32 't': INSTA 
        %3854 1/int32 LD %3724
        %3855 1/int32 LD %3640
        %3857 1/int32 ADD %3855, int32{-1}
        %3858 temp(0) * 1/int32 INSTA 
        %3859 1/int32 intr.v_readlane_b32 %3854, %3857 uniform_width pinned
        %3860 void ST %3859, %3858
        %3861 1/int32 LD %3858
        %3862 void ST %3861, %3853
        %3863 temp(0) * 1/int32 'gi': INSTA 
        %3864 1/int32 LD %3640
        %3865 1/int32 CMOV.eq (int32{0}, %3864) int32{1}, int32{0}
        %3866 temp(0) * 1/int32 INSTA 
        %3867 1/int1 CMP.ne %3865, int32{0}
        %3874 void BRC %3867
        --> block:3870, block:3868

      block:3868 - if-else
        <-- block:3872
        %3876 1/int32 LD %3853
        %3877 void ST %3876, %3866
        %3869 void BR 
        --> block:3888

      block:3870 - if-then
        <-- block:3872
        %3875 void ST int32{0}, %3866
        %3871 void BR 
        --> block:3888

      block:3888 - if-predicate
        <-- block:3868, block:3870
        %3878 1/int32 LD %3866
        %3879 void ST %3878, %3863
        %3880 temp(0) * 1/int32 'maxLanes': INSTA 
        %3881 1/int32 LD %3646
        %3882 temp(0) * 1/int32 INSTA 
        %3883 1/int1 CMP.ne %3881, int32{0}
        %3890 void BRC %3883
        --> block:3886, block:3884

      block:3884 - if-else
        <-- block:3888
        %3892 void ST int32{32}, %3882
        %3885 void BR 
        --> block:3924

      block:3886 - if-then
        <-- block:3888
        %3891 void ST int32{64}, %3882
        %3887 void BR 
        --> block:3924

      block:3924
        <-- block:3884, block:3886
        %3893 1/int32 LD %3882
        %3894 void ST %3893, %3880
        %3895 temp(0) * 1/int32 'start': INSTA 
        %3896 1/int32 LD %3640
        %3897 1/int32 LD %3880
        %3898 1/int32 MUL %3896, %3897
        %3899 void ST %3898, %3895
        %3900 temp(0) * struct (Ngg::PartialPrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %3901 temp(0) * 1/int32 GETELEMPTR %3900, int32{0}, int32{0}
        %3902 1/int32 LD %3863
        %3903 1/int32 LD %3631
        %3904 1/int32 ADD %3902, %3903
        %3905 void ST %3904, %3901
        %3906 temp(0) * 1/int32 GETELEMPTR %3900, int32{0}, int32{1}
        %3907 1/int32 LD %3843
        %3908 void ST %3907, %3906
        %3909 temp(0) * 1/int32 GETELEMPTR %3900, int32{0}, int32{2}
        %3910 1/int32 LD %3895
        %3911 void ST %3910, %3909
        %3912 temp(0) * 1/int32 GETELEMPTR %3900, int32{0}, int32{0}
        %3913 temp(0) * 1/int32 GETELEMPTR %3645, int32{0}, int32{0}
        %3914 1/int32 LD %3912
        %3915 void ST %3914, %3913
        %3916 temp(0) * 1/int32 GETELEMPTR %3900, int32{0}, int32{1}
        %3917 temp(0) * 1/int32 GETELEMPTR %3645, int32{0}, int32{1}
        %3918 1/int32 LD %3916
        %3919 void ST %3918, %3917
        %3920 temp(0) * 1/int32 GETELEMPTR %3900, int32{0}, int32{2}
        %3921 temp(0) * 1/int32 GETELEMPTR %3645, int32{0}, int32{2}
        %3922 1/int32 LD %3920
        %3923 void ST %3922, %3921
        %3925 void BR 
        --> block:3626

      block:3626 - exit
        <-- block:3924
        --> 


  func:uint __predicate(ulong)
    arguments:
      %3675 in    arg: 1/int64 - 'v'
      %3678 out   arg: temp(0) * 1/int32 - '__predicate'

    dwarf:
      __predicate(836 - 836)

    body:
      block:3672 - entry
        <-- 
        --> block:3689

      block:3689 - if-predicate
        <-- block:3672
        %3676 temp(0) * 1/int64 INSTA 
        %3677 void ST %3675, %3676
        %3679 temp(0) * 1/int32 INSTA 
        %3680 1/int32 intr.GET_WAVEMODE 
        %3681 void ST %3680, %3679
        %3682 1/int32 LD %3679
        %3683 1/int32 CMOV.eq (%3682, int32{1}) int32{1}, int32{0}
        %3684 1/int1 CMP.ne %3683, int32{0}
        %3691 void BRC %3684
        --> block:3698, block:3707

      block:3707
        <-- block:3689
        %3700 1/int64 LD %3676
        %3701 1/int32 CONV %3700
        %3702 temp(0) * 1/int32 INSTA 
        %3703 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %3701 uniform_width
        %3704 void ST %3703, %3702
        %3705 1/int32 LD %3702
        %3706 void ST %3705, %3678
        %3708 void BR 
        --> block:3671

      block:3698
        <-- block:3689
        %3692 1/int64 LD %3676
        %3693 temp(0) * 1/int32 INSTA 
        %3694 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %3692 uniform_width
        %3695 void ST %3694, %3693
        %3696 1/int32 LD %3693
        %3697 void ST %3696, %3678
        %3699 void BR 
        --> block:3671

      block:3671 - exit
        <-- block:3698, block:3707
        --> 


  func:uint __get_gs_thread_group_size()
    arguments:
      %3729 out   arg: temp(0) * 1/int32 - '__get_gs_thread_group_size'

    dwarf:
      __get_gs_thread_group_size(840 - 840)

    body:
      block:3731 - entry
        <-- 
        --> block:3741

      block:3741
        <-- block:3731
        %3734 temp(0) * 1/int32 INSTA 
        %3735 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %3736 void ST %3735, %3734
        %3737 1/int32 LD %3734
        %3738 1/int32 LSHR %3737, int32{28}
        %3739 1/int32 AND %3738, int32{15}
        %3740 void ST %3739, %3729
        %3742 void BR 
        --> block:3730

      block:3730 - exit
        <-- block:3741
        --> 


  func:uint FindLiveVerts(Ngg::NggCtx const&, bool)
    arguments:
      %4056 in    arg: generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %4059 in    arg: 1/int32 - 'visiblePrim'
      %4062 out   arg: temp(0) * 1/int32 - 'FindLiveVerts'

    dwarf:
      FindLiveVerts(849 - 849)

    body:
      block:4053 - entry
        <-- 
        --> block:4088

      block:4088 - if-predicate
        <-- block:4053
        %4057 temp(0) * generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} INSTA 
        %4058 void ST %4056, %4057
        %4060 temp(0) * 1/int32 INSTA 
        %4061 void ST %4059, %4060
        %4063 temp(0) * 1/int32 'options': INSTA 
        %4064 temp(0) * 1/int32 INSTA 
        %4065 1/int32 intr.get_ngg_options 
        %4066 void ST int32{545}, %4064
        %4067 1/int32 LD %4064
        %4068 void ST %4067, %4063
        %4069 temp(0) * 1/int32 'isSingleWave': INSTA 
        %4070 1/int32 LD %4063
        %4071 1/int32 AND %4070, int32{1}
        %4072 1/int32 CMOV.ne (int32{0}, %4071) int32{1}, int32{0}
        %4073 void ST %4072, %4069
        %4074 temp(0) * 1/int32 'w64': INSTA 
        %4075 temp(0) * 1/int32 INSTA 
        %4076 1/int32 intr.GET_WAVEMODE 
        %4077 void ST %4076, %4075
        %4078 1/int32 LD %4075
        %4079 1/int32 CMOV.eq (%4078, int32{1}) int32{1}, int32{0}
        %4080 void ST %4079, %4074
        %4081 temp(0) * 1/int32 'activeVert': INSTA 
        %4082 1/int32 LD %4069
        %4083 1/int1 CMP.ne %4082, int32{0}
        %4090 void BRC %4083
        --> block:4097, block:4505

      block:4505 - if-predicate
        <-- block:4088
        %4495 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4496 generic(0) * 1/int32 GETELEMPTR %4495, int32{0}, int32{3}
        %4497 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4498 generic(0) * 1/int32 GETELEMPTR %4497, int32{0}, int32{7}
        %4499 1/int32 LD %4496
        %4500 1/int32 LD %4498
        %4501 1/int32 CMOV.ult (%4499, %4500) int32{1}, int32{0}
        %4502 1/int1 CMP.ne %4501, int32{0}
        %4507 void BRC %4502
        --> block:4503, block:4519

      block:4503 - if-then
        <-- block:4505
        %4508 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4509 generic(0) * 1/int32 GETELEMPTR %4508, int32{0}, int32{3}
        %4510 1/int32 LD %4509
        %4511 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4510
        %4512 void ST int32{0}, %4511
        %4504 void BR 
        --> block:4519

      block:4519 - if-predicate
        <-- block:4503, block:4505
        %4513 1/int32 LD %4069
        %4514 void CALL 'void __ldsBarrier(bool)', byval %4513
        %4515 1/int32 LD %4060
        %4516 1/int1 CMP.ne %4515, int32{0}
        %4521 void BRC %4516
        --> block:4517, block:4554

      block:4517 - if-then
        <-- block:4519
        %4522 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4523 generic(0) * 1/int32[6] GETELEMPTR %4522, int32{0}, int32{9}
        %4524 generic(0) * 1/int32 GETELEMPTR %4523, int32{0}, int32{0}
        %4525 1/int32 LD %4524
        %4526 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4525
        %4527 void ST int32{1}, %4526
        %4528 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4529 generic(0) * 1/int32[6] GETELEMPTR %4528, int32{0}, int32{9}
        %4530 generic(0) * 1/int32 GETELEMPTR %4529, int32{0}, int32{1}
        %4531 1/int32 LD %4530
        %4532 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4531
        %4533 void ST int32{1}, %4532
        %4534 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4535 generic(0) * 1/int32[6] GETELEMPTR %4534, int32{0}, int32{9}
        %4536 generic(0) * 1/int32 GETELEMPTR %4535, int32{0}, int32{2}
        %4537 1/int32 LD %4536
        %4538 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4537
        %4539 void ST int32{1}, %4538
        %4518 void BR 
        --> block:4554

      block:4554 - if-predicate
        <-- block:4517, block:4519
        %4540 1/int32 LD %4069
        %4541 void CALL 'void __ldsBarrier(bool)', byval %4540
        %4542 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4543 generic(0) * 1/int32 GETELEMPTR %4542, int32{0}, int32{3}
        %4544 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4545 generic(0) * 1/int32 GETELEMPTR %4544, int32{0}, int32{7}
        %4546 1/int32 LD %4543
        %4547 1/int32 LD %4545
        %4548 1/int32 CMOV.ult (%4546, %4547) int32{1}, int32{0}
        %4549 1/int1 CMP.ne %4548, int32{0}
        %4556 void BRC %4549
        --> block:4552, block:4550

      block:4550 - if-else
        <-- block:4554
        %4563 void ST int32{0}, %4062
        %4551 void BR 
        --> block:4084

      block:4552 - if-then
        <-- block:4554
        %4557 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4558 generic(0) * 1/int32 GETELEMPTR %4557, int32{0}, int32{3}
        %4559 1/int32 LD %4558
        %4560 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4559
        %4561 1/int32 LD %4560
        %4562 void ST %4561, %4062
        %4553 void BR 
        --> block:4084

      block:4084 - if-else
        <-- block:4550, block:4552
        %4085 void BR 
        --> block:4564

      block:4097 - if-predicate
        <-- block:4088
        %4091 1/int32 LD %4074
        %4092 1/int1 CMP.ne %4091, int32{0}
        %4099 void BRC %4092
        --> block:4133, block:4458

      block:4458 - if-predicate
        <-- block:4097
        %4450 temp(0) * 1/int32 'm': INSTA 
        %4451 1/int32 LD %4060
        %4452 temp(0) * 1/int32 INSTA 
        %4453 1/int1 CMP.ne %4451, int32{0}
        %4460 void BRC %4453
        --> block:4456, block:4454

      block:4454 - if-else
        <-- block:4458
        %4479 void ST int32{0}, %4452
        %4455 void BR 
        --> block:4093

      block:4456 - if-then
        <-- block:4458
        %4461 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4462 generic(0) * 1/int32[6] GETELEMPTR %4461, int32{0}, int32{9}
        %4463 generic(0) * 1/int32 GETELEMPTR %4462, int32{0}, int32{0}
        %4464 1/int32 LD %4463
        %4465 1/int32 SHL int32{1}, %4464
        %4466 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4467 generic(0) * 1/int32[6] GETELEMPTR %4466, int32{0}, int32{9}
        %4468 generic(0) * 1/int32 GETELEMPTR %4467, int32{0}, int32{1}
        %4469 1/int32 LD %4468
        %4470 1/int32 SHL int32{1}, %4469
        %4471 1/int32 OR %4465, %4470
        %4472 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4473 generic(0) * 1/int32[6] GETELEMPTR %4472, int32{0}, int32{9}
        %4474 generic(0) * 1/int32 GETELEMPTR %4473, int32{0}, int32{2}
        %4475 1/int32 LD %4474
        %4476 1/int32 SHL int32{1}, %4475
        %4477 1/int32 OR %4471, %4476
        %4478 void ST %4477, %4452
        %4457 void BR 
        --> block:4093

      block:4093 - if-else
        <-- block:4454, block:4456
        %4480 1/int32 LD %4452
        %4481 void ST %4480, %4450
        %4482 1/int32 LD %4450
        %4483 temp(0) * 1/int32 INSTA 
        %4484 1/int32 intr.crosslane_or_b32 %4482 uniform_width pinned
        %4485 void ST %4484, %4483
        %4486 1/int32 LD %4483
        %4487 void ST %4486, %4450
        %4488 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4489 generic(0) * 1/int32 GETELEMPTR %4488, int32{0}, int32{3}
        %4490 1/int32 LD %4450
        %4491 1/int32 LD %4489
        %4492 1/int32 LSHR %4490, %4491
        %4493 1/int32 AND int32{1}, %4492
        %4494 void ST %4493, %4062
        %4094 void BR 
        --> block:4086

      block:4133 - if-predicate
        <-- block:4097
        %4100 temp(0) * 1/int64 'pm': INSTA 
        %4102 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4103 generic(0) * 1/int32[6] GETELEMPTR %4102, int32{0}, int32{9}
        %4104 generic(0) * 1/int32 GETELEMPTR %4103, int32{0}, int32{0}
        %4105 1/int32 LD %4104
        %4106 1/int64 CONV %4105
        %4107 1/int64 SHL int64{1}, %4106
        %4109 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4110 generic(0) * 1/int32[6] GETELEMPTR %4109, int32{0}, int32{9}
        %4111 generic(0) * 1/int32 GETELEMPTR %4110, int32{0}, int32{1}
        %4112 1/int32 LD %4111
        %4113 1/int64 CONV %4112
        %4114 1/int64 SHL int64{1}, %4113
        %4115 1/int64 OR %4107, %4114
        %4117 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4118 generic(0) * 1/int32[6] GETELEMPTR %4117, int32{0}, int32{9}
        %4119 generic(0) * 1/int32 GETELEMPTR %4118, int32{0}, int32{2}
        %4120 1/int32 LD %4119
        %4121 1/int64 CONV %4120
        %4122 1/int64 SHL int64{1}, %4121
        %4123 1/int64 OR %4115, %4122
        %4124 void ST %4123, %4100
        %4125 temp(0) * 1/int64 'm': INSTA 
        %4126 1/int32 LD %4060
        %4127 temp(0) * 1/int64 INSTA 
        %4128 1/int1 CMP.ne %4126, int32{0}
        %4135 void BRC %4128
        --> block:4131, block:4129

      block:4129 - if-else
        <-- block:4133
        %4139 void ST int64{0}, %4127
        %4130 void BR 
        --> block:4095

      block:4131 - if-then
        <-- block:4133
        %4136 1/int64 LD %4100
        %4137 void ST %4136, %4127
        %4132 void BR 
        --> block:4095

      block:4095 - if-then
        <-- block:4129, block:4131
        %4140 1/int64 LD %4127
        %4141 void ST %4140, %4125
        %4142 temp(0) * 2/int32 'v': INSTA 
        %4143 1/int64 LD %4125
        %4144 2/int32 CONV_reinterp %4143
        %4145 void ST %4144, %4142
        %4146 2/int32 LD %4142
        %4147 1/int32 SHUF %4146.x
        %4148 2/int32 LD %4142
        %4149 1/int32 SHUF %4148.x
        %4151 temp(0) * 1/int32 INSTA 
        %4152 void ST int32{15}, %4151
        %4153 1/int32 LD %4151
        %4154 temp(0) * 1/int32 INSTA 
        %4155 void ST int32{15}, %4154
        %4156 1/int32 LD %4154
        %4157 temp(0) * 1/int32 INSTA 
        %4158 void ST int32{0}, %4157
        %4159 1/int32 LD %4157
        %4160 temp(0) * 1/int32 INSTA 
        %4161 1/int32 intr.v_mov_dpp16 %4147, %4149, int32{273}, int32{1}, %4153, %4156, %4159 uniform_width pinned
        %4162 void ST %4161, %4160
        %4163 1/int32 LD %4160
        %4164 2/int32 LD %4142
        %4165 1/int32 SHUF %4164.x
        %4166 temp(0) * 1/int32 INSTA 
        %4167 1/int32 intr.v_or_b32 %4163, %4165 uniform_width
        %4168 void ST %4167, %4166
        %4169 1/int32 LD %4166
        %4170 2/int32 LD %4142
        %4171 2/int32 SHUF %4169.x-,  %4170.-y
        %4172 void ST %4171, %4142
        %4173 2/int32 LD %4142
        %4174 1/int32 SHUF %4173.x
        %4175 2/int32 LD %4142
        %4176 1/int32 SHUF %4175.x
        %4178 temp(0) * 1/int32 INSTA 
        %4179 void ST int32{15}, %4178
        %4180 1/int32 LD %4178
        %4181 temp(0) * 1/int32 INSTA 
        %4182 void ST int32{15}, %4181
        %4183 1/int32 LD %4181
        %4184 temp(0) * 1/int32 INSTA 
        %4185 void ST int32{0}, %4184
        %4186 1/int32 LD %4184
        %4187 temp(0) * 1/int32 INSTA 
        %4188 1/int32 intr.v_mov_dpp16 %4174, %4176, int32{274}, int32{1}, %4180, %4183, %4186 uniform_width pinned
        %4189 void ST %4188, %4187
        %4190 1/int32 LD %4187
        %4191 2/int32 LD %4142
        %4192 1/int32 SHUF %4191.x
        %4193 temp(0) * 1/int32 INSTA 
        %4194 1/int32 intr.v_or_b32 %4190, %4192 uniform_width
        %4195 void ST %4194, %4193
        %4196 1/int32 LD %4193
        %4197 2/int32 LD %4142
        %4198 2/int32 SHUF %4196.x-,  %4197.-y
        %4199 void ST %4198, %4142
        %4200 2/int32 LD %4142
        %4201 1/int32 SHUF %4200.x
        %4202 2/int32 LD %4142
        %4203 1/int32 SHUF %4202.x
        %4205 temp(0) * 1/int32 INSTA 
        %4206 void ST int32{15}, %4205
        %4207 1/int32 LD %4205
        %4208 temp(0) * 1/int32 INSTA 
        %4209 void ST int32{15}, %4208
        %4210 1/int32 LD %4208
        %4211 temp(0) * 1/int32 INSTA 
        %4212 void ST int32{0}, %4211
        %4213 1/int32 LD %4211
        %4214 temp(0) * 1/int32 INSTA 
        %4215 1/int32 intr.v_mov_dpp16 %4201, %4203, int32{276}, int32{1}, %4207, %4210, %4213 uniform_width pinned
        %4216 void ST %4215, %4214
        %4217 1/int32 LD %4214
        %4218 2/int32 LD %4142
        %4219 1/int32 SHUF %4218.x
        %4220 temp(0) * 1/int32 INSTA 
        %4221 1/int32 intr.v_or_b32 %4217, %4219 uniform_width
        %4222 void ST %4221, %4220
        %4223 1/int32 LD %4220
        %4224 2/int32 LD %4142
        %4225 2/int32 SHUF %4223.x-,  %4224.-y
        %4226 void ST %4225, %4142
        %4227 2/int32 LD %4142
        %4228 1/int32 SHUF %4227.x
        %4229 2/int32 LD %4142
        %4230 1/int32 SHUF %4229.x
        %4233 temp(0) * 1/int32 INSTA 
        %4234 void ST int32{15}, %4233
        %4235 1/int32 LD %4233
        %4236 temp(0) * 1/int32 INSTA 
        %4237 void ST int32{15}, %4236
        %4238 1/int32 LD %4236
        %4239 temp(0) * 1/int32 INSTA 
        %4240 void ST int32{0}, %4239
        %4241 1/int32 LD %4239
        %4242 temp(0) * 1/int32 INSTA 
        %4243 1/int32 intr.v_mov_dpp16 %4228, %4230, int32{280}, int32{1}, %4235, %4238, %4241 uniform_width pinned
        %4244 void ST %4243, %4242
        %4245 1/int32 LD %4242
        %4246 2/int32 LD %4142
        %4247 1/int32 SHUF %4246.x
        %4248 temp(0) * 1/int32 INSTA 
        %4249 1/int32 intr.v_or_b32 %4245, %4247 uniform_width
        %4250 void ST %4249, %4248
        %4251 1/int32 LD %4248
        %4252 2/int32 LD %4142
        %4253 2/int32 SHUF %4251.x-,  %4252.-y
        %4254 void ST %4253, %4142
        %4255 2/int32 LD %4142
        %4256 1/int32 SHUF %4255.x
        %4257 2/int32 LD %4142
        %4258 1/int32 SHUF %4257.x
        %4259 2/int32 LD %4142
        %4260 1/int32 SHUF %4259.x
        %4263 temp(0) * 1/int32 INSTA 
        %4264 void ST int32{0}, %4263
        %4265 1/int32 LD %4263
        %4266 temp(0) * 1/int32 INSTA 
        %4267 1/int32 intr.v_permlanex16_b32 %4258, %4260, int32{-1}, int32{-1}, int32{1}, %4265 uniform_width pinned
        %4268 void ST %4267, %4266
        %4269 1/int32 LD %4266
        %4270 temp(0) * 1/int32 INSTA 
        %4271 1/int32 intr.v_or_b32 %4256, %4269 uniform_width
        %4272 void ST %4271, %4270
        %4273 1/int32 LD %4270
        %4274 2/int32 LD %4142
        %4275 2/int32 SHUF %4273.x-,  %4274.-y
        %4276 void ST %4275, %4142
        %4277 2/int32 LD %4142
        %4278 1/int32 SHUF %4277.x
        %4279 temp(0) * 1/int32 INSTA 
        %4280 1/int32 intr.v_readlane_b32 %4278, int32{31} uniform_width pinned
        %4281 void ST %4280, %4279
        %4282 2/int32 LD %4142
        %4283 1/int32 SHUF %4282.x
        %4284 temp(0) * 1/int32 INSTA 
        %4285 1/int32 intr.v_readlane_b32 %4283, int32{63} uniform_width pinned
        %4286 void ST %4285, %4284
        %4287 1/int32 LD %4279
        %4288 1/int32 LD %4284
        %4289 1/int32 OR %4287, %4288
        %4290 2/int32 LD %4142
        %4291 2/int32 SHUF %4289.x-,  %4290.-y
        %4292 void ST %4291, %4142
        %4293 2/int32 LD %4142
        %4294 1/int32 SHUF %4293.y
        %4295 2/int32 LD %4142
        %4296 1/int32 SHUF %4295.y
        %4298 temp(0) * 1/int32 INSTA 
        %4299 void ST int32{15}, %4298
        %4300 1/int32 LD %4298
        %4301 temp(0) * 1/int32 INSTA 
        %4302 void ST int32{15}, %4301
        %4303 1/int32 LD %4301
        %4304 temp(0) * 1/int32 INSTA 
        %4305 void ST int32{0}, %4304
        %4306 1/int32 LD %4304
        %4307 temp(0) * 1/int32 INSTA 
        %4308 1/int32 intr.v_mov_dpp16 %4294, %4296, int32{273}, int32{1}, %4300, %4303, %4306 uniform_width pinned
        %4309 void ST %4308, %4307
        %4310 1/int32 LD %4307
        %4311 2/int32 LD %4142
        %4312 1/int32 SHUF %4311.y
        %4313 temp(0) * 1/int32 INSTA 
        %4314 1/int32 intr.v_or_b32 %4310, %4312 uniform_width
        %4315 void ST %4314, %4313
        %4316 1/int32 LD %4313
        %4317 2/int32 LD %4142
        %4318 2/int32 SHUF %4317.x-,  %4316.-x
        %4319 void ST %4318, %4142
        %4320 2/int32 LD %4142
        %4321 1/int32 SHUF %4320.y
        %4322 2/int32 LD %4142
        %4323 1/int32 SHUF %4322.y
        %4325 temp(0) * 1/int32 INSTA 
        %4326 void ST int32{15}, %4325
        %4327 1/int32 LD %4325
        %4328 temp(0) * 1/int32 INSTA 
        %4329 void ST int32{15}, %4328
        %4330 1/int32 LD %4328
        %4331 temp(0) * 1/int32 INSTA 
        %4332 void ST int32{0}, %4331
        %4333 1/int32 LD %4331
        %4334 temp(0) * 1/int32 INSTA 
        %4335 1/int32 intr.v_mov_dpp16 %4321, %4323, int32{274}, int32{1}, %4327, %4330, %4333 uniform_width pinned
        %4336 void ST %4335, %4334
        %4337 1/int32 LD %4334
        %4338 2/int32 LD %4142
        %4339 1/int32 SHUF %4338.y
        %4340 temp(0) * 1/int32 INSTA 
        %4341 1/int32 intr.v_or_b32 %4337, %4339 uniform_width
        %4342 void ST %4341, %4340
        %4343 1/int32 LD %4340
        %4344 2/int32 LD %4142
        %4345 2/int32 SHUF %4344.x-,  %4343.-x
        %4346 void ST %4345, %4142
        %4347 2/int32 LD %4142
        %4348 1/int32 SHUF %4347.y
        %4349 2/int32 LD %4142
        %4350 1/int32 SHUF %4349.y
        %4352 temp(0) * 1/int32 INSTA 
        %4353 void ST int32{15}, %4352
        %4354 1/int32 LD %4352
        %4355 temp(0) * 1/int32 INSTA 
        %4356 void ST int32{15}, %4355
        %4357 1/int32 LD %4355
        %4358 temp(0) * 1/int32 INSTA 
        %4359 void ST int32{0}, %4358
        %4360 1/int32 LD %4358
        %4361 temp(0) * 1/int32 INSTA 
        %4362 1/int32 intr.v_mov_dpp16 %4348, %4350, int32{276}, int32{1}, %4354, %4357, %4360 uniform_width pinned
        %4363 void ST %4362, %4361
        %4364 1/int32 LD %4361
        %4365 2/int32 LD %4142
        %4366 1/int32 SHUF %4365.y
        %4367 temp(0) * 1/int32 INSTA 
        %4368 1/int32 intr.v_or_b32 %4364, %4366 uniform_width
        %4369 void ST %4368, %4367
        %4370 1/int32 LD %4367
        %4371 2/int32 LD %4142
        %4372 2/int32 SHUF %4371.x-,  %4370.-x
        %4373 void ST %4372, %4142
        %4374 2/int32 LD %4142
        %4375 1/int32 SHUF %4374.y
        %4376 2/int32 LD %4142
        %4377 1/int32 SHUF %4376.y
        %4379 temp(0) * 1/int32 INSTA 
        %4380 void ST int32{15}, %4379
        %4381 1/int32 LD %4379
        %4382 temp(0) * 1/int32 INSTA 
        %4383 void ST int32{15}, %4382
        %4384 1/int32 LD %4382
        %4385 temp(0) * 1/int32 INSTA 
        %4386 void ST int32{0}, %4385
        %4387 1/int32 LD %4385
        %4388 temp(0) * 1/int32 INSTA 
        %4389 1/int32 intr.v_mov_dpp16 %4375, %4377, int32{280}, int32{1}, %4381, %4384, %4387 uniform_width pinned
        %4390 void ST %4389, %4388
        %4391 1/int32 LD %4388
        %4392 2/int32 LD %4142
        %4393 1/int32 SHUF %4392.y
        %4394 temp(0) * 1/int32 INSTA 
        %4395 1/int32 intr.v_or_b32 %4391, %4393 uniform_width
        %4396 void ST %4395, %4394
        %4397 1/int32 LD %4394
        %4398 2/int32 LD %4142
        %4399 2/int32 SHUF %4398.x-,  %4397.-x
        %4400 void ST %4399, %4142
        %4401 2/int32 LD %4142
        %4402 1/int32 SHUF %4401.y
        %4403 2/int32 LD %4142
        %4404 1/int32 SHUF %4403.y
        %4405 2/int32 LD %4142
        %4406 1/int32 SHUF %4405.y
        %4409 temp(0) * 1/int32 INSTA 
        %4410 void ST int32{0}, %4409
        %4411 1/int32 LD %4409
        %4412 temp(0) * 1/int32 INSTA 
        %4413 1/int32 intr.v_permlanex16_b32 %4404, %4406, int32{-1}, int32{-1}, int32{1}, %4411 uniform_width pinned
        %4414 void ST %4413, %4412
        %4415 1/int32 LD %4412
        %4416 temp(0) * 1/int32 INSTA 
        %4417 1/int32 intr.v_or_b32 %4402, %4415 uniform_width
        %4418 void ST %4417, %4416
        %4419 1/int32 LD %4416
        %4420 2/int32 LD %4142
        %4421 2/int32 SHUF %4420.x-,  %4419.-x
        %4422 void ST %4421, %4142
        %4423 2/int32 LD %4142
        %4424 1/int32 SHUF %4423.y
        %4425 temp(0) * 1/int32 INSTA 
        %4426 1/int32 intr.v_readlane_b32 %4424, int32{31} uniform_width pinned
        %4427 void ST %4426, %4425
        %4428 2/int32 LD %4142
        %4429 1/int32 SHUF %4428.y
        %4430 temp(0) * 1/int32 INSTA 
        %4431 1/int32 intr.v_readlane_b32 %4429, int32{63} uniform_width pinned
        %4432 void ST %4431, %4430
        %4433 1/int32 LD %4425
        %4434 1/int32 LD %4430
        %4435 1/int32 OR %4433, %4434
        %4436 2/int32 LD %4142
        %4437 2/int32 SHUF %4436.x-,  %4435.-x
        %4438 void ST %4437, %4142
        %4440 2/int32 LD %4142
        %4441 1/int64 CONV_reinterp %4440
        %4442 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4057
        %4443 generic(0) * 1/int32 GETELEMPTR %4442, int32{0}, int32{3}
        %4444 1/int32 LD %4443
        %4445 1/int64 CONV %4444
        %4446 1/int64 LSHR %4441, %4445
        %4447 1/int64 AND int64{1}, %4446
        %4448 1/int32 CONV %4447
        %4449 void ST %4448, %4062
        %4096 void BR 
        --> block:4086

      block:4086 - if-then
        <-- block:4093, block:4095
        %4087 void BR 
        --> block:4564

      block:4564
        <-- block:4084, block:4086
        %4565 void BR 
        --> block:4052

      block:4052 - exit
        <-- block:4564
        --> 


  func:void ReindexPrimitives(Ngg::NggCtx&, bool, bool, uint)
    arguments:
      %4599 in    arg: generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %4602 in    arg: 1/int32 - 'activeVert'
      %4605 in    arg: 1/int32 - 'visiblePrim'
      %4608 in    arg: 1/int32 - 'dstVertexAddr'

    dwarf:
      ReindexPrimitives(862 - 862)

    body:
      block:4596 - entry
        <-- 
        --> block:4628

      block:4628 - if-predicate
        <-- block:4596
        %4600 temp(0) * generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} INSTA 
        %4601 void ST %4599, %4600
        %4603 temp(0) * 1/int32 INSTA 
        %4604 void ST %4602, %4603
        %4606 temp(0) * 1/int32 INSTA 
        %4607 void ST %4605, %4606
        %4609 temp(0) * 1/int32 INSTA 
        %4610 void ST %4608, %4609
        %4611 temp(0) * 1/int32 'options': INSTA 
        %4612 temp(0) * 1/int32 INSTA 
        %4613 1/int32 intr.get_ngg_options 
        %4614 void ST int32{545}, %4612
        %4615 1/int32 LD %4612
        %4616 void ST %4615, %4611
        %4617 temp(0) * 1/int32 'isSingleWave': INSTA 
        %4618 1/int32 LD %4611
        %4619 1/int32 AND %4618, int32{1}
        %4620 1/int32 CMOV.ne (int32{0}, %4619) int32{1}, int32{0}
        %4621 void ST %4620, %4617
        %4622 1/int32 LD %4617
        %4623 1/int1 CMP.ne %4622, int32{0}
        %4630 void BRC %4623
        --> block:4641, block:4860

      block:4860 - if-predicate
        <-- block:4628
        %4856 1/int32 LD %4603
        %4857 1/int1 CMP.ne %4856, int32{0}
        %4862 void BRC %4857
        --> block:4858, block:4875

      block:4858 - if-then
        <-- block:4860
        %4863 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4864 generic(0) * 1/int32 GETELEMPTR %4863, int32{0}, int32{3}
        %4865 1/int32 LD %4864
        %4866 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4865
        %4867 1/int32 LD %4609
        %4868 void ST %4867, %4866
        %4859 void BR 
        --> block:4875

      block:4875 - if-predicate
        <-- block:4858, block:4860
        %4869 1/int32 LD %4617
        %4870 void CALL 'void __ldsBarrier(bool)', byval %4869
        %4871 1/int32 LD %4606
        %4872 1/int1 CMP.ne %4871, int32{0}
        %4877 void BRC %4872
        --> block:4873, block:4624

      block:4873 - if-then
        <-- block:4875
        %4878 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4879 generic(0) * 1/int32[6] GETELEMPTR %4878, int32{0}, int32{9}
        %4880 generic(0) * 1/int32 GETELEMPTR %4879, int32{0}, int32{0}
        %4881 1/int32 LD %4880
        %4882 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4881
        %4883 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4884 generic(0) * 1/int32[6] GETELEMPTR %4883, int32{0}, int32{9}
        %4885 generic(0) * 1/int32 GETELEMPTR %4884, int32{0}, int32{0}
        %4886 1/int32 LD %4882
        %4887 void ST %4886, %4885
        %4888 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4889 generic(0) * 1/int32[6] GETELEMPTR %4888, int32{0}, int32{9}
        %4890 generic(0) * 1/int32 GETELEMPTR %4889, int32{0}, int32{1}
        %4891 1/int32 LD %4890
        %4892 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4891
        %4893 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4894 generic(0) * 1/int32[6] GETELEMPTR %4893, int32{0}, int32{9}
        %4895 generic(0) * 1/int32 GETELEMPTR %4894, int32{0}, int32{1}
        %4896 1/int32 LD %4892
        %4897 void ST %4896, %4895
        %4898 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4899 generic(0) * 1/int32[6] GETELEMPTR %4898, int32{0}, int32{9}
        %4900 generic(0) * 1/int32 GETELEMPTR %4899, int32{0}, int32{2}
        %4901 1/int32 LD %4900
        %4902 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %4901
        %4903 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4904 generic(0) * 1/int32[6] GETELEMPTR %4903, int32{0}, int32{9}
        %4905 generic(0) * 1/int32 GETELEMPTR %4904, int32{0}, int32{2}
        %4906 1/int32 LD %4902
        %4907 void ST %4906, %4905
        %4874 void BR 
        --> block:4624

      block:4624 - if-else
        <-- block:4873, block:4875
        %4908 1/int32 LD %4617
        %4909 void CALL 'void __ldsBarrier(bool)', byval %4908
        %4625 void BR 
        --> block:4597

      block:4641 - if-predicate
        <-- block:4628
        %4631 temp(0) * 1/int32 INSTA 
        %4632 1/int32 intr.GET_WAVEMODE 
        %4633 void ST %4632, %4631
        %4634 1/int32 LD %4631
        %4635 1/int32 CMOV.eq (%4634, int32{1}) int32{1}, int32{0}
        %4636 1/int1 CMP.ne %4635, int32{0}
        %4643 void BRC %4636
        --> block:4639, block:4637

      block:4637 - if-else
        <-- block:4641
        %4757 temp(0) * 1/int32 'b': INSTA 
        %4758 1/int32 LD %4603
        %4759 void CALL 'uint ballot(int)', byval %4758, byref %4757
        %4760 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_94) {1/int32} 'getCompactIndex32': INSTA 
        %4761 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_94) {1/int32} INSTA 
        %4762 temp(0) * 1/int32 GETELEMPTR %4761, int32{0}, int32{0}
        %4763 1/int32 LD %4757
        %4764 void ST %4763, %4762
        %4765 temp(0) * 1/int32 GETELEMPTR %4761, int32{0}, int32{0}
        %4766 temp(0) * 1/int32 GETELEMPTR %4760, int32{0}, int32{0}
        %4767 1/int32 LD %4765
        %4768 void ST %4767, %4766
        %4769 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4770 generic(0) * 1/int32[6] GETELEMPTR %4769, int32{0}, int32{9}
        %4771 generic(0) * 1/int32 GETELEMPTR %4770, int32{0}, int32{0}
        %4772 1/int32 LD %4771
        %4773 temp(0) * 1/int32 INSTA 
        %4828 void CALL 'uint @lambda_94::operator()(uint) const', byval %4772, byref %4773, byref %4760
        %4829 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4830 generic(0) * 1/int32[6] GETELEMPTR %4829, int32{0}, int32{9}
        %4831 generic(0) * 1/int32 GETELEMPTR %4830, int32{0}, int32{0}
        %4832 1/int32 LD %4773
        %4833 void ST %4832, %4831
        %4834 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4835 generic(0) * 1/int32[6] GETELEMPTR %4834, int32{0}, int32{9}
        %4836 generic(0) * 1/int32 GETELEMPTR %4835, int32{0}, int32{1}
        %4837 1/int32 LD %4836
        %4838 temp(0) * 1/int32 INSTA 
        %4839 void CALL 'uint @lambda_94::operator()(uint) const', byval %4837, byref %4838, byref %4760
        %4840 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4841 generic(0) * 1/int32[6] GETELEMPTR %4840, int32{0}, int32{9}
        %4842 generic(0) * 1/int32 GETELEMPTR %4841, int32{0}, int32{1}
        %4843 1/int32 LD %4838
        %4844 void ST %4843, %4842
        %4845 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4846 generic(0) * 1/int32[6] GETELEMPTR %4845, int32{0}, int32{9}
        %4847 generic(0) * 1/int32 GETELEMPTR %4846, int32{0}, int32{2}
        %4848 1/int32 LD %4847
        %4849 temp(0) * 1/int32 INSTA 
        %4850 void CALL 'uint @lambda_94::operator()(uint) const', byval %4848, byref %4849, byref %4760
        %4851 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4852 generic(0) * 1/int32[6] GETELEMPTR %4851, int32{0}, int32{9}
        %4853 generic(0) * 1/int32 GETELEMPTR %4852, int32{0}, int32{2}
        %4854 1/int32 LD %4849
        %4855 void ST %4854, %4853
        %4638 void BR 
        --> block:4626

      block:4639 - if-then
        <-- block:4641
        %4644 temp(0) * 1/int64 'b': INSTA 
        %4645 1/int32 LD %4603
        %4646 void CALL 'ulong ballot(int)', byval %4645, byref %4644
        %4647 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_93) {1/int64} 'getCompactIndex64': INSTA 
        %4648 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_93) {1/int64} INSTA 
        %4649 temp(0) * 1/int64 GETELEMPTR %4648, int32{0}, int32{0}
        %4650 1/int64 LD %4644
        %4651 void ST %4650, %4649
        %4652 temp(0) * 1/int64 GETELEMPTR %4648, int32{0}, int32{0}
        %4653 temp(0) * 1/int64 GETELEMPTR %4647, int32{0}, int32{0}
        %4654 1/int64 LD %4652
        %4655 void ST %4654, %4653
        %4656 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4657 generic(0) * 1/int32[6] GETELEMPTR %4656, int32{0}, int32{9}
        %4658 generic(0) * 1/int32 GETELEMPTR %4657, int32{0}, int32{0}
        %4659 1/int32 LD %4658
        %4660 temp(0) * 1/int32 INSTA 
        %4729 void CALL 'uint @lambda_93::operator()(uint) const', byval %4659, byref %4660, byref %4647
        %4730 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4731 generic(0) * 1/int32[6] GETELEMPTR %4730, int32{0}, int32{9}
        %4732 generic(0) * 1/int32 GETELEMPTR %4731, int32{0}, int32{0}
        %4733 1/int32 LD %4660
        %4734 void ST %4733, %4732
        %4735 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4736 generic(0) * 1/int32[6] GETELEMPTR %4735, int32{0}, int32{9}
        %4737 generic(0) * 1/int32 GETELEMPTR %4736, int32{0}, int32{1}
        %4738 1/int32 LD %4737
        %4739 temp(0) * 1/int32 INSTA 
        %4740 void CALL 'uint @lambda_93::operator()(uint) const', byval %4738, byref %4739, byref %4647
        %4741 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4742 generic(0) * 1/int32[6] GETELEMPTR %4741, int32{0}, int32{9}
        %4743 generic(0) * 1/int32 GETELEMPTR %4742, int32{0}, int32{1}
        %4744 1/int32 LD %4739
        %4745 void ST %4744, %4743
        %4746 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4747 generic(0) * 1/int32[6] GETELEMPTR %4746, int32{0}, int32{9}
        %4748 generic(0) * 1/int32 GETELEMPTR %4747, int32{0}, int32{2}
        %4749 1/int32 LD %4748
        %4750 temp(0) * 1/int32 INSTA 
        %4751 void CALL 'uint @lambda_93::operator()(uint) const', byval %4749, byref %4750, byref %4647
        %4752 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4600
        %4753 generic(0) * 1/int32[6] GETELEMPTR %4752, int32{0}, int32{9}
        %4754 generic(0) * 1/int32 GETELEMPTR %4753, int32{0}, int32{2}
        %4755 1/int32 LD %4750
        %4756 void ST %4755, %4754
        %4640 void BR 
        --> block:4626

      block:4626 - if-then
        <-- block:4637, block:4639
        %4627 void BR 
        --> block:4597

      block:4597
        <-- block:4624, block:4626
        %4598 void BR 
        --> block:4910

      block:4910 - return-block
        <-- block:4597
        %4911 void BR 
        --> block:4595

      block:4595 - exit
        <-- block:4910
        --> 


  func:uint @lambda_93::operator()(uint) const
    arguments:
      %4666 in    arg: 1/int32 - 'index'
      %4669 out   arg: temp(0) * 1/int32 - 'operator()'
      %4670 inout arg: temp(0) * struct (Ngg::ReindexPrimitives::@lambda_93) {1/int64} - 'this'

    dwarf:
      operator()(870 - 870)

    body:
      block:4663 - entry
        <-- 
        --> block:4727

      block:4727
        <-- block:4663
        %4667 temp(0) * 1/int32 INSTA 
        %4668 void ST %4666, %4667
        %4671 temp(0) * 1/int64 'm': INSTA 
        %4673 1/int32 LD %4667
        %4674 1/int64 CONV %4673
        %4675 1/int64 SHL int64{1}, %4674
        %4678 1/int64 ADD %4675, int64{-1}
        %4679 void ST %4678, %4671
        %4680 temp(0) * 1/int64 GETELEMPTR %4670, int32{0}, int32{0}
        %4681 1/int64 LD %4671
        %4682 1/int64 LD %4680
        %4683 1/int64 AND %4681, %4682
        %4726 void CALL 'uint popcnt(ulong)', byval %4683, byref %4669
        %4728 void BR 
        --> block:4662

      block:4662 - exit
        <-- block:4727
        --> 


  func:uint popcnt(ulong)
    arguments:
      %4689 in    arg: 1/int64 - 'v'
      %4692 out   arg: temp(0) * 1/int32 - 'popcnt'

    dwarf:
      popcnt(872 - 872)

    body:
      block:4686 - entry
        <-- 
        --> block:4724

      block:4724
        <-- block:4686
        %4690 temp(0) * 1/int64 INSTA 
        %4691 void ST %4689, %4690
        %4693 temp(0) * 2/int32 'p': INSTA 
        %4694 1/int64 LD %4690
        %4695 2/int32 CONV_reinterp %4694
        %4696 void ST %4695, %4693
        %4697 1/int64 LD %4690
        %4698 temp(0) * struct (--anonymous--) {} INSTA 
        %4699 struct (--anonymous--) {} intr.__uniformity %4697
        %4700 void ST %4699, %4698
        %4701 1/int64 LD %4690
        %4702 temp(0) * 1/int32 INSTA 
        %4703 1/int32 intr.s_bcnt1_i32_b64 %4701 uniform_width
        %4704 void ST %4703, %4702
        %4705 1/int32 LD %4702
        %4706 2/int32 LD %4693
        %4707 1/int32 SHUF %4706.x
        %4708 2/int32 LD %4693
        %4709 1/int32 SHUF %4708.y
        %4710 temp(0) * 1/int32 INSTA 
        %4711 1/int32 intr.v_bcnt_u32_b32 %4709, int32{0} uniform_width
        %4712 void ST %4711, %4710
        %4713 1/int32 LD %4710
        %4714 temp(0) * 1/int32 INSTA 
        %4715 1/int32 intr.v_bcnt_u32_b32 %4707, %4713 uniform_width
        %4716 void ST %4715, %4714
        %4717 1/int32 LD %4714
        %4718 temp(0) * 1/int32 INSTA 
        %4719 struct (--anonymous--) {} LD %4698
        %4720 1/int32 intr.__scalar_select %4719, %4705, %4717
        %4721 void ST %4720, %4718
        %4722 1/int32 LD %4718
        %4723 void ST %4722, %4692
        %4725 void BR 
        --> block:4685

      block:4685 - exit
        <-- block:4724
        --> 


  func:uint @lambda_94::operator()(uint) const
    arguments:
      %4779 in    arg: 1/int32 - 'index'
      %4782 out   arg: temp(0) * 1/int32 - 'operator()'
      %4783 inout arg: temp(0) * struct (Ngg::ReindexPrimitives::@lambda_94) {1/int32} - 'this'

    dwarf:
      operator()(878 - 878)

    body:
      block:4776 - entry
        <-- 
        --> block:4826

      block:4826
        <-- block:4776
        %4780 temp(0) * 1/int32 INSTA 
        %4781 void ST %4779, %4780
        %4784 temp(0) * 1/int32 'm': INSTA 
        %4785 1/int32 LD %4780
        %4786 1/int32 SHL int32{1}, %4785
        %4788 1/int32 ADD %4786, int32{-1}
        %4789 void ST %4788, %4784
        %4790 temp(0) * 1/int32 GETELEMPTR %4783, int32{0}, int32{0}
        %4791 1/int32 LD %4784
        %4792 1/int32 LD %4790
        %4793 1/int32 AND %4791, %4792
        %4825 void CALL 'uint popcnt(uint)', byval %4793, byref %4782
        %4827 void BR 
        --> block:4775

      block:4775 - exit
        <-- block:4826
        --> 


  func:uint popcnt(uint)
    arguments:
      %4799 in    arg: 1/int32 - 'v'
      %4802 out   arg: temp(0) * 1/int32 - 'popcnt'

    dwarf:
      popcnt(880 - 880)

    body:
      block:4796 - entry
        <-- 
        --> block:4823

      block:4823
        <-- block:4796
        %4800 temp(0) * 1/int32 INSTA 
        %4801 void ST %4799, %4800
        %4803 1/int32 LD %4800
        %4804 temp(0) * struct (--anonymous--) {} INSTA 
        %4805 struct (--anonymous--) {} intr.__uniformity %4803
        %4806 void ST %4805, %4804
        %4807 1/int32 LD %4800
        %4808 temp(0) * 1/int32 INSTA 
        %4809 1/int32 intr.s_bcnt1_i32_b32 %4807 uniform_width
        %4810 void ST %4809, %4808
        %4811 1/int32 LD %4808
        %4812 1/int32 LD %4800
        %4813 temp(0) * 1/int32 INSTA 
        %4814 1/int32 intr.v_bcnt_u32_b32 %4812, int32{0} uniform_width
        %4815 void ST %4814, %4813
        %4816 1/int32 LD %4813
        %4817 temp(0) * 1/int32 INSTA 
        %4818 struct (--anonymous--) {} LD %4804
        %4819 1/int32 intr.__scalar_select %4818, %4811, %4816
        %4820 void ST %4819, %4817
        %4821 1/int32 LD %4817
        %4822 void ST %4821, %4802
        %4824 void BR 
        --> block:4795

      block:4795 - exit
        <-- block:4823
        --> 


  func:uint make_index_for_export(uint, uint, uint, uint)
    arguments:
      %4946 in    arg: 1/int32 - 'vtx0'
      %4949 in    arg: 1/int32 - 'vtx1'
      %4952 in    arg: 1/int32 - 'vtx2'
      %4955 in    arg: 1/int32 - 'kill'
      %4958 out   arg: temp(0) * 1/int32 - 'make_index_for_export'

    dwarf:
      make_index_for_export(886 - 886)

    body:
      block:4943 - entry
        <-- 
        --> block:4967

      block:4967 - if-predicate
        <-- block:4943
        %4947 temp(0) * 1/int32 INSTA 
        %4948 void ST %4946, %4947
        %4950 temp(0) * 1/int32 INSTA 
        %4951 void ST %4949, %4950
        %4953 temp(0) * 1/int32 INSTA 
        %4954 void ST %4952, %4953
        %4956 temp(0) * 1/int32 INSTA 
        %4957 void ST %4955, %4956
        %4959 temp(0) * 1/int32 INSTA 
        %4960 void CALL 'bool IsGen5()', byref %4959
        %4961 1/int32 LD %4959
        %4962 1/int1 CMP.ne %4961, int32{0}
        %4969 void BRC %4962
        --> block:4981, block:4994

      block:4994
        <-- block:4967
        %4983 1/int32 LD %4950
        %4984 1/int32 SHL %4983, int32{10}
        %4985 1/int32 LD %4947
        %4986 1/int32 OR %4985, %4984
        %4987 1/int32 LD %4953
        %4988 1/int32 SHL %4987, int32{20}
        %4989 1/int32 OR %4986, %4988
        %4990 1/int32 LD %4956
        %4991 1/int32 SHL %4990, int32{31}
        %4992 1/int32 OR %4989, %4991
        %4993 void ST %4992, %4958
        %4995 void BR 
        --> block:4942

      block:4981
        <-- block:4967
        %4970 1/int32 LD %4950
        %4971 1/int32 SHL %4970, int32{9}
        %4972 1/int32 LD %4947
        %4973 1/int32 OR %4972, %4971
        %4974 1/int32 LD %4953
        %4975 1/int32 SHL %4974, int32{18}
        %4976 1/int32 OR %4973, %4975
        %4977 1/int32 LD %4956
        %4978 1/int32 SHL %4977, int32{31}
        %4979 1/int32 OR %4976, %4978
        %4980 void ST %4979, %4958
        %4982 void BR 
        --> block:4942

      block:4942 - exit
        <-- block:4981, block:4994
        --> 


  func:void PerformCompaction(Ngg::NggVsConfig const&, uint, bool, uint, uint, Ngg::NggVsOutput&, bool, uint, uint, uint&, uint&)
    arguments:
      %5017 in    arg: generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'
      %5020 in    arg: 1/int32 - 'group_tid'
      %5023 in    arg: 1/int32 - 'srcVertexMask'
      %5026 in    arg: 1/int32 - 'dstVertexAddr'
      %5029 in    arg: 1/int32 - 'numVertex'
      %5032 in    arg: generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} - 'vsOutput'
      %5035 in    arg: 1/int32 - 'visiblePrim'
      %5038 in    arg: 1/int32 - 'dstPrimAddr'
      %5041 in    arg: 1/int32 - 'numPrims'
      %5044 in    arg: generic(0) * 1/int32 - 'primForExport'
      %5047 in    arg: generic(0) * 1/int32 - 'primIdForExport'

    dwarf:
      PerformCompaction(892 - 892)

    body:
      block:5014 - entry
        <-- 
        --> block:5083

      block:5083 - if-predicate
        <-- block:5014
        %5018 temp(0) * generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} INSTA 
        %5019 void ST %5017, %5018
        %5021 temp(0) * 1/int32 INSTA 
        %5022 void ST %5020, %5021
        %5024 temp(0) * 1/int32 INSTA 
        %5025 void ST %5023, %5024
        %5027 temp(0) * 1/int32 INSTA 
        %5028 void ST %5026, %5027
        %5030 temp(0) * 1/int32 INSTA 
        %5031 void ST %5029, %5030
        %5033 temp(0) * generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %5034 void ST %5032, %5033
        %5036 temp(0) * 1/int32 INSTA 
        %5037 void ST %5035, %5036
        %5039 temp(0) * 1/int32 INSTA 
        %5040 void ST %5038, %5039
        %5042 temp(0) * 1/int32 INSTA 
        %5043 void ST %5041, %5042
        %5045 temp(0) * generic(0) * 1/int32 INSTA 
        %5046 void ST %5044, %5045
        %5048 temp(0) * generic(0) * 1/int32 INSTA 
        %5049 void ST %5047, %5048
        %5050 temp(0) * 1/int32 'options': INSTA 
        %5051 temp(0) * 1/int32 INSTA 
        %5052 1/int32 intr.get_ngg_options 
        %5053 void ST int32{545}, %5051
        %5054 1/int32 LD %5051
        %5055 void ST %5054, %5050
        %5056 temp(0) * 1/int32 'isSingleWave': INSTA 
        %5057 1/int32 LD %5050
        %5058 1/int32 AND %5057, int32{1}
        %5059 1/int32 CMOV.ne (int32{0}, %5058) int32{1}, int32{0}
        %5060 void ST %5059, %5056
        %5061 temp(0) * 1/int32 'enablePrimId': INSTA 
        %5062 1/int32 LD %5050
        %5063 1/int32 AND %5062, int32{64}
        %5064 1/int32 CMOV.ne (int32{0}, %5063) int32{1}, int32{0}
        %5065 void ST %5064, %5061
        %5066 temp(0) * 1/int32 'enableKillPrim': INSTA 
        %5067 1/int32 LD %5050
        %5068 1/int32 AND %5067, int32{16}
        %5069 1/int32 CMOV.ne (int32{0}, %5068) int32{1}, int32{0}
        %5070 void ST %5069, %5066
        %5071 temp(0) * 1/int32 INSTA 
        %5072 1/int32 intr.GET_WAVEMODE 
        %5073 void ST %5072, %5071
        %5074 1/int32 LD %5071
        %5075 1/int32 CMOV.eq (%5074, int32{0}) int32{1}, int32{0}
        %5076 1/int32 LD %5056
        %5077 1/int32 AND %5076, %5075
        %5078 1/int1 CMP.ne %5077, int32{0}
        %5085 void BRC %5078
        --> block:5095, block:5402

      block:5402 - if-predicate
        <-- block:5083
        %5393 1/int32 LD %5056
        %5394 1/int32 LD %5024
        %5395 temp(0) * 1/int32 INSTA 
        %5396 1/int32 intr.FORCE_FLATTEN_IF %5393, %5394
        %5397 void ST %5396, %5395
        %5398 1/int32 LD %5395
        %5399 1/int1 CMP.ne %5398, int32{0}
        %5404 void BRC %5399
        --> block:5405, block:5488

      block:5405 - for-init
        <-- block:5402
        %5414 temp(0) * 1/int32 'p': INSTA 
        %5415 void ST int32{0}, %5414
        %5406 void BR 
        --> block:5407

      block:5407 - for-condition[unroll:full(0)]
        <-- block:5405, block:5411
        %5416 1/int32 LD %5414
        %5417 1/int32 CMOV.slt (%5416, int32{5}) int32{1}, int32{0}
        %5418 1/int1 CMP.ne %5417, int32{0}
        %5413 void BRC %5418
        --> block:5431, block:5444

      block:5444 - for-init
        <-- block:5407
        %5453 temp(0) * 1/int32 'p': INSTA 
        %5454 void ST int32{0}, %5453
        %5445 void BR 
        --> block:5446

      block:5446 - for-condition[unroll:full(0)]
        <-- block:5444, block:5450
        %5455 1/int32 LD %5453
        %5456 1/int32 CMOV.slt (%5455, int32{32}) int32{1}, int32{0}
        %5457 1/int1 CMP.ne %5456, int32{0}
        %5452 void BRC %5457
        --> block:5470, block:5400

      block:5400 - if-then
        <-- block:5446
        %5401 void BR 
        --> block:5488

      block:5470 - if-predicate
        <-- block:5446
        %5461 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5018
        %5462 generic(0) * 1/int32[32] GETELEMPTR %5461, int32{0}, int32{2}
        %5463 1/int32 LD %5453
        %5464 generic(0) * 1/int32 GETELEMPTR %5462, int32{0}, %5463
        %5465 1/int32 LD %5464
        %5466 1/int32 CMOV.ne (int32{0}, %5465) int32{1}, int32{0}
        %5467 1/int1 CMP.ne %5466, int32{0}
        %5472 void BRC %5467
        --> block:5468, block:5448

      block:5468 - if-then
        <-- block:5470
        %5473 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5474 generic(0) * 4/int32[32] GETELEMPTR %5473, int32{0}, int32{1}
        %5475 1/int32 LD %5453
        %5476 generic(0) * 4/int32 GETELEMPTR %5474, int32{0}, %5475
        %5477 1/int32 LD %5453
        %5478 lds(0) * 4/int32[256] GETELEMPTR %107, int32{0}, %5477
        %5479 1/int32 LD %5027
        %5480 lds(0) * 4/int32 GETELEMPTR %5478, int32{0}, %5479
        %5481 4/int32 LD %5476
        %5482 void ST %5481, %5480
        %5469 void BR 
        --> block:5448

      block:5448 - for-body
        <-- block:5468, block:5470
        %5449 void BR 
        --> block:5450

      block:5450 - for-incr
        <-- block:5448
        %5458 1/int32 LD %5453
        %5459 1/int32 ADD %5458, int32{1}
        %5460 void ST %5459, %5453
        %5451 void BR 
        --> block:5446

      block:5431 - if-predicate
        <-- block:5407
        %5422 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5018
        %5423 generic(0) * 1/int32[5] GETELEMPTR %5422, int32{0}, int32{1}
        %5424 1/int32 LD %5414
        %5425 generic(0) * 1/int32 GETELEMPTR %5423, int32{0}, %5424
        %5426 1/int32 LD %5425
        %5427 1/int32 CMOV.ne (int32{0}, %5426) int32{1}, int32{0}
        %5428 1/int1 CMP.ne %5427, int32{0}
        %5433 void BRC %5428
        --> block:5429, block:5409

      block:5429 - if-then
        <-- block:5431
        %5434 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5435 generic(0) * 4/fp32[5] GETELEMPTR %5434, int32{0}, int32{0}
        %5436 1/int32 LD %5414
        %5437 generic(0) * 4/fp32 GETELEMPTR %5435, int32{0}, %5436
        %5438 1/int32 LD %5414
        %5439 lds(0) * 4/fp32[256] GETELEMPTR %106, int32{0}, %5438
        %5440 1/int32 LD %5027
        %5441 lds(0) * 4/fp32 GETELEMPTR %5439, int32{0}, %5440
        %5442 4/fp32 LD %5437
        %5443 void ST %5442, %5441
        %5430 void BR 
        --> block:5409

      block:5409 - for-body
        <-- block:5429, block:5431
        %5410 void BR 
        --> block:5411

      block:5411 - for-incr
        <-- block:5409
        %5419 1/int32 LD %5414
        %5420 1/int32 ADD %5419, int32{1}
        %5421 void ST %5420, %5414
        %5412 void BR 
        --> block:5407

      block:5488 - if-predicate
        <-- block:5400, block:5402
        %5483 1/int32 LD %5066
        %5484 1/int32 CMOV.eq (int32{0}, %5483) int32{1}, int32{0}
        %5485 1/int1 CMP.ne %5484, int32{0}
        %5490 void BRC %5485
        --> block:5500, block:5533

      block:5500 - if-predicate
        <-- block:5488
        %5491 1/int32 LD %5056
        %5492 1/int32 LD %5036
        %5493 temp(0) * 1/int32 INSTA 
        %5494 1/int32 intr.FORCE_FLATTEN_IF %5491, %5492
        %5495 void ST %5494, %5493
        %5496 1/int32 LD %5493
        %5497 1/int1 CMP.ne %5496, int32{0}
        %5502 void BRC %5497
        --> block:5512, block:5486

      block:5512 - if-predicate
        <-- block:5500
        %5503 generic(0) * 1/int32 LD %5045
        %5504 1/int32 LD %5039
        %5505 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %5504
        %5506 1/int32 LD %5503
        %5507 void ST %5506, %5505
        %5508 1/int32 LD %5061
        %5509 1/int1 CMP.ne %5508, int32{0}
        %5514 void BRC %5509
        --> block:5510, block:5498

      block:5510 - if-then
        <-- block:5512
        %5515 generic(0) * 1/int32 LD %5048
        %5516 1/int32 LD %5039
        %5517 lds(0) * 1/int32 GETELEMPTR %109, int32{0}, %5516
        %5518 1/int32 LD %5515
        %5519 void ST %5518, %5517
        %5511 void BR 
        --> block:5498

      block:5498 - if-then
        <-- block:5510, block:5512
        %5499 void BR 
        --> block:5486

      block:5486 - if-then
        <-- block:5498, block:5500
        %5487 void BR 
        --> block:5533

      block:5533 - if-predicate
        <-- block:5486, block:5488
        %5520 1/int32 LD %5056
        %5521 void CALL 'void __ldsBarrier(bool)', byval %5520
        %5522 1/int32 LD %5056
        %5523 1/int32 LD %5021
        %5524 1/int32 LD %5030
        %5525 1/int32 CMOV.ult (%5523, %5524) int32{1}, int32{0}
        %5526 temp(0) * 1/int32 INSTA 
        %5527 1/int32 intr.FORCE_FLATTEN_IF %5522, %5525
        %5528 void ST %5527, %5526
        %5529 1/int32 LD %5526
        %5530 1/int1 CMP.ne %5529, int32{0}
        %5535 void BRC %5530
        --> block:5536, block:5619

      block:5536 - for-init
        <-- block:5533
        %5545 temp(0) * 1/int32 'p': INSTA 
        %5546 void ST int32{0}, %5545
        %5537 void BR 
        --> block:5538

      block:5538 - for-condition[unroll:full(0)]
        <-- block:5536, block:5542
        %5547 1/int32 LD %5545
        %5548 1/int32 CMOV.slt (%5547, int32{5}) int32{1}, int32{0}
        %5549 1/int1 CMP.ne %5548, int32{0}
        %5544 void BRC %5549
        --> block:5562, block:5575

      block:5575 - for-init
        <-- block:5538
        %5584 temp(0) * 1/int32 'p': INSTA 
        %5585 void ST int32{0}, %5584
        %5576 void BR 
        --> block:5577

      block:5577 - for-condition[unroll:full(0)]
        <-- block:5575, block:5581
        %5586 1/int32 LD %5584
        %5587 1/int32 CMOV.slt (%5586, int32{32}) int32{1}, int32{0}
        %5588 1/int1 CMP.ne %5587, int32{0}
        %5583 void BRC %5588
        --> block:5601, block:5531

      block:5531 - if-then
        <-- block:5577
        %5532 void BR 
        --> block:5619

      block:5601 - if-predicate
        <-- block:5577
        %5592 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5018
        %5593 generic(0) * 1/int32[32] GETELEMPTR %5592, int32{0}, int32{2}
        %5594 1/int32 LD %5584
        %5595 generic(0) * 1/int32 GETELEMPTR %5593, int32{0}, %5594
        %5596 1/int32 LD %5595
        %5597 1/int32 CMOV.ne (int32{0}, %5596) int32{1}, int32{0}
        %5598 1/int1 CMP.ne %5597, int32{0}
        %5603 void BRC %5598
        --> block:5599, block:5579

      block:5599 - if-then
        <-- block:5601
        %5604 1/int32 LD %5584
        %5605 lds(0) * 4/int32[256] GETELEMPTR %107, int32{0}, %5604
        %5606 1/int32 LD %5021
        %5607 lds(0) * 4/int32 GETELEMPTR %5605, int32{0}, %5606
        %5608 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5609 generic(0) * 4/int32[32] GETELEMPTR %5608, int32{0}, int32{1}
        %5610 1/int32 LD %5584
        %5611 generic(0) * 4/int32 GETELEMPTR %5609, int32{0}, %5610
        %5612 4/int32 LD %5607
        %5613 void ST %5612, %5611
        %5600 void BR 
        --> block:5579

      block:5579 - for-body
        <-- block:5599, block:5601
        %5580 void BR 
        --> block:5581

      block:5581 - for-incr
        <-- block:5579
        %5589 1/int32 LD %5584
        %5590 1/int32 ADD %5589, int32{1}
        %5591 void ST %5590, %5584
        %5582 void BR 
        --> block:5577

      block:5562 - if-predicate
        <-- block:5538
        %5553 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5018
        %5554 generic(0) * 1/int32[5] GETELEMPTR %5553, int32{0}, int32{1}
        %5555 1/int32 LD %5545
        %5556 generic(0) * 1/int32 GETELEMPTR %5554, int32{0}, %5555
        %5557 1/int32 LD %5556
        %5558 1/int32 CMOV.ne (int32{0}, %5557) int32{1}, int32{0}
        %5559 1/int1 CMP.ne %5558, int32{0}
        %5564 void BRC %5559
        --> block:5560, block:5540

      block:5560 - if-then
        <-- block:5562
        %5565 1/int32 LD %5545
        %5566 lds(0) * 4/fp32[256] GETELEMPTR %106, int32{0}, %5565
        %5567 1/int32 LD %5021
        %5568 lds(0) * 4/fp32 GETELEMPTR %5566, int32{0}, %5567
        %5569 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5570 generic(0) * 4/fp32[5] GETELEMPTR %5569, int32{0}, int32{0}
        %5571 1/int32 LD %5545
        %5572 generic(0) * 4/fp32 GETELEMPTR %5570, int32{0}, %5571
        %5573 4/fp32 LD %5568
        %5574 void ST %5573, %5572
        %5561 void BR 
        --> block:5540

      block:5540 - for-body
        <-- block:5560, block:5562
        %5541 void BR 
        --> block:5542

      block:5542 - for-incr
        <-- block:5540
        %5550 1/int32 LD %5545
        %5551 1/int32 ADD %5550, int32{1}
        %5552 void ST %5551, %5545
        %5543 void BR 
        --> block:5538

      block:5619 - if-predicate
        <-- block:5531, block:5533
        %5614 1/int32 LD %5066
        %5615 1/int32 CMOV.eq (int32{0}, %5614) int32{1}, int32{0}
        %5616 1/int1 CMP.ne %5615, int32{0}
        %5621 void BRC %5616
        --> block:5633, block:5079

      block:5633 - if-predicate
        <-- block:5619
        %5622 1/int32 LD %5056
        %5623 1/int32 LD %5021
        %5624 1/int32 LD %5042
        %5625 1/int32 CMOV.ult (%5623, %5624) int32{1}, int32{0}
        %5626 temp(0) * 1/int32 INSTA 
        %5627 1/int32 intr.FORCE_FLATTEN_IF %5622, %5625
        %5628 void ST %5627, %5626
        %5629 1/int32 LD %5626
        %5630 1/int1 CMP.ne %5629, int32{0}
        %5635 void BRC %5630
        --> block:5645, block:5617

      block:5645 - if-predicate
        <-- block:5633
        %5636 1/int32 LD %5021
        %5637 lds(0) * 1/int32 GETELEMPTR %108, int32{0}, %5636
        %5638 generic(0) * 1/int32 LD %5045
        %5639 1/int32 LD %5637
        %5640 void ST %5639, %5638
        %5641 1/int32 LD %5061
        %5642 1/int1 CMP.ne %5641, int32{0}
        %5647 void BRC %5642
        --> block:5643, block:5631

      block:5643 - if-then
        <-- block:5645
        %5648 1/int32 LD %5021
        %5649 lds(0) * 1/int32 GETELEMPTR %109, int32{0}, %5648
        %5650 generic(0) * 1/int32 LD %5048
        %5651 1/int32 LD %5649
        %5652 void ST %5651, %5650
        %5644 void BR 
        --> block:5631

      block:5631 - if-then
        <-- block:5643, block:5645
        %5632 void BR 
        --> block:5617

      block:5617 - if-then
        <-- block:5631, block:5633
        %5618 void BR 
        --> block:5079

      block:5079 - if-else
        <-- block:5617, block:5619
        %5080 void BR 
        --> block:5015

      block:5095 - if-predicate
        <-- block:5083
        %5086 temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} 'dstPermute': INSTA 
        %5087 temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} INSTA 
        %5088 1/int32 LD %5024
        %5089 temp(0) * 1/int32 INSTA 
        %5090 1/int1 CMP.ne %5088, int32{0}
        %5097 void BRC %5090
        --> block:5093, block:5091

      block:5091 - if-else
        <-- block:5095
        %5101 void ST int32{-1}, %5089
        %5092 void BR 
        --> block:5104

      block:5093 - if-then
        <-- block:5095
        %5098 1/int32 LD %5027
        %5099 void ST %5098, %5089
        %5094 void BR 
        --> block:5104

      block:5104 - for-init
        <-- block:5091, block:5093
        %5102 1/int32 LD %5089
        %5103 void ST %5102, %5027
        %5113 temp(0) * 1/int32 'p': INSTA 
        %5114 void ST int32{0}, %5113
        %5105 void BR 
        --> block:5106

      block:5106 - for-condition[unroll:full(0)]
        <-- block:5104, block:5110
        %5115 1/int32 LD %5113
        %5116 1/int32 CMOV.slt (%5115, int32{5}) int32{1}, int32{0}
        %5117 1/int1 CMP.ne %5116, int32{0}
        %5112 void BRC %5117
        --> block:5130, block:5226

      block:5226 - for-init
        <-- block:5106
        %5235 temp(0) * 1/int32 'p': INSTA 
        %5236 void ST int32{0}, %5235
        %5227 void BR 
        --> block:5228

      block:5228 - for-condition[unroll:full(0)]
        <-- block:5226, block:5232
        %5237 1/int32 LD %5235
        %5238 1/int32 CMOV.slt (%5237, int32{32}) int32{1}, int32{0}
        %5239 1/int1 CMP.ne %5238, int32{0}
        %5234 void BRC %5239
        --> block:5252, block:5351

      block:5351 - if-predicate
        <-- block:5228
        %5346 1/int32 LD %5066
        %5347 1/int32 CMOV.eq (int32{0}, %5346) int32{1}, int32{0}
        %5348 1/int1 CMP.ne %5347, int32{0}
        %5353 void BRC %5348
        --> block:5361, block:5081

      block:5361 - if-predicate
        <-- block:5351
        %5354 1/int32 LD %5036
        %5355 temp(0) * 1/int32 INSTA 
        %5356 1/int1 CMP.ne %5354, int32{0}
        %5363 void BRC %5356
        --> block:5359, block:5357

      block:5357 - if-else
        <-- block:5361
        %5367 void ST int32{-1}, %5355
        %5358 void BR 
        --> block:5382

      block:5359 - if-then
        <-- block:5361
        %5364 1/int32 LD %5039
        %5365 void ST %5364, %5355
        %5360 void BR 
        --> block:5382

      block:5382 - if-predicate
        <-- block:5357, block:5359
        %5368 1/int32 LD %5355
        %5369 void ST %5368, %5039
        %5370 1/int32 LD %5039
        %5371 generic(0) * 1/int32 LD %5045
        %5372 1/int32 LD %5371
        %5373 temp(0) * 1/int32 INSTA 
        %5374 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5370, byval %5372, byref %5373, byref %5086
        %5375 generic(0) * 1/int32 LD %5045
        %5376 1/int32 LD %5373
        %5377 void ST %5376, %5375
        %5378 1/int32 LD %5061
        %5379 1/int1 CMP.ne %5378, int32{0}
        %5384 void BRC %5379
        --> block:5380, block:5349

      block:5380 - if-then
        <-- block:5382
        %5385 1/int32 LD %5039
        %5386 generic(0) * 1/int32 LD %5048
        %5387 1/int32 LD %5386
        %5388 temp(0) * 1/int32 INSTA 
        %5389 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5385, byval %5387, byref %5388, byref %5086
        %5390 generic(0) * 1/int32 LD %5048
        %5391 1/int32 LD %5388
        %5392 void ST %5391, %5390
        %5381 void BR 
        --> block:5349

      block:5349 - if-then
        <-- block:5380, block:5382
        %5350 void BR 
        --> block:5081

      block:5081 - if-then
        <-- block:5349, block:5351
        %5082 void BR 
        --> block:5015

      block:5252 - if-predicate
        <-- block:5228
        %5243 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5018
        %5244 generic(0) * 1/int32[32] GETELEMPTR %5243, int32{0}, int32{2}
        %5245 1/int32 LD %5235
        %5246 generic(0) * 1/int32 GETELEMPTR %5244, int32{0}, %5245
        %5247 1/int32 LD %5246
        %5248 1/int32 CMOV.ne (int32{0}, %5247) int32{1}, int32{0}
        %5249 1/int1 CMP.ne %5248, int32{0}
        %5254 void BRC %5249
        --> block:5250, block:5230

      block:5250 - if-then
        <-- block:5252
        %5255 1/int32 LD %5027
        %5256 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5257 generic(0) * 4/int32[32] GETELEMPTR %5256, int32{0}, int32{1}
        %5258 1/int32 LD %5235
        %5259 generic(0) * 4/int32 GETELEMPTR %5257, int32{0}, %5258
        %5260 4/int32 LD %5259
        %5261 1/int32 SHUF %5260.x
        %5262 temp(0) * 1/int32 INSTA 
        %5286 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5255, byval %5261, byref %5262, byref %5086
        %5287 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5288 generic(0) * 4/int32[32] GETELEMPTR %5287, int32{0}, int32{1}
        %5289 1/int32 LD %5235
        %5290 generic(0) * 4/int32 GETELEMPTR %5288, int32{0}, %5289
        %5291 1/int32 LD %5262
        %5292 4/int32 LD %5290
        %5293 4/int32 SHUF %5291.x---,  %5292.-yzw
        %5294 void ST %5293, %5290
        %5295 1/int32 LD %5027
        %5296 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5297 generic(0) * 4/int32[32] GETELEMPTR %5296, int32{0}, int32{1}
        %5298 1/int32 LD %5235
        %5299 generic(0) * 4/int32 GETELEMPTR %5297, int32{0}, %5298
        %5300 4/int32 LD %5299
        %5301 1/int32 SHUF %5300.y
        %5302 temp(0) * 1/int32 INSTA 
        %5303 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5295, byval %5301, byref %5302, byref %5086
        %5304 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5305 generic(0) * 4/int32[32] GETELEMPTR %5304, int32{0}, int32{1}
        %5306 1/int32 LD %5235
        %5307 generic(0) * 4/int32 GETELEMPTR %5305, int32{0}, %5306
        %5308 1/int32 LD %5302
        %5309 4/int32 LD %5307
        %5310 4/int32 SHUF %5309.x-zw,  %5308.-x--
        %5311 void ST %5310, %5307
        %5312 1/int32 LD %5027
        %5313 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5314 generic(0) * 4/int32[32] GETELEMPTR %5313, int32{0}, int32{1}
        %5315 1/int32 LD %5235
        %5316 generic(0) * 4/int32 GETELEMPTR %5314, int32{0}, %5315
        %5317 4/int32 LD %5316
        %5318 1/int32 SHUF %5317.z
        %5319 temp(0) * 1/int32 INSTA 
        %5320 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5312, byval %5318, byref %5319, byref %5086
        %5321 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5322 generic(0) * 4/int32[32] GETELEMPTR %5321, int32{0}, int32{1}
        %5323 1/int32 LD %5235
        %5324 generic(0) * 4/int32 GETELEMPTR %5322, int32{0}, %5323
        %5325 1/int32 LD %5319
        %5326 4/int32 LD %5324
        %5327 4/int32 SHUF %5326.xy-w,  %5325.--x-
        %5328 void ST %5327, %5324
        %5329 1/int32 LD %5027
        %5330 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5331 generic(0) * 4/int32[32] GETELEMPTR %5330, int32{0}, int32{1}
        %5332 1/int32 LD %5235
        %5333 generic(0) * 4/int32 GETELEMPTR %5331, int32{0}, %5332
        %5334 4/int32 LD %5333
        %5335 1/int32 SHUF %5334.w
        %5336 temp(0) * 1/int32 INSTA 
        %5337 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5329, byval %5335, byref %5336, byref %5086
        %5338 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5339 generic(0) * 4/int32[32] GETELEMPTR %5338, int32{0}, int32{1}
        %5340 1/int32 LD %5235
        %5341 generic(0) * 4/int32 GETELEMPTR %5339, int32{0}, %5340
        %5342 1/int32 LD %5336
        %5343 4/int32 LD %5341
        %5344 4/int32 SHUF %5343.xyz-,  %5342.---x
        %5345 void ST %5344, %5341
        %5251 void BR 
        --> block:5230

      block:5230 - for-body
        <-- block:5250, block:5252
        %5231 void BR 
        --> block:5232

      block:5232 - for-incr
        <-- block:5230
        %5240 1/int32 LD %5235
        %5241 1/int32 ADD %5240, int32{1}
        %5242 void ST %5241, %5235
        %5233 void BR 
        --> block:5228

      block:5130 - if-predicate
        <-- block:5106
        %5121 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5018
        %5122 generic(0) * 1/int32[5] GETELEMPTR %5121, int32{0}, int32{1}
        %5123 1/int32 LD %5113
        %5124 generic(0) * 1/int32 GETELEMPTR %5122, int32{0}, %5123
        %5125 1/int32 LD %5124
        %5126 1/int32 CMOV.ne (int32{0}, %5125) int32{1}, int32{0}
        %5127 1/int1 CMP.ne %5126, int32{0}
        %5132 void BRC %5127
        --> block:5128, block:5108

      block:5128 - if-then
        <-- block:5130
        %5133 1/int32 LD %5027
        %5134 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5135 generic(0) * 4/fp32[5] GETELEMPTR %5134, int32{0}, int32{0}
        %5136 1/int32 LD %5113
        %5137 generic(0) * 4/fp32 GETELEMPTR %5135, int32{0}, %5136
        %5138 4/fp32 LD %5137
        %5139 1/fp32 SHUF %5138.x
        %5140 temp(0) * 1/fp32 INSTA 
        %5166 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5133, byval %5139, byref %5140, byref %5086
        %5167 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5168 generic(0) * 4/fp32[5] GETELEMPTR %5167, int32{0}, int32{0}
        %5169 1/int32 LD %5113
        %5170 generic(0) * 4/fp32 GETELEMPTR %5168, int32{0}, %5169
        %5171 1/fp32 LD %5140
        %5172 4/fp32 LD %5170
        %5173 4/fp32 SHUF %5171.x---,  %5172.-yzw
        %5174 void ST %5173, %5170
        %5175 1/int32 LD %5027
        %5176 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5177 generic(0) * 4/fp32[5] GETELEMPTR %5176, int32{0}, int32{0}
        %5178 1/int32 LD %5113
        %5179 generic(0) * 4/fp32 GETELEMPTR %5177, int32{0}, %5178
        %5180 4/fp32 LD %5179
        %5181 1/fp32 SHUF %5180.y
        %5182 temp(0) * 1/fp32 INSTA 
        %5183 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5175, byval %5181, byref %5182, byref %5086
        %5184 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5185 generic(0) * 4/fp32[5] GETELEMPTR %5184, int32{0}, int32{0}
        %5186 1/int32 LD %5113
        %5187 generic(0) * 4/fp32 GETELEMPTR %5185, int32{0}, %5186
        %5188 1/fp32 LD %5182
        %5189 4/fp32 LD %5187
        %5190 4/fp32 SHUF %5189.x-zw,  %5188.-x--
        %5191 void ST %5190, %5187
        %5192 1/int32 LD %5027
        %5193 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5194 generic(0) * 4/fp32[5] GETELEMPTR %5193, int32{0}, int32{0}
        %5195 1/int32 LD %5113
        %5196 generic(0) * 4/fp32 GETELEMPTR %5194, int32{0}, %5195
        %5197 4/fp32 LD %5196
        %5198 1/fp32 SHUF %5197.z
        %5199 temp(0) * 1/fp32 INSTA 
        %5200 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5192, byval %5198, byref %5199, byref %5086
        %5201 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5202 generic(0) * 4/fp32[5] GETELEMPTR %5201, int32{0}, int32{0}
        %5203 1/int32 LD %5113
        %5204 generic(0) * 4/fp32 GETELEMPTR %5202, int32{0}, %5203
        %5205 1/fp32 LD %5199
        %5206 4/fp32 LD %5204
        %5207 4/fp32 SHUF %5206.xy-w,  %5205.--x-
        %5208 void ST %5207, %5204
        %5209 1/int32 LD %5027
        %5210 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5211 generic(0) * 4/fp32[5] GETELEMPTR %5210, int32{0}, int32{0}
        %5212 1/int32 LD %5113
        %5213 generic(0) * 4/fp32 GETELEMPTR %5211, int32{0}, %5212
        %5214 4/fp32 LD %5213
        %5215 1/fp32 SHUF %5214.w
        %5216 temp(0) * 1/fp32 INSTA 
        %5217 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5209, byval %5215, byref %5216, byref %5086
        %5218 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5033
        %5219 generic(0) * 4/fp32[5] GETELEMPTR %5218, int32{0}, int32{0}
        %5220 1/int32 LD %5113
        %5221 generic(0) * 4/fp32 GETELEMPTR %5219, int32{0}, %5220
        %5222 1/fp32 LD %5216
        %5223 4/fp32 LD %5221
        %5224 4/fp32 SHUF %5223.xyz-,  %5222.---x
        %5225 void ST %5224, %5221
        %5129 void BR 
        --> block:5108

      block:5108 - for-body
        <-- block:5128, block:5130
        %5109 void BR 
        --> block:5110

      block:5110 - for-incr
        <-- block:5108
        %5118 1/int32 LD %5113
        %5119 1/int32 ADD %5118, int32{1}
        %5120 void ST %5119, %5113
        %5111 void BR 
        --> block:5106

      block:5015
        <-- block:5079, block:5081
        %5016 void BR 
        --> block:5653

      block:5653 - return-block
        <-- block:5015
        %5654 void BR 
        --> block:5013

      block:5013 - exit
        <-- block:5653
        --> 


  func:float @lambda_92::operator()(uint, float) const
    arguments:
      %5146 in    arg: 1/int32 - 'dstAddr'
      %5149 in    arg: 1/fp32 - 'value'
      %5152 out   arg: temp(0) * 1/fp32 - 'operator()'
      %5153 inout arg: temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} - 'this'

    dwarf:
      operator()(901 - 901)

    body:
      block:5143 - entry
        <-- 
        --> block:5164

      block:5164
        <-- block:5143
        %5147 temp(0) * 1/int32 INSTA 
        %5148 void ST %5146, %5147
        %5150 temp(0) * 1/fp32 INSTA 
        %5151 void ST %5149, %5150
        %5154 1/int32 LD %5147
        %5155 1/int32 MUL %5154, int32{4}
        %5156 1/fp32 LD %5150
        %5157 1/int32 CONV_reinterp %5156
        %5158 temp(0) * 1/int32 INSTA 
        %5159 1/int32 intr.ds_permute_b32 %5155, %5157, int32{0} pinned
        %5160 void ST %5159, %5158
        %5161 1/int32 LD %5158
        %5162 1/fp32 CONV_reinterp %5161
        %5163 void ST %5162, %5152
        %5165 void BR 
        --> block:5142

      block:5142 - exit
        <-- block:5164
        --> 


  func:uint @lambda_92::operator()(uint, uint) const
    arguments:
      %5268 in    arg: 1/int32 - 'dstAddr'
      %5271 in    arg: 1/int32 - 'value'
      %5274 out   arg: temp(0) * 1/int32 - 'operator()'
      %5275 inout arg: temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} - 'this'

    dwarf:
      operator()(908 - 908)

    body:
      block:5265 - entry
        <-- 
        --> block:5284

      block:5284
        <-- block:5265
        %5269 temp(0) * 1/int32 INSTA 
        %5270 void ST %5268, %5269
        %5272 temp(0) * 1/int32 INSTA 
        %5273 void ST %5271, %5272
        %5276 1/int32 LD %5269
        %5277 1/int32 MUL %5276, int32{4}
        %5278 1/int32 LD %5272
        %5279 temp(0) * 1/int32 INSTA 
        %5280 1/int32 intr.ds_permute_b32 %5277, %5278, int32{0} pinned
        %5281 void ST %5280, %5279
        %5282 1/int32 LD %5279
        %5283 void ST %5282, %5274
        %5285 void BR 
        --> block:5264

      block:5264 - exit
        <-- block:5284
        --> 


--------------------------------------------------------------------------------

>> pass 10/799: validate graph
    validate graph (0045C2BE)
>> pass 11/799: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 12/799: validate graph
    validate graph (0045C2BE)
>> pass 13/799: constant propagation
    constant propagation (5CBB3303)
>> pass 14/799: validate graph
    validate graph (0045C2BE)
>> pass 15/799: cost analysis
    cost analysis (716789B8)
>> pass 16/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 17/799: validate graph
    validate graph (0045C2BE)
>> pass 18/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 19/799: validate graph
    validate graph (0045C2BE)
>> pass 20/799: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 21/799: validate graph
    validate graph (0045C2BE)
>> pass 22/799: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 23/799: isolate function
    isolate function (2FD72558)
>> pass 24/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 25/799: validate graph
    validate graph (0045C2BE)
>> pass 26/799: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 27/799: trivial alias analysis
    trivial alias analysis (359D1A97)
>> pass 28/799: inline function calls
    inline function calls (0A71E457)
>> pass 29/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 30/799: validate graph
    validate graph (0045C2BE)
>> pass 31/799: assign fastmath flags
    assign fastmath flags (BAADFB36)
>> pass 32/799: validate graph
    validate graph (0045C2BE)
>> pass 33/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 34/799: validate graph
    validate graph (0045C2BE)
>> pass 35/799: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 36/799: validate graph
    validate graph (0045C2BE)
>> pass 37/799: optimize unions
    optimize unions (C7BDF63C)
>> pass 38/799: validate graph
    validate graph (0045C2BE)
>> pass 39/799: constant propagation
    constant propagation (5CBB3303)
>> pass 40/799: validate graph
    validate graph (0045C2BE)
>> pass 41/799: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 42/799: validate graph
    validate graph (0045C2BE)
>> pass 43/799: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 44/799: validate graph
    validate graph (0045C2BE)
>> pass 45/799: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 46/799: validate graph
    validate graph (0045C2BE)
>> pass 47/799: loop analysis
    loop analysis (598E85BD)
>> pass 48/799: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 49/799: mark GET_WAVEMODE
    mark GET_WAVEMODE (3283A7BF)
>> pass 50/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 51/799: validate graph
    validate graph (0045C2BE)
>> pass 52/799: constant propagation
    constant propagation (5CBB3303)
>> pass 53/799: validate graph
    validate graph (0045C2BE)
>> pass 54/799: R10 legalize entry args
    R10 legalize entry args (A3F30344)
>> pass 55/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 56/799: validate graph
    validate graph (0045C2BE)
>> pass 57/799: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 58/799: validate graph
    validate graph (0045C2BE)
>> pass 59/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 60/799: validate graph
    validate graph (0045C2BE)
>> pass 61/799: legalize sub-routines
    legalize sub-routines (97462243)
>> pass 62/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 63/799: validate graph
    validate graph (0045C2BE)
>> pass 64/799: sparse conditional constant propagation
    sparse conditional constant propagation (41B5CAD4)
>> pass 65/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 66/799: validate graph
    validate graph (0045C2BE)
>> pass 67/799: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 68/799: validate graph
    validate graph (0045C2BE)
>> pass 69/799: merge getelemptr
    merge getelemptr (D655006F)
>> pass 70/799: validate graph
    validate graph (0045C2BE)
>> pass 71/799: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 72/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 73/799: remove dead code
    remove dead code (B7E6F507)
>> pass 74/799: validate graph
    validate graph (0045C2BE)
>> pass 75/799: loop analysis
    loop analysis (598E85BD)
>> pass 76/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 77/799: validate graph
    validate graph (0045C2BE)
>> pass 78/799: constant propagation
    constant propagation (5CBB3303)
>> pass 79/799: validate graph
    validate graph (0045C2BE)
>> pass 80/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 81/799: validate graph
    validate graph (0045C2BE)
>> pass 82/799: legalize constant writes
    legalize constant writes (D629C4D9)
>> pass 83/799: validate graph
    validate graph (0045C2BE)
>> pass 84/799: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 85/799: validate graph
    validate graph (0045C2BE)
>> pass 86/799: remove dead code
    remove dead code (B7E6F507)
>> pass 87/799: validate graph
    validate graph (0045C2BE)
>> pass 88/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %10 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %159 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %166 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %167 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %168 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %169 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %170 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %10[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]
    cubemapTexture(96 - 96) -- %159[0:+32]
    brdfLUT(97 - 97) -- %160[0:+32]
    albedoTexture(98 - 98) -- %161[0:+32]
    normalTexture(99 - 99) -- %162[0:+32]
    roughnessTexture(100 - 100) -- %163[0:+32]
    emissiveTexture(101 - 101) -- %164[0:+32]
    shadowmapTexture0(102 - 102) -- %165[0:+32]
    shadowmapTexture1(103 - 103) -- %166[0:+32]
    shadowmapTexture2(104 - 104) -- %167[0:+32]
    shadowmapTexture3(105 - 105) -- %168[0:+32]
    samplerWrapLinear(107 - 107) -- %169[0:+16]
    samplerShadowCompare(109 - 109) -- %170[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %10[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %6408 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %10, int32{0}, int32{0}
        %174 1/int32 LD %153
        %6881 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6408
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %6881
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %6618 4/fp32 SHUF %214.xyz-,  fp32{1.0}.---x
        %6896 4/fp32 SHUF %198.x---,  %202.-x--,  %206.--x-,  %210.---x
        %6897 1/fp32 DOT4 fast %6896, %6618
        %6906 4/fp32 SHUF %198.y---,  %202.-y--,  %206.--y-,  %210.---y
        %6907 1/fp32 DOT4 fast %6906, %6618
        %6916 4/fp32 SHUF %198.z---,  %202.-z--,  %206.--z-,  %210.---z
        %6917 1/fp32 DOT4 fast %6916, %6618
        %6926 4/fp32 SHUF %198.w---,  %202.-w--,  %206.--w-,  %210.---w
        %6927 1/fp32 DOT4 fast %6926, %6618
        %6928 4/fp32 SHUF %6897.x---,  %6907.-x--,  %6917.--x-,  %6927.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %6940 4/fp32 SHUF %6933.x---,  %6935.-x--,  %6937.--x-,  %6939.---x
        %6941 1/fp32 DOT4 fast %6940, %6928
        %6950 4/fp32 SHUF %6933.y---,  %6935.-y--,  %6937.--y-,  %6939.---y
        %6951 1/fp32 DOT4 fast %6950, %6928
        %6960 4/fp32 SHUF %6933.z---,  %6935.-z--,  %6937.--z-,  %6939.---z
        %6961 1/fp32 DOT4 fast %6960, %6928
        %6970 4/fp32 SHUF %6933.w---,  %6935.-w--,  %6937.--w-,  %6939.---w
        %6971 1/fp32 DOT4 fast %6970, %6928
        %6972 4/fp32 SHUF %6941.x---,  %6951.-x--,  %6961.--x-,  %6971.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %6982 3/fp32 SHUF %198.x--,  %202.-x-,  %206.--x
        %6983 1/fp32 DOT3 fast %6982, %375
        %6990 3/fp32 SHUF %198.y--,  %202.-y-,  %206.--y
        %6991 1/fp32 DOT3 fast %6990, %375
        %6998 3/fp32 SHUF %198.z--,  %202.-z-,  %206.--z
        %6999 1/fp32 DOT3 fast %6998, %375
        %7000 3/fp32 SHUF %6983.x--,  %6991.-x-,  %6999.--x
        %420 3/fp32 NRM fast %7000
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %7010 3/fp32 SHUF %198.x--,  %202.-x-,  %206.--x
        %7011 1/fp32 DOT3 fast %7010, %424
        %7018 3/fp32 SHUF %198.y--,  %202.-y-,  %206.--y
        %7019 1/fp32 DOT3 fast %7018, %424
        %7026 3/fp32 SHUF %198.z--,  %202.-z-,  %206.--z
        %7027 1/fp32 DOT3 fast %7026, %424
        %7028 3/fp32 SHUF %7011.x--,  %7019.-x-,  %7027.--x
        %428 3/fp32 NRM fast %7028
        %7032 3/fp32 SHUF %375.yzx
        %7033 3/fp32 SHUF %424.zxy
        %7034 3/fp32 MUL fast %7032, %7033
        %7035 3/fp32 SHUF %375.zxy
        %7036 3/fp32 SHUF %424.yzx
        %7037 3/fp32 MUL fast %7035, %7036
        %7038 3/fp32 NEG fast %7037
        %7039 3/fp32 ADD fast %7034, %7038
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %420, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %428, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %7039, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %7133 1/int32 AND %7132, int32{255}
        %7136 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7137 1/int32 AND %7136, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7268 1/int32 SHL %7133, int32{12}
        %7269 1/int32 OR %7268, %7137
        %7270 void intr.s_sendmsg %7269, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %7133
        %7274 1/int32 ADD int32{64}, %7273
        %7275 1/int64 CONV %7274
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %7278 1/int32 CMOV.ne (%7277, int32{0}) int32{1}, int32{0}
        %1308 1/int1 CMP.ne %7278, int32{0}
        %1313 void BRC %1308[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %7137
        %7293 1/int32 ADD int32{64}, %7292
        %7294 1/int64 CONV %7293
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %7297 1/int32 CMOV.ne (%7296, int32{0}) int32{1}, int32{0}
        %1410 1/int1 CMP.ne %7297, int32{0}
        %1415 void BRC %1410[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %28047 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28048 1/int1 CMP.ne %28047, int32{0}
        %28049 void BRC %28048
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %28054 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28055 1/int1 CMP.ne %28054, int32{0}
        %28056 void BRC %28055
        --> block:28087, block:28059

      block:28059 - if-predicate
        <-- block:28050
        %28063 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28064 1/int1 CMP.ne %28063, int32{0}
        %28065 void BRC %28064
        --> block:28087, block:28066

      block:28066 - if-predicate
        <-- block:28059
        %28070 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28071 1/int1 CMP.ne %28070, int32{0}
        %28072 void BRC %28071
        --> block:28057, block:28087

      block:28057 - dummy-edge
        <-- block:28066
        %28058 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050, block:28059, block:28066, block:28057
        %28088 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28102 1/int32 CMOV.ne (int32{0}, %27747) int32{1}, int32{0}
        %28103 1/int1 CMP.ne %28102, int32{0}
        %28104 void BRC %28103
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %28110 1/int32 AND %27747, int32{-2097153}
        %28114 1/int32 CMOV.eq (int32{0}, %28088) int32{1}, int32{0}
        %28115 1/int32 CMOV.ne (%28114, int32{0}) int32{2097152}, int32{0}
        %28116 1/int32 OR %28110, %28115
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %28116, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %28148 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28149 1/int1 CMP.ne %28148, int32{0}
        %28150 void BRC %28149
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %28152 1/int32 AND %27751, int32{-2097153}
        %28156 1/int32 CMOV.eq (int32{1}, %28088) int32{1}, int32{0}
        %28157 1/int32 CMOV.ne (%28156, int32{0}) int32{2097152}, int32{0}
        %28158 1/int32 OR %28152, %28157
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %28158, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %28190 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28191 1/int1 CMP.ne %28190, int32{0}
        %28192 void BRC %28191
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %28194 1/int32 AND %27755, int32{-2097153}
        %28198 1/int32 CMOV.eq (int32{2}, %28088) int32{1}, int32{0}
        %28199 1/int32 CMOV.ne (%28198, int32{0}) int32{2097152}, int32{0}
        %28200 1/int32 OR %28194, %28199
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %28200, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %28232 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28233 1/int1 CMP.ne %28232, int32{0}
        %28234 void BRC %28233
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %28236 1/int32 AND %27759, int32{-2097153}
        %28240 1/int32 CMOV.eq (int32{3}, %28088) int32{1}, int32{0}
        %28241 1/int32 CMOV.ne (%28240, int32{0}) int32{2097152}, int32{0}
        %28242 1/int32 OR %28236, %28241
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %28242, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28274 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28275 1/int1 CMP.ne %28274, int32{0}
        %28276 void BRC %28275
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %28278 1/int32 AND %27763, int32{-2097153}
        %28282 1/int32 CMOV.eq (int32{4}, %28088) int32{1}, int32{0}
        %28283 1/int32 CMOV.ne (%28282, int32{0}) int32{2097152}, int32{0}
        %28284 1/int32 OR %28278, %28283
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %28284, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %28084 1/int32 CMOV.ne (int32{0}, %27767) int32{1}, int32{0}
        %28085 1/int1 CMP.ne %28084, int32{0}
        %28086 void BRC %28085
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %28368 1/int32 CMOV.ne (int32{0}, %27771) int32{1}, int32{0}
        %28369 1/int1 CMP.ne %28368, int32{0}
        %28370 void BRC %28369
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %28403 1/int32 CMOV.ne (int32{0}, %27775) int32{1}, int32{0}
        %28404 1/int1 CMP.ne %28403, int32{0}
        %28405 void BRC %28404
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %28438 1/int32 CMOV.ne (int32{0}, %27779) int32{1}, int32{0}
        %28439 1/int1 CMP.ne %28438, int32{0}
        %28440 void BRC %28439
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %28473 1/int32 CMOV.ne (int32{0}, %27783) int32{1}, int32{0}
        %28474 1/int1 CMP.ne %28473, int32{0}
        %28475 void BRC %28474
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %28508 1/int32 CMOV.ne (int32{0}, %27787) int32{1}, int32{0}
        %28509 1/int1 CMP.ne %28508, int32{0}
        %28510 void BRC %28509
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %28543 1/int32 CMOV.ne (int32{0}, %27791) int32{1}, int32{0}
        %28544 1/int1 CMP.ne %28543, int32{0}
        %28545 void BRC %28544
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %28578 1/int32 CMOV.ne (int32{0}, %27795) int32{1}, int32{0}
        %28579 1/int1 CMP.ne %28578, int32{0}
        %28580 void BRC %28579
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %28613 1/int32 CMOV.ne (int32{0}, %27799) int32{1}, int32{0}
        %28614 1/int1 CMP.ne %28613, int32{0}
        %28615 void BRC %28614
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %28648 1/int32 CMOV.ne (int32{0}, %27803) int32{1}, int32{0}
        %28649 1/int1 CMP.ne %28648, int32{0}
        %28650 void BRC %28649
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %28683 1/int32 CMOV.ne (int32{0}, %27807) int32{1}, int32{0}
        %28684 1/int1 CMP.ne %28683, int32{0}
        %28685 void BRC %28684
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %28718 1/int32 CMOV.ne (int32{0}, %27811) int32{1}, int32{0}
        %28719 1/int1 CMP.ne %28718, int32{0}
        %28720 void BRC %28719
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %28753 1/int32 CMOV.ne (int32{0}, %27815) int32{1}, int32{0}
        %28754 1/int1 CMP.ne %28753, int32{0}
        %28755 void BRC %28754
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %28788 1/int32 CMOV.ne (int32{0}, %27819) int32{1}, int32{0}
        %28789 1/int1 CMP.ne %28788, int32{0}
        %28790 void BRC %28789
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %28823 1/int32 CMOV.ne (int32{0}, %27823) int32{1}, int32{0}
        %28824 1/int1 CMP.ne %28823, int32{0}
        %28825 void BRC %28824
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %28858 1/int32 CMOV.ne (int32{0}, %27827) int32{1}, int32{0}
        %28859 1/int1 CMP.ne %28858, int32{0}
        %28860 void BRC %28859
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %28893 1/int32 CMOV.ne (int32{0}, %27831) int32{1}, int32{0}
        %28894 1/int1 CMP.ne %28893, int32{0}
        %28895 void BRC %28894
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %28928 1/int32 CMOV.ne (int32{0}, %27835) int32{1}, int32{0}
        %28929 1/int1 CMP.ne %28928, int32{0}
        %28930 void BRC %28929
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %28963 1/int32 CMOV.ne (int32{0}, %27839) int32{1}, int32{0}
        %28964 1/int1 CMP.ne %28963, int32{0}
        %28965 void BRC %28964
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %28998 1/int32 CMOV.ne (int32{0}, %27843) int32{1}, int32{0}
        %28999 1/int1 CMP.ne %28998, int32{0}
        %29000 void BRC %28999
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %29033 1/int32 CMOV.ne (int32{0}, %27847) int32{1}, int32{0}
        %29034 1/int1 CMP.ne %29033, int32{0}
        %29035 void BRC %29034
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %29068 1/int32 CMOV.ne (int32{0}, %27851) int32{1}, int32{0}
        %29069 1/int1 CMP.ne %29068, int32{0}
        %29070 void BRC %29069
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %29103 1/int32 CMOV.ne (int32{0}, %27855) int32{1}, int32{0}
        %29104 1/int1 CMP.ne %29103, int32{0}
        %29105 void BRC %29104
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %29138 1/int32 CMOV.ne (int32{0}, %27859) int32{1}, int32{0}
        %29139 1/int1 CMP.ne %29138, int32{0}
        %29140 void BRC %29139
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %29173 1/int32 CMOV.ne (int32{0}, %27863) int32{1}, int32{0}
        %29174 1/int1 CMP.ne %29173, int32{0}
        %29175 void BRC %29174
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %29208 1/int32 CMOV.ne (int32{0}, %27867) int32{1}, int32{0}
        %29209 1/int1 CMP.ne %29208, int32{0}
        %29210 void BRC %29209
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %29243 1/int32 CMOV.ne (int32{0}, %27871) int32{1}, int32{0}
        %29244 1/int1 CMP.ne %29243, int32{0}
        %29245 void BRC %29244
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %29278 1/int32 CMOV.ne (int32{0}, %27875) int32{1}, int32{0}
        %29279 1/int1 CMP.ne %29278, int32{0}
        %29280 void BRC %29279
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %29313 1/int32 CMOV.ne (int32{0}, %27879) int32{1}, int32{0}
        %29314 1/int1 CMP.ne %29313, int32{0}
        %29315 void BRC %29314
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %29348 1/int32 CMOV.ne (int32{0}, %27883) int32{1}, int32{0}
        %29349 1/int1 CMP.ne %29348, int32{0}
        %29350 void BRC %29349
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %29383 1/int32 CMOV.ne (int32{0}, %27887) int32{1}, int32{0}
        %29384 1/int1 CMP.ne %29383, int32{0}
        %29385 void BRC %29384
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %29418 1/int32 CMOV.ne (int32{0}, %27891) int32{1}, int32{0}
        %29419 1/int1 CMP.ne %29418, int32{0}
        %29420 void BRC %29419
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 89/799: validate graph
    validate graph (0045C2BE)
>> pass 90/799: constant propagation
    constant propagation (5CBB3303)
>> pass 91/799: validate graph
    validate graph (0045C2BE)
>> pass 92/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 93/799: validate graph
    validate graph (0045C2BE)
>> pass 94/799: legalize ptr_from_texture instructions
    legalize ptr_from_texture instructions (F97DC9E0)
>> pass 95/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 96/799: validate graph
    validate graph (0045C2BE)
>> pass 97/799: apply cubemap WAR
    apply cubemap WAR (5F879B97)
>> pass 98/799: validate graph
    validate graph (0045C2BE)
>> pass 99/799: constant propagation
    constant propagation (5CBB3303)
>> pass 100/799: validate graph
    validate graph (0045C2BE)
>> pass 101/799: create uniform default values
    create uniform default values (43C6F162)
>> pass 102/799: validate graph
    validate graph (0045C2BE)
>> pass 103/799: suspend-resume
    suspend-resume (3714C203)
>> pass 104/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 105/799: validate graph
    validate graph (0045C2BE)
>> pass 106/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %10 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %159 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %166 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %167 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %168 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %169 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %170 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %10[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]
    cubemapTexture(96 - 96) -- %159[0:+32]
    brdfLUT(97 - 97) -- %160[0:+32]
    albedoTexture(98 - 98) -- %161[0:+32]
    normalTexture(99 - 99) -- %162[0:+32]
    roughnessTexture(100 - 100) -- %163[0:+32]
    emissiveTexture(101 - 101) -- %164[0:+32]
    shadowmapTexture0(102 - 102) -- %165[0:+32]
    shadowmapTexture1(103 - 103) -- %166[0:+32]
    shadowmapTexture2(104 - 104) -- %167[0:+32]
    shadowmapTexture3(105 - 105) -- %168[0:+32]
    samplerWrapLinear(107 - 107) -- %169[0:+16]
    samplerShadowCompare(109 - 109) -- %170[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %10[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %6408 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %10, int32{0}, int32{0}
        %174 1/int32 LD %153
        %6881 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6408
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %6881
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %6618 4/fp32 SHUF %214.xyz-,  fp32{1.0}.---x
        %6896 4/fp32 SHUF %198.x---,  %202.-x--,  %206.--x-,  %210.---x
        %6897 1/fp32 DOT4 fast %6896, %6618
        %6906 4/fp32 SHUF %198.y---,  %202.-y--,  %206.--y-,  %210.---y
        %6907 1/fp32 DOT4 fast %6906, %6618
        %6916 4/fp32 SHUF %198.z---,  %202.-z--,  %206.--z-,  %210.---z
        %6917 1/fp32 DOT4 fast %6916, %6618
        %6926 4/fp32 SHUF %198.w---,  %202.-w--,  %206.--w-,  %210.---w
        %6927 1/fp32 DOT4 fast %6926, %6618
        %6928 4/fp32 SHUF %6897.x---,  %6907.-x--,  %6917.--x-,  %6927.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %6940 4/fp32 SHUF %6933.x---,  %6935.-x--,  %6937.--x-,  %6939.---x
        %6941 1/fp32 DOT4 fast %6940, %6928
        %6950 4/fp32 SHUF %6933.y---,  %6935.-y--,  %6937.--y-,  %6939.---y
        %6951 1/fp32 DOT4 fast %6950, %6928
        %6960 4/fp32 SHUF %6933.z---,  %6935.-z--,  %6937.--z-,  %6939.---z
        %6961 1/fp32 DOT4 fast %6960, %6928
        %6970 4/fp32 SHUF %6933.w---,  %6935.-w--,  %6937.--w-,  %6939.---w
        %6971 1/fp32 DOT4 fast %6970, %6928
        %6972 4/fp32 SHUF %6941.x---,  %6951.-x--,  %6961.--x-,  %6971.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %6982 3/fp32 SHUF %198.x--,  %202.-x-,  %206.--x
        %6983 1/fp32 DOT3 fast %6982, %375
        %6990 3/fp32 SHUF %198.y--,  %202.-y-,  %206.--y
        %6991 1/fp32 DOT3 fast %6990, %375
        %6998 3/fp32 SHUF %198.z--,  %202.-z-,  %206.--z
        %6999 1/fp32 DOT3 fast %6998, %375
        %7000 3/fp32 SHUF %6983.x--,  %6991.-x-,  %6999.--x
        %420 3/fp32 NRM fast %7000
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %7010 3/fp32 SHUF %198.x--,  %202.-x-,  %206.--x
        %7011 1/fp32 DOT3 fast %7010, %424
        %7018 3/fp32 SHUF %198.y--,  %202.-y-,  %206.--y
        %7019 1/fp32 DOT3 fast %7018, %424
        %7026 3/fp32 SHUF %198.z--,  %202.-z-,  %206.--z
        %7027 1/fp32 DOT3 fast %7026, %424
        %7028 3/fp32 SHUF %7011.x--,  %7019.-x-,  %7027.--x
        %428 3/fp32 NRM fast %7028
        %7032 3/fp32 SHUF %375.yzx
        %7033 3/fp32 SHUF %424.zxy
        %7034 3/fp32 MUL fast %7032, %7033
        %7035 3/fp32 SHUF %375.zxy
        %7036 3/fp32 SHUF %424.yzx
        %7037 3/fp32 MUL fast %7035, %7036
        %7038 3/fp32 NEG fast %7037
        %7039 3/fp32 ADD fast %7034, %7038
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %420, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %428, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %7039, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %7133 1/int32 AND %7132, int32{255}
        %7136 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7137 1/int32 AND %7136, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7268 1/int32 SHL %7133, int32{12}
        %7269 1/int32 OR %7268, %7137
        %7270 void intr.s_sendmsg %7269, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %7133
        %7274 1/int32 ADD int32{64}, %7273
        %7275 1/int64 CONV %7274
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %7278 1/int32 CMOV.ne (%7277, int32{0}) int32{1}, int32{0}
        %1308 1/int1 CMP.ne %7278, int32{0}
        %1313 void BRC %1308[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %7137
        %7293 1/int32 ADD int32{64}, %7292
        %7294 1/int64 CONV %7293
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %7297 1/int32 CMOV.ne (%7296, int32{0}) int32{1}, int32{0}
        %1410 1/int1 CMP.ne %7297, int32{0}
        %1415 void BRC %1410[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %28047 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28048 1/int1 CMP.ne %28047, int32{0}
        %28049 void BRC %28048
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %28054 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28055 1/int1 CMP.ne %28054, int32{0}
        %28056 void BRC %28055
        --> block:28087, block:28059

      block:28059 - if-predicate
        <-- block:28050
        %28063 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28064 1/int1 CMP.ne %28063, int32{0}
        %28065 void BRC %28064
        --> block:28087, block:28066

      block:28066 - if-predicate
        <-- block:28059
        %28070 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28071 1/int1 CMP.ne %28070, int32{0}
        %28072 void BRC %28071
        --> block:28057, block:28087

      block:28057 - dummy-edge
        <-- block:28066
        %28058 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050, block:28059, block:28066, block:28057
        %28088 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28102 1/int32 CMOV.ne (int32{0}, %27747) int32{1}, int32{0}
        %28103 1/int1 CMP.ne %28102, int32{0}
        %28104 void BRC %28103
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %28110 1/int32 AND %27747, int32{-2097153}
        %28114 1/int32 CMOV.eq (int32{0}, %28088) int32{1}, int32{0}
        %28115 1/int32 CMOV.ne (%28114, int32{0}) int32{2097152}, int32{0}
        %28116 1/int32 OR %28110, %28115
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %28116, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %28148 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28149 1/int1 CMP.ne %28148, int32{0}
        %28150 void BRC %28149
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %28152 1/int32 AND %27751, int32{-2097153}
        %28156 1/int32 CMOV.eq (int32{1}, %28088) int32{1}, int32{0}
        %28157 1/int32 CMOV.ne (%28156, int32{0}) int32{2097152}, int32{0}
        %28158 1/int32 OR %28152, %28157
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %28158, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %28190 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28191 1/int1 CMP.ne %28190, int32{0}
        %28192 void BRC %28191
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %28194 1/int32 AND %27755, int32{-2097153}
        %28198 1/int32 CMOV.eq (int32{2}, %28088) int32{1}, int32{0}
        %28199 1/int32 CMOV.ne (%28198, int32{0}) int32{2097152}, int32{0}
        %28200 1/int32 OR %28194, %28199
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %28200, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %28232 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28233 1/int1 CMP.ne %28232, int32{0}
        %28234 void BRC %28233
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %28236 1/int32 AND %27759, int32{-2097153}
        %28240 1/int32 CMOV.eq (int32{3}, %28088) int32{1}, int32{0}
        %28241 1/int32 CMOV.ne (%28240, int32{0}) int32{2097152}, int32{0}
        %28242 1/int32 OR %28236, %28241
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %28242, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28274 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28275 1/int1 CMP.ne %28274, int32{0}
        %28276 void BRC %28275
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %28278 1/int32 AND %27763, int32{-2097153}
        %28282 1/int32 CMOV.eq (int32{4}, %28088) int32{1}, int32{0}
        %28283 1/int32 CMOV.ne (%28282, int32{0}) int32{2097152}, int32{0}
        %28284 1/int32 OR %28278, %28283
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %28284, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %28084 1/int32 CMOV.ne (int32{0}, %27767) int32{1}, int32{0}
        %28085 1/int1 CMP.ne %28084, int32{0}
        %28086 void BRC %28085
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %28368 1/int32 CMOV.ne (int32{0}, %27771) int32{1}, int32{0}
        %28369 1/int1 CMP.ne %28368, int32{0}
        %28370 void BRC %28369
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %28403 1/int32 CMOV.ne (int32{0}, %27775) int32{1}, int32{0}
        %28404 1/int1 CMP.ne %28403, int32{0}
        %28405 void BRC %28404
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %28438 1/int32 CMOV.ne (int32{0}, %27779) int32{1}, int32{0}
        %28439 1/int1 CMP.ne %28438, int32{0}
        %28440 void BRC %28439
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %28473 1/int32 CMOV.ne (int32{0}, %27783) int32{1}, int32{0}
        %28474 1/int1 CMP.ne %28473, int32{0}
        %28475 void BRC %28474
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %28508 1/int32 CMOV.ne (int32{0}, %27787) int32{1}, int32{0}
        %28509 1/int1 CMP.ne %28508, int32{0}
        %28510 void BRC %28509
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %28543 1/int32 CMOV.ne (int32{0}, %27791) int32{1}, int32{0}
        %28544 1/int1 CMP.ne %28543, int32{0}
        %28545 void BRC %28544
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %28578 1/int32 CMOV.ne (int32{0}, %27795) int32{1}, int32{0}
        %28579 1/int1 CMP.ne %28578, int32{0}
        %28580 void BRC %28579
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %28613 1/int32 CMOV.ne (int32{0}, %27799) int32{1}, int32{0}
        %28614 1/int1 CMP.ne %28613, int32{0}
        %28615 void BRC %28614
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %28648 1/int32 CMOV.ne (int32{0}, %27803) int32{1}, int32{0}
        %28649 1/int1 CMP.ne %28648, int32{0}
        %28650 void BRC %28649
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %28683 1/int32 CMOV.ne (int32{0}, %27807) int32{1}, int32{0}
        %28684 1/int1 CMP.ne %28683, int32{0}
        %28685 void BRC %28684
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %28718 1/int32 CMOV.ne (int32{0}, %27811) int32{1}, int32{0}
        %28719 1/int1 CMP.ne %28718, int32{0}
        %28720 void BRC %28719
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %28753 1/int32 CMOV.ne (int32{0}, %27815) int32{1}, int32{0}
        %28754 1/int1 CMP.ne %28753, int32{0}
        %28755 void BRC %28754
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %28788 1/int32 CMOV.ne (int32{0}, %27819) int32{1}, int32{0}
        %28789 1/int1 CMP.ne %28788, int32{0}
        %28790 void BRC %28789
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %28823 1/int32 CMOV.ne (int32{0}, %27823) int32{1}, int32{0}
        %28824 1/int1 CMP.ne %28823, int32{0}
        %28825 void BRC %28824
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %28858 1/int32 CMOV.ne (int32{0}, %27827) int32{1}, int32{0}
        %28859 1/int1 CMP.ne %28858, int32{0}
        %28860 void BRC %28859
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %28893 1/int32 CMOV.ne (int32{0}, %27831) int32{1}, int32{0}
        %28894 1/int1 CMP.ne %28893, int32{0}
        %28895 void BRC %28894
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %28928 1/int32 CMOV.ne (int32{0}, %27835) int32{1}, int32{0}
        %28929 1/int1 CMP.ne %28928, int32{0}
        %28930 void BRC %28929
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %28963 1/int32 CMOV.ne (int32{0}, %27839) int32{1}, int32{0}
        %28964 1/int1 CMP.ne %28963, int32{0}
        %28965 void BRC %28964
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %28998 1/int32 CMOV.ne (int32{0}, %27843) int32{1}, int32{0}
        %28999 1/int1 CMP.ne %28998, int32{0}
        %29000 void BRC %28999
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %29033 1/int32 CMOV.ne (int32{0}, %27847) int32{1}, int32{0}
        %29034 1/int1 CMP.ne %29033, int32{0}
        %29035 void BRC %29034
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %29068 1/int32 CMOV.ne (int32{0}, %27851) int32{1}, int32{0}
        %29069 1/int1 CMP.ne %29068, int32{0}
        %29070 void BRC %29069
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %29103 1/int32 CMOV.ne (int32{0}, %27855) int32{1}, int32{0}
        %29104 1/int1 CMP.ne %29103, int32{0}
        %29105 void BRC %29104
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %29138 1/int32 CMOV.ne (int32{0}, %27859) int32{1}, int32{0}
        %29139 1/int1 CMP.ne %29138, int32{0}
        %29140 void BRC %29139
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %29173 1/int32 CMOV.ne (int32{0}, %27863) int32{1}, int32{0}
        %29174 1/int1 CMP.ne %29173, int32{0}
        %29175 void BRC %29174
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %29208 1/int32 CMOV.ne (int32{0}, %27867) int32{1}, int32{0}
        %29209 1/int1 CMP.ne %29208, int32{0}
        %29210 void BRC %29209
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %29243 1/int32 CMOV.ne (int32{0}, %27871) int32{1}, int32{0}
        %29244 1/int1 CMP.ne %29243, int32{0}
        %29245 void BRC %29244
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %29278 1/int32 CMOV.ne (int32{0}, %27875) int32{1}, int32{0}
        %29279 1/int1 CMP.ne %29278, int32{0}
        %29280 void BRC %29279
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %29313 1/int32 CMOV.ne (int32{0}, %27879) int32{1}, int32{0}
        %29314 1/int1 CMP.ne %29313, int32{0}
        %29315 void BRC %29314
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %29348 1/int32 CMOV.ne (int32{0}, %27883) int32{1}, int32{0}
        %29349 1/int1 CMP.ne %29348, int32{0}
        %29350 void BRC %29349
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %29383 1/int32 CMOV.ne (int32{0}, %27887) int32{1}, int32{0}
        %29384 1/int1 CMP.ne %29383, int32{0}
        %29385 void BRC %29384
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %29418 1/int32 CMOV.ne (int32{0}, %27891) int32{1}, int32{0}
        %29419 1/int1 CMP.ne %29418, int32{0}
        %29420 void BRC %29419
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 107/799: validate graph
    validate graph (0045C2BE)
>> pass 108/799: lower compute special registers
    lower compute special registers (404775D5)
>> pass 109/799: validate graph
    validate graph (0045C2BE)
>> pass 110/799: lower barriers
    lower barriers (2A24A206)
>> pass 111/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 112/799: validate graph
    validate graph (0045C2BE)
>> pass 113/799: lower pixel input bindings
    lower pixel input bindings (0CDB989A)
>> pass 114/799: validate graph
    validate graph (0045C2BE)
>> pass 115/799: loop analysis
    loop analysis (598E85BD)
>> pass 116/799: validate loops
    validate loops (363FE0BB)
>> pass 117/799: validate graph
    validate graph (0045C2BE)
>> pass 118/799: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 119/799: validate graph
    validate graph (0045C2BE)
>> pass 120/799: inline sub-routines
    inline sub-routines (BD52C9CC)
>> pass 121/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 122/799: validate graph
    validate graph (0045C2BE)
>> pass 123/799: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 124/799: validate graph
    validate graph (0045C2BE)
>> pass 125/799: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 126/799: validate graph
    validate graph (0045C2BE)
>> pass 127/799: loop analysis
    loop analysis (598E85BD)
>> pass 128/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 129/799: validate graph
    validate graph (0045C2BE)
>> pass 130/799: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 131/799: validate graph
    validate graph (0045C2BE)
>> pass 132/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 133/799: validate graph
    validate graph (0045C2BE)
>> pass 134/799: optimize vector ops instructions
    optimize vector ops instructions (35FD52A5)
>> pass 135/799: validate graph
    validate graph (0045C2BE)
>> pass 136/799: lower normalize
    lower normalize (21A2B966)
>> pass 137/799: validate graph
    validate graph (0045C2BE)
>> pass 138/799: legalize coefficient dynamic access
    legalize coefficient dynamic access (12C7DDB2)
>> pass 139/799: validate graph
    validate graph (0045C2BE)
>> pass 140/799: lower dot products
    lower dot products (69B832F8)
>> pass 141/799: validate graph
    validate graph (0045C2BE)
>> pass 142/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 143/799: remove dead code
    remove dead code (B7E6F507)
>> pass 144/799: validate graph
    validate graph (0045C2BE)
>> pass 145/799: r10scalarizer
    r10scalarizer (81A236D1)
>> pass 146/799: validate graph
    validate graph (0045C2BE)
>> pass 147/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 148/799: validate graph
    validate graph (0045C2BE)
>> pass 149/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 150/799: remove dead code
    remove dead code (B7E6F507)
>> pass 151/799: validate graph
    validate graph (0045C2BE)
>> pass 152/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %10 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %159 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %166 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %167 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %168 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %169 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %170 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %10[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]
    cubemapTexture(96 - 96) -- %159[0:+32]
    brdfLUT(97 - 97) -- %160[0:+32]
    albedoTexture(98 - 98) -- %161[0:+32]
    normalTexture(99 - 99) -- %162[0:+32]
    roughnessTexture(100 - 100) -- %163[0:+32]
    emissiveTexture(101 - 101) -- %164[0:+32]
    shadowmapTexture0(102 - 102) -- %165[0:+32]
    shadowmapTexture1(103 - 103) -- %166[0:+32]
    shadowmapTexture2(104 - 104) -- %167[0:+32]
    shadowmapTexture3(105 - 105) -- %168[0:+32]
    samplerWrapLinear(107 - 107) -- %169[0:+16]
    samplerShadowCompare(109 - 109) -- %170[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %10[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %6408 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %10, int32{0}, int32{0}
        %174 1/int32 LD %153
        %6881 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6408
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %6881
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %30023 1/fp32 MUL %198, %214
        %30286 1/fp32 SHUF %214.y
        %30026 1/fp32 MUL %202, %30286
        %30027 1/fp32 ADD %30023, %30026
        %30287 1/fp32 SHUF %214.z
        %30030 1/fp32 MUL %206, %30287
        %30031 1/fp32 ADD %30027, %30030
        %30034 1/fp32 MUL %210, fp32{1.0}
        %30035 1/fp32 ADD %30031, %30034
        %30288 1/fp32 SHUF %198.y
        %30038 1/fp32 MUL %30288, %214
        %30289 1/fp32 SHUF %202.y
        %30290 1/fp32 SHUF %214.y
        %30041 1/fp32 MUL %30289, %30290
        %30042 1/fp32 ADD %30038, %30041
        %30291 1/fp32 SHUF %206.y
        %30292 1/fp32 SHUF %214.z
        %30045 1/fp32 MUL %30291, %30292
        %30046 1/fp32 ADD %30042, %30045
        %30293 1/fp32 SHUF %210.y
        %30049 1/fp32 MUL %30293, fp32{1.0}
        %30050 1/fp32 ADD %30046, %30049
        %30294 1/fp32 SHUF %198.z
        %30053 1/fp32 MUL %30294, %214
        %30295 1/fp32 SHUF %202.z
        %30296 1/fp32 SHUF %214.y
        %30056 1/fp32 MUL %30295, %30296
        %30057 1/fp32 ADD %30053, %30056
        %30297 1/fp32 SHUF %206.z
        %30298 1/fp32 SHUF %214.z
        %30060 1/fp32 MUL %30297, %30298
        %30061 1/fp32 ADD %30057, %30060
        %30299 1/fp32 SHUF %210.z
        %30064 1/fp32 MUL %30299, fp32{1.0}
        %30065 1/fp32 ADD %30061, %30064
        %30300 1/fp32 SHUF %198.w
        %30068 1/fp32 MUL %30300, %214
        %30301 1/fp32 SHUF %202.w
        %30302 1/fp32 SHUF %214.y
        %30071 1/fp32 MUL %30301, %30302
        %30072 1/fp32 ADD %30068, %30071
        %30303 1/fp32 SHUF %206.w
        %30304 1/fp32 SHUF %214.z
        %30075 1/fp32 MUL %30303, %30304
        %30076 1/fp32 ADD %30072, %30075
        %30305 1/fp32 SHUF %210.w
        %30079 1/fp32 MUL %30305, fp32{1.0}
        %30080 1/fp32 ADD %30076, %30079
        %6928 4/fp32 SHUF %30035.x---,  %30050.-x--,  %30065.--x-,  %30080.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30083 1/fp32 MUL %6933, %30035
        %30086 1/fp32 MUL %6935, %30050
        %30087 1/fp32 ADD %30083, %30086
        %30090 1/fp32 MUL %6937, %30065
        %30091 1/fp32 ADD %30087, %30090
        %30094 1/fp32 MUL %6939, %30080
        %30095 1/fp32 ADD %30091, %30094
        %30306 1/fp32 SHUF %6933.y
        %30098 1/fp32 MUL %30306, %30035
        %30307 1/fp32 SHUF %6935.y
        %30101 1/fp32 MUL %30307, %30050
        %30102 1/fp32 ADD %30098, %30101
        %30308 1/fp32 SHUF %6937.y
        %30105 1/fp32 MUL %30308, %30065
        %30106 1/fp32 ADD %30102, %30105
        %30309 1/fp32 SHUF %6939.y
        %30109 1/fp32 MUL %30309, %30080
        %30110 1/fp32 ADD %30106, %30109
        %30310 1/fp32 SHUF %6933.z
        %30113 1/fp32 MUL %30310, %30035
        %30311 1/fp32 SHUF %6935.z
        %30116 1/fp32 MUL %30311, %30050
        %30117 1/fp32 ADD %30113, %30116
        %30312 1/fp32 SHUF %6937.z
        %30120 1/fp32 MUL %30312, %30065
        %30121 1/fp32 ADD %30117, %30120
        %30313 1/fp32 SHUF %6939.z
        %30124 1/fp32 MUL %30313, %30080
        %30125 1/fp32 ADD %30121, %30124
        %30314 1/fp32 SHUF %6933.w
        %30128 1/fp32 MUL %30314, %30035
        %30315 1/fp32 SHUF %6935.w
        %30131 1/fp32 MUL %30315, %30050
        %30132 1/fp32 ADD %30128, %30131
        %30316 1/fp32 SHUF %6937.w
        %30135 1/fp32 MUL %30316, %30065
        %30136 1/fp32 ADD %30132, %30135
        %30317 1/fp32 SHUF %6939.w
        %30139 1/fp32 MUL %30317, %30080
        %30140 1/fp32 ADD %30136, %30139
        %6972 4/fp32 SHUF %30095.x---,  %30110.-x--,  %30125.--x-,  %30140.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %30143 1/fp32 MUL %198, %375
        %30145 1/fp32 SHUF %375.y
        %30146 1/fp32 MUL %202, %30145
        %30147 1/fp32 ADD %30143, %30146
        %30149 1/fp32 SHUF %375.z
        %30150 1/fp32 MUL %206, %30149
        %30151 1/fp32 ADD %30147, %30150
        %30318 1/fp32 SHUF %198.y
        %30154 1/fp32 MUL %30318, %375
        %30319 1/fp32 SHUF %202.y
        %30156 1/fp32 SHUF %375.y
        %30157 1/fp32 MUL %30319, %30156
        %30158 1/fp32 ADD %30154, %30157
        %30320 1/fp32 SHUF %206.y
        %30160 1/fp32 SHUF %375.z
        %30161 1/fp32 MUL %30320, %30160
        %30162 1/fp32 ADD %30158, %30161
        %30321 1/fp32 SHUF %198.z
        %30165 1/fp32 MUL %30321, %375
        %30322 1/fp32 SHUF %202.z
        %30167 1/fp32 SHUF %375.y
        %30168 1/fp32 MUL %30322, %30167
        %30169 1/fp32 ADD %30165, %30168
        %30323 1/fp32 SHUF %206.z
        %30171 1/fp32 SHUF %375.z
        %30172 1/fp32 MUL %30323, %30171
        %30173 1/fp32 ADD %30169, %30172
        %30176 1/fp32 MUL %30151, %30151
        %30179 1/fp32 MUL %30162, %30162
        %30180 1/fp32 ADD %30176, %30179
        %30183 1/fp32 MUL %30173, %30173
        %30184 1/fp32 ADD %30180, %30183
        %30018 1/fp32 RSQ %30184
        %30229 1/fp32 MUL %30151, %30018
        %30232 1/fp32 MUL %30162, %30018
        %30235 1/fp32 MUL %30173, %30018
        %30238 3/fp32 SHUF %30229.x--,  %30232.-x-,  %30235.--x
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %30187 1/fp32 MUL %198, %424
        %30189 1/fp32 SHUF %424.y
        %30190 1/fp32 MUL %202, %30189
        %30191 1/fp32 ADD %30187, %30190
        %30193 1/fp32 SHUF %424.z
        %30194 1/fp32 MUL %206, %30193
        %30195 1/fp32 ADD %30191, %30194
        %30324 1/fp32 SHUF %198.y
        %30198 1/fp32 MUL %30324, %424
        %30325 1/fp32 SHUF %202.y
        %30200 1/fp32 SHUF %424.y
        %30201 1/fp32 MUL %30325, %30200
        %30202 1/fp32 ADD %30198, %30201
        %30326 1/fp32 SHUF %206.y
        %30204 1/fp32 SHUF %424.z
        %30205 1/fp32 MUL %30326, %30204
        %30206 1/fp32 ADD %30202, %30205
        %30327 1/fp32 SHUF %198.z
        %30209 1/fp32 MUL %30327, %424
        %30328 1/fp32 SHUF %202.z
        %30211 1/fp32 SHUF %424.y
        %30212 1/fp32 MUL %30328, %30211
        %30213 1/fp32 ADD %30209, %30212
        %30329 1/fp32 SHUF %206.z
        %30215 1/fp32 SHUF %424.z
        %30216 1/fp32 MUL %30329, %30215
        %30217 1/fp32 ADD %30213, %30216
        %30220 1/fp32 MUL %30195, %30195
        %30223 1/fp32 MUL %30206, %30206
        %30224 1/fp32 ADD %30220, %30223
        %30227 1/fp32 MUL %30217, %30217
        %30228 1/fp32 ADD %30224, %30227
        %30014 1/fp32 RSQ %30228
        %30239 1/fp32 MUL %30195, %30014
        %30242 1/fp32 MUL %30206, %30014
        %30245 1/fp32 MUL %30217, %30014
        %30248 3/fp32 SHUF %30239.x--,  %30242.-x-,  %30245.--x
        %30330 1/fp32 SHUF %375.y
        %30331 1/fp32 SHUF %424.z
        %30249 1/fp32 MUL fast %30330, %30331
        %30332 1/fp32 SHUF %375.z
        %30252 1/fp32 MUL fast %30332, %424
        %30333 1/fp32 SHUF %424.y
        %30255 1/fp32 MUL fast %375, %30333
        %30334 1/fp32 SHUF %375.z
        %30335 1/fp32 SHUF %424.y
        %30259 1/fp32 MUL fast %30334, %30335
        %30336 1/fp32 SHUF %424.z
        %30262 1/fp32 MUL fast %375, %30336
        %30337 1/fp32 SHUF %375.y
        %30265 1/fp32 MUL fast %30337, %424
        %30269 1/fp32 NEG fast %30259
        %30271 1/fp32 NEG fast %30262
        %30273 1/fp32 NEG fast %30265
        %30276 1/fp32 ADD fast %30249, %30269
        %30279 1/fp32 ADD fast %30252, %30271
        %30282 1/fp32 ADD fast %30255, %30273
        %30285 3/fp32 SHUF %30276.x--,  %30279.-x-,  %30282.--x
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %30238, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %30248, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %30285, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %7133 1/int32 AND %7132, int32{255}
        %7136 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7137 1/int32 AND %7136, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7268 1/int32 SHL %7133, int32{12}
        %7269 1/int32 OR %7268, %7137
        %7270 void intr.s_sendmsg %7269, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %7133
        %7274 1/int32 ADD int32{64}, %7273
        %7275 1/int64 CONV %7274
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %7278 1/int32 CMOV.ne (%7277, int32{0}) int32{1}, int32{0}
        %1308 1/int1 CMP.ne %7278, int32{0}
        %1313 void BRC %1308[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %7137
        %7293 1/int32 ADD int32{64}, %7292
        %7294 1/int64 CONV %7293
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %7297 1/int32 CMOV.ne (%7296, int32{0}) int32{1}, int32{0}
        %1410 1/int1 CMP.ne %7297, int32{0}
        %1415 void BRC %1410[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %28047 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28048 1/int1 CMP.ne %28047, int32{0}
        %28049 void BRC %28048
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %28054 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28055 1/int1 CMP.ne %28054, int32{0}
        %28056 void BRC %28055
        --> block:28087, block:28059

      block:28059 - if-predicate
        <-- block:28050
        %28063 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28064 1/int1 CMP.ne %28063, int32{0}
        %28065 void BRC %28064
        --> block:28087, block:28066

      block:28066 - if-predicate
        <-- block:28059
        %28070 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28071 1/int1 CMP.ne %28070, int32{0}
        %28072 void BRC %28071
        --> block:28057, block:28087

      block:28057 - dummy-edge
        <-- block:28066
        %28058 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050, block:28059, block:28066, block:28057
        %28088 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28102 1/int32 CMOV.ne (int32{0}, %27747) int32{1}, int32{0}
        %28103 1/int1 CMP.ne %28102, int32{0}
        %28104 void BRC %28103
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %28110 1/int32 AND %27747, int32{-2097153}
        %28114 1/int32 CMOV.eq (int32{0}, %28088) int32{1}, int32{0}
        %28115 1/int32 CMOV.ne (%28114, int32{0}) int32{2097152}, int32{0}
        %28116 1/int32 OR %28110, %28115
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %28116, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %28148 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28149 1/int1 CMP.ne %28148, int32{0}
        %28150 void BRC %28149
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %28152 1/int32 AND %27751, int32{-2097153}
        %28156 1/int32 CMOV.eq (int32{1}, %28088) int32{1}, int32{0}
        %28157 1/int32 CMOV.ne (%28156, int32{0}) int32{2097152}, int32{0}
        %28158 1/int32 OR %28152, %28157
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %28158, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %28190 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28191 1/int1 CMP.ne %28190, int32{0}
        %28192 void BRC %28191
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %28194 1/int32 AND %27755, int32{-2097153}
        %28198 1/int32 CMOV.eq (int32{2}, %28088) int32{1}, int32{0}
        %28199 1/int32 CMOV.ne (%28198, int32{0}) int32{2097152}, int32{0}
        %28200 1/int32 OR %28194, %28199
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %28200, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %28232 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28233 1/int1 CMP.ne %28232, int32{0}
        %28234 void BRC %28233
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %28236 1/int32 AND %27759, int32{-2097153}
        %28240 1/int32 CMOV.eq (int32{3}, %28088) int32{1}, int32{0}
        %28241 1/int32 CMOV.ne (%28240, int32{0}) int32{2097152}, int32{0}
        %28242 1/int32 OR %28236, %28241
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %28242, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28274 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28275 1/int1 CMP.ne %28274, int32{0}
        %28276 void BRC %28275
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %28278 1/int32 AND %27763, int32{-2097153}
        %28282 1/int32 CMOV.eq (int32{4}, %28088) int32{1}, int32{0}
        %28283 1/int32 CMOV.ne (%28282, int32{0}) int32{2097152}, int32{0}
        %28284 1/int32 OR %28278, %28283
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %28284, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %28084 1/int32 CMOV.ne (int32{0}, %27767) int32{1}, int32{0}
        %28085 1/int1 CMP.ne %28084, int32{0}
        %28086 void BRC %28085
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %28368 1/int32 CMOV.ne (int32{0}, %27771) int32{1}, int32{0}
        %28369 1/int1 CMP.ne %28368, int32{0}
        %28370 void BRC %28369
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %28403 1/int32 CMOV.ne (int32{0}, %27775) int32{1}, int32{0}
        %28404 1/int1 CMP.ne %28403, int32{0}
        %28405 void BRC %28404
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %28438 1/int32 CMOV.ne (int32{0}, %27779) int32{1}, int32{0}
        %28439 1/int1 CMP.ne %28438, int32{0}
        %28440 void BRC %28439
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %28473 1/int32 CMOV.ne (int32{0}, %27783) int32{1}, int32{0}
        %28474 1/int1 CMP.ne %28473, int32{0}
        %28475 void BRC %28474
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %28508 1/int32 CMOV.ne (int32{0}, %27787) int32{1}, int32{0}
        %28509 1/int1 CMP.ne %28508, int32{0}
        %28510 void BRC %28509
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %28543 1/int32 CMOV.ne (int32{0}, %27791) int32{1}, int32{0}
        %28544 1/int1 CMP.ne %28543, int32{0}
        %28545 void BRC %28544
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %28578 1/int32 CMOV.ne (int32{0}, %27795) int32{1}, int32{0}
        %28579 1/int1 CMP.ne %28578, int32{0}
        %28580 void BRC %28579
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %28613 1/int32 CMOV.ne (int32{0}, %27799) int32{1}, int32{0}
        %28614 1/int1 CMP.ne %28613, int32{0}
        %28615 void BRC %28614
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %28648 1/int32 CMOV.ne (int32{0}, %27803) int32{1}, int32{0}
        %28649 1/int1 CMP.ne %28648, int32{0}
        %28650 void BRC %28649
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %28683 1/int32 CMOV.ne (int32{0}, %27807) int32{1}, int32{0}
        %28684 1/int1 CMP.ne %28683, int32{0}
        %28685 void BRC %28684
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %28718 1/int32 CMOV.ne (int32{0}, %27811) int32{1}, int32{0}
        %28719 1/int1 CMP.ne %28718, int32{0}
        %28720 void BRC %28719
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %28753 1/int32 CMOV.ne (int32{0}, %27815) int32{1}, int32{0}
        %28754 1/int1 CMP.ne %28753, int32{0}
        %28755 void BRC %28754
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %28788 1/int32 CMOV.ne (int32{0}, %27819) int32{1}, int32{0}
        %28789 1/int1 CMP.ne %28788, int32{0}
        %28790 void BRC %28789
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %28823 1/int32 CMOV.ne (int32{0}, %27823) int32{1}, int32{0}
        %28824 1/int1 CMP.ne %28823, int32{0}
        %28825 void BRC %28824
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %28858 1/int32 CMOV.ne (int32{0}, %27827) int32{1}, int32{0}
        %28859 1/int1 CMP.ne %28858, int32{0}
        %28860 void BRC %28859
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %28893 1/int32 CMOV.ne (int32{0}, %27831) int32{1}, int32{0}
        %28894 1/int1 CMP.ne %28893, int32{0}
        %28895 void BRC %28894
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %28928 1/int32 CMOV.ne (int32{0}, %27835) int32{1}, int32{0}
        %28929 1/int1 CMP.ne %28928, int32{0}
        %28930 void BRC %28929
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %28963 1/int32 CMOV.ne (int32{0}, %27839) int32{1}, int32{0}
        %28964 1/int1 CMP.ne %28963, int32{0}
        %28965 void BRC %28964
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %28998 1/int32 CMOV.ne (int32{0}, %27843) int32{1}, int32{0}
        %28999 1/int1 CMP.ne %28998, int32{0}
        %29000 void BRC %28999
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %29033 1/int32 CMOV.ne (int32{0}, %27847) int32{1}, int32{0}
        %29034 1/int1 CMP.ne %29033, int32{0}
        %29035 void BRC %29034
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %29068 1/int32 CMOV.ne (int32{0}, %27851) int32{1}, int32{0}
        %29069 1/int1 CMP.ne %29068, int32{0}
        %29070 void BRC %29069
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %29103 1/int32 CMOV.ne (int32{0}, %27855) int32{1}, int32{0}
        %29104 1/int1 CMP.ne %29103, int32{0}
        %29105 void BRC %29104
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %29138 1/int32 CMOV.ne (int32{0}, %27859) int32{1}, int32{0}
        %29139 1/int1 CMP.ne %29138, int32{0}
        %29140 void BRC %29139
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %29173 1/int32 CMOV.ne (int32{0}, %27863) int32{1}, int32{0}
        %29174 1/int1 CMP.ne %29173, int32{0}
        %29175 void BRC %29174
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %29208 1/int32 CMOV.ne (int32{0}, %27867) int32{1}, int32{0}
        %29209 1/int1 CMP.ne %29208, int32{0}
        %29210 void BRC %29209
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %29243 1/int32 CMOV.ne (int32{0}, %27871) int32{1}, int32{0}
        %29244 1/int1 CMP.ne %29243, int32{0}
        %29245 void BRC %29244
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %29278 1/int32 CMOV.ne (int32{0}, %27875) int32{1}, int32{0}
        %29279 1/int1 CMP.ne %29278, int32{0}
        %29280 void BRC %29279
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %29313 1/int32 CMOV.ne (int32{0}, %27879) int32{1}, int32{0}
        %29314 1/int1 CMP.ne %29313, int32{0}
        %29315 void BRC %29314
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %29348 1/int32 CMOV.ne (int32{0}, %27883) int32{1}, int32{0}
        %29349 1/int1 CMP.ne %29348, int32{0}
        %29350 void BRC %29349
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %29383 1/int32 CMOV.ne (int32{0}, %27887) int32{1}, int32{0}
        %29384 1/int1 CMP.ne %29383, int32{0}
        %29385 void BRC %29384
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %29418 1/int32 CMOV.ne (int32{0}, %27891) int32{1}, int32{0}
        %29419 1/int1 CMP.ne %29418, int32{0}
        %29420 void BRC %29419
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 153/799: validate graph
    validate graph (0045C2BE)
>> pass 154/799: lower FDiv/FMod instructions
    lower FDiv/FMod instructions (8A3C3571)
>> pass 155/799: validate graph
    validate graph (0045C2BE)
>> pass 156/799: loop analysis
    loop analysis (598E85BD)
>> pass 157/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 158/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 159/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 160/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 161/799: lower uniformity
    lower uniformity (69E21F86)
>> pass 162/799: validate graph
    validate graph (0045C2BE)
>> pass 163/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 164/799: validate graph
    validate graph (0045C2BE)
>> pass 165/799: merge getelemptr
    merge getelemptr (D655006F)
>> pass 166/799: validate graph
    validate graph (0045C2BE)
>> pass 167/799: remove dead code
    remove dead code (B7E6F507)
>> pass 168/799: validate graph
    validate graph (0045C2BE)
>> pass 169/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 170/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 171/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 172/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 173/799: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 174/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 175/799: validate graph
    validate graph (0045C2BE)
>> pass 176/799: loop analysis
    loop analysis (598E85BD)
>> pass 177/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 178/799: remove redundancy
    remove redundancy (1AC4449D)
>> pass 179/799: validate graph
    validate graph (0045C2BE)
>> pass 180/799: optimize array copies
    optimize array copies (32902F2C)
>> pass 181/799: validate graph
    validate graph (0045C2BE)
>> pass 182/799: optimize memcopy
    optimize memcopy (2E886C25)
>> pass 183/799: validate graph
    validate graph (0045C2BE)
>> pass 184/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %10 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %159 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %166 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %167 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %168 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %169 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %170 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %10[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]
    cubemapTexture(96 - 96) -- %159[0:+32]
    brdfLUT(97 - 97) -- %160[0:+32]
    albedoTexture(98 - 98) -- %161[0:+32]
    normalTexture(99 - 99) -- %162[0:+32]
    roughnessTexture(100 - 100) -- %163[0:+32]
    emissiveTexture(101 - 101) -- %164[0:+32]
    shadowmapTexture0(102 - 102) -- %165[0:+32]
    shadowmapTexture1(103 - 103) -- %166[0:+32]
    shadowmapTexture2(104 - 104) -- %167[0:+32]
    shadowmapTexture3(105 - 105) -- %168[0:+32]
    samplerWrapLinear(107 - 107) -- %169[0:+16]
    samplerShadowCompare(109 - 109) -- %170[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %10[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %6408 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %10, int32{0}, int32{0}
        %174 1/int32 LD %153
        %6881 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6408
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %6881
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %30023 1/fp32 MUL %198, %214
        %30286 1/fp32 SHUF %214.y
        %30026 1/fp32 MUL %202, %30286
        %30027 1/fp32 ADD %30023, %30026
        %30287 1/fp32 SHUF %214.z
        %30030 1/fp32 MUL %206, %30287
        %30031 1/fp32 ADD %30027, %30030
        %30034 1/fp32 MUL %210, fp32{1.0}
        %30035 1/fp32 ADD %30031, %30034
        %30288 1/fp32 SHUF %198.y
        %30038 1/fp32 MUL %30288, %214
        %30289 1/fp32 SHUF %202.y
        %30290 1/fp32 SHUF %214.y
        %30041 1/fp32 MUL %30289, %30286
        %30042 1/fp32 ADD %30038, %30041
        %30291 1/fp32 SHUF %206.y
        %30292 1/fp32 SHUF %214.z
        %30045 1/fp32 MUL %30291, %30287
        %30046 1/fp32 ADD %30042, %30045
        %30293 1/fp32 SHUF %210.y
        %30049 1/fp32 MUL %30293, fp32{1.0}
        %30050 1/fp32 ADD %30046, %30049
        %30294 1/fp32 SHUF %198.z
        %30053 1/fp32 MUL %30294, %214
        %30295 1/fp32 SHUF %202.z
        %30296 1/fp32 SHUF %214.y
        %30056 1/fp32 MUL %30295, %30286
        %30057 1/fp32 ADD %30053, %30056
        %30297 1/fp32 SHUF %206.z
        %30298 1/fp32 SHUF %214.z
        %30060 1/fp32 MUL %30297, %30287
        %30061 1/fp32 ADD %30057, %30060
        %30299 1/fp32 SHUF %210.z
        %30064 1/fp32 MUL %30299, fp32{1.0}
        %30065 1/fp32 ADD %30061, %30064
        %30300 1/fp32 SHUF %198.w
        %30068 1/fp32 MUL %30300, %214
        %30301 1/fp32 SHUF %202.w
        %30302 1/fp32 SHUF %214.y
        %30071 1/fp32 MUL %30301, %30286
        %30072 1/fp32 ADD %30068, %30071
        %30303 1/fp32 SHUF %206.w
        %30304 1/fp32 SHUF %214.z
        %30075 1/fp32 MUL %30303, %30287
        %30076 1/fp32 ADD %30072, %30075
        %30305 1/fp32 SHUF %210.w
        %30079 1/fp32 MUL %30305, fp32{1.0}
        %30080 1/fp32 ADD %30076, %30079
        %6928 4/fp32 SHUF %30035.x---,  %30050.-x--,  %30065.--x-,  %30080.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30083 1/fp32 MUL %6933, %30035
        %30086 1/fp32 MUL %6935, %30050
        %30087 1/fp32 ADD %30083, %30086
        %30090 1/fp32 MUL %6937, %30065
        %30091 1/fp32 ADD %30087, %30090
        %30094 1/fp32 MUL %6939, %30080
        %30095 1/fp32 ADD %30091, %30094
        %30306 1/fp32 SHUF %6933.y
        %30098 1/fp32 MUL %30306, %30035
        %30307 1/fp32 SHUF %6935.y
        %30101 1/fp32 MUL %30307, %30050
        %30102 1/fp32 ADD %30098, %30101
        %30308 1/fp32 SHUF %6937.y
        %30105 1/fp32 MUL %30308, %30065
        %30106 1/fp32 ADD %30102, %30105
        %30309 1/fp32 SHUF %6939.y
        %30109 1/fp32 MUL %30309, %30080
        %30110 1/fp32 ADD %30106, %30109
        %30310 1/fp32 SHUF %6933.z
        %30113 1/fp32 MUL %30310, %30035
        %30311 1/fp32 SHUF %6935.z
        %30116 1/fp32 MUL %30311, %30050
        %30117 1/fp32 ADD %30113, %30116
        %30312 1/fp32 SHUF %6937.z
        %30120 1/fp32 MUL %30312, %30065
        %30121 1/fp32 ADD %30117, %30120
        %30313 1/fp32 SHUF %6939.z
        %30124 1/fp32 MUL %30313, %30080
        %30125 1/fp32 ADD %30121, %30124
        %30314 1/fp32 SHUF %6933.w
        %30128 1/fp32 MUL %30314, %30035
        %30315 1/fp32 SHUF %6935.w
        %30131 1/fp32 MUL %30315, %30050
        %30132 1/fp32 ADD %30128, %30131
        %30316 1/fp32 SHUF %6937.w
        %30135 1/fp32 MUL %30316, %30065
        %30136 1/fp32 ADD %30132, %30135
        %30317 1/fp32 SHUF %6939.w
        %30139 1/fp32 MUL %30317, %30080
        %30140 1/fp32 ADD %30136, %30139
        %6972 4/fp32 SHUF %30095.x---,  %30110.-x--,  %30125.--x-,  %30140.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %30143 1/fp32 MUL %198, %375
        %30145 1/fp32 SHUF %375.y
        %30146 1/fp32 MUL %202, %30145
        %30147 1/fp32 ADD %30143, %30146
        %30149 1/fp32 SHUF %375.z
        %30150 1/fp32 MUL %206, %30149
        %30151 1/fp32 ADD %30147, %30150
        %30318 1/fp32 SHUF %198.y
        %30154 1/fp32 MUL %30288, %375
        %30319 1/fp32 SHUF %202.y
        %30156 1/fp32 SHUF %375.y
        %30157 1/fp32 MUL %30289, %30145
        %30158 1/fp32 ADD %30154, %30157
        %30320 1/fp32 SHUF %206.y
        %30160 1/fp32 SHUF %375.z
        %30161 1/fp32 MUL %30291, %30149
        %30162 1/fp32 ADD %30158, %30161
        %30321 1/fp32 SHUF %198.z
        %30165 1/fp32 MUL %30294, %375
        %30322 1/fp32 SHUF %202.z
        %30167 1/fp32 SHUF %375.y
        %30168 1/fp32 MUL %30295, %30145
        %30169 1/fp32 ADD %30165, %30168
        %30323 1/fp32 SHUF %206.z
        %30171 1/fp32 SHUF %375.z
        %30172 1/fp32 MUL %30297, %30149
        %30173 1/fp32 ADD %30169, %30172
        %30176 1/fp32 MUL %30151, %30151
        %30179 1/fp32 MUL %30162, %30162
        %30180 1/fp32 ADD %30176, %30179
        %30183 1/fp32 MUL %30173, %30173
        %30184 1/fp32 ADD %30180, %30183
        %30018 1/fp32 RSQ %30184
        %30229 1/fp32 MUL %30151, %30018
        %30232 1/fp32 MUL %30162, %30018
        %30235 1/fp32 MUL %30173, %30018
        %30238 3/fp32 SHUF %30229.x--,  %30232.-x-,  %30235.--x
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %30187 1/fp32 MUL %198, %424
        %30189 1/fp32 SHUF %424.y
        %30190 1/fp32 MUL %202, %30189
        %30191 1/fp32 ADD %30187, %30190
        %30193 1/fp32 SHUF %424.z
        %30194 1/fp32 MUL %206, %30193
        %30195 1/fp32 ADD %30191, %30194
        %30324 1/fp32 SHUF %198.y
        %30198 1/fp32 MUL %30288, %424
        %30325 1/fp32 SHUF %202.y
        %30200 1/fp32 SHUF %424.y
        %30201 1/fp32 MUL %30289, %30189
        %30202 1/fp32 ADD %30198, %30201
        %30326 1/fp32 SHUF %206.y
        %30204 1/fp32 SHUF %424.z
        %30205 1/fp32 MUL %30291, %30193
        %30206 1/fp32 ADD %30202, %30205
        %30327 1/fp32 SHUF %198.z
        %30209 1/fp32 MUL %30294, %424
        %30328 1/fp32 SHUF %202.z
        %30211 1/fp32 SHUF %424.y
        %30212 1/fp32 MUL %30295, %30189
        %30213 1/fp32 ADD %30209, %30212
        %30329 1/fp32 SHUF %206.z
        %30215 1/fp32 SHUF %424.z
        %30216 1/fp32 MUL %30297, %30193
        %30217 1/fp32 ADD %30213, %30216
        %30220 1/fp32 MUL %30195, %30195
        %30223 1/fp32 MUL %30206, %30206
        %30224 1/fp32 ADD %30220, %30223
        %30227 1/fp32 MUL %30217, %30217
        %30228 1/fp32 ADD %30224, %30227
        %30014 1/fp32 RSQ %30228
        %30239 1/fp32 MUL %30195, %30014
        %30242 1/fp32 MUL %30206, %30014
        %30245 1/fp32 MUL %30217, %30014
        %30248 3/fp32 SHUF %30239.x--,  %30242.-x-,  %30245.--x
        %30330 1/fp32 SHUF %375.y
        %30331 1/fp32 SHUF %424.z
        %30249 1/fp32 MUL fast %30145, %30193
        %30332 1/fp32 SHUF %375.z
        %30252 1/fp32 MUL fast %30149, %424
        %30333 1/fp32 SHUF %424.y
        %30255 1/fp32 MUL fast %375, %30189
        %30334 1/fp32 SHUF %375.z
        %30335 1/fp32 SHUF %424.y
        %30259 1/fp32 MUL fast %30149, %30189
        %30336 1/fp32 SHUF %424.z
        %30262 1/fp32 MUL fast %375, %30193
        %30337 1/fp32 SHUF %375.y
        %30265 1/fp32 MUL fast %30145, %424
        %30269 1/fp32 NEG fast %30259
        %30271 1/fp32 NEG fast %30262
        %30273 1/fp32 NEG fast %30265
        %30276 1/fp32 ADD fast %30249, %30269
        %30279 1/fp32 ADD fast %30252, %30271
        %30282 1/fp32 ADD fast %30255, %30273
        %30285 3/fp32 SHUF %30276.x--,  %30279.-x-,  %30282.--x
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %30238, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %30248, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %30285, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %7133 1/int32 AND %7132, int32{255}
        %7136 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7137 1/int32 AND %7131, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7268 1/int32 SHL %7133, int32{12}
        %7269 1/int32 OR %7268, %7137
        %7270 void intr.s_sendmsg %7269, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %7133
        %7274 1/int32 ADD int32{64}, %7273
        %7275 1/int64 CONV %7274
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %7278 1/int32 CMOV.ne (%7277, int32{0}) int32{1}, int32{0}
        %1308 1/int1 CMP.ne %7278, int32{0}
        %1313 void BRC %1308[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %7137
        %7293 1/int32 ADD int32{64}, %7292
        %7294 1/int64 CONV %7293
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %7297 1/int32 CMOV.ne (%7296, int32{0}) int32{1}, int32{0}
        %1410 1/int1 CMP.ne %7297, int32{0}
        %1415 void BRC %1410[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %28047 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28048 1/int1 CMP.ne %28047, int32{0}
        %28049 void BRC %28048
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %28054 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28055 1/int1 CMP.ne %28054, int32{0}
        %28056 void BRC %28055
        --> block:28087, block:28059

      block:28059 - if-predicate
        <-- block:28050
        %28063 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28064 1/int1 CMP.ne %28063, int32{0}
        %28065 void BRC %28064
        --> block:28087, block:28066

      block:28066 - if-predicate
        <-- block:28059
        %28070 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28071 1/int1 CMP.ne %28070, int32{0}
        %28072 void BRC %28071
        --> block:28057, block:28087

      block:28057 - dummy-edge
        <-- block:28066
        %28058 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050, block:28059, block:28066, block:28057
        %28088 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28102 1/int32 CMOV.ne (int32{0}, %27747) int32{1}, int32{0}
        %28103 1/int1 CMP.ne %28102, int32{0}
        %28104 void BRC %28103
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %28110 1/int32 AND %27747, int32{-2097153}
        %28114 1/int32 CMOV.eq (int32{0}, %28088) int32{1}, int32{0}
        %28115 1/int32 CMOV.ne (%28114, int32{0}) int32{2097152}, int32{0}
        %28116 1/int32 OR %28110, %28115
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %28116, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %28148 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28149 1/int1 CMP.ne %28148, int32{0}
        %28150 void BRC %28149
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %28152 1/int32 AND %27751, int32{-2097153}
        %28156 1/int32 CMOV.eq (int32{1}, %28088) int32{1}, int32{0}
        %28157 1/int32 CMOV.ne (%28156, int32{0}) int32{2097152}, int32{0}
        %28158 1/int32 OR %28152, %28157
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %28158, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %28190 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28191 1/int1 CMP.ne %28190, int32{0}
        %28192 void BRC %28191
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %28194 1/int32 AND %27755, int32{-2097153}
        %28198 1/int32 CMOV.eq (int32{2}, %28088) int32{1}, int32{0}
        %28199 1/int32 CMOV.ne (%28198, int32{0}) int32{2097152}, int32{0}
        %28200 1/int32 OR %28194, %28199
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %28200, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %28232 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28233 1/int1 CMP.ne %28232, int32{0}
        %28234 void BRC %28233
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %28236 1/int32 AND %27759, int32{-2097153}
        %28240 1/int32 CMOV.eq (int32{3}, %28088) int32{1}, int32{0}
        %28241 1/int32 CMOV.ne (%28240, int32{0}) int32{2097152}, int32{0}
        %28242 1/int32 OR %28236, %28241
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %28242, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28274 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28275 1/int1 CMP.ne %28047, int32{0}
        %28276 void BRC %28048
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %28278 1/int32 AND %27763, int32{-2097153}
        %28282 1/int32 CMOV.eq (int32{4}, %28088) int32{1}, int32{0}
        %28283 1/int32 CMOV.ne (%28282, int32{0}) int32{2097152}, int32{0}
        %28284 1/int32 OR %28278, %28283
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %28284, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %28084 1/int32 CMOV.ne (int32{0}, %27767) int32{1}, int32{0}
        %28085 1/int1 CMP.ne %28084, int32{0}
        %28086 void BRC %28085
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %28368 1/int32 CMOV.ne (int32{0}, %27771) int32{1}, int32{0}
        %28369 1/int1 CMP.ne %28368, int32{0}
        %28370 void BRC %28369
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %28403 1/int32 CMOV.ne (int32{0}, %27775) int32{1}, int32{0}
        %28404 1/int1 CMP.ne %28403, int32{0}
        %28405 void BRC %28404
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %28438 1/int32 CMOV.ne (int32{0}, %27779) int32{1}, int32{0}
        %28439 1/int1 CMP.ne %28438, int32{0}
        %28440 void BRC %28439
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %28473 1/int32 CMOV.ne (int32{0}, %27783) int32{1}, int32{0}
        %28474 1/int1 CMP.ne %28473, int32{0}
        %28475 void BRC %28474
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %28508 1/int32 CMOV.ne (int32{0}, %27787) int32{1}, int32{0}
        %28509 1/int1 CMP.ne %28508, int32{0}
        %28510 void BRC %28509
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %28543 1/int32 CMOV.ne (int32{0}, %27791) int32{1}, int32{0}
        %28544 1/int1 CMP.ne %28543, int32{0}
        %28545 void BRC %28544
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %28578 1/int32 CMOV.ne (int32{0}, %27795) int32{1}, int32{0}
        %28579 1/int1 CMP.ne %28578, int32{0}
        %28580 void BRC %28579
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %28613 1/int32 CMOV.ne (int32{0}, %27799) int32{1}, int32{0}
        %28614 1/int1 CMP.ne %28613, int32{0}
        %28615 void BRC %28614
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %28648 1/int32 CMOV.ne (int32{0}, %27803) int32{1}, int32{0}
        %28649 1/int1 CMP.ne %28648, int32{0}
        %28650 void BRC %28649
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %28683 1/int32 CMOV.ne (int32{0}, %27807) int32{1}, int32{0}
        %28684 1/int1 CMP.ne %28683, int32{0}
        %28685 void BRC %28684
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %28718 1/int32 CMOV.ne (int32{0}, %27811) int32{1}, int32{0}
        %28719 1/int1 CMP.ne %28718, int32{0}
        %28720 void BRC %28719
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %28753 1/int32 CMOV.ne (int32{0}, %27815) int32{1}, int32{0}
        %28754 1/int1 CMP.ne %28753, int32{0}
        %28755 void BRC %28754
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %28788 1/int32 CMOV.ne (int32{0}, %27819) int32{1}, int32{0}
        %28789 1/int1 CMP.ne %28788, int32{0}
        %28790 void BRC %28789
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %28823 1/int32 CMOV.ne (int32{0}, %27823) int32{1}, int32{0}
        %28824 1/int1 CMP.ne %28823, int32{0}
        %28825 void BRC %28824
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %28858 1/int32 CMOV.ne (int32{0}, %27827) int32{1}, int32{0}
        %28859 1/int1 CMP.ne %28858, int32{0}
        %28860 void BRC %28859
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %28893 1/int32 CMOV.ne (int32{0}, %27831) int32{1}, int32{0}
        %28894 1/int1 CMP.ne %28893, int32{0}
        %28895 void BRC %28894
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %28928 1/int32 CMOV.ne (int32{0}, %27835) int32{1}, int32{0}
        %28929 1/int1 CMP.ne %28928, int32{0}
        %28930 void BRC %28929
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %28963 1/int32 CMOV.ne (int32{0}, %27839) int32{1}, int32{0}
        %28964 1/int1 CMP.ne %28963, int32{0}
        %28965 void BRC %28964
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %28998 1/int32 CMOV.ne (int32{0}, %27843) int32{1}, int32{0}
        %28999 1/int1 CMP.ne %28998, int32{0}
        %29000 void BRC %28999
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %29033 1/int32 CMOV.ne (int32{0}, %27847) int32{1}, int32{0}
        %29034 1/int1 CMP.ne %29033, int32{0}
        %29035 void BRC %29034
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %29068 1/int32 CMOV.ne (int32{0}, %27851) int32{1}, int32{0}
        %29069 1/int1 CMP.ne %29068, int32{0}
        %29070 void BRC %29069
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %29103 1/int32 CMOV.ne (int32{0}, %27855) int32{1}, int32{0}
        %29104 1/int1 CMP.ne %29103, int32{0}
        %29105 void BRC %29104
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %29138 1/int32 CMOV.ne (int32{0}, %27859) int32{1}, int32{0}
        %29139 1/int1 CMP.ne %29138, int32{0}
        %29140 void BRC %29139
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %29173 1/int32 CMOV.ne (int32{0}, %27863) int32{1}, int32{0}
        %29174 1/int1 CMP.ne %29173, int32{0}
        %29175 void BRC %29174
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %29208 1/int32 CMOV.ne (int32{0}, %27867) int32{1}, int32{0}
        %29209 1/int1 CMP.ne %29208, int32{0}
        %29210 void BRC %29209
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %29243 1/int32 CMOV.ne (int32{0}, %27871) int32{1}, int32{0}
        %29244 1/int1 CMP.ne %29243, int32{0}
        %29245 void BRC %29244
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %29278 1/int32 CMOV.ne (int32{0}, %27875) int32{1}, int32{0}
        %29279 1/int1 CMP.ne %29278, int32{0}
        %29280 void BRC %29279
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %29313 1/int32 CMOV.ne (int32{0}, %27879) int32{1}, int32{0}
        %29314 1/int1 CMP.ne %29313, int32{0}
        %29315 void BRC %29314
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %29348 1/int32 CMOV.ne (int32{0}, %27883) int32{1}, int32{0}
        %29349 1/int1 CMP.ne %29348, int32{0}
        %29350 void BRC %29349
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %29383 1/int32 CMOV.ne (int32{0}, %27887) int32{1}, int32{0}
        %29384 1/int1 CMP.ne %29383, int32{0}
        %29385 void BRC %29384
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %29418 1/int32 CMOV.ne (int32{0}, %27891) int32{1}, int32{0}
        %29419 1/int1 CMP.ne %29418, int32{0}
        %29420 void BRC %29419
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 185/799: validate graph
    validate graph (0045C2BE)
>> pass 186/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 187/799: validate graph
    validate graph (0045C2BE)
>> pass 188/799: lower srt
    lower srt (09AD683D)
>> pass 189/799: validate graph
    validate graph (0045C2BE)
>> pass 190/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 191/799: remove dead code
    remove dead code (B7E6F507)
>> pass 192/799: validate graph
    validate graph (0045C2BE)
>> pass 193/799: loop analysis
    loop analysis (598E85BD)
>> pass 194/799: structural analysis
    structural analysis (A71DE301)
>> pass 195/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 196/799: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 197/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 198/799: validate graph
    validate graph (0045C2BE)
>> pass 199/799: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 200/799: validate graph
    validate graph (0045C2BE)
>> pass 201/799: break critical edges
    break critical edges (D716EAB4)
>> pass 202/799: validate graph
    validate graph (0045C2BE)
>> pass 203/799: loop analysis
    loop analysis (598E85BD)
>> pass 204/799: normalize loops
    normalize loops (1918C45F)
>> pass 205/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 206/799: validate graph
    validate graph (0045C2BE)
>> pass 207/799: loop analysis
    loop analysis (598E85BD)
>> pass 208/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 209/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 210/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 211/799: unswitch loops
    unswitch loops (503811B6)
>> pass 212/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 213/799: validate graph
    validate graph (0045C2BE)
>> pass 214/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 215/799: validate graph
    validate graph (0045C2BE)
>> pass 216/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 217/799: remove dead code
    remove dead code (B7E6F507)
>> pass 218/799: validate graph
    validate graph (0045C2BE)
>> pass 219/799: loop analysis
    loop analysis (598E85BD)
>> pass 220/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 221/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 222/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 223/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 224/799: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 225/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 226/799: validate graph
    validate graph (0045C2BE)
>> pass 227/799: loop analysis
    loop analysis (598E85BD)
>> pass 228/799: unwind loops
    unwind loops (CE7F8B5B)
>> pass 229/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 230/799: validate graph
    validate graph (0045C2BE)
>> pass 231/799: loop analysis
    loop analysis (598E85BD)
>> pass 232/799: rotate loops
    rotate loops (B076855B)
>> pass 233/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 234/799: validate graph
    validate graph (0045C2BE)
>> pass 235/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 236/799: validate graph
    validate graph (0045C2BE)
>> pass 237/799: loop analysis
    loop analysis (598E85BD)
>> pass 238/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 239/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 240/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 241/799: optimize kcacheable structured buffer loads
    optimize kcacheable structured buffer loads (C2B823B3)
>> pass 242/799: validate graph
    validate graph (0045C2BE)
>> pass 243/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 244/799: remove dead code
    remove dead code (B7E6F507)
>> pass 245/799: validate graph
    validate graph (0045C2BE)
>> pass 246/799: legalize entry args
    legalize entry args (F207B1C1)
>> pass 247/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 248/799: validate graph
    validate graph (0045C2BE)
>> pass 249/799: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 250/799: validate graph
    validate graph (0045C2BE)
>> pass 251/799: loop analysis
    loop analysis (598E85BD)
>> pass 252/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 253/799: validate graph
    validate graph (0045C2BE)
>> pass 254/799: constant propagation
    constant propagation (5CBB3303)
>> pass 255/799: validate graph
    validate graph (0045C2BE)
>> pass 256/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 257/799: validate graph
    validate graph (0045C2BE)
>> pass 258/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 259/799: remove dead code
    remove dead code (B7E6F507)
>> pass 260/799: validate graph
    validate graph (0045C2BE)
>> pass 261/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %159 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %166 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %167 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %168 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %169 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %170 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]
    cubemapTexture(96 - 96) -- %159[0:+32]
    brdfLUT(97 - 97) -- %160[0:+32]
    albedoTexture(98 - 98) -- %161[0:+32]
    normalTexture(99 - 99) -- %162[0:+32]
    roughnessTexture(100 - 100) -- %163[0:+32]
    emissiveTexture(101 - 101) -- %164[0:+32]
    shadowmapTexture0(102 - 102) -- %165[0:+32]
    shadowmapTexture1(103 - 103) -- %166[0:+32]
    shadowmapTexture2(104 - 104) -- %167[0:+32]
    shadowmapTexture3(105 - 105) -- %168[0:+32]
    samplerWrapLinear(107 - 107) -- %169[0:+16]
    samplerShadowCompare(109 - 109) -- %170[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16]
        %174 1/int32 LD %153
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30340
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %30023 1/fp32 MUL %198, %214
        %30286 1/fp32 SHUF %214.y
        %30026 1/fp32 MUL %202, %30286
        %30027 1/fp32 ADD %30023, %30026
        %30287 1/fp32 SHUF %214.z
        %30030 1/fp32 MUL %206, %30287
        %30031 1/fp32 ADD %30027, %30030
        %30034 1/fp32 MUL %210, fp32{1.0}
        %30035 1/fp32 ADD %30031, %30034
        %30288 1/fp32 SHUF %198.y
        %30038 1/fp32 MUL %30288, %214
        %30289 1/fp32 SHUF %202.y
        %30041 1/fp32 MUL %30289, %30286
        %30042 1/fp32 ADD %30038, %30041
        %30291 1/fp32 SHUF %206.y
        %30045 1/fp32 MUL %30291, %30287
        %30046 1/fp32 ADD %30042, %30045
        %30293 1/fp32 SHUF %210.y
        %30049 1/fp32 MUL %30293, fp32{1.0}
        %30050 1/fp32 ADD %30046, %30049
        %30294 1/fp32 SHUF %198.z
        %30053 1/fp32 MUL %30294, %214
        %30295 1/fp32 SHUF %202.z
        %30056 1/fp32 MUL %30295, %30286
        %30057 1/fp32 ADD %30053, %30056
        %30297 1/fp32 SHUF %206.z
        %30060 1/fp32 MUL %30297, %30287
        %30061 1/fp32 ADD %30057, %30060
        %30299 1/fp32 SHUF %210.z
        %30064 1/fp32 MUL %30299, fp32{1.0}
        %30065 1/fp32 ADD %30061, %30064
        %30300 1/fp32 SHUF %198.w
        %30068 1/fp32 MUL %30300, %214
        %30301 1/fp32 SHUF %202.w
        %30071 1/fp32 MUL %30301, %30286
        %30072 1/fp32 ADD %30068, %30071
        %30303 1/fp32 SHUF %206.w
        %30075 1/fp32 MUL %30303, %30287
        %30076 1/fp32 ADD %30072, %30075
        %30305 1/fp32 SHUF %210.w
        %30079 1/fp32 MUL %30305, fp32{1.0}
        %30080 1/fp32 ADD %30076, %30079
        %6928 4/fp32 SHUF %30035.x---,  %30050.-x--,  %30065.--x-,  %30080.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30083 1/fp32 MUL %6933, %30035
        %30086 1/fp32 MUL %6935, %30050
        %30087 1/fp32 ADD %30083, %30086
        %30090 1/fp32 MUL %6937, %30065
        %30091 1/fp32 ADD %30087, %30090
        %30094 1/fp32 MUL %6939, %30080
        %30095 1/fp32 ADD %30091, %30094
        %30306 1/fp32 SHUF %6933.y
        %30098 1/fp32 MUL %30306, %30035
        %30307 1/fp32 SHUF %6935.y
        %30101 1/fp32 MUL %30307, %30050
        %30102 1/fp32 ADD %30098, %30101
        %30308 1/fp32 SHUF %6937.y
        %30105 1/fp32 MUL %30308, %30065
        %30106 1/fp32 ADD %30102, %30105
        %30309 1/fp32 SHUF %6939.y
        %30109 1/fp32 MUL %30309, %30080
        %30110 1/fp32 ADD %30106, %30109
        %30310 1/fp32 SHUF %6933.z
        %30113 1/fp32 MUL %30310, %30035
        %30311 1/fp32 SHUF %6935.z
        %30116 1/fp32 MUL %30311, %30050
        %30117 1/fp32 ADD %30113, %30116
        %30312 1/fp32 SHUF %6937.z
        %30120 1/fp32 MUL %30312, %30065
        %30121 1/fp32 ADD %30117, %30120
        %30313 1/fp32 SHUF %6939.z
        %30124 1/fp32 MUL %30313, %30080
        %30125 1/fp32 ADD %30121, %30124
        %30314 1/fp32 SHUF %6933.w
        %30128 1/fp32 MUL %30314, %30035
        %30315 1/fp32 SHUF %6935.w
        %30131 1/fp32 MUL %30315, %30050
        %30132 1/fp32 ADD %30128, %30131
        %30316 1/fp32 SHUF %6937.w
        %30135 1/fp32 MUL %30316, %30065
        %30136 1/fp32 ADD %30132, %30135
        %30317 1/fp32 SHUF %6939.w
        %30139 1/fp32 MUL %30317, %30080
        %30140 1/fp32 ADD %30136, %30139
        %6972 4/fp32 SHUF %30095.x---,  %30110.-x--,  %30125.--x-,  %30140.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %30143 1/fp32 MUL %198, %375
        %30145 1/fp32 SHUF %375.y
        %30146 1/fp32 MUL %202, %30145
        %30147 1/fp32 ADD %30143, %30146
        %30149 1/fp32 SHUF %375.z
        %30150 1/fp32 MUL %206, %30149
        %30151 1/fp32 ADD %30147, %30150
        %30154 1/fp32 MUL %30288, %375
        %30157 1/fp32 MUL %30289, %30145
        %30158 1/fp32 ADD %30154, %30157
        %30161 1/fp32 MUL %30291, %30149
        %30162 1/fp32 ADD %30158, %30161
        %30165 1/fp32 MUL %30294, %375
        %30168 1/fp32 MUL %30295, %30145
        %30169 1/fp32 ADD %30165, %30168
        %30172 1/fp32 MUL %30297, %30149
        %30173 1/fp32 ADD %30169, %30172
        %30176 1/fp32 MUL %30151, %30151
        %30179 1/fp32 MUL %30162, %30162
        %30180 1/fp32 ADD %30176, %30179
        %30183 1/fp32 MUL %30173, %30173
        %30184 1/fp32 ADD %30180, %30183
        %30018 1/fp32 RSQ %30184
        %30229 1/fp32 MUL %30151, %30018
        %30232 1/fp32 MUL %30162, %30018
        %30235 1/fp32 MUL %30173, %30018
        %30238 3/fp32 SHUF %30229.x--,  %30232.-x-,  %30235.--x
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %30187 1/fp32 MUL %198, %424
        %30189 1/fp32 SHUF %424.y
        %30190 1/fp32 MUL %202, %30189
        %30191 1/fp32 ADD %30187, %30190
        %30193 1/fp32 SHUF %424.z
        %30194 1/fp32 MUL %206, %30193
        %30195 1/fp32 ADD %30191, %30194
        %30198 1/fp32 MUL %30288, %424
        %30201 1/fp32 MUL %30289, %30189
        %30202 1/fp32 ADD %30198, %30201
        %30205 1/fp32 MUL %30291, %30193
        %30206 1/fp32 ADD %30202, %30205
        %30209 1/fp32 MUL %30294, %424
        %30212 1/fp32 MUL %30295, %30189
        %30213 1/fp32 ADD %30209, %30212
        %30216 1/fp32 MUL %30297, %30193
        %30217 1/fp32 ADD %30213, %30216
        %30220 1/fp32 MUL %30195, %30195
        %30223 1/fp32 MUL %30206, %30206
        %30224 1/fp32 ADD %30220, %30223
        %30227 1/fp32 MUL %30217, %30217
        %30228 1/fp32 ADD %30224, %30227
        %30014 1/fp32 RSQ %30228
        %30239 1/fp32 MUL %30195, %30014
        %30242 1/fp32 MUL %30206, %30014
        %30245 1/fp32 MUL %30217, %30014
        %30248 3/fp32 SHUF %30239.x--,  %30242.-x-,  %30245.--x
        %30249 1/fp32 MUL fast %30145, %30193
        %30252 1/fp32 MUL fast %30149, %424
        %30255 1/fp32 MUL fast %375, %30189
        %30259 1/fp32 MUL fast %30149, %30189
        %30262 1/fp32 MUL fast %375, %30193
        %30265 1/fp32 MUL fast %30145, %424
        %30269 1/fp32 NEG fast %30259
        %30271 1/fp32 NEG fast %30262
        %30273 1/fp32 NEG fast %30265
        %30276 1/fp32 ADD fast %30249, %30269
        %30279 1/fp32 ADD fast %30252, %30271
        %30282 1/fp32 ADD fast %30255, %30273
        %30285 3/fp32 SHUF %30276.x--,  %30279.-x-,  %30282.--x
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %30238, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %30248, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %30285, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %7133 1/int32 AND %7132, int32{255}
        %7137 1/int32 AND %7131, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7268 1/int32 SHL %7133, int32{12}
        %7269 1/int32 OR %7268, %7137
        %7270 void intr.s_sendmsg %7269, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %7133
        %7274 1/int32 ADD int32{64}, %7273
        %7275 1/int64 CONV %7274
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %7278 1/int32 CMOV.ne (%7277, int32{0}) int32{1}, int32{0}
        %1308 1/int1 CMP.ne %7278, int32{0}
        %1313 void BRC %1308[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %7137
        %7293 1/int32 ADD int32{64}, %7292
        %7294 1/int64 CONV %7293
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %7297 1/int32 CMOV.ne (%7296, int32{0}) int32{1}, int32{0}
        %1410 1/int1 CMP.ne %7297, int32{0}
        %1415 void BRC %1410[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %28047 1/int32 CMOV.ne (int32{0}, %27763) int32{1}, int32{0}
        %28048 1/int1 CMP.ne %28047, int32{0}
        %28049 void BRC %28048
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %28054 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28063 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28070 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %30435 1/int32 CMOV.ne (%28063, int32{0}) int32{1}, int32{0}
        %30436 1/int32 CMOV.ne (%28054, int32{0}) int32{1}, int32{0}
        %30437 1/int32 OR %30435, %30436
        %30439 1/int32 CMOV.ne (%28054, int32{0}) int32{3}, int32{2}
        %30432 1/int32 CMOV.ne (%28070, int32{0}) int32{1}, int32{0}
        %30441 1/int32 CMOV.ne (%30437, int32{0}) %30439, %30432
        %30443 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050
        %30442 1/int32 PHI int32{4}, %30441
        %28102 1/int32 CMOV.ne (int32{0}, %27747) int32{1}, int32{0}
        %28103 1/int1 CMP.ne %28102, int32{0}
        %28104 void BRC %28103
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %28110 1/int32 AND %27747, int32{-2097153}
        %28114 1/int32 CMOV.eq (int32{0}, %30442) int32{1}, int32{0}
        %28115 1/int32 CMOV.ne (%28114, int32{0}) int32{2097152}, int32{0}
        %28116 1/int32 OR %28110, %28115
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %28116, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %28148 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %28149 1/int1 CMP.ne %28148, int32{0}
        %28150 void BRC %28149
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %28152 1/int32 AND %27751, int32{-2097153}
        %28156 1/int32 CMOV.eq (int32{1}, %30442) int32{1}, int32{0}
        %28157 1/int32 CMOV.ne (%28156, int32{0}) int32{2097152}, int32{0}
        %28158 1/int32 OR %28152, %28157
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %28158, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %28190 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %28191 1/int1 CMP.ne %28190, int32{0}
        %28192 void BRC %28191
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %28194 1/int32 AND %27755, int32{-2097153}
        %28198 1/int32 CMOV.eq (int32{2}, %30442) int32{1}, int32{0}
        %28199 1/int32 CMOV.ne (%28198, int32{0}) int32{2097152}, int32{0}
        %28200 1/int32 OR %28194, %28199
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %28200, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %28232 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %28233 1/int1 CMP.ne %28232, int32{0}
        %28234 void BRC %28233
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %28236 1/int32 AND %27759, int32{-2097153}
        %28240 1/int32 CMOV.eq (int32{3}, %30442) int32{1}, int32{0}
        %28241 1/int32 CMOV.ne (%28240, int32{0}) int32{2097152}, int32{0}
        %28242 1/int32 OR %28236, %28241
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %28242, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28276 void BRC %28048
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %28278 1/int32 AND %27763, int32{-2097153}
        %28282 1/int32 CMOV.eq (int32{4}, %30442) int32{1}, int32{0}
        %28283 1/int32 CMOV.ne (%28282, int32{0}) int32{2097152}, int32{0}
        %28284 1/int32 OR %28278, %28283
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %28284, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %28084 1/int32 CMOV.ne (int32{0}, %27767) int32{1}, int32{0}
        %28085 1/int1 CMP.ne %28084, int32{0}
        %28086 void BRC %28085
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %28368 1/int32 CMOV.ne (int32{0}, %27771) int32{1}, int32{0}
        %28369 1/int1 CMP.ne %28368, int32{0}
        %28370 void BRC %28369
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %28403 1/int32 CMOV.ne (int32{0}, %27775) int32{1}, int32{0}
        %28404 1/int1 CMP.ne %28403, int32{0}
        %28405 void BRC %28404
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %28438 1/int32 CMOV.ne (int32{0}, %27779) int32{1}, int32{0}
        %28439 1/int1 CMP.ne %28438, int32{0}
        %28440 void BRC %28439
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %28473 1/int32 CMOV.ne (int32{0}, %27783) int32{1}, int32{0}
        %28474 1/int1 CMP.ne %28473, int32{0}
        %28475 void BRC %28474
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %28508 1/int32 CMOV.ne (int32{0}, %27787) int32{1}, int32{0}
        %28509 1/int1 CMP.ne %28508, int32{0}
        %28510 void BRC %28509
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %28543 1/int32 CMOV.ne (int32{0}, %27791) int32{1}, int32{0}
        %28544 1/int1 CMP.ne %28543, int32{0}
        %28545 void BRC %28544
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %28578 1/int32 CMOV.ne (int32{0}, %27795) int32{1}, int32{0}
        %28579 1/int1 CMP.ne %28578, int32{0}
        %28580 void BRC %28579
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %28613 1/int32 CMOV.ne (int32{0}, %27799) int32{1}, int32{0}
        %28614 1/int1 CMP.ne %28613, int32{0}
        %28615 void BRC %28614
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %28648 1/int32 CMOV.ne (int32{0}, %27803) int32{1}, int32{0}
        %28649 1/int1 CMP.ne %28648, int32{0}
        %28650 void BRC %28649
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %28683 1/int32 CMOV.ne (int32{0}, %27807) int32{1}, int32{0}
        %28684 1/int1 CMP.ne %28683, int32{0}
        %28685 void BRC %28684
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %28718 1/int32 CMOV.ne (int32{0}, %27811) int32{1}, int32{0}
        %28719 1/int1 CMP.ne %28718, int32{0}
        %28720 void BRC %28719
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %28753 1/int32 CMOV.ne (int32{0}, %27815) int32{1}, int32{0}
        %28754 1/int1 CMP.ne %28753, int32{0}
        %28755 void BRC %28754
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %28788 1/int32 CMOV.ne (int32{0}, %27819) int32{1}, int32{0}
        %28789 1/int1 CMP.ne %28788, int32{0}
        %28790 void BRC %28789
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %28823 1/int32 CMOV.ne (int32{0}, %27823) int32{1}, int32{0}
        %28824 1/int1 CMP.ne %28823, int32{0}
        %28825 void BRC %28824
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %28858 1/int32 CMOV.ne (int32{0}, %27827) int32{1}, int32{0}
        %28859 1/int1 CMP.ne %28858, int32{0}
        %28860 void BRC %28859
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %28893 1/int32 CMOV.ne (int32{0}, %27831) int32{1}, int32{0}
        %28894 1/int1 CMP.ne %28893, int32{0}
        %28895 void BRC %28894
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %28928 1/int32 CMOV.ne (int32{0}, %27835) int32{1}, int32{0}
        %28929 1/int1 CMP.ne %28928, int32{0}
        %28930 void BRC %28929
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %28963 1/int32 CMOV.ne (int32{0}, %27839) int32{1}, int32{0}
        %28964 1/int1 CMP.ne %28963, int32{0}
        %28965 void BRC %28964
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %28998 1/int32 CMOV.ne (int32{0}, %27843) int32{1}, int32{0}
        %28999 1/int1 CMP.ne %28998, int32{0}
        %29000 void BRC %28999
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %29033 1/int32 CMOV.ne (int32{0}, %27847) int32{1}, int32{0}
        %29034 1/int1 CMP.ne %29033, int32{0}
        %29035 void BRC %29034
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %29068 1/int32 CMOV.ne (int32{0}, %27851) int32{1}, int32{0}
        %29069 1/int1 CMP.ne %29068, int32{0}
        %29070 void BRC %29069
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %29103 1/int32 CMOV.ne (int32{0}, %27855) int32{1}, int32{0}
        %29104 1/int1 CMP.ne %29103, int32{0}
        %29105 void BRC %29104
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %29138 1/int32 CMOV.ne (int32{0}, %27859) int32{1}, int32{0}
        %29139 1/int1 CMP.ne %29138, int32{0}
        %29140 void BRC %29139
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %29173 1/int32 CMOV.ne (int32{0}, %27863) int32{1}, int32{0}
        %29174 1/int1 CMP.ne %29173, int32{0}
        %29175 void BRC %29174
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %29208 1/int32 CMOV.ne (int32{0}, %27867) int32{1}, int32{0}
        %29209 1/int1 CMP.ne %29208, int32{0}
        %29210 void BRC %29209
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %29243 1/int32 CMOV.ne (int32{0}, %27871) int32{1}, int32{0}
        %29244 1/int1 CMP.ne %29243, int32{0}
        %29245 void BRC %29244
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %29278 1/int32 CMOV.ne (int32{0}, %27875) int32{1}, int32{0}
        %29279 1/int1 CMP.ne %29278, int32{0}
        %29280 void BRC %29279
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %29313 1/int32 CMOV.ne (int32{0}, %27879) int32{1}, int32{0}
        %29314 1/int1 CMP.ne %29313, int32{0}
        %29315 void BRC %29314
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %29348 1/int32 CMOV.ne (int32{0}, %27883) int32{1}, int32{0}
        %29349 1/int1 CMP.ne %29348, int32{0}
        %29350 void BRC %29349
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %29383 1/int32 CMOV.ne (int32{0}, %27887) int32{1}, int32{0}
        %29384 1/int1 CMP.ne %29383, int32{0}
        %29385 void BRC %29384
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %29418 1/int32 CMOV.ne (int32{0}, %27891) int32{1}, int32{0}
        %29419 1/int1 CMP.ne %29418, int32{0}
        %29420 void BRC %29419
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 262/799: validate graph
    validate graph (0045C2BE)
>> pass 263/799: break critical edges
    break critical edges (D716EAB4)
>> pass 264/799: validate graph
    validate graph (0045C2BE)
>> pass 265/799: loop analysis
    loop analysis (598E85BD)
>> pass 266/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 267/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 268/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 269/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 270/799: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 271/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 272/799: validate graph
    validate graph (0045C2BE)
>> pass 273/799: legalize samplers
    legalize samplers (FE965585)
>> pass 274/799: validate graph
    validate graph (0045C2BE)
>> pass 275/799: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 276/799: validate graph
    validate graph (0045C2BE)
>> pass 277/799: loop analysis
    loop analysis (598E85BD)
>> pass 278/799: remove redundancy
    remove redundancy (1AC4449D)
>> pass 279/799: validate graph
    validate graph (0045C2BE)
>> pass 280/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 281/799: remove dead code
    remove dead code (B7E6F507)
>> pass 282/799: validate graph
    validate graph (0045C2BE)
>> pass 283/799: demote precision (fp32 -> fp16)
    demote precision (fp32 -> fp16) (061C0FF8)
>> pass 284/799: validate graph
    validate graph (0045C2BE)
>> pass 285/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 286/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 287/799: validate graph
    validate graph (0045C2BE)
>> pass 288/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 289/799: remove dead code
    remove dead code (B7E6F507)
>> pass 290/799: validate graph
    validate graph (0045C2BE)
>> pass 291/799: loop analysis
    loop analysis (598E85BD)
>> pass 292/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 293/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 294/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 295/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 296/799: simplify math expression trees
    simplify math expression trees (BB3441B4)
>> pass 297/799: validate graph
    validate graph (0045C2BE)
>> pass 298/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 299/799: validate graph
    validate graph (0045C2BE)
>> pass 300/799: break critical edges
    break critical edges (D716EAB4)
>> pass 301/799: validate graph
    validate graph (0045C2BE)
>> pass 302/799: loop analysis
    loop analysis (598E85BD)
>> pass 303/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 304/799: delete dead loops
    delete dead loops (72FEF67D)
>> pass 305/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 306/799: validate graph
    validate graph (0045C2BE)
>> pass 307/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 308/799: validate graph
    validate graph (0045C2BE)
>> pass 309/799: loop analysis
    loop analysis (598E85BD)
>> pass 310/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 311/799: validate graph
    validate graph (0045C2BE)
>> pass 312/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 313/799: validate graph
    validate graph (0045C2BE)
>> pass 314/799: loop analysis
    loop analysis (598E85BD)
>> pass 315/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 316/799: validate graph
    validate graph (0045C2BE)
>> pass 317/799: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 318/799: validate graph
    validate graph (0045C2BE)
>> pass 319/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 320/799: remove dead code
    remove dead code (B7E6F507)
>> pass 321/799: validate graph
    validate graph (0045C2BE)
>> pass 322/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16]
        %174 1/int32 LD %153
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30340
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %30606 1/fp32 MUL %198, %214
        %30286 1/fp32 SHUF %214.y
        %30607 1/fp32 MUL %202, %30286
        %30287 1/fp32 SHUF %214.z
        %30608 1/fp32 MUL %206, %30287
        %30609 1/fp32 ADD %210, %30606
        %30610 1/fp32 ADD %30609, %30607
        %30611 1/fp32 ADD %30610, %30608
        %30288 1/fp32 SHUF %198.y
        %30612 1/fp32 MUL %214, %30288
        %30289 1/fp32 SHUF %202.y
        %30613 1/fp32 MUL %30286, %30289
        %30291 1/fp32 SHUF %206.y
        %30614 1/fp32 MUL %30287, %30291
        %30293 1/fp32 SHUF %210.y
        %30615 1/fp32 ADD %30293, %30612
        %30616 1/fp32 ADD %30615, %30613
        %30617 1/fp32 ADD %30616, %30614
        %30294 1/fp32 SHUF %198.z
        %30618 1/fp32 MUL %214, %30294
        %30295 1/fp32 SHUF %202.z
        %30619 1/fp32 MUL %30286, %30295
        %30297 1/fp32 SHUF %206.z
        %30620 1/fp32 MUL %30287, %30297
        %30299 1/fp32 SHUF %210.z
        %30621 1/fp32 ADD %30299, %30618
        %30622 1/fp32 ADD %30621, %30619
        %30623 1/fp32 ADD %30622, %30620
        %30300 1/fp32 SHUF %198.w
        %30624 1/fp32 MUL %214, %30300
        %30301 1/fp32 SHUF %202.w
        %30625 1/fp32 MUL %30286, %30301
        %30303 1/fp32 SHUF %206.w
        %30626 1/fp32 MUL %30287, %30303
        %30305 1/fp32 SHUF %210.w
        %30627 1/fp32 ADD %30305, %30624
        %30628 1/fp32 ADD %30627, %30625
        %30629 1/fp32 ADD %30628, %30626
        %6928 4/fp32 SHUF %30611.x---,  %30617.-x--,  %30623.--x-,  %30629.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30630 1/fp32 MUL %6933, %30611
        %30631 1/fp32 MUL %6935, %30617
        %30632 1/fp32 MUL %6937, %30623
        %30633 1/fp32 MUL %6939, %30629
        %30634 1/fp32 ADD %30630, %30631
        %30635 1/fp32 ADD %30634, %30632
        %30636 1/fp32 ADD %30635, %30633
        %30306 1/fp32 SHUF %6933.y
        %30637 1/fp32 MUL %30306, %30611
        %30307 1/fp32 SHUF %6935.y
        %30638 1/fp32 MUL %30307, %30617
        %30308 1/fp32 SHUF %6937.y
        %30639 1/fp32 MUL %30308, %30623
        %30309 1/fp32 SHUF %6939.y
        %30640 1/fp32 MUL %30309, %30629
        %30641 1/fp32 ADD %30637, %30638
        %30642 1/fp32 ADD %30641, %30639
        %30643 1/fp32 ADD %30642, %30640
        %30310 1/fp32 SHUF %6933.z
        %30644 1/fp32 MUL %30310, %30611
        %30311 1/fp32 SHUF %6935.z
        %30645 1/fp32 MUL %30311, %30617
        %30312 1/fp32 SHUF %6937.z
        %30646 1/fp32 MUL %30312, %30623
        %30313 1/fp32 SHUF %6939.z
        %30647 1/fp32 MUL %30313, %30629
        %30648 1/fp32 ADD %30644, %30645
        %30649 1/fp32 ADD %30648, %30646
        %30650 1/fp32 ADD %30649, %30647
        %30314 1/fp32 SHUF %6933.w
        %30651 1/fp32 MUL %30314, %30611
        %30315 1/fp32 SHUF %6935.w
        %30652 1/fp32 MUL %30315, %30617
        %30316 1/fp32 SHUF %6937.w
        %30653 1/fp32 MUL %30316, %30623
        %30317 1/fp32 SHUF %6939.w
        %30654 1/fp32 MUL %30317, %30629
        %30655 1/fp32 ADD %30651, %30652
        %30656 1/fp32 ADD %30655, %30653
        %30657 1/fp32 ADD %30656, %30654
        %6972 4/fp32 SHUF %30636.x---,  %30643.-x--,  %30650.--x-,  %30657.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %30658 1/fp32 MUL %198, %375
        %30145 1/fp32 SHUF %375.y
        %30659 1/fp32 MUL %202, %30145
        %30149 1/fp32 SHUF %375.z
        %30660 1/fp32 MUL %206, %30149
        %30661 1/fp32 ADD %30658, %30659
        %30662 1/fp32 ADD %30661, %30660
        %30663 1/fp32 MUL %375, %30288
        %30664 1/fp32 MUL %30145, %30289
        %30665 1/fp32 MUL %30149, %30291
        %30666 1/fp32 ADD %30663, %30664
        %30667 1/fp32 ADD %30666, %30665
        %30668 1/fp32 MUL %375, %30294
        %30669 1/fp32 MUL %30145, %30295
        %30670 1/fp32 MUL %30149, %30297
        %30671 1/fp32 ADD %30668, %30669
        %30672 1/fp32 ADD %30671, %30670
        %30673 1/fp32 MUL %30662, %30662
        %30674 1/fp32 MUL %30667, %30667
        %30675 1/fp32 MUL %30672, %30672
        %30676 1/fp32 ADD %30673, %30674
        %30677 1/fp32 ADD %30676, %30675
        %30018 1/fp32 RSQ %30677
        %30678 1/fp32 MUL %30018, %30662
        %30679 1/fp32 MUL %30018, %30667
        %30680 1/fp32 MUL %30018, %30672
        %30238 3/fp32 SHUF %30678.x--,  %30679.-x-,  %30680.--x
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %30681 1/fp32 MUL %198, %424
        %30189 1/fp32 SHUF %424.y
        %30682 1/fp32 MUL %202, %30189
        %30193 1/fp32 SHUF %424.z
        %30683 1/fp32 MUL %206, %30193
        %30684 1/fp32 ADD %30681, %30682
        %30685 1/fp32 ADD %30684, %30683
        %30686 1/fp32 MUL %424, %30288
        %30687 1/fp32 MUL %30189, %30289
        %30688 1/fp32 MUL %30193, %30291
        %30689 1/fp32 ADD %30686, %30687
        %30690 1/fp32 ADD %30689, %30688
        %30691 1/fp32 MUL %424, %30294
        %30692 1/fp32 MUL %30189, %30295
        %30693 1/fp32 MUL %30193, %30297
        %30694 1/fp32 ADD %30691, %30692
        %30695 1/fp32 ADD %30694, %30693
        %30696 1/fp32 MUL %30685, %30685
        %30697 1/fp32 MUL %30690, %30690
        %30698 1/fp32 MUL %30695, %30695
        %30699 1/fp32 ADD %30696, %30697
        %30700 1/fp32 ADD %30699, %30698
        %30014 1/fp32 RSQ %30700
        %30701 1/fp32 MUL %30014, %30685
        %30702 1/fp32 MUL %30014, %30690
        %30703 1/fp32 MUL %30014, %30695
        %30248 3/fp32 SHUF %30701.x--,  %30702.-x-,  %30703.--x
        %30704 1/fp32 MUL %30145, %30193
        %30705 1/fp32 MUL %424, %30149
        %30706 1/fp32 MUL %375, %30189
        %30537 1/fp32 NEG %30149
        %30707 1/fp32 MUL %30189, %30537
        %30538 1/fp32 NEG %375
        %30708 1/fp32 MUL %30193, %30538
        %30539 1/fp32 NEG %30145
        %30709 1/fp32 MUL %424, %30539
        %30710 1/fp32 ADD %30704, %30707
        %30711 1/fp32 ADD %30705, %30708
        %30712 1/fp32 ADD %30706, %30709
        %30285 3/fp32 SHUF %30710.x--,  %30711.-x-,  %30712.--x
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %30238, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %30248, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %30285, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %30716 1/int32 AND %7132, int32{255}
        %30717 1/int32 AND %7131, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %30718 1/int32 MUL %30716, int32{4096}
        %30719 1/int32 OR %30717, %30718
        %7270 void intr.s_sendmsg %30719, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %30716
        %30720 1/int32 ADD %7273, int32{64}
        %7275 1/int64 CONV %30720
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %30540 1/int1 CMP.ne %7277, int32{0}
        %1313 void BRC %30540[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %30717
        %30721 1/int32 ADD %7292, int32{64}
        %7294 1/int64 CONV %30721
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %30542 1/int1 CMP.ne %7296, int32{0}
        %1415 void BRC %30542[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %30541 1/int1 CMP.ne int32{0}, %27763
        %28049 void BRC %30541
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %30545 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %30548 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %30722 1/int32 OR %30545, %30548
        %30551 1/int32 CMOV.ne (int32{0}, %27759) int32{3}, int32{2}
        %30554 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %30441 1/int32 CMOV.ne (%30722, int32{0}) %30551, %30554
        %30443 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050
        %30442 1/int32 PHI int32{4}, %30441
        %30555 1/int1 CMP.ne int32{0}, %27747
        %28104 void BRC %30555
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %30723 1/int32 AND int32{-2097153}, %27747
        %30559 1/int32 CMOV.eq (int32{0}, %30442) int32{2097152}, int32{0}
        %30724 1/int32 OR %30559, %30723
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %30724, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %30560 1/int1 CMP.ne int32{0}, %27751
        %28150 void BRC %30560
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %30725 1/int32 AND int32{-2097153}, %27751
        %30563 1/int32 CMOV.eq (int32{1}, %30442) int32{2097152}, int32{0}
        %30726 1/int32 OR %30563, %30725
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %30726, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %30564 1/int1 CMP.ne int32{0}, %27755
        %28192 void BRC %30564
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %30727 1/int32 AND int32{-2097153}, %27755
        %30567 1/int32 CMOV.eq (int32{2}, %30442) int32{2097152}, int32{0}
        %30728 1/int32 OR %30567, %30727
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %30728, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %30568 1/int1 CMP.ne int32{0}, %27759
        %28234 void BRC %30568
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %30729 1/int32 AND int32{-2097153}, %27759
        %30571 1/int32 CMOV.eq (int32{3}, %30442) int32{2097152}, int32{0}
        %30730 1/int32 OR %30571, %30729
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %30730, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28276 void BRC %30541
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %30731 1/int32 AND int32{-2097153}, %27763
        %30574 1/int32 CMOV.eq (int32{4}, %30442) int32{2097152}, int32{0}
        %30732 1/int32 OR %30574, %30731
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %30732, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %30556 1/int1 CMP.ne int32{0}, %27767
        %28086 void BRC %30556
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %30575 1/int1 CMP.ne int32{0}, %27771
        %28370 void BRC %30575
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %30576 1/int1 CMP.ne int32{0}, %27775
        %28405 void BRC %30576
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %30577 1/int1 CMP.ne int32{0}, %27779
        %28440 void BRC %30577
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %30578 1/int1 CMP.ne int32{0}, %27783
        %28475 void BRC %30578
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %30579 1/int1 CMP.ne int32{0}, %27787
        %28510 void BRC %30579
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %30580 1/int1 CMP.ne int32{0}, %27791
        %28545 void BRC %30580
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %30581 1/int1 CMP.ne int32{0}, %27795
        %28580 void BRC %30581
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %30582 1/int1 CMP.ne int32{0}, %27799
        %28615 void BRC %30582
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %30583 1/int1 CMP.ne int32{0}, %27803
        %28650 void BRC %30583
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %30584 1/int1 CMP.ne int32{0}, %27807
        %28685 void BRC %30584
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %30585 1/int1 CMP.ne int32{0}, %27811
        %28720 void BRC %30585
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %30586 1/int1 CMP.ne int32{0}, %27815
        %28755 void BRC %30586
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %30587 1/int1 CMP.ne int32{0}, %27819
        %28790 void BRC %30587
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %30588 1/int1 CMP.ne int32{0}, %27823
        %28825 void BRC %30588
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %30589 1/int1 CMP.ne int32{0}, %27827
        %28860 void BRC %30589
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %30590 1/int1 CMP.ne int32{0}, %27831
        %28895 void BRC %30590
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %30591 1/int1 CMP.ne int32{0}, %27835
        %28930 void BRC %30591
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %30592 1/int1 CMP.ne int32{0}, %27839
        %28965 void BRC %30592
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %30593 1/int1 CMP.ne int32{0}, %27843
        %29000 void BRC %30593
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %30594 1/int1 CMP.ne int32{0}, %27847
        %29035 void BRC %30594
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %30595 1/int1 CMP.ne int32{0}, %27851
        %29070 void BRC %30595
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %30596 1/int1 CMP.ne int32{0}, %27855
        %29105 void BRC %30596
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %30597 1/int1 CMP.ne int32{0}, %27859
        %29140 void BRC %30597
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %30598 1/int1 CMP.ne int32{0}, %27863
        %29175 void BRC %30598
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %30599 1/int1 CMP.ne int32{0}, %27867
        %29210 void BRC %30599
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %30600 1/int1 CMP.ne int32{0}, %27871
        %29245 void BRC %30600
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %30601 1/int1 CMP.ne int32{0}, %27875
        %29280 void BRC %30601
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %30602 1/int1 CMP.ne int32{0}, %27879
        %29315 void BRC %30602
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %30603 1/int1 CMP.ne int32{0}, %27883
        %29350 void BRC %30603
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %30604 1/int1 CMP.ne int32{0}, %27887
        %29385 void BRC %30604
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %30605 1/int1 CMP.ne int32{0}, %27891
        %29420 void BRC %30605
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 323/799: validate graph
    validate graph (0045C2BE)
>> pass 324/799: merge getelemptr
    merge getelemptr (D655006F)
>> pass 325/799: validate graph
    validate graph (0045C2BE)
>> pass 326/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 327/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 328/799: validate graph
    validate graph (0045C2BE)
>> pass 329/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 330/799: validate graph
    validate graph (0045C2BE)
>> pass 331/799: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 332/799: validate graph
    validate graph (0045C2BE)
>> pass 333/799: create literal buffer
    create literal buffer (2CA126FC)
>> pass 334/799: validate graph
    validate graph (0045C2BE)
>> pass 335/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 336/799: remove dead code
    remove dead code (B7E6F507)
>> pass 337/799: validate graph
    validate graph (0045C2BE)
>> pass 338/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16]
        %174 1/int32 LD %153
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30340
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %30606 1/fp32 MUL %198, %214
        %30286 1/fp32 SHUF %214.y
        %30607 1/fp32 MUL %202, %30286
        %30287 1/fp32 SHUF %214.z
        %30608 1/fp32 MUL %206, %30287
        %30609 1/fp32 ADD %210, %30606
        %30610 1/fp32 ADD %30609, %30607
        %30611 1/fp32 ADD %30610, %30608
        %30288 1/fp32 SHUF %198.y
        %30612 1/fp32 MUL %214, %30288
        %30289 1/fp32 SHUF %202.y
        %30613 1/fp32 MUL %30286, %30289
        %30291 1/fp32 SHUF %206.y
        %30614 1/fp32 MUL %30287, %30291
        %30293 1/fp32 SHUF %210.y
        %30615 1/fp32 ADD %30293, %30612
        %30616 1/fp32 ADD %30615, %30613
        %30617 1/fp32 ADD %30616, %30614
        %30294 1/fp32 SHUF %198.z
        %30618 1/fp32 MUL %214, %30294
        %30295 1/fp32 SHUF %202.z
        %30619 1/fp32 MUL %30286, %30295
        %30297 1/fp32 SHUF %206.z
        %30620 1/fp32 MUL %30287, %30297
        %30299 1/fp32 SHUF %210.z
        %30621 1/fp32 ADD %30299, %30618
        %30622 1/fp32 ADD %30621, %30619
        %30623 1/fp32 ADD %30622, %30620
        %30300 1/fp32 SHUF %198.w
        %30624 1/fp32 MUL %214, %30300
        %30301 1/fp32 SHUF %202.w
        %30625 1/fp32 MUL %30286, %30301
        %30303 1/fp32 SHUF %206.w
        %30626 1/fp32 MUL %30287, %30303
        %30305 1/fp32 SHUF %210.w
        %30627 1/fp32 ADD %30305, %30624
        %30628 1/fp32 ADD %30627, %30625
        %30629 1/fp32 ADD %30628, %30626
        %6928 4/fp32 SHUF %30611.x---,  %30617.-x--,  %30623.--x-,  %30629.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30630 1/fp32 MUL %6933, %30611
        %30631 1/fp32 MUL %6935, %30617
        %30632 1/fp32 MUL %6937, %30623
        %30633 1/fp32 MUL %6939, %30629
        %30634 1/fp32 ADD %30630, %30631
        %30635 1/fp32 ADD %30634, %30632
        %30636 1/fp32 ADD %30635, %30633
        %30306 1/fp32 SHUF %6933.y
        %30637 1/fp32 MUL %30306, %30611
        %30307 1/fp32 SHUF %6935.y
        %30638 1/fp32 MUL %30307, %30617
        %30308 1/fp32 SHUF %6937.y
        %30639 1/fp32 MUL %30308, %30623
        %30309 1/fp32 SHUF %6939.y
        %30640 1/fp32 MUL %30309, %30629
        %30641 1/fp32 ADD %30637, %30638
        %30642 1/fp32 ADD %30641, %30639
        %30643 1/fp32 ADD %30642, %30640
        %30310 1/fp32 SHUF %6933.z
        %30644 1/fp32 MUL %30310, %30611
        %30311 1/fp32 SHUF %6935.z
        %30645 1/fp32 MUL %30311, %30617
        %30312 1/fp32 SHUF %6937.z
        %30646 1/fp32 MUL %30312, %30623
        %30313 1/fp32 SHUF %6939.z
        %30647 1/fp32 MUL %30313, %30629
        %30648 1/fp32 ADD %30644, %30645
        %30649 1/fp32 ADD %30648, %30646
        %30650 1/fp32 ADD %30649, %30647
        %30314 1/fp32 SHUF %6933.w
        %30651 1/fp32 MUL %30314, %30611
        %30315 1/fp32 SHUF %6935.w
        %30652 1/fp32 MUL %30315, %30617
        %30316 1/fp32 SHUF %6937.w
        %30653 1/fp32 MUL %30316, %30623
        %30317 1/fp32 SHUF %6939.w
        %30654 1/fp32 MUL %30317, %30629
        %30655 1/fp32 ADD %30651, %30652
        %30656 1/fp32 ADD %30655, %30653
        %30657 1/fp32 ADD %30656, %30654
        %6972 4/fp32 SHUF %30636.x---,  %30643.-x--,  %30650.--x-,  %30657.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %30658 1/fp32 MUL %198, %375
        %30145 1/fp32 SHUF %375.y
        %30659 1/fp32 MUL %202, %30145
        %30149 1/fp32 SHUF %375.z
        %30660 1/fp32 MUL %206, %30149
        %30661 1/fp32 ADD %30658, %30659
        %30662 1/fp32 ADD %30661, %30660
        %30663 1/fp32 MUL %375, %30288
        %30664 1/fp32 MUL %30145, %30289
        %30665 1/fp32 MUL %30149, %30291
        %30666 1/fp32 ADD %30663, %30664
        %30667 1/fp32 ADD %30666, %30665
        %30668 1/fp32 MUL %375, %30294
        %30669 1/fp32 MUL %30145, %30295
        %30670 1/fp32 MUL %30149, %30297
        %30671 1/fp32 ADD %30668, %30669
        %30672 1/fp32 ADD %30671, %30670
        %30673 1/fp32 MUL %30662, %30662
        %30674 1/fp32 MUL %30667, %30667
        %30675 1/fp32 MUL %30672, %30672
        %30676 1/fp32 ADD %30673, %30674
        %30677 1/fp32 ADD %30676, %30675
        %30018 1/fp32 RSQ %30677
        %30678 1/fp32 MUL %30018, %30662
        %30679 1/fp32 MUL %30018, %30667
        %30680 1/fp32 MUL %30018, %30672
        %30238 3/fp32 SHUF %30678.x--,  %30679.-x-,  %30680.--x
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %30681 1/fp32 MUL %198, %424
        %30189 1/fp32 SHUF %424.y
        %30682 1/fp32 MUL %202, %30189
        %30193 1/fp32 SHUF %424.z
        %30683 1/fp32 MUL %206, %30193
        %30684 1/fp32 ADD %30681, %30682
        %30685 1/fp32 ADD %30684, %30683
        %30686 1/fp32 MUL %424, %30288
        %30687 1/fp32 MUL %30189, %30289
        %30688 1/fp32 MUL %30193, %30291
        %30689 1/fp32 ADD %30686, %30687
        %30690 1/fp32 ADD %30689, %30688
        %30691 1/fp32 MUL %424, %30294
        %30692 1/fp32 MUL %30189, %30295
        %30693 1/fp32 MUL %30193, %30297
        %30694 1/fp32 ADD %30691, %30692
        %30695 1/fp32 ADD %30694, %30693
        %30696 1/fp32 MUL %30685, %30685
        %30697 1/fp32 MUL %30690, %30690
        %30698 1/fp32 MUL %30695, %30695
        %30699 1/fp32 ADD %30696, %30697
        %30700 1/fp32 ADD %30699, %30698
        %30014 1/fp32 RSQ %30700
        %30701 1/fp32 MUL %30014, %30685
        %30702 1/fp32 MUL %30014, %30690
        %30703 1/fp32 MUL %30014, %30695
        %30248 3/fp32 SHUF %30701.x--,  %30702.-x-,  %30703.--x
        %30704 1/fp32 MUL %30145, %30193
        %30705 1/fp32 MUL %424, %30149
        %30706 1/fp32 MUL %375, %30189
        %30537 1/fp32 NEG %30149
        %30707 1/fp32 MUL %30189, %30537
        %30538 1/fp32 NEG %375
        %30708 1/fp32 MUL %30193, %30538
        %30539 1/fp32 NEG %30145
        %30709 1/fp32 MUL %424, %30539
        %30710 1/fp32 ADD %30704, %30707
        %30711 1/fp32 ADD %30705, %30708
        %30712 1/fp32 ADD %30706, %30709
        %30285 3/fp32 SHUF %30710.x--,  %30711.-x-,  %30712.--x
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %30238, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %30248, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %30285, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %30716 1/int32 AND %7132, int32{255}
        %30717 1/int32 AND %7131, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %30813 1/int32 SHL %30716, int32{12}
        %30719 1/int32 OR %30717, %30813
        %7270 void intr.s_sendmsg %30719, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %30716
        %30720 1/int32 ADD %7273, int32{64}
        %7275 1/int64 CONV %30720
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %30540 1/int1 CMP.ne %7277, int32{0}
        %1313 void BRC %30540[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %30717
        %30721 1/int32 ADD %7292, int32{64}
        %7294 1/int64 CONV %30721
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %30542 1/int1 CMP.ne %7296, int32{0}
        %1415 void BRC %30542[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %30541 1/int1 CMP.ne int32{0}, %27763
        %28049 void BRC %30541
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %30545 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %30548 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %30722 1/int32 OR %30545, %30548
        %30551 1/int32 CMOV.ne (int32{0}, %27759) int32{3}, int32{2}
        %30554 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %30441 1/int32 CMOV.ne (%30722, int32{0}) %30551, %30554
        %30443 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050
        %30442 1/int32 PHI int32{4}, %30441
        %30555 1/int1 CMP.ne int32{0}, %27747
        %28104 void BRC %30555
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %30723 1/int32 AND int32{-2097153}, %27747
        %30559 1/int32 CMOV.eq (int32{0}, %30442) int32{2097152}, int32{0}
        %30724 1/int32 OR %30559, %30723
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %30724, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %30560 1/int1 CMP.ne int32{0}, %27751
        %28150 void BRC %30560
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %30725 1/int32 AND int32{-2097153}, %27751
        %30563 1/int32 CMOV.eq (int32{1}, %30442) int32{2097152}, int32{0}
        %30726 1/int32 OR %30563, %30725
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %30726, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %30564 1/int1 CMP.ne int32{0}, %27755
        %28192 void BRC %30564
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %30727 1/int32 AND int32{-2097153}, %27755
        %30567 1/int32 CMOV.eq (int32{2}, %30442) int32{2097152}, int32{0}
        %30728 1/int32 OR %30567, %30727
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %30728, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %30568 1/int1 CMP.ne int32{0}, %27759
        %28234 void BRC %30568
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %30729 1/int32 AND int32{-2097153}, %27759
        %30571 1/int32 CMOV.eq (int32{3}, %30442) int32{2097152}, int32{0}
        %30730 1/int32 OR %30571, %30729
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %30730, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28276 void BRC %30541
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %30731 1/int32 AND int32{-2097153}, %27763
        %30574 1/int32 CMOV.eq (int32{4}, %30442) int32{2097152}, int32{0}
        %30732 1/int32 OR %30574, %30731
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %30732, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %30556 1/int1 CMP.ne int32{0}, %27767
        %28086 void BRC %30556
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %30575 1/int1 CMP.ne int32{0}, %27771
        %28370 void BRC %30575
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %30576 1/int1 CMP.ne int32{0}, %27775
        %28405 void BRC %30576
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %30577 1/int1 CMP.ne int32{0}, %27779
        %28440 void BRC %30577
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %30578 1/int1 CMP.ne int32{0}, %27783
        %28475 void BRC %30578
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %30579 1/int1 CMP.ne int32{0}, %27787
        %28510 void BRC %30579
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %30580 1/int1 CMP.ne int32{0}, %27791
        %28545 void BRC %30580
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %30581 1/int1 CMP.ne int32{0}, %27795
        %28580 void BRC %30581
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %30582 1/int1 CMP.ne int32{0}, %27799
        %28615 void BRC %30582
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %30583 1/int1 CMP.ne int32{0}, %27803
        %28650 void BRC %30583
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %30584 1/int1 CMP.ne int32{0}, %27807
        %28685 void BRC %30584
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %30585 1/int1 CMP.ne int32{0}, %27811
        %28720 void BRC %30585
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %30586 1/int1 CMP.ne int32{0}, %27815
        %28755 void BRC %30586
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %30587 1/int1 CMP.ne int32{0}, %27819
        %28790 void BRC %30587
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %30588 1/int1 CMP.ne int32{0}, %27823
        %28825 void BRC %30588
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %30589 1/int1 CMP.ne int32{0}, %27827
        %28860 void BRC %30589
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %30590 1/int1 CMP.ne int32{0}, %27831
        %28895 void BRC %30590
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %30591 1/int1 CMP.ne int32{0}, %27835
        %28930 void BRC %30591
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %30592 1/int1 CMP.ne int32{0}, %27839
        %28965 void BRC %30592
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %30593 1/int1 CMP.ne int32{0}, %27843
        %29000 void BRC %30593
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %30594 1/int1 CMP.ne int32{0}, %27847
        %29035 void BRC %30594
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %30595 1/int1 CMP.ne int32{0}, %27851
        %29070 void BRC %30595
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %30596 1/int1 CMP.ne int32{0}, %27855
        %29105 void BRC %30596
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %30597 1/int1 CMP.ne int32{0}, %27859
        %29140 void BRC %30597
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %30598 1/int1 CMP.ne int32{0}, %27863
        %29175 void BRC %30598
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %30599 1/int1 CMP.ne int32{0}, %27867
        %29210 void BRC %30599
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %30600 1/int1 CMP.ne int32{0}, %27871
        %29245 void BRC %30600
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %30601 1/int1 CMP.ne int32{0}, %27875
        %29280 void BRC %30601
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %30602 1/int1 CMP.ne int32{0}, %27879
        %29315 void BRC %30602
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %30603 1/int1 CMP.ne int32{0}, %27883
        %29350 void BRC %30603
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %30604 1/int1 CMP.ne int32{0}, %27887
        %29385 void BRC %30604
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %30605 1/int1 CMP.ne int32{0}, %27891
        %29420 void BRC %30605
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 339/799: validate graph
    validate graph (0045C2BE)
>> pass 340/799: find undefined variable usage
    find undefined variable usage (74159286)
>> pass 341/799: validate graph
    validate graph (0045C2BE)
>> pass 342/799: r10scalarizer
    r10scalarizer (81A236D1)
>> pass 343/799: validate graph
    validate graph (0045C2BE)
>> pass 344/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 345/799: validate graph
    validate graph (0045C2BE)
>> pass 346/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 347/799: remove dead code
    remove dead code (B7E6F507)
>> pass 348/799: validate graph
    validate graph (0045C2BE)
>> pass 349/799: break critical edges
    break critical edges (D716EAB4)
>> pass 350/799: validate graph
    validate graph (0045C2BE)
>> pass 351/799: loop analysis
    loop analysis (598E85BD)
>> pass 352/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 353/799: scalar evolution analysis
    scalar evolution analysis (B93409FF)
>> pass 354/799: range analysis
    range analysis (11B7AAEB)
>> pass 355/799: range propagation
    range propagation (45F717C0)
>> pass 356/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 357/799: validate graph
    validate graph (0045C2BE)
>> pass 358/799: simplify for demanded bits
    simplify for demanded bits (C26737CA)
>> pass 359/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 360/799: validate graph
    validate graph (0045C2BE)
>> pass 361/799: constant propagation
    constant propagation (5CBB3303)
>> pass 362/799: validate graph
    validate graph (0045C2BE)
>> pass 363/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 364/799: validate graph
    validate graph (0045C2BE)
>> pass 365/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 366/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 367/799: validate graph
    validate graph (0045C2BE)
>> pass 368/799: loop analysis
    loop analysis (598E85BD)
>> pass 369/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 370/799: validate graph
    validate graph (0045C2BE)
>> pass 371/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 372/799: remove dead code
    remove dead code (B7E6F507)
>> pass 373/799: validate graph
    validate graph (0045C2BE)
>> pass 374/799: remove redundancy
    remove redundancy (1AC4449D)
>> pass 375/799: validate graph
    validate graph (0045C2BE)
>> pass 376/799: remove dead code
    remove dead code (B7E6F507)
>> pass 377/799: validate graph
    validate graph (0045C2BE)
>> pass 378/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16]
        %174 1/int32 LD %153
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30340
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %30606 1/fp32 MUL %198, %214
        %30286 1/fp32 SHUF %214.y
        %30607 1/fp32 MUL %202, %30286
        %30287 1/fp32 SHUF %214.z
        %30608 1/fp32 MUL %206, %30287
        %30609 1/fp32 ADD %210, %30606
        %30610 1/fp32 ADD %30609, %30607
        %30611 1/fp32 ADD %30610, %30608
        %30288 1/fp32 SHUF %198.y
        %30612 1/fp32 MUL %214, %30288
        %30289 1/fp32 SHUF %202.y
        %30613 1/fp32 MUL %30286, %30289
        %30291 1/fp32 SHUF %206.y
        %30614 1/fp32 MUL %30287, %30291
        %30293 1/fp32 SHUF %210.y
        %30615 1/fp32 ADD %30293, %30612
        %30616 1/fp32 ADD %30615, %30613
        %30617 1/fp32 ADD %30616, %30614
        %30294 1/fp32 SHUF %198.z
        %30618 1/fp32 MUL %214, %30294
        %30295 1/fp32 SHUF %202.z
        %30619 1/fp32 MUL %30286, %30295
        %30297 1/fp32 SHUF %206.z
        %30620 1/fp32 MUL %30287, %30297
        %30299 1/fp32 SHUF %210.z
        %30621 1/fp32 ADD %30299, %30618
        %30622 1/fp32 ADD %30621, %30619
        %30623 1/fp32 ADD %30622, %30620
        %30300 1/fp32 SHUF %198.w
        %30624 1/fp32 MUL %214, %30300
        %30301 1/fp32 SHUF %202.w
        %30625 1/fp32 MUL %30286, %30301
        %30303 1/fp32 SHUF %206.w
        %30626 1/fp32 MUL %30287, %30303
        %30305 1/fp32 SHUF %210.w
        %30627 1/fp32 ADD %30305, %30624
        %30628 1/fp32 ADD %30627, %30625
        %30629 1/fp32 ADD %30628, %30626
        %6928 4/fp32 SHUF %30611.x---,  %30617.-x--,  %30623.--x-,  %30629.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30630 1/fp32 MUL %6933, %30611
        %30631 1/fp32 MUL %6935, %30617
        %30632 1/fp32 MUL %6937, %30623
        %30633 1/fp32 MUL %6939, %30629
        %30634 1/fp32 ADD %30630, %30631
        %30635 1/fp32 ADD %30634, %30632
        %30636 1/fp32 ADD %30635, %30633
        %30306 1/fp32 SHUF %6933.y
        %30637 1/fp32 MUL %30306, %30611
        %30307 1/fp32 SHUF %6935.y
        %30638 1/fp32 MUL %30307, %30617
        %30308 1/fp32 SHUF %6937.y
        %30639 1/fp32 MUL %30308, %30623
        %30309 1/fp32 SHUF %6939.y
        %30640 1/fp32 MUL %30309, %30629
        %30641 1/fp32 ADD %30637, %30638
        %30642 1/fp32 ADD %30641, %30639
        %30643 1/fp32 ADD %30642, %30640
        %30310 1/fp32 SHUF %6933.z
        %30644 1/fp32 MUL %30310, %30611
        %30311 1/fp32 SHUF %6935.z
        %30645 1/fp32 MUL %30311, %30617
        %30312 1/fp32 SHUF %6937.z
        %30646 1/fp32 MUL %30312, %30623
        %30313 1/fp32 SHUF %6939.z
        %30647 1/fp32 MUL %30313, %30629
        %30648 1/fp32 ADD %30644, %30645
        %30649 1/fp32 ADD %30648, %30646
        %30650 1/fp32 ADD %30649, %30647
        %30314 1/fp32 SHUF %6933.w
        %30651 1/fp32 MUL %30314, %30611
        %30315 1/fp32 SHUF %6935.w
        %30652 1/fp32 MUL %30315, %30617
        %30316 1/fp32 SHUF %6937.w
        %30653 1/fp32 MUL %30316, %30623
        %30317 1/fp32 SHUF %6939.w
        %30654 1/fp32 MUL %30317, %30629
        %30655 1/fp32 ADD %30651, %30652
        %30656 1/fp32 ADD %30655, %30653
        %30657 1/fp32 ADD %30656, %30654
        %6972 4/fp32 SHUF %30636.x---,  %30643.-x--,  %30650.--x-,  %30657.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %30658 1/fp32 MUL %198, %375
        %30145 1/fp32 SHUF %375.y
        %30659 1/fp32 MUL %202, %30145
        %30149 1/fp32 SHUF %375.z
        %30660 1/fp32 MUL %206, %30149
        %30661 1/fp32 ADD %30658, %30659
        %30662 1/fp32 ADD %30661, %30660
        %30663 1/fp32 MUL %375, %30288
        %30664 1/fp32 MUL %30145, %30289
        %30665 1/fp32 MUL %30149, %30291
        %30666 1/fp32 ADD %30663, %30664
        %30667 1/fp32 ADD %30666, %30665
        %30668 1/fp32 MUL %375, %30294
        %30669 1/fp32 MUL %30145, %30295
        %30670 1/fp32 MUL %30149, %30297
        %30671 1/fp32 ADD %30668, %30669
        %30672 1/fp32 ADD %30671, %30670
        %30673 1/fp32 MUL %30662, %30662
        %30674 1/fp32 MUL %30667, %30667
        %30675 1/fp32 MUL %30672, %30672
        %30676 1/fp32 ADD %30673, %30674
        %30677 1/fp32 ADD %30676, %30675
        %30018 1/fp32 RSQ %30677
        %30678 1/fp32 MUL %30018, %30662
        %30679 1/fp32 MUL %30018, %30667
        %30680 1/fp32 MUL %30018, %30672
        %30238 3/fp32 SHUF %30678.x--,  %30679.-x-,  %30680.--x
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %30681 1/fp32 MUL %198, %424
        %30189 1/fp32 SHUF %424.y
        %30682 1/fp32 MUL %202, %30189
        %30193 1/fp32 SHUF %424.z
        %30683 1/fp32 MUL %206, %30193
        %30684 1/fp32 ADD %30681, %30682
        %30685 1/fp32 ADD %30684, %30683
        %30686 1/fp32 MUL %424, %30288
        %30687 1/fp32 MUL %30189, %30289
        %30688 1/fp32 MUL %30193, %30291
        %30689 1/fp32 ADD %30686, %30687
        %30690 1/fp32 ADD %30689, %30688
        %30691 1/fp32 MUL %424, %30294
        %30692 1/fp32 MUL %30189, %30295
        %30693 1/fp32 MUL %30193, %30297
        %30694 1/fp32 ADD %30691, %30692
        %30695 1/fp32 ADD %30694, %30693
        %30696 1/fp32 MUL %30685, %30685
        %30697 1/fp32 MUL %30690, %30690
        %30698 1/fp32 MUL %30695, %30695
        %30699 1/fp32 ADD %30696, %30697
        %30700 1/fp32 ADD %30699, %30698
        %30014 1/fp32 RSQ %30700
        %30701 1/fp32 MUL %30014, %30685
        %30702 1/fp32 MUL %30014, %30690
        %30703 1/fp32 MUL %30014, %30695
        %30248 3/fp32 SHUF %30701.x--,  %30702.-x-,  %30703.--x
        %30704 1/fp32 MUL %30145, %30193
        %30705 1/fp32 MUL %424, %30149
        %30706 1/fp32 MUL %375, %30189
        %30537 1/fp32 NEG %30149
        %30707 1/fp32 MUL %30189, %30537
        %30538 1/fp32 NEG %375
        %30708 1/fp32 MUL %30193, %30538
        %30539 1/fp32 NEG %30145
        %30709 1/fp32 MUL %424, %30539
        %30710 1/fp32 ADD %30704, %30707
        %30711 1/fp32 ADD %30705, %30708
        %30712 1/fp32 ADD %30706, %30709
        %30285 3/fp32 SHUF %30710.x--,  %30711.-x-,  %30712.--x
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %30238, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %30248, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %30285, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %30716 1/int32 AND %7132, int32{255}
        %30717 1/int32 AND %7131, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %30813 1/int32 SHL %30716, int32{12}
        %30719 1/int32 OR %30717, %30813
        %7270 void intr.s_sendmsg %30719, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %30716
        %30720 1/int32 ADD nsw %7273, int32{64}
        %7275 1/int64 CONV %30720
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %30540 1/int1 CMP.ne %7277, int32{0}
        %1313 void BRC %30540[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %30717
        %30721 1/int32 ADD nsw %7292, int32{64}
        %7294 1/int64 CONV %30721
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %30542 1/int1 CMP.ne %7296, int32{0}
        %1415 void BRC %30542[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %30541 1/int1 CMP.ne int32{0}, %27763
        %28049 void BRC %30541
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %30545 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %30548 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %30722 1/int32 OR %30545, %30548
        %30551 1/int32 CMOV.ne (int32{0}, %27759) int32{3}, int32{2}
        %30554 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %30441 1/int32 CMOV.ne (%30722, int32{0}) %30551, %30554
        %30443 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050
        %30442 1/int32 PHI int32{4}, %30441
        %30555 1/int1 CMP.ne int32{0}, %27747
        %28104 void BRC %30555
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %30723 1/int32 AND int32{-2097153}, %27747
        %30559 1/int32 CMOV.eq (int32{0}, %30442) int32{2097152}, int32{0}
        %30724 1/int32 OR %30559, %30723
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %30724, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %30560 1/int1 CMP.ne int32{0}, %27751
        %28150 void BRC %30560
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %30725 1/int32 AND int32{-2097153}, %27751
        %30563 1/int32 CMOV.eq (int32{1}, %30442) int32{2097152}, int32{0}
        %30726 1/int32 OR %30563, %30725
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %30726, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %30564 1/int1 CMP.ne int32{0}, %27755
        %28192 void BRC %30564
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %30727 1/int32 AND int32{-2097153}, %27755
        %30567 1/int32 CMOV.eq (int32{2}, %30442) int32{2097152}, int32{0}
        %30728 1/int32 OR %30567, %30727
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %30728, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %30568 1/int1 CMP.ne int32{0}, %27759
        %28234 void BRC %30568
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %30729 1/int32 AND int32{-2097153}, %27759
        %30571 1/int32 CMOV.eq (int32{3}, %30442) int32{2097152}, int32{0}
        %30730 1/int32 OR %30571, %30729
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %30730, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28276 void BRC %30541
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %30731 1/int32 AND int32{-2097153}, %27763
        %30574 1/int32 CMOV.eq (int32{4}, %30442) int32{2097152}, int32{0}
        %30732 1/int32 OR %30574, %30731
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %30732, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %30556 1/int1 CMP.ne int32{0}, %27767
        %28086 void BRC %30556
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %30575 1/int1 CMP.ne int32{0}, %27771
        %28370 void BRC %30575
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %30576 1/int1 CMP.ne int32{0}, %27775
        %28405 void BRC %30576
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %30577 1/int1 CMP.ne int32{0}, %27779
        %28440 void BRC %30577
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %30578 1/int1 CMP.ne int32{0}, %27783
        %28475 void BRC %30578
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %30579 1/int1 CMP.ne int32{0}, %27787
        %28510 void BRC %30579
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %30580 1/int1 CMP.ne int32{0}, %27791
        %28545 void BRC %30580
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %30581 1/int1 CMP.ne int32{0}, %27795
        %28580 void BRC %30581
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %30582 1/int1 CMP.ne int32{0}, %27799
        %28615 void BRC %30582
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %30583 1/int1 CMP.ne int32{0}, %27803
        %28650 void BRC %30583
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %30584 1/int1 CMP.ne int32{0}, %27807
        %28685 void BRC %30584
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %30585 1/int1 CMP.ne int32{0}, %27811
        %28720 void BRC %30585
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %30586 1/int1 CMP.ne int32{0}, %27815
        %28755 void BRC %30586
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %30587 1/int1 CMP.ne int32{0}, %27819
        %28790 void BRC %30587
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %30588 1/int1 CMP.ne int32{0}, %27823
        %28825 void BRC %30588
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %30589 1/int1 CMP.ne int32{0}, %27827
        %28860 void BRC %30589
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %30590 1/int1 CMP.ne int32{0}, %27831
        %28895 void BRC %30590
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %30591 1/int1 CMP.ne int32{0}, %27835
        %28930 void BRC %30591
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %30592 1/int1 CMP.ne int32{0}, %27839
        %28965 void BRC %30592
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %30593 1/int1 CMP.ne int32{0}, %27843
        %29000 void BRC %30593
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %30594 1/int1 CMP.ne int32{0}, %27847
        %29035 void BRC %30594
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %30595 1/int1 CMP.ne int32{0}, %27851
        %29070 void BRC %30595
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %30596 1/int1 CMP.ne int32{0}, %27855
        %29105 void BRC %30596
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %30597 1/int1 CMP.ne int32{0}, %27859
        %29140 void BRC %30597
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %30598 1/int1 CMP.ne int32{0}, %27863
        %29175 void BRC %30598
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %30599 1/int1 CMP.ne int32{0}, %27867
        %29210 void BRC %30599
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %30600 1/int1 CMP.ne int32{0}, %27871
        %29245 void BRC %30600
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %30601 1/int1 CMP.ne int32{0}, %27875
        %29280 void BRC %30601
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %30602 1/int1 CMP.ne int32{0}, %27879
        %29315 void BRC %30602
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %30603 1/int1 CMP.ne int32{0}, %27883
        %29350 void BRC %30603
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %30604 1/int1 CMP.ne int32{0}, %27887
        %29385 void BRC %30604
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %30605 1/int1 CMP.ne int32{0}, %27891
        %29420 void BRC %30605
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 379/799: validate graph
    validate graph (0045C2BE)
>> pass 380/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %9 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %12 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16]
        %174 1/int32 LD %153
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30340
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %213 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{0}
        %214 3/fp32 LD %213
        %30606 1/fp32 MUL %198, %214
        %30286 1/fp32 SHUF %214.y
        %30607 1/fp32 MUL %202, %30286
        %30287 1/fp32 SHUF %214.z
        %30608 1/fp32 MUL %206, %30287
        %30609 1/fp32 ADD %210, %30606
        %30610 1/fp32 ADD %30609, %30607
        %30611 1/fp32 ADD %30610, %30608
        %30288 1/fp32 SHUF %198.y
        %30612 1/fp32 MUL %214, %30288
        %30289 1/fp32 SHUF %202.y
        %30613 1/fp32 MUL %30286, %30289
        %30291 1/fp32 SHUF %206.y
        %30614 1/fp32 MUL %30287, %30291
        %30293 1/fp32 SHUF %210.y
        %30615 1/fp32 ADD %30293, %30612
        %30616 1/fp32 ADD %30615, %30613
        %30617 1/fp32 ADD %30616, %30614
        %30294 1/fp32 SHUF %198.z
        %30618 1/fp32 MUL %214, %30294
        %30295 1/fp32 SHUF %202.z
        %30619 1/fp32 MUL %30286, %30295
        %30297 1/fp32 SHUF %206.z
        %30620 1/fp32 MUL %30287, %30297
        %30299 1/fp32 SHUF %210.z
        %30621 1/fp32 ADD %30299, %30618
        %30622 1/fp32 ADD %30621, %30619
        %30623 1/fp32 ADD %30622, %30620
        %30300 1/fp32 SHUF %198.w
        %30624 1/fp32 MUL %214, %30300
        %30301 1/fp32 SHUF %202.w
        %30625 1/fp32 MUL %30286, %30301
        %30303 1/fp32 SHUF %206.w
        %30626 1/fp32 MUL %30287, %30303
        %30305 1/fp32 SHUF %210.w
        %30627 1/fp32 ADD %30305, %30624
        %30628 1/fp32 ADD %30627, %30625
        %30629 1/fp32 ADD %30628, %30626
        %6928 4/fp32 SHUF %30611.x---,  %30617.-x--,  %30623.--x-,  %30629.---x
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30630 1/fp32 MUL %6933, %30611
        %30631 1/fp32 MUL %6935, %30617
        %30632 1/fp32 MUL %6937, %30623
        %30633 1/fp32 MUL %6939, %30629
        %30634 1/fp32 ADD %30630, %30631
        %30635 1/fp32 ADD %30634, %30632
        %30636 1/fp32 ADD %30635, %30633
        %30306 1/fp32 SHUF %6933.y
        %30637 1/fp32 MUL %30306, %30611
        %30307 1/fp32 SHUF %6935.y
        %30638 1/fp32 MUL %30307, %30617
        %30308 1/fp32 SHUF %6937.y
        %30639 1/fp32 MUL %30308, %30623
        %30309 1/fp32 SHUF %6939.y
        %30640 1/fp32 MUL %30309, %30629
        %30641 1/fp32 ADD %30637, %30638
        %30642 1/fp32 ADD %30641, %30639
        %30643 1/fp32 ADD %30642, %30640
        %30310 1/fp32 SHUF %6933.z
        %30644 1/fp32 MUL %30310, %30611
        %30311 1/fp32 SHUF %6935.z
        %30645 1/fp32 MUL %30311, %30617
        %30312 1/fp32 SHUF %6937.z
        %30646 1/fp32 MUL %30312, %30623
        %30313 1/fp32 SHUF %6939.z
        %30647 1/fp32 MUL %30313, %30629
        %30648 1/fp32 ADD %30644, %30645
        %30649 1/fp32 ADD %30648, %30646
        %30650 1/fp32 ADD %30649, %30647
        %30314 1/fp32 SHUF %6933.w
        %30651 1/fp32 MUL %30314, %30611
        %30315 1/fp32 SHUF %6935.w
        %30652 1/fp32 MUL %30315, %30617
        %30316 1/fp32 SHUF %6937.w
        %30653 1/fp32 MUL %30316, %30623
        %30317 1/fp32 SHUF %6939.w
        %30654 1/fp32 MUL %30317, %30629
        %30655 1/fp32 ADD %30651, %30652
        %30656 1/fp32 ADD %30655, %30653
        %30657 1/fp32 ADD %30656, %30654
        %6972 4/fp32 SHUF %30636.x---,  %30643.-x--,  %30650.--x-,  %30657.---x
        %374 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{1}
        %375 3/fp32 LD %374
        %30658 1/fp32 MUL %198, %375
        %30145 1/fp32 SHUF %375.y
        %30659 1/fp32 MUL %202, %30145
        %30149 1/fp32 SHUF %375.z
        %30660 1/fp32 MUL %206, %30149
        %30661 1/fp32 ADD %30658, %30659
        %30662 1/fp32 ADD %30661, %30660
        %30663 1/fp32 MUL %375, %30288
        %30664 1/fp32 MUL %30145, %30289
        %30665 1/fp32 MUL %30149, %30291
        %30666 1/fp32 ADD %30663, %30664
        %30667 1/fp32 ADD %30666, %30665
        %30668 1/fp32 MUL %375, %30294
        %30669 1/fp32 MUL %30145, %30295
        %30670 1/fp32 MUL %30149, %30297
        %30671 1/fp32 ADD %30668, %30669
        %30672 1/fp32 ADD %30671, %30670
        %30673 1/fp32 MUL %30662, %30662
        %30674 1/fp32 MUL %30667, %30667
        %30675 1/fp32 MUL %30672, %30672
        %30676 1/fp32 ADD %30673, %30674
        %30677 1/fp32 ADD %30676, %30675
        %30018 1/fp32 RSQ %30677
        %30678 1/fp32 MUL %30018, %30662
        %30679 1/fp32 MUL %30018, %30667
        %30680 1/fp32 MUL %30018, %30672
        %30238 3/fp32 SHUF %30678.x--,  %30679.-x-,  %30680.--x
        %423 temp(0) * 3/fp32 GETELEMPTR %9, int32{0}, int32{2}
        %424 3/fp32 LD %423
        %30681 1/fp32 MUL %198, %424
        %30189 1/fp32 SHUF %424.y
        %30682 1/fp32 MUL %202, %30189
        %30193 1/fp32 SHUF %424.z
        %30683 1/fp32 MUL %206, %30193
        %30684 1/fp32 ADD %30681, %30682
        %30685 1/fp32 ADD %30684, %30683
        %30686 1/fp32 MUL %424, %30288
        %30687 1/fp32 MUL %30189, %30289
        %30688 1/fp32 MUL %30193, %30291
        %30689 1/fp32 ADD %30686, %30687
        %30690 1/fp32 ADD %30689, %30688
        %30691 1/fp32 MUL %424, %30294
        %30692 1/fp32 MUL %30189, %30295
        %30693 1/fp32 MUL %30193, %30297
        %30694 1/fp32 ADD %30691, %30692
        %30695 1/fp32 ADD %30694, %30693
        %30696 1/fp32 MUL %30685, %30685
        %30697 1/fp32 MUL %30690, %30690
        %30698 1/fp32 MUL %30695, %30695
        %30699 1/fp32 ADD %30696, %30697
        %30700 1/fp32 ADD %30699, %30698
        %30014 1/fp32 RSQ %30700
        %30701 1/fp32 MUL %30014, %30685
        %30702 1/fp32 MUL %30014, %30690
        %30703 1/fp32 MUL %30014, %30695
        %30248 3/fp32 SHUF %30701.x--,  %30702.-x-,  %30703.--x
        %30704 1/fp32 MUL %30145, %30193
        %30705 1/fp32 MUL %424, %30149
        %30706 1/fp32 MUL %375, %30189
        %30537 1/fp32 NEG %30149
        %30707 1/fp32 MUL %30189, %30537
        %30538 1/fp32 NEG %375
        %30708 1/fp32 MUL %30193, %30538
        %30539 1/fp32 NEG %30145
        %30709 1/fp32 MUL %424, %30539
        %30710 1/fp32 ADD %30704, %30707
        %30711 1/fp32 ADD %30705, %30708
        %30712 1/fp32 ADD %30706, %30709
        %30285 3/fp32 SHUF %30710.x--,  %30711.-x-,  %30712.--x
        %467 temp(0) * 2/fp32 GETELEMPTR %9, int32{0}, int32{3}
        %469 2/fp32 LD %467
        %29816 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{0}
        %29818 void ST %6972, %29816
        %29820 temp(0) * 2/fp32 GETELEMPTR %12, int32{0}, int32{1}
        %29822 void ST %469, %29820
        %29824 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{2}
        %29826 void ST %30238, %29824
        %29828 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{3}
        %29830 void ST %30248, %29828
        %29832 temp(0) * 3/fp32 GETELEMPTR %12, int32{0}, int32{4}
        %29834 void ST %30285, %29832
        %29836 temp(0) * 4/fp32 GETELEMPTR %12, int32{0}, int32{5}
        %29838 void ST %6928, %29836
        %472 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %474 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:476 - entry
        <-- 
        --> block:1028

      block:1028 - if-predicate
        <-- block:476
        %7131 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7132 1/int32 LSHR %7131, int32{8}
        %30716 1/int32 AND %7132, int32{255}
        %30717 1/int32 AND %7131, int32{255}
        %7164 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7170 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7173 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1051 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1129 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %30813 1/int32 SHL %30716, int32{12}
        %30719 1/int32 OR %30717, %30813
        %7270 void intr.s_sendmsg %30719, int32{9} has_side_effects dependent_on_side_effects
        %7273 1/int32 NEG %30716
        %30720 1/int32 ADD nsw %7273, int32{64}
        %7275 1/int64 CONV %30720
        %7276 1/int64 LSHR int64{-1}, %7275
        %7277 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7276 uniform_width
        %30540 1/int1 CMP.ne %7277, int32{0}
        %1313 void BRC %30540[flatten:force][switch:default]
        --> block:7281, block:1413

      block:7281
        <-- block:1028
        %7289 void intr.EXPORT %1129, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7290 void BR 
        --> block:1413

      block:1413 - if-predicate
        <-- block:7281, block:1028
        %7292 1/int32 NEG %30717
        %30721 1/int32 ADD nsw %7292, int32{64}
        %7294 1/int64 CONV %30721
        %7295 1/int64 LSHR int64{-1}, %7294
        %7296 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7295 uniform_width
        %30542 1/int1 CMP.ne %7296, int32{0}
        %1415 void BRC %30542[flatten:force][switch:default]
        --> block:1411, block:475

      block:1411 - if-then
        <-- block:1413
        %1426 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7164, %7167, %7170, %7173 has_side_effects pinned
        %29442 4/fp32[5] GETELEM %1426, int32{0}
        %29448 4/fp32 GETELEM %29442, int32{0}
        %29451 4/fp32 GETELEM %29442, int32{1}
        %29454 4/fp32 GETELEM %29442, int32{2}
        %29457 4/fp32 GETELEM %29442, int32{3}
        %29460 4/fp32 GETELEM %29442, int32{4}
        %29445 4/int32[32] GETELEM %1426, int32{1}
        %29463 4/int32 GETELEM %29445, int32{0}
        %29466 4/int32 GETELEM %29445, int32{1}
        %29469 4/int32 GETELEM %29445, int32{2}
        %29472 4/int32 GETELEM %29445, int32{3}
        %29475 4/int32 GETELEM %29445, int32{4}
        %29478 4/int32 GETELEM %29445, int32{5}
        %29481 4/int32 GETELEM %29445, int32{6}
        %29484 4/int32 GETELEM %29445, int32{7}
        %29487 4/int32 GETELEM %29445, int32{8}
        %29490 4/int32 GETELEM %29445, int32{9}
        %29493 4/int32 GETELEM %29445, int32{10}
        %29496 4/int32 GETELEM %29445, int32{11}
        %29499 4/int32 GETELEM %29445, int32{12}
        %29502 4/int32 GETELEM %29445, int32{13}
        %29505 4/int32 GETELEM %29445, int32{14}
        %29508 4/int32 GETELEM %29445, int32{15}
        %29511 4/int32 GETELEM %29445, int32{16}
        %29514 4/int32 GETELEM %29445, int32{17}
        %29517 4/int32 GETELEM %29445, int32{18}
        %29520 4/int32 GETELEM %29445, int32{19}
        %29523 4/int32 GETELEM %29445, int32{20}
        %29526 4/int32 GETELEM %29445, int32{21}
        %29529 4/int32 GETELEM %29445, int32{22}
        %29532 4/int32 GETELEM %29445, int32{23}
        %29535 4/int32 GETELEM %29445, int32{24}
        %29538 4/int32 GETELEM %29445, int32{25}
        %29541 4/int32 GETELEM %29445, int32{26}
        %29544 4/int32 GETELEM %29445, int32{27}
        %29547 4/int32 GETELEM %29445, int32{28}
        %29550 4/int32 GETELEM %29445, int32{29}
        %29553 4/int32 GETELEM %29445, int32{30}
        %29556 4/int32 GETELEM %29445, int32{31}
        %27745 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{0}
        %27747 1/int32 LD %27745
        %27749 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{1}
        %27751 1/int32 LD %27749
        %27753 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{2}
        %27755 1/int32 LD %27753
        %27757 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{3}
        %27759 1/int32 LD %27757
        %27761 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{1}, int32{4}
        %27763 1/int32 LD %27761
        %27765 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{0}
        %27767 1/int32 LD %27765
        %27769 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{1}
        %27771 1/int32 LD %27769
        %27773 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{2}
        %27775 1/int32 LD %27773
        %27777 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{3}
        %27779 1/int32 LD %27777
        %27781 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{4}
        %27783 1/int32 LD %27781
        %27785 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{5}
        %27787 1/int32 LD %27785
        %27789 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{6}
        %27791 1/int32 LD %27789
        %27793 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{7}
        %27795 1/int32 LD %27793
        %27797 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{8}
        %27799 1/int32 LD %27797
        %27801 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{9}
        %27803 1/int32 LD %27801
        %27805 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{10}
        %27807 1/int32 LD %27805
        %27809 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{11}
        %27811 1/int32 LD %27809
        %27813 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{12}
        %27815 1/int32 LD %27813
        %27817 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{13}
        %27819 1/int32 LD %27817
        %27821 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{14}
        %27823 1/int32 LD %27821
        %27825 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{15}
        %27827 1/int32 LD %27825
        %27829 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{16}
        %27831 1/int32 LD %27829
        %27833 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{17}
        %27835 1/int32 LD %27833
        %27837 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{18}
        %27839 1/int32 LD %27837
        %27841 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{19}
        %27843 1/int32 LD %27841
        %27845 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{20}
        %27847 1/int32 LD %27845
        %27849 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{21}
        %27851 1/int32 LD %27849
        %27853 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{22}
        %27855 1/int32 LD %27853
        %27857 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{23}
        %27859 1/int32 LD %27857
        %27861 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{24}
        %27863 1/int32 LD %27861
        %27865 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{25}
        %27867 1/int32 LD %27865
        %27869 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{26}
        %27871 1/int32 LD %27869
        %27873 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{27}
        %27875 1/int32 LD %27873
        %27877 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{28}
        %27879 1/int32 LD %27877
        %27881 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{29}
        %27883 1/int32 LD %27881
        %27885 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{30}
        %27887 1/int32 LD %27885
        %27889 temp(0) * 1/int32 GETELEMPTR %474, int32{0}, int32{2}, int32{31}
        %27891 1/int32 LD %27889
        %30541 1/int1 CMP.ne int32{0}, %27763
        %28049 void BRC %30541
        --> block:28087, block:28050

      block:28050 - if-predicate
        <-- block:1411
        %30545 1/int32 CMOV.ne (int32{0}, %27755) int32{1}, int32{0}
        %30548 1/int32 CMOV.ne (int32{0}, %27759) int32{1}, int32{0}
        %30722 1/int32 OR %30545, %30548
        %30551 1/int32 CMOV.ne (int32{0}, %27759) int32{3}, int32{2}
        %30554 1/int32 CMOV.ne (int32{0}, %27751) int32{1}, int32{0}
        %30441 1/int32 CMOV.ne (%30722, int32{0}) %30551, %30554
        %30443 void BR 
        --> block:28087

      block:28087 - if-predicate
        <-- block:1411, block:28050
        %30442 1/int32 PHI int32{4}, %30441
        %30555 1/int1 CMP.ne int32{0}, %27747
        %28104 void BRC %30555
        --> block:28109, block:28142

      block:28109 - if-predicate
        <-- block:28087
        %30723 1/int32 AND int32{-2097153}, %27747
        %30559 1/int32 CMOV.eq (int32{0}, %30442) int32{2097152}, int32{0}
        %30724 1/int32 OR %30559, %30723
        %28127 1/fp32 SHUF %29448.y
        %28133 1/fp32 SHUF %29448.z
        %28139 1/fp32 SHUF %29448.w
        %28140 void intr.EXPORT %29448, %28127, %28133, %28139, %30724, int32{0}
        %28141 void BR 
        --> block:28142

      block:28142 - if-predicate
        <-- block:28087, block:28109
        %30560 1/int1 CMP.ne int32{0}, %27751
        %28150 void BRC %30560
        --> block:28151, block:28184

      block:28151 - if-predicate
        <-- block:28142
        %30725 1/int32 AND int32{-2097153}, %27751
        %30563 1/int32 CMOV.eq (int32{1}, %30442) int32{2097152}, int32{0}
        %30726 1/int32 OR %30563, %30725
        %28169 1/fp32 SHUF %29451.y
        %28175 1/fp32 SHUF %29451.z
        %28181 1/fp32 SHUF %29451.w
        %28182 void intr.EXPORT %29451, %28169, %28175, %28181, %30726, int32{0}
        %28183 void BR 
        --> block:28184

      block:28184 - if-predicate
        <-- block:28142, block:28151
        %30564 1/int1 CMP.ne int32{0}, %27755
        %28192 void BRC %30564
        --> block:28193, block:28226

      block:28193 - if-predicate
        <-- block:28184
        %30727 1/int32 AND int32{-2097153}, %27755
        %30567 1/int32 CMOV.eq (int32{2}, %30442) int32{2097152}, int32{0}
        %30728 1/int32 OR %30567, %30727
        %28211 1/fp32 SHUF %29454.y
        %28217 1/fp32 SHUF %29454.z
        %28223 1/fp32 SHUF %29454.w
        %28224 void intr.EXPORT %29454, %28211, %28217, %28223, %30728, int32{0}
        %28225 void BR 
        --> block:28226

      block:28226 - if-predicate
        <-- block:28184, block:28193
        %30568 1/int1 CMP.ne int32{0}, %27759
        %28234 void BRC %30568
        --> block:28235, block:28268

      block:28235 - if-predicate
        <-- block:28226
        %30729 1/int32 AND int32{-2097153}, %27759
        %30571 1/int32 CMOV.eq (int32{3}, %30442) int32{2097152}, int32{0}
        %30730 1/int32 OR %30571, %30729
        %28253 1/fp32 SHUF %29457.y
        %28259 1/fp32 SHUF %29457.z
        %28265 1/fp32 SHUF %29457.w
        %28266 void intr.EXPORT %29457, %28253, %28259, %28265, %30730, int32{0}
        %28267 void BR 
        --> block:28268

      block:28268 - if-predicate
        <-- block:28226, block:28235
        %28276 void BRC %30541
        --> block:28277, block:28105

      block:28277 - if-predicate
        <-- block:28268
        %30731 1/int32 AND int32{-2097153}, %27763
        %30574 1/int32 CMOV.eq (int32{4}, %30442) int32{2097152}, int32{0}
        %30732 1/int32 OR %30574, %30731
        %28295 1/fp32 SHUF %29460.y
        %28301 1/fp32 SHUF %29460.z
        %28307 1/fp32 SHUF %29460.w
        %28308 void intr.EXPORT %29460, %28295, %28301, %28307, %30732, int32{0}
        %28309 void BR 
        --> block:28105

      block:28105
        <-- block:28268, block:28277
        %30556 1/int1 CMP.ne int32{0}, %27767
        %28086 void BRC %30556
        --> block:28310, block:28362

      block:28310 - if-then
        <-- block:28105
        %28321 1/int32 SHUF %29463.y
        %28327 1/int32 SHUF %29463.z
        %28333 1/int32 SHUF %29463.w
        %28334 void intr.EXPORT %29463, %28321, %28327, %28333, %27767, int32{0}
        %28335 void BR 
        --> block:28362

      block:28362 - if-predicate
        <-- block:28310, block:28105
        %30575 1/int1 CMP.ne int32{0}, %27771
        %28370 void BRC %30575
        --> block:28336, block:28397

      block:28336 - if-then
        <-- block:28362
        %28347 1/int32 SHUF %29466.y
        %28353 1/int32 SHUF %29466.z
        %28359 1/int32 SHUF %29466.w
        %28360 void intr.EXPORT %29466, %28347, %28353, %28359, %27771, int32{0}
        %28361 void BR 
        --> block:28397

      block:28397 - if-predicate
        <-- block:28336, block:28362
        %30576 1/int1 CMP.ne int32{0}, %27775
        %28405 void BRC %30576
        --> block:28371, block:28432

      block:28371 - if-then
        <-- block:28397
        %28382 1/int32 SHUF %29469.y
        %28388 1/int32 SHUF %29469.z
        %28394 1/int32 SHUF %29469.w
        %28395 void intr.EXPORT %29469, %28382, %28388, %28394, %27775, int32{0}
        %28396 void BR 
        --> block:28432

      block:28432 - if-predicate
        <-- block:28371, block:28397
        %30577 1/int1 CMP.ne int32{0}, %27779
        %28440 void BRC %30577
        --> block:28406, block:28467

      block:28406 - if-then
        <-- block:28432
        %28417 1/int32 SHUF %29472.y
        %28423 1/int32 SHUF %29472.z
        %28429 1/int32 SHUF %29472.w
        %28430 void intr.EXPORT %29472, %28417, %28423, %28429, %27779, int32{0}
        %28431 void BR 
        --> block:28467

      block:28467 - if-predicate
        <-- block:28406, block:28432
        %30578 1/int1 CMP.ne int32{0}, %27783
        %28475 void BRC %30578
        --> block:28441, block:28502

      block:28441 - if-then
        <-- block:28467
        %28452 1/int32 SHUF %29475.y
        %28458 1/int32 SHUF %29475.z
        %28464 1/int32 SHUF %29475.w
        %28465 void intr.EXPORT %29475, %28452, %28458, %28464, %27783, int32{0}
        %28466 void BR 
        --> block:28502

      block:28502 - if-predicate
        <-- block:28441, block:28467
        %30579 1/int1 CMP.ne int32{0}, %27787
        %28510 void BRC %30579
        --> block:28476, block:28537

      block:28476 - if-then
        <-- block:28502
        %28487 1/int32 SHUF %29478.y
        %28493 1/int32 SHUF %29478.z
        %28499 1/int32 SHUF %29478.w
        %28500 void intr.EXPORT %29478, %28487, %28493, %28499, %27787, int32{0}
        %28501 void BR 
        --> block:28537

      block:28537 - if-predicate
        <-- block:28476, block:28502
        %30580 1/int1 CMP.ne int32{0}, %27791
        %28545 void BRC %30580
        --> block:28511, block:28572

      block:28511 - if-then
        <-- block:28537
        %28522 1/int32 SHUF %29481.y
        %28528 1/int32 SHUF %29481.z
        %28534 1/int32 SHUF %29481.w
        %28535 void intr.EXPORT %29481, %28522, %28528, %28534, %27791, int32{0}
        %28536 void BR 
        --> block:28572

      block:28572 - if-predicate
        <-- block:28511, block:28537
        %30581 1/int1 CMP.ne int32{0}, %27795
        %28580 void BRC %30581
        --> block:28546, block:28607

      block:28546 - if-then
        <-- block:28572
        %28557 1/int32 SHUF %29484.y
        %28563 1/int32 SHUF %29484.z
        %28569 1/int32 SHUF %29484.w
        %28570 void intr.EXPORT %29484, %28557, %28563, %28569, %27795, int32{0}
        %28571 void BR 
        --> block:28607

      block:28607 - if-predicate
        <-- block:28546, block:28572
        %30582 1/int1 CMP.ne int32{0}, %27799
        %28615 void BRC %30582
        --> block:28581, block:28642

      block:28581 - if-then
        <-- block:28607
        %28592 1/int32 SHUF %29487.y
        %28598 1/int32 SHUF %29487.z
        %28604 1/int32 SHUF %29487.w
        %28605 void intr.EXPORT %29487, %28592, %28598, %28604, %27799, int32{0}
        %28606 void BR 
        --> block:28642

      block:28642 - if-predicate
        <-- block:28581, block:28607
        %30583 1/int1 CMP.ne int32{0}, %27803
        %28650 void BRC %30583
        --> block:28616, block:28677

      block:28616 - if-then
        <-- block:28642
        %28627 1/int32 SHUF %29490.y
        %28633 1/int32 SHUF %29490.z
        %28639 1/int32 SHUF %29490.w
        %28640 void intr.EXPORT %29490, %28627, %28633, %28639, %27803, int32{0}
        %28641 void BR 
        --> block:28677

      block:28677 - if-predicate
        <-- block:28616, block:28642
        %30584 1/int1 CMP.ne int32{0}, %27807
        %28685 void BRC %30584
        --> block:28651, block:28712

      block:28651 - if-then
        <-- block:28677
        %28662 1/int32 SHUF %29493.y
        %28668 1/int32 SHUF %29493.z
        %28674 1/int32 SHUF %29493.w
        %28675 void intr.EXPORT %29493, %28662, %28668, %28674, %27807, int32{0}
        %28676 void BR 
        --> block:28712

      block:28712 - if-predicate
        <-- block:28651, block:28677
        %30585 1/int1 CMP.ne int32{0}, %27811
        %28720 void BRC %30585
        --> block:28686, block:28747

      block:28686 - if-then
        <-- block:28712
        %28697 1/int32 SHUF %29496.y
        %28703 1/int32 SHUF %29496.z
        %28709 1/int32 SHUF %29496.w
        %28710 void intr.EXPORT %29496, %28697, %28703, %28709, %27811, int32{0}
        %28711 void BR 
        --> block:28747

      block:28747 - if-predicate
        <-- block:28686, block:28712
        %30586 1/int1 CMP.ne int32{0}, %27815
        %28755 void BRC %30586
        --> block:28721, block:28782

      block:28721 - if-then
        <-- block:28747
        %28732 1/int32 SHUF %29499.y
        %28738 1/int32 SHUF %29499.z
        %28744 1/int32 SHUF %29499.w
        %28745 void intr.EXPORT %29499, %28732, %28738, %28744, %27815, int32{0}
        %28746 void BR 
        --> block:28782

      block:28782 - if-predicate
        <-- block:28721, block:28747
        %30587 1/int1 CMP.ne int32{0}, %27819
        %28790 void BRC %30587
        --> block:28756, block:28817

      block:28756 - if-then
        <-- block:28782
        %28767 1/int32 SHUF %29502.y
        %28773 1/int32 SHUF %29502.z
        %28779 1/int32 SHUF %29502.w
        %28780 void intr.EXPORT %29502, %28767, %28773, %28779, %27819, int32{0}
        %28781 void BR 
        --> block:28817

      block:28817 - if-predicate
        <-- block:28756, block:28782
        %30588 1/int1 CMP.ne int32{0}, %27823
        %28825 void BRC %30588
        --> block:28791, block:28852

      block:28791 - if-then
        <-- block:28817
        %28802 1/int32 SHUF %29505.y
        %28808 1/int32 SHUF %29505.z
        %28814 1/int32 SHUF %29505.w
        %28815 void intr.EXPORT %29505, %28802, %28808, %28814, %27823, int32{0}
        %28816 void BR 
        --> block:28852

      block:28852 - if-predicate
        <-- block:28791, block:28817
        %30589 1/int1 CMP.ne int32{0}, %27827
        %28860 void BRC %30589
        --> block:28826, block:28887

      block:28826 - if-then
        <-- block:28852
        %28837 1/int32 SHUF %29508.y
        %28843 1/int32 SHUF %29508.z
        %28849 1/int32 SHUF %29508.w
        %28850 void intr.EXPORT %29508, %28837, %28843, %28849, %27827, int32{0}
        %28851 void BR 
        --> block:28887

      block:28887 - if-predicate
        <-- block:28826, block:28852
        %30590 1/int1 CMP.ne int32{0}, %27831
        %28895 void BRC %30590
        --> block:28861, block:28922

      block:28861 - if-then
        <-- block:28887
        %28872 1/int32 SHUF %29511.y
        %28878 1/int32 SHUF %29511.z
        %28884 1/int32 SHUF %29511.w
        %28885 void intr.EXPORT %29511, %28872, %28878, %28884, %27831, int32{0}
        %28886 void BR 
        --> block:28922

      block:28922 - if-predicate
        <-- block:28861, block:28887
        %30591 1/int1 CMP.ne int32{0}, %27835
        %28930 void BRC %30591
        --> block:28896, block:28957

      block:28896 - if-then
        <-- block:28922
        %28907 1/int32 SHUF %29514.y
        %28913 1/int32 SHUF %29514.z
        %28919 1/int32 SHUF %29514.w
        %28920 void intr.EXPORT %29514, %28907, %28913, %28919, %27835, int32{0}
        %28921 void BR 
        --> block:28957

      block:28957 - if-predicate
        <-- block:28896, block:28922
        %30592 1/int1 CMP.ne int32{0}, %27839
        %28965 void BRC %30592
        --> block:28931, block:28992

      block:28931 - if-then
        <-- block:28957
        %28942 1/int32 SHUF %29517.y
        %28948 1/int32 SHUF %29517.z
        %28954 1/int32 SHUF %29517.w
        %28955 void intr.EXPORT %29517, %28942, %28948, %28954, %27839, int32{0}
        %28956 void BR 
        --> block:28992

      block:28992 - if-predicate
        <-- block:28931, block:28957
        %30593 1/int1 CMP.ne int32{0}, %27843
        %29000 void BRC %30593
        --> block:28966, block:29027

      block:28966 - if-then
        <-- block:28992
        %28977 1/int32 SHUF %29520.y
        %28983 1/int32 SHUF %29520.z
        %28989 1/int32 SHUF %29520.w
        %28990 void intr.EXPORT %29520, %28977, %28983, %28989, %27843, int32{0}
        %28991 void BR 
        --> block:29027

      block:29027 - if-predicate
        <-- block:28966, block:28992
        %30594 1/int1 CMP.ne int32{0}, %27847
        %29035 void BRC %30594
        --> block:29001, block:29062

      block:29001 - if-then
        <-- block:29027
        %29012 1/int32 SHUF %29523.y
        %29018 1/int32 SHUF %29523.z
        %29024 1/int32 SHUF %29523.w
        %29025 void intr.EXPORT %29523, %29012, %29018, %29024, %27847, int32{0}
        %29026 void BR 
        --> block:29062

      block:29062 - if-predicate
        <-- block:29001, block:29027
        %30595 1/int1 CMP.ne int32{0}, %27851
        %29070 void BRC %30595
        --> block:29036, block:29097

      block:29036 - if-then
        <-- block:29062
        %29047 1/int32 SHUF %29526.y
        %29053 1/int32 SHUF %29526.z
        %29059 1/int32 SHUF %29526.w
        %29060 void intr.EXPORT %29526, %29047, %29053, %29059, %27851, int32{0}
        %29061 void BR 
        --> block:29097

      block:29097 - if-predicate
        <-- block:29036, block:29062
        %30596 1/int1 CMP.ne int32{0}, %27855
        %29105 void BRC %30596
        --> block:29071, block:29132

      block:29071 - if-then
        <-- block:29097
        %29082 1/int32 SHUF %29529.y
        %29088 1/int32 SHUF %29529.z
        %29094 1/int32 SHUF %29529.w
        %29095 void intr.EXPORT %29529, %29082, %29088, %29094, %27855, int32{0}
        %29096 void BR 
        --> block:29132

      block:29132 - if-predicate
        <-- block:29071, block:29097
        %30597 1/int1 CMP.ne int32{0}, %27859
        %29140 void BRC %30597
        --> block:29106, block:29167

      block:29106 - if-then
        <-- block:29132
        %29117 1/int32 SHUF %29532.y
        %29123 1/int32 SHUF %29532.z
        %29129 1/int32 SHUF %29532.w
        %29130 void intr.EXPORT %29532, %29117, %29123, %29129, %27859, int32{0}
        %29131 void BR 
        --> block:29167

      block:29167 - if-predicate
        <-- block:29106, block:29132
        %30598 1/int1 CMP.ne int32{0}, %27863
        %29175 void BRC %30598
        --> block:29141, block:29202

      block:29141 - if-then
        <-- block:29167
        %29152 1/int32 SHUF %29535.y
        %29158 1/int32 SHUF %29535.z
        %29164 1/int32 SHUF %29535.w
        %29165 void intr.EXPORT %29535, %29152, %29158, %29164, %27863, int32{0}
        %29166 void BR 
        --> block:29202

      block:29202 - if-predicate
        <-- block:29141, block:29167
        %30599 1/int1 CMP.ne int32{0}, %27867
        %29210 void BRC %30599
        --> block:29176, block:29237

      block:29176 - if-then
        <-- block:29202
        %29187 1/int32 SHUF %29538.y
        %29193 1/int32 SHUF %29538.z
        %29199 1/int32 SHUF %29538.w
        %29200 void intr.EXPORT %29538, %29187, %29193, %29199, %27867, int32{0}
        %29201 void BR 
        --> block:29237

      block:29237 - if-predicate
        <-- block:29176, block:29202
        %30600 1/int1 CMP.ne int32{0}, %27871
        %29245 void BRC %30600
        --> block:29211, block:29272

      block:29211 - if-then
        <-- block:29237
        %29222 1/int32 SHUF %29541.y
        %29228 1/int32 SHUF %29541.z
        %29234 1/int32 SHUF %29541.w
        %29235 void intr.EXPORT %29541, %29222, %29228, %29234, %27871, int32{0}
        %29236 void BR 
        --> block:29272

      block:29272 - if-predicate
        <-- block:29211, block:29237
        %30601 1/int1 CMP.ne int32{0}, %27875
        %29280 void BRC %30601
        --> block:29246, block:29307

      block:29246 - if-then
        <-- block:29272
        %29257 1/int32 SHUF %29544.y
        %29263 1/int32 SHUF %29544.z
        %29269 1/int32 SHUF %29544.w
        %29270 void intr.EXPORT %29544, %29257, %29263, %29269, %27875, int32{0}
        %29271 void BR 
        --> block:29307

      block:29307 - if-predicate
        <-- block:29246, block:29272
        %30602 1/int1 CMP.ne int32{0}, %27879
        %29315 void BRC %30602
        --> block:29281, block:29342

      block:29281 - if-then
        <-- block:29307
        %29292 1/int32 SHUF %29547.y
        %29298 1/int32 SHUF %29547.z
        %29304 1/int32 SHUF %29547.w
        %29305 void intr.EXPORT %29547, %29292, %29298, %29304, %27879, int32{0}
        %29306 void BR 
        --> block:29342

      block:29342 - if-predicate
        <-- block:29281, block:29307
        %30603 1/int1 CMP.ne int32{0}, %27883
        %29350 void BRC %30603
        --> block:29316, block:29377

      block:29316 - if-then
        <-- block:29342
        %29327 1/int32 SHUF %29550.y
        %29333 1/int32 SHUF %29550.z
        %29339 1/int32 SHUF %29550.w
        %29340 void intr.EXPORT %29550, %29327, %29333, %29339, %27883, int32{0}
        %29341 void BR 
        --> block:29377

      block:29377 - if-predicate
        <-- block:29316, block:29342
        %30604 1/int1 CMP.ne int32{0}, %27887
        %29385 void BRC %30604
        --> block:29351, block:29412

      block:29351 - if-then
        <-- block:29377
        %29362 1/int32 SHUF %29553.y
        %29368 1/int32 SHUF %29553.z
        %29374 1/int32 SHUF %29553.w
        %29375 void intr.EXPORT %29553, %29362, %29368, %29374, %27887, int32{0}
        %29376 void BR 
        --> block:29412

      block:29412 - if-predicate
        <-- block:29351, block:29377
        %30605 1/int1 CMP.ne int32{0}, %27891
        %29420 void BRC %30605
        --> block:29386, block:475

      block:29386 - if-then
        <-- block:29412
        %29397 1/int32 SHUF %29556.y
        %29403 1/int32 SHUF %29556.z
        %29409 1/int32 SHUF %29556.w
        %29410 void intr.EXPORT %29556, %29397, %29403, %29409, %27891, int32{0}
        %29411 void BR 
        --> block:475

      block:475 - exit
        <-- block:1413, block:29386, block:29412
        --> 


--------------------------------------------------------------------------------

>> pass 381/799: validate graph
    validate graph (0045C2BE)
>> pass 382/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 383/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 384/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 385/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 386/799: integer division lowering
    integer division lowering (A47FC93A)
>> pass 387/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 388/799: validate graph
    validate graph (0045C2BE)
>> pass 389/799: loop analysis
    loop analysis (598E85BD)
>> pass 390/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 391/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 392/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 393/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 394/799: legalize values
    legalize values (3229DE24)
>> pass 395/799: validate graph
    validate graph (0045C2BE)
>> pass 396/799: automatic gradient adjust
    automatic gradient adjust (44B7C029)
>> pass 397/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 398/799: validate graph
    validate graph (0045C2BE)
>> pass 399/799: match uniforms
    match uniforms (E61EA005)
>> pass 400/799: validate graph
    validate graph (0045C2BE)
>> pass 401/799: ApplySrtSignature
    ApplySrtSignature (63836394)
>> pass 402/799: validate graph
    validate graph (0045C2BE)
>> pass 403/799: lower srt
    lower srt (09AD683D)
>> pass 404/799: validate graph
    validate graph (0045C2BE)
>> pass 405/799: loop analysis
    loop analysis (598E85BD)
>> pass 406/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 407/799: validate graph
    validate graph (0045C2BE)
>> pass 408/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 409/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 410/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 411/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 412/799: legalize diverging sharps
    legalize diverging sharps (DEA6F8ED)
>> pass 413/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 414/799: validate graph
    validate graph (0045C2BE)
>> pass 415/799: loop analysis
    loop analysis (598E85BD)
>> pass 416/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 417/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 418/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 419/799: lower primitive buffer access
    lower primitive buffer access (F17366F2)
>> pass 420/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 421/799: validate graph
    validate graph (0045C2BE)
>> pass 422/799: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 423/799: validate graph
    validate graph (0045C2BE)
>> pass 424/799: loop analysis
    loop analysis (598E85BD)
>> pass 425/799: remove redundancy
    remove redundancy (1AC4449D)
>> pass 426/799: validate graph
    validate graph (0045C2BE)
>> pass 427/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 428/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 429/799: validate graph
    validate graph (0045C2BE)
>> pass 430/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 431/799: remove dead code
    remove dead code (B7E6F507)
>> pass 432/799: validate graph
    validate graph (0045C2BE)
>> pass 433/799: constant propagation
    constant propagation (5CBB3303)
>> pass 434/799: validate graph
    validate graph (0045C2BE)
>> pass 435/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 436/799: validate graph
    validate graph (0045C2BE)
>> pass 437/799: lower export shader output
    lower export shader output (B2400657)
>> pass 438/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 439/799: validate graph
    validate graph (0045C2BE)
>> pass 440/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 441/799: remove dead code
    remove dead code (B7E6F507)
>> pass 442/799: validate graph
    validate graph (0045C2BE)
>> pass 443/799: lower sin/cos to r10 normalized sin/cos
    lower sin/cos to r10 normalized sin/cos (344A69D4)
>> pass 444/799: validate graph
    validate graph (0045C2BE)
>> pass 445/799: lower vertex input bindings
    lower vertex input bindings (AF053778)
>> pass 446/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 447/799: validate graph
    validate graph (0045C2BE)
>> pass 448/799: loop analysis
    loop analysis (598E85BD)
>> pass 449/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 450/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 451/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 452/799: lower switch
    lower switch (D1384996)
>> pass 453/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 454/799: validate graph
    validate graph (0045C2BE)
>> pass 455/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 456/799: validate graph
    validate graph (0045C2BE)
>> pass 457/799: build program properties
    build program properties (B69B900E)
>> pass 458/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 459/799: validate graph
    validate graph (0045C2BE)
>> pass 460/799: create export intrinsics
    create export intrinsics (FBA3CDD7)
>> pass 461/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 462/799: validate graph
    validate graph (0045C2BE)
>> pass 463/799: R10LowerNggVs
    R10LowerNggVs (24512580)
>> pass 464/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 465/799: validate graph
    validate graph (0045C2BE)
>> pass 466/799: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 467/799: validate graph
    validate graph (0045C2BE)
>> pass 468/799: loop analysis
    loop analysis (598E85BD)
>> pass 469/799: convert to SSA
    convert to SSA (C60B7C93)
>> pass 470/799: validate graph
    validate graph (0045C2BE)
>> pass 471/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 472/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 473/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 474/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 475/799: lower uniformity
    lower uniformity (69E21F86)
>> pass 476/799: validate graph
    validate graph (0045C2BE)
>> pass 477/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 478/799: validate graph
    validate graph (0045C2BE)
>> pass 479/799: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 480/799: validate graph
    validate graph (0045C2BE)
>> pass 481/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 482/799: validate graph
    validate graph (0045C2BE)
>> pass 483/799: constant propagation
    constant propagation (5CBB3303)
>> pass 484/799: validate graph
    validate graph (0045C2BE)
>> pass 485/799: loop analysis
    loop analysis (598E85BD)
>> pass 486/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 487/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 488/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 489/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 490/799: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 491/799: legalize intrinsics
    legalize intrinsics (F8DFB406)
>> pass 492/799: validate graph
    validate graph (0045C2BE)
>> pass 493/799: optimize frontface binding
    optimize frontface binding (B8A15AF3)
>> pass 494/799: validate graph
    validate graph (0045C2BE)
>> pass 495/799: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 496/799: validate graph
    validate graph (0045C2BE)
>> pass 497/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 498/799: remove dead code
    remove dead code (B7E6F507)
>> pass 499/799: validate graph
    validate graph (0045C2BE)
>> pass 500/799: layout constant buffers
    layout constant buffers (2D3268D5)
>> pass 501/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 502/799: validate graph
    validate graph (0045C2BE)
>> pass 503/799: create input usage slot request
    create input usage slot request (720114FB)
>> pass 504/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 505/799: validate graph
    validate graph (0045C2BE)
>> pass 506/799: collect symbols
    collect symbols (4F1FA86C)
>> pass 507/799: validate graph
    validate graph (0045C2BE)
>> pass 508/799: symbol cleanup
    symbol cleanup (C8E4EFB3)
>> pass 509/799: validate graph
    validate graph (0045C2BE)
>> pass 510/799: lower buffer conversion
    lower buffer conversion (987C5DD4)
>> pass 511/799: validate graph
    validate graph (0045C2BE)
>> pass 512/799: legalize types
    legalize types (6424EDB9)
>> pass 513/799: validate graph
    validate graph (0045C2BE)
>> pass 514/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:31080

      block:31080 - ngg-main
        <-- block:4
        %31162 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %31163 1/int32 LSHR %31162, int32{8}
        %31164 1/int32 AND %31163, int32{255}
        %31165 1/int32 AND %31162, int32{255}
        %31166 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %31167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %31171 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %31172 1/int32 SHL %31164, int32{12}
        %31173 1/int32 OR %31165, %31172
        %31174 void intr.s_sendmsg %31173, int32{9} has_side_effects dependent_on_side_effects
        %31175 1/int32 NEG %31164
        %31176 1/int32 ADD nsw %31175, int32{64}
        %31177 1/int64 CONV %31176
        %31178 1/int64 LSHR int64{-1}, %31177
        %31179 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31178 uniform_width
        %31180 1/int1 CMP.ne %31179, int32{0}
        %31181 void BRC %31180[flatten:force][switch:default]
        --> block:31307, block:31299

      block:31307
        <-- block:31080
        %31308 void intr.EXPORT %31171, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %31309 void BR 
        --> block:31299

      block:31299 - if-predicate
        <-- block:31307, block:31080
        %31300 1/int32 NEG %31165
        %31301 1/int32 ADD nsw %31300, int32{64}
        %31302 1/int64 CONV %31301
        %31303 1/int64 LSHR int64{-1}, %31302
        %31304 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31303 uniform_width
        %31305 1/int1 CMP.ne %31304, int32{0}
        %31306 void BRC %31305[flatten:force][switch:default]
        --> block:31717, block:3

      block:31717
        <-- block:31299
        %30896 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %30897 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %30898 roshared(0) * 4/int32[32] CONV_reinterp %30897
        %30899 roshared(0) * 1/int32[32] CONV_reinterp %30896
        %30900 roshared(0) * 1/int32 GETELEMPTR %30899, int32{0}, int32{0}
        %30901 1/int32 LD %30900
        %30902 1/int32 AND %30901, int32{31}
        %30905 1/int32 LSHR %30901, int32{5}
        %30906 1/int32 AND %30905, int32{3}
        %30907 1/int32 LSHR %30901, int32{7}
        %30908 1/int32 AND %30907, int32{127}
        %30909 1/int32 LSHR %30901, int32{14}
        %30910 1/int32 AND %30909, int32{4095}
        %30911 1/int32 LSHR %30901, int32{26}
        %30912 1/int32 AND %30911, int32{1}
        %30915 1/int32 CMOV.eq (%30912, int32{0}) %31166, %31167
        %30916 roshared(0) * 4/int32 GETELEMPTR %30898, int32{0}, %30902
        %30917 4/int32 LD %30916
        %30919 1/int32 intr.s_lshl4_add_u32 %30906, int32{786432}
        %30921 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30919
        %30922 1/int32 CONV %30921
        %30923 1/int32 SHUF %30917.w
        %30925 1/int32 AND %30923, int32{-524288}
        %30926 1/int32 SHL %30908, int32{12}
        %30927 1/int32 OR %30925, %30926
        %30928 1/int32 OR %30927, %30922
        %30929 1/int32 CMOV.eq (%30908, int32{0}) %30923, %30928
        %30930 4/int32 SHUF %30917.xyz-,  %30929.---x
        %30932 3/fp32 intr.buffer_load_format_xyz %30915, %30930, %30910, int64{36029896530591744}
        %30935 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %30936 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %30937 roshared(0) * 4/int32[32] CONV_reinterp %30936
        %30938 roshared(0) * 1/int32[32] CONV_reinterp %30935
        %30939 roshared(0) * 1/int32 GETELEMPTR %30938, int32{0}, int32{1}
        %30940 1/int32 LD %30939
        %30941 1/int32 AND %30940, int32{31}
        %30942 1/int32 LSHR %30940, int32{5}
        %30943 1/int32 AND %30942, int32{3}
        %30944 1/int32 LSHR %30940, int32{7}
        %30945 1/int32 AND %30944, int32{127}
        %30946 1/int32 LSHR %30940, int32{14}
        %30947 1/int32 AND %30946, int32{4095}
        %30948 1/int32 LSHR %30940, int32{26}
        %30949 1/int32 AND %30948, int32{1}
        %30952 1/int32 CMOV.eq (%30949, int32{0}) %31166, %31167
        %30953 roshared(0) * 4/int32 GETELEMPTR %30937, int32{0}, %30941
        %30954 4/int32 LD %30953
        %30955 1/int32 intr.s_lshl4_add_u32 %30943, int32{786432}
        %30956 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30955
        %30957 1/int32 CONV %30956
        %30958 1/int32 SHUF %30954.w
        %30959 1/int32 AND %30958, int32{-524288}
        %30960 1/int32 SHL %30945, int32{12}
        %30961 1/int32 OR %30959, %30960
        %30962 1/int32 OR %30961, %30957
        %30963 1/int32 CMOV.eq (%30945, int32{0}) %30958, %30962
        %30964 4/int32 SHUF %30954.xyz-,  %30963.---x
        %30965 3/fp32 intr.buffer_load_format_xyz %30952, %30964, %30947, int64{36029896530591744}
        %30968 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %30969 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %30970 roshared(0) * 4/int32[32] CONV_reinterp %30969
        %30971 roshared(0) * 1/int32[32] CONV_reinterp %30968
        %30972 roshared(0) * 1/int32 GETELEMPTR %30971, int32{0}, int32{2}
        %30973 1/int32 LD %30972
        %30974 1/int32 AND %30973, int32{31}
        %30975 1/int32 LSHR %30973, int32{5}
        %30976 1/int32 AND %30975, int32{3}
        %30977 1/int32 LSHR %30973, int32{7}
        %30978 1/int32 AND %30977, int32{127}
        %30979 1/int32 LSHR %30973, int32{14}
        %30980 1/int32 AND %30979, int32{4095}
        %30981 1/int32 LSHR %30973, int32{26}
        %30982 1/int32 AND %30981, int32{1}
        %30985 1/int32 CMOV.eq (%30982, int32{0}) %31166, %31167
        %30986 roshared(0) * 4/int32 GETELEMPTR %30970, int32{0}, %30974
        %30987 4/int32 LD %30986
        %30988 1/int32 intr.s_lshl4_add_u32 %30976, int32{786432}
        %30989 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30988
        %30990 1/int32 CONV %30989
        %30991 1/int32 SHUF %30987.w
        %30992 1/int32 AND %30991, int32{-524288}
        %30993 1/int32 SHL %30978, int32{12}
        %30994 1/int32 OR %30992, %30993
        %30995 1/int32 OR %30994, %30990
        %30996 1/int32 CMOV.eq (%30978, int32{0}) %30991, %30995
        %30997 4/int32 SHUF %30987.xyz-,  %30996.---x
        %30998 3/fp32 intr.buffer_load_format_xyz %30985, %30997, %30980, int64{36029896530591744}
        %31001 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %31002 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %31003 roshared(0) * 4/int32[32] CONV_reinterp %31002
        %31004 roshared(0) * 1/int32[32] CONV_reinterp %31001
        %31005 roshared(0) * 1/int32 GETELEMPTR %31004, int32{0}, int32{3}
        %31006 1/int32 LD %31005
        %31007 1/int32 AND %31006, int32{31}
        %31008 1/int32 LSHR %31006, int32{5}
        %31009 1/int32 AND %31008, int32{3}
        %31010 1/int32 LSHR %31006, int32{7}
        %31011 1/int32 AND %31010, int32{127}
        %31012 1/int32 LSHR %31006, int32{14}
        %31013 1/int32 AND %31012, int32{4095}
        %31014 1/int32 LSHR %31006, int32{26}
        %31015 1/int32 AND %31014, int32{1}
        %31018 1/int32 CMOV.eq (%31015, int32{0}) %31166, %31167
        %31019 roshared(0) * 4/int32 GETELEMPTR %31003, int32{0}, %31007
        %31020 4/int32 LD %31019
        %31021 1/int32 intr.s_lshl4_add_u32 %31009, int32{786432}
        %31022 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31021
        %31023 1/int32 CONV %31022
        %31024 1/int32 SHUF %31020.w
        %31025 1/int32 AND %31024, int32{-524288}
        %31026 1/int32 SHL %31011, int32{12}
        %31027 1/int32 OR %31025, %31026
        %31028 1/int32 OR %31027, %31023
        %31029 1/int32 CMOV.eq (%31011, int32{0}) %31024, %31028
        %31030 4/int32 SHUF %31020.xyz-,  %31029.---x
        %31031 2/fp32 intr.buffer_load_format_xy %31018, %31030, %31013, int64{36029896530591744}
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16]
        %174 1/int32 LD %153
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30340
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %30606 1/fp32 MUL %198, %30932
        %30286 1/fp32 SHUF %30932.y
        %30607 1/fp32 MUL %202, %30286
        %30287 1/fp32 SHUF %30932.z
        %30608 1/fp32 MUL %206, %30287
        %30609 1/fp32 ADD %210, %30606
        %30610 1/fp32 ADD %30609, %30607
        %30611 1/fp32 ADD %30610, %30608
        %30288 1/fp32 SHUF %198.y
        %30612 1/fp32 MUL %30932, %30288
        %30289 1/fp32 SHUF %202.y
        %30613 1/fp32 MUL %30286, %30289
        %30291 1/fp32 SHUF %206.y
        %30614 1/fp32 MUL %30287, %30291
        %30293 1/fp32 SHUF %210.y
        %30615 1/fp32 ADD %30293, %30612
        %30616 1/fp32 ADD %30615, %30613
        %30617 1/fp32 ADD %30616, %30614
        %30294 1/fp32 SHUF %198.z
        %30618 1/fp32 MUL %30932, %30294
        %30295 1/fp32 SHUF %202.z
        %30619 1/fp32 MUL %30286, %30295
        %30297 1/fp32 SHUF %206.z
        %30620 1/fp32 MUL %30287, %30297
        %30299 1/fp32 SHUF %210.z
        %30621 1/fp32 ADD %30299, %30618
        %30622 1/fp32 ADD %30621, %30619
        %30623 1/fp32 ADD %30622, %30620
        %30300 1/fp32 SHUF %198.w
        %30624 1/fp32 MUL %30932, %30300
        %30301 1/fp32 SHUF %202.w
        %30625 1/fp32 MUL %30286, %30301
        %30303 1/fp32 SHUF %206.w
        %30626 1/fp32 MUL %30287, %30303
        %30305 1/fp32 SHUF %210.w
        %30627 1/fp32 ADD %30305, %30624
        %30628 1/fp32 ADD %30627, %30625
        %30629 1/fp32 ADD %30628, %30626
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30630 1/fp32 MUL %6933, %30611
        %30631 1/fp32 MUL %6935, %30617
        %30632 1/fp32 MUL %6937, %30623
        %30633 1/fp32 MUL %6939, %30629
        %30634 1/fp32 ADD %30630, %30631
        %30635 1/fp32 ADD %30634, %30632
        %30636 1/fp32 ADD %30635, %30633
        %30306 1/fp32 SHUF %6933.y
        %30637 1/fp32 MUL %30306, %30611
        %30307 1/fp32 SHUF %6935.y
        %30638 1/fp32 MUL %30307, %30617
        %30308 1/fp32 SHUF %6937.y
        %30639 1/fp32 MUL %30308, %30623
        %30309 1/fp32 SHUF %6939.y
        %30640 1/fp32 MUL %30309, %30629
        %30641 1/fp32 ADD %30637, %30638
        %30642 1/fp32 ADD %30641, %30639
        %30643 1/fp32 ADD %30642, %30640
        %30310 1/fp32 SHUF %6933.z
        %30644 1/fp32 MUL %30310, %30611
        %30311 1/fp32 SHUF %6935.z
        %30645 1/fp32 MUL %30311, %30617
        %30312 1/fp32 SHUF %6937.z
        %30646 1/fp32 MUL %30312, %30623
        %30313 1/fp32 SHUF %6939.z
        %30647 1/fp32 MUL %30313, %30629
        %30648 1/fp32 ADD %30644, %30645
        %30649 1/fp32 ADD %30648, %30646
        %30650 1/fp32 ADD %30649, %30647
        %30314 1/fp32 SHUF %6933.w
        %30651 1/fp32 MUL %30314, %30611
        %30315 1/fp32 SHUF %6935.w
        %30652 1/fp32 MUL %30315, %30617
        %30316 1/fp32 SHUF %6937.w
        %30653 1/fp32 MUL %30316, %30623
        %30317 1/fp32 SHUF %6939.w
        %30654 1/fp32 MUL %30317, %30629
        %30655 1/fp32 ADD %30651, %30652
        %30656 1/fp32 ADD %30655, %30653
        %30657 1/fp32 ADD %30656, %30654
        %6972 1/fp32 SHUF %30636.x
        %30658 1/fp32 MUL %198, %30965
        %30145 1/fp32 SHUF %30965.y
        %30659 1/fp32 MUL %202, %30145
        %30149 1/fp32 SHUF %30965.z
        %30660 1/fp32 MUL %206, %30149
        %30661 1/fp32 ADD %30658, %30659
        %30662 1/fp32 ADD %30661, %30660
        %30663 1/fp32 MUL %30965, %30288
        %30664 1/fp32 MUL %30145, %30289
        %30665 1/fp32 MUL %30149, %30291
        %30666 1/fp32 ADD %30663, %30664
        %30667 1/fp32 ADD %30666, %30665
        %30668 1/fp32 MUL %30965, %30294
        %30669 1/fp32 MUL %30145, %30295
        %30670 1/fp32 MUL %30149, %30297
        %30671 1/fp32 ADD %30668, %30669
        %30672 1/fp32 ADD %30671, %30670
        %30673 1/fp32 MUL %30662, %30662
        %30674 1/fp32 MUL %30667, %30667
        %30675 1/fp32 MUL %30672, %30672
        %30676 1/fp32 ADD %30673, %30674
        %30677 1/fp32 ADD %30676, %30675
        %30018 1/fp32 RSQ %30677
        %30678 1/fp32 MUL %30018, %30662
        %30679 1/fp32 MUL %30018, %30667
        %30680 1/fp32 MUL %30018, %30672
        %30681 1/fp32 MUL %198, %30998
        %30189 1/fp32 SHUF %30998.y
        %30682 1/fp32 MUL %202, %30189
        %30193 1/fp32 SHUF %30998.z
        %30683 1/fp32 MUL %206, %30193
        %30684 1/fp32 ADD %30681, %30682
        %30685 1/fp32 ADD %30684, %30683
        %30686 1/fp32 MUL %30998, %30288
        %30687 1/fp32 MUL %30189, %30289
        %30688 1/fp32 MUL %30193, %30291
        %30689 1/fp32 ADD %30686, %30687
        %30690 1/fp32 ADD %30689, %30688
        %30691 1/fp32 MUL %30998, %30294
        %30692 1/fp32 MUL %30189, %30295
        %30693 1/fp32 MUL %30193, %30297
        %30694 1/fp32 ADD %30691, %30692
        %30695 1/fp32 ADD %30694, %30693
        %30696 1/fp32 MUL %30685, %30685
        %30697 1/fp32 MUL %30690, %30690
        %30698 1/fp32 MUL %30695, %30695
        %30699 1/fp32 ADD %30696, %30697
        %30700 1/fp32 ADD %30699, %30698
        %30014 1/fp32 RSQ %30700
        %30701 1/fp32 MUL %30014, %30685
        %30702 1/fp32 MUL %30014, %30690
        %30703 1/fp32 MUL %30014, %30695
        %30704 1/fp32 MUL %30145, %30193
        %30705 1/fp32 MUL %30998, %30149
        %30706 1/fp32 MUL %30965, %30189
        %30537 1/fp32 NEG %30149
        %30707 1/fp32 MUL %30189, %30537
        %30538 1/fp32 NEG %30965
        %30708 1/fp32 MUL %30193, %30538
        %30539 1/fp32 NEG %30145
        %30709 1/fp32 MUL %30998, %30539
        %30710 1/fp32 ADD %30704, %30707
        %30711 1/fp32 ADD %30705, %30708
        %30712 1/fp32 ADD %30706, %30709
        %31044 1/fp32 SHUF %31031.y
        %31672 1/int32 CONV_reinterp %31031
        %31673 1/int32 CONV_reinterp %31044
        %31674 1/int32 CONV_reinterp %31069 1/fp32 UNDEF
        %31675 1/int32 CONV_reinterp %31069 1/fp32 UNDEF
        %31676 1/int32 SHUF %31672.x
        %31681 1/int32 CONV_reinterp %30678
        %31682 1/int32 CONV_reinterp %30679
        %31683 1/int32 CONV_reinterp %30680
        %31684 1/int32 CONV_reinterp %31069 1/fp32 UNDEF
        %31685 1/int32 SHUF %31681.x
        %31690 1/int32 CONV_reinterp %30701
        %31691 1/int32 CONV_reinterp %30702
        %31692 1/int32 CONV_reinterp %30703
        %31693 1/int32 CONV_reinterp %31069 1/fp32 UNDEF
        %31694 1/int32 SHUF %31690.x
        %31699 1/int32 CONV_reinterp %30710
        %31700 1/int32 CONV_reinterp %30711
        %31701 1/int32 CONV_reinterp %30712
        %31702 1/int32 CONV_reinterp %31069 1/fp32 UNDEF
        %31703 1/int32 SHUF %31699.x
        %31708 1/int32 CONV_reinterp %30611
        %31709 1/int32 CONV_reinterp %30617
        %31710 1/int32 CONV_reinterp %30623
        %31711 1/int32 CONV_reinterp %30629
        %31712 1/int32 SHUF %31708.x
        %31332 void intr.EXPORT %6972, %30643, %30650, %30657, int32{3080204}, int32{0} pos0 x y z w done
        %31385 void intr.EXPORT %31676, %31673, %31674, %31675, int32{983072}, int32{0} param0 x y z w
        %31391 void intr.EXPORT %31685, %31682, %31683, %31684, int32{983073}, int32{0} param1 x y z w
        %31400 void intr.EXPORT %31694, %31691, %31692, %31693, int32{983074}, int32{0} param2 x y z w
        %31409 void intr.EXPORT %31703, %31700, %31701, %31702, int32{983075}, int32{0} param3 x y z w
        %31418 void intr.EXPORT %31712, %31709, %31710, %31711, int32{983076}, int32{0} param4 x y z w
        %31851 void BR 
        --> block:3

      block:3 - exit
        <-- block:31299, block:31717
        --> 


--------------------------------------------------------------------------------

>> pass 515/799: validate graph
    validate graph (0045C2BE)
>> pass 516/799: loop analysis
    loop analysis (598E85BD)
>> pass 517/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 518/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 519/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 520/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 521/799: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 522/799: validate graph
    validate graph (0045C2BE)
>> pass 523/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 524/799: remove dead code
    remove dead code (B7E6F507)
>> pass 525/799: validate graph
    validate graph (0045C2BE)
>> pass 526/799: r10 optimize discard
    r10 optimize discard (FBBC97CD)
>> pass 527/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 528/799: validate graph
    validate graph (0045C2BE)
>> pass 529/799: loop analysis
    loop analysis (598E85BD)
>> pass 530/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 531/799: delete dead loops
    delete dead loops (72FEF67D)
>> pass 532/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 533/799: validate graph
    validate graph (0045C2BE)
>> pass 534/799: loop analysis
    loop analysis (598E85BD)
>> pass 535/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 536/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 537/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 538/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 539/799: schedule inter block
    schedule inter block (DB653091)
>> pass 540/799: validate graph
    validate graph (0045C2BE)
>> pass 541/799: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 542/799: validate graph
    validate graph (0045C2BE)
>> pass 543/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 544/799: remove dead code
    remove dead code (B7E6F507)
>> pass 545/799: validate graph
    validate graph (0045C2BE)
>> pass 546/799: loop analysis
    loop analysis (598E85BD)
>> pass 547/799: structural analysis
    structural analysis (A71DE301)
>> pass 548/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 549/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 550/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 551/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 552/799: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 553/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 554/799: validate graph
    validate graph (0045C2BE)
>> pass 555/799: loop analysis
    loop analysis (598E85BD)
>> pass 556/799: structural analysis
    structural analysis (A71DE301)
>> pass 557/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 558/799: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 559/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 560/799: validate graph
    validate graph (0045C2BE)
>> pass 561/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 562/799: validate graph
    validate graph (0045C2BE)
>> pass 563/799: loop analysis
    loop analysis (598E85BD)
>> pass 564/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 565/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 566/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 567/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 568/799: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 569/799: validate graph
    validate graph (0045C2BE)
>> pass 570/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 571/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 572/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 573/799: code sinking of texture instructions into conditional blocks
    code sinking of texture instructions into conditional blocks (18CCADBE)
>> pass 574/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 575/799: validate graph
    validate graph (0045C2BE)
>> pass 576/799: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 577/799: validate graph
    validate graph (0045C2BE)
>> pass 578/799: loop analysis
    loop analysis (598E85BD)
>> pass 579/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 580/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 581/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 582/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 583/799: global scheduler
    global scheduler (F83F59FC)
>> pass 584/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 585/799: validate graph
    validate graph (0045C2BE)
>> pass 586/799: break critical edges
    break critical edges (D716EAB4)
>> pass 587/799: validate graph
    validate graph (0045C2BE)
>> pass 588/799: loop analysis
    loop analysis (598E85BD)
>> pass 589/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 590/799: scalar evolution analysis
    scalar evolution analysis (B93409FF)
>> pass 591/799: range analysis
    range analysis (11B7AAEB)
>> pass 592/799: range propagation
    range propagation (45F717C0)
>> pass 593/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 594/799: validate graph
    validate graph (0045C2BE)
>> pass 595/799: constant propagation
    constant propagation (5CBB3303)
>> pass 596/799: validate graph
    validate graph (0045C2BE)
>> pass 597/799: sparse conditional constant propagation
    sparse conditional constant propagation (41B5CAD4)
>> pass 598/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 599/799: validate graph
    validate graph (0045C2BE)
>> pass 600/799: loop analysis
    loop analysis (598E85BD)
>> pass 601/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 602/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 603/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 604/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 605/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 606/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 607/799: validate graph
    validate graph (0045C2BE)
>> pass 608/799: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 609/799: validate graph
    validate graph (0045C2BE)
>> pass 610/799: loop analysis
    loop analysis (598E85BD)
>> pass 611/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 612/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 613/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 614/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 615/799: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 616/799: validate graph
    validate graph (0045C2BE)
>> pass 617/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:32242

      block:32242
        <-- block:4
        %31162 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %31163 1/int32 LSHR %31162, int32{8}
        %31164 1/int32 AND %31163, int32{255}
        %31165 1/int32 AND %31162, int32{255}
        %31172 1/int32 SHL %31164, int32{12}
        %31173 1/int32 OR %31165, %31172
        %31174 void intr.s_sendmsg %31173, int32{9} has_side_effects dependent_on_side_effects
        %31175 1/int32 NEG %31164
        %31176 1/int32 ADD nsw %31175, int32{64}
        %31177 1/int64 CONV %31176
        %31178 1/int64 LSHR int64{-1}, %31177
        %31179 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31178 uniform_width
        %31180 1/int1 CMP.ne %31179, int32{0}
        %31181 void BRC %31180[flatten:force][switch:default]
        --> block:31307, block:32244

      block:31307
        <-- block:32242
        %31171 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %31308 void intr.EXPORT %31171, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %31309 void BR 
        --> block:32244

      block:32244
        <-- block:31307, block:32242
        %31300 1/int32 NEG %31165
        %31301 1/int32 ADD nsw %31300, int32{64}
        %31302 1/int64 CONV %31301
        %31303 1/int64 LSHR int64{-1}, %31302
        %31304 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31303 uniform_width
        %31305 1/int1 CMP.ne %31304, int32{0}
        %31306 void BRC %31305[flatten:force][switch:default]
        --> block:31717, block:3

      block:31717
        <-- block:32244
        %31166 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %31167 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %30896 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %30897 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %30898 roshared(0) * 4/int32[32] CONV_reinterp %30897
        %30899 roshared(0) * 1/int32[32] CONV_reinterp %30896
        %30900 roshared(0) * 1/int32 GETELEMPTR %30899, int32{0}, int32{0}
        %30901 1/int32 LD %30900
        %30902 1/int32 AND %30901, int32{31}
        %30905 1/int32 LSHR %30901, int32{5}
        %30906 1/int32 AND %30905, int32{3}
        %30907 1/int32 LSHR %30901, int32{7}
        %30908 1/int32 AND %30907, int32{127}
        %30909 1/int32 LSHR %30901, int32{14}
        %30910 1/int32 AND %30909, int32{4095}
        %30911 1/int32 LSHR %30901, int32{26}
        %30912 1/int32 AND %30911, int32{1}
        %31880 1/int64 intr.v_cmp_eq_u32 %30912, int32{0}
        %31881 1/int32 intr.v_cndmask_b32 %31167, %31166, %31880
        %30916 roshared(0) * 4/int32 GETELEMPTR %30898, int32{0}, %30902
        %30917 4/int32 LD %30916
        %30919 1/int32 intr.s_lshl4_add_u32 %30906, int32{786432}
        %30921 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30919
        %30922 1/int32 CONV %30921
        %30923 1/int32 SHUF %30917.w
        %30925 1/int32 AND %30923, int32{-524288}
        %30926 1/int32 SHL %30908, int32{12}
        %30927 1/int32 OR %30925, %30926
        %30928 1/int32 OR %30927, %30922
        %31882 1/int32 intr.s_cmov_scalar %30908, int32{0}, %30923, %30928, int32{0}
        %30930 4/int32 SHUF %30917.xyz-,  %31882.---x
        %30932 3/fp32 intr.buffer_load_format_xyz %31881, %30930, %30910, int64{36029896530591744}
        %30935 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %30936 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %30937 roshared(0) * 4/int32[32] CONV_reinterp %30936
        %30938 roshared(0) * 1/int32[32] CONV_reinterp %30935
        %30939 roshared(0) * 1/int32 GETELEMPTR %30938, int32{0}, int32{1}
        %30940 1/int32 LD %30939
        %30941 1/int32 AND %30940, int32{31}
        %30942 1/int32 LSHR %30940, int32{5}
        %30943 1/int32 AND %30942, int32{3}
        %30944 1/int32 LSHR %30940, int32{7}
        %30945 1/int32 AND %30944, int32{127}
        %30946 1/int32 LSHR %30940, int32{14}
        %30947 1/int32 AND %30946, int32{4095}
        %30948 1/int32 LSHR %30940, int32{26}
        %30949 1/int32 AND %30948, int32{1}
        %31883 1/int64 intr.v_cmp_eq_u32 %30949, int32{0}
        %31884 1/int32 intr.v_cndmask_b32 %31167, %31166, %31883
        %30953 roshared(0) * 4/int32 GETELEMPTR %30937, int32{0}, %30941
        %30954 4/int32 LD %30953
        %30955 1/int32 intr.s_lshl4_add_u32 %30943, int32{786432}
        %30956 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30955
        %30957 1/int32 CONV %30956
        %30958 1/int32 SHUF %30954.w
        %30959 1/int32 AND %30958, int32{-524288}
        %30960 1/int32 SHL %30945, int32{12}
        %30961 1/int32 OR %30959, %30960
        %30962 1/int32 OR %30961, %30957
        %31885 1/int32 intr.s_cmov_scalar %30945, int32{0}, %30958, %30962, int32{0}
        %30964 4/int32 SHUF %30954.xyz-,  %31885.---x
        %30965 3/fp32 intr.buffer_load_format_xyz %31884, %30964, %30947, int64{36029896530591744}
        %30968 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %30969 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %30970 roshared(0) * 4/int32[32] CONV_reinterp %30969
        %30971 roshared(0) * 1/int32[32] CONV_reinterp %30968
        %30972 roshared(0) * 1/int32 GETELEMPTR %30971, int32{0}, int32{2}
        %30973 1/int32 LD %30972
        %30974 1/int32 AND %30973, int32{31}
        %30975 1/int32 LSHR %30973, int32{5}
        %30976 1/int32 AND %30975, int32{3}
        %30977 1/int32 LSHR %30973, int32{7}
        %30978 1/int32 AND %30977, int32{127}
        %30979 1/int32 LSHR %30973, int32{14}
        %30980 1/int32 AND %30979, int32{4095}
        %30981 1/int32 LSHR %30973, int32{26}
        %30982 1/int32 AND %30981, int32{1}
        %31886 1/int64 intr.v_cmp_eq_u32 %30982, int32{0}
        %31887 1/int32 intr.v_cndmask_b32 %31167, %31166, %31886
        %30986 roshared(0) * 4/int32 GETELEMPTR %30970, int32{0}, %30974
        %30987 4/int32 LD %30986
        %30988 1/int32 intr.s_lshl4_add_u32 %30976, int32{786432}
        %30989 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30988
        %30990 1/int32 CONV %30989
        %30991 1/int32 SHUF %30987.w
        %30992 1/int32 AND %30991, int32{-524288}
        %30993 1/int32 SHL %30978, int32{12}
        %30994 1/int32 OR %30992, %30993
        %30995 1/int32 OR %30994, %30990
        %31888 1/int32 intr.s_cmov_scalar %30978, int32{0}, %30991, %30995, int32{0}
        %30997 4/int32 SHUF %30987.xyz-,  %31888.---x
        %30998 3/fp32 intr.buffer_load_format_xyz %31887, %30997, %30980, int64{36029896530591744}
        %31001 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %31002 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %31003 roshared(0) * 4/int32[32] CONV_reinterp %31002
        %31004 roshared(0) * 1/int32[32] CONV_reinterp %31001
        %31005 roshared(0) * 1/int32 GETELEMPTR %31004, int32{0}, int32{3}
        %31006 1/int32 LD %31005
        %31007 1/int32 AND %31006, int32{31}
        %31008 1/int32 LSHR %31006, int32{5}
        %31009 1/int32 AND %31008, int32{3}
        %31010 1/int32 LSHR %31006, int32{7}
        %31011 1/int32 AND %31010, int32{127}
        %31012 1/int32 LSHR %31006, int32{14}
        %31013 1/int32 AND %31012, int32{4095}
        %31014 1/int32 LSHR %31006, int32{26}
        %31015 1/int32 AND %31014, int32{1}
        %31889 1/int64 intr.v_cmp_eq_u32 %31015, int32{0}
        %31890 1/int32 intr.v_cndmask_b32 %31167, %31166, %31889
        %31019 roshared(0) * 4/int32 GETELEMPTR %31003, int32{0}, %31007
        %31020 4/int32 LD %31019
        %31021 1/int32 intr.s_lshl4_add_u32 %31009, int32{786432}
        %31022 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31021
        %31023 1/int32 CONV %31022
        %31024 1/int32 SHUF %31020.w
        %31025 1/int32 AND %31024, int32{-524288}
        %31026 1/int32 SHL %31011, int32{12}
        %31027 1/int32 OR %31025, %31026
        %31028 1/int32 OR %31027, %31023
        %31891 1/int32 intr.s_cmov_scalar %31011, int32{0}, %31024, %31028, int32{0}
        %31030 4/int32 SHUF %31020.xyz-,  %31891.---x
        %31031 2/fp32 intr.buffer_load_format_xy %31890, %31030, %31013, int64{36029896530591744}
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16]
        %174 1/int32 LD %153
        %6882 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30340
        %6883 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %6882, int32{0}, %174
        %29434 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{0}
        %198 4/fp32 LD %29434
        %29436 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{1}
        %202 4/fp32 LD %29436
        %29438 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{2}
        %206 4/fp32 LD %29438
        %29440 robuffer(0) * 4/fp32 GETELEMPTR %6883, int32{0}, int32{3}
        %210 4/fp32 LD %29440
        %30606 1/fp32 MUL %198, %30932
        %30286 1/fp32 SHUF %30932.y
        %30607 1/fp32 MUL %202, %30286
        %30287 1/fp32 SHUF %30932.z
        %30608 1/fp32 MUL %206, %30287
        %30609 1/fp32 ADD %210, %30606
        %30610 1/fp32 ADD %30609, %30607
        %30611 1/fp32 ADD %30610, %30608
        %30288 1/fp32 SHUF %198.y
        %30612 1/fp32 MUL %30932, %30288
        %30289 1/fp32 SHUF %202.y
        %30613 1/fp32 MUL %30286, %30289
        %30291 1/fp32 SHUF %206.y
        %30614 1/fp32 MUL %30287, %30291
        %30293 1/fp32 SHUF %210.y
        %30615 1/fp32 ADD %30293, %30612
        %30616 1/fp32 ADD %30615, %30613
        %30617 1/fp32 ADD %30616, %30614
        %30294 1/fp32 SHUF %198.z
        %30618 1/fp32 MUL %30932, %30294
        %30295 1/fp32 SHUF %202.z
        %30619 1/fp32 MUL %30286, %30295
        %30297 1/fp32 SHUF %206.z
        %30620 1/fp32 MUL %30287, %30297
        %30299 1/fp32 SHUF %210.z
        %30621 1/fp32 ADD %30299, %30618
        %30622 1/fp32 ADD %30621, %30619
        %30623 1/fp32 ADD %30622, %30620
        %30300 1/fp32 SHUF %198.w
        %30624 1/fp32 MUL %30932, %30300
        %30301 1/fp32 SHUF %202.w
        %30625 1/fp32 MUL %30286, %30301
        %30303 1/fp32 SHUF %206.w
        %30626 1/fp32 MUL %30287, %30303
        %30305 1/fp32 SHUF %210.w
        %30627 1/fp32 ADD %30305, %30624
        %30628 1/fp32 ADD %30627, %30625
        %30629 1/fp32 ADD %30628, %30626
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16]
        %30630 1/fp32 MUL %6933, %30611
        %30631 1/fp32 MUL %6935, %30617
        %30632 1/fp32 MUL %6937, %30623
        %30633 1/fp32 MUL %6939, %30629
        %30634 1/fp32 ADD %30630, %30631
        %30635 1/fp32 ADD %30634, %30632
        %30636 1/fp32 ADD %30635, %30633
        %30306 1/fp32 SHUF %6933.y
        %30637 1/fp32 MUL %30306, %30611
        %30307 1/fp32 SHUF %6935.y
        %30638 1/fp32 MUL %30307, %30617
        %30308 1/fp32 SHUF %6937.y
        %30639 1/fp32 MUL %30308, %30623
        %30309 1/fp32 SHUF %6939.y
        %30640 1/fp32 MUL %30309, %30629
        %30641 1/fp32 ADD %30637, %30638
        %30642 1/fp32 ADD %30641, %30639
        %30643 1/fp32 ADD %30642, %30640
        %30310 1/fp32 SHUF %6933.z
        %30644 1/fp32 MUL %30310, %30611
        %30311 1/fp32 SHUF %6935.z
        %30645 1/fp32 MUL %30311, %30617
        %30312 1/fp32 SHUF %6937.z
        %30646 1/fp32 MUL %30312, %30623
        %30313 1/fp32 SHUF %6939.z
        %30647 1/fp32 MUL %30313, %30629
        %30648 1/fp32 ADD %30644, %30645
        %30649 1/fp32 ADD %30648, %30646
        %30650 1/fp32 ADD %30649, %30647
        %30314 1/fp32 SHUF %6933.w
        %30651 1/fp32 MUL %30314, %30611
        %30315 1/fp32 SHUF %6935.w
        %30652 1/fp32 MUL %30315, %30617
        %30316 1/fp32 SHUF %6937.w
        %30653 1/fp32 MUL %30316, %30623
        %30317 1/fp32 SHUF %6939.w
        %30654 1/fp32 MUL %30317, %30629
        %30655 1/fp32 ADD %30651, %30652
        %30656 1/fp32 ADD %30655, %30653
        %30657 1/fp32 ADD %30656, %30654
        %30658 1/fp32 MUL %198, %30965
        %30145 1/fp32 SHUF %30965.y
        %30659 1/fp32 MUL %202, %30145
        %30149 1/fp32 SHUF %30965.z
        %30660 1/fp32 MUL %206, %30149
        %30661 1/fp32 ADD %30658, %30659
        %30662 1/fp32 ADD %30661, %30660
        %30663 1/fp32 MUL %30965, %30288
        %30664 1/fp32 MUL %30145, %30289
        %30665 1/fp32 MUL %30149, %30291
        %30666 1/fp32 ADD %30663, %30664
        %30667 1/fp32 ADD %30666, %30665
        %30668 1/fp32 MUL %30965, %30294
        %30669 1/fp32 MUL %30145, %30295
        %30670 1/fp32 MUL %30149, %30297
        %30671 1/fp32 ADD %30668, %30669
        %30672 1/fp32 ADD %30671, %30670
        %30673 1/fp32 MUL %30662, %30662
        %30674 1/fp32 MUL %30667, %30667
        %30675 1/fp32 MUL %30672, %30672
        %30676 1/fp32 ADD %30673, %30674
        %30677 1/fp32 ADD %30676, %30675
        %30018 1/fp32 RSQ %30677
        %30678 1/fp32 MUL %30018, %30662
        %30679 1/fp32 MUL %30018, %30667
        %30680 1/fp32 MUL %30018, %30672
        %30681 1/fp32 MUL %198, %30998
        %30189 1/fp32 SHUF %30998.y
        %30682 1/fp32 MUL %202, %30189
        %30193 1/fp32 SHUF %30998.z
        %30683 1/fp32 MUL %206, %30193
        %30684 1/fp32 ADD %30681, %30682
        %30685 1/fp32 ADD %30684, %30683
        %30686 1/fp32 MUL %30998, %30288
        %30687 1/fp32 MUL %30189, %30289
        %30688 1/fp32 MUL %30193, %30291
        %30689 1/fp32 ADD %30686, %30687
        %30690 1/fp32 ADD %30689, %30688
        %30691 1/fp32 MUL %30998, %30294
        %30692 1/fp32 MUL %30189, %30295
        %30693 1/fp32 MUL %30193, %30297
        %30694 1/fp32 ADD %30691, %30692
        %30695 1/fp32 ADD %30694, %30693
        %30696 1/fp32 MUL %30685, %30685
        %30697 1/fp32 MUL %30690, %30690
        %30698 1/fp32 MUL %30695, %30695
        %30699 1/fp32 ADD %30696, %30697
        %30700 1/fp32 ADD %30699, %30698
        %30014 1/fp32 RSQ %30700
        %30701 1/fp32 MUL %30014, %30685
        %30702 1/fp32 MUL %30014, %30690
        %30703 1/fp32 MUL %30014, %30695
        %30704 1/fp32 MUL %30145, %30193
        %30705 1/fp32 MUL %30998, %30149
        %30706 1/fp32 MUL %30965, %30189
        %30537 1/fp32 NEG %30149
        %30707 1/fp32 MUL %30189, %30537
        %30538 1/fp32 NEG %30965
        %30708 1/fp32 MUL %30193, %30538
        %30539 1/fp32 NEG %30145
        %30709 1/fp32 MUL %30998, %30539
        %30710 1/fp32 ADD %30704, %30707
        %30711 1/fp32 ADD %30705, %30708
        %30712 1/fp32 ADD %30706, %30709
        %31044 1/fp32 SHUF %31031.y
        %31672 1/int32 CONV_reinterp %31031
        %31673 1/int32 CONV_reinterp %31044
        %31681 1/int32 CONV_reinterp %30678
        %31682 1/int32 CONV_reinterp %30679
        %31683 1/int32 CONV_reinterp %30680
        %31690 1/int32 CONV_reinterp %30701
        %31691 1/int32 CONV_reinterp %30702
        %31692 1/int32 CONV_reinterp %30703
        %31699 1/int32 CONV_reinterp %30710
        %31700 1/int32 CONV_reinterp %30711
        %31701 1/int32 CONV_reinterp %30712
        %31708 1/int32 CONV_reinterp %30611
        %31709 1/int32 CONV_reinterp %30617
        %31710 1/int32 CONV_reinterp %30623
        %31711 1/int32 CONV_reinterp %30629
        %31332 void intr.EXPORT %30636, %30643, %30650, %30657, int32{3080204}, int32{0} pos0 x y z w done
        %31385 void intr.EXPORT %31672, %31673, %32250 1/int32 UNDEF, %32250 1/int32 UNDEF, int32{196640}, int32{0} param0 x y
        %31391 void intr.EXPORT %31681, %31682, %31683, %32250 1/int32 UNDEF, int32{458785}, int32{0} param1 x y z
        %31400 void intr.EXPORT %31690, %31691, %31692, %32250 1/int32 UNDEF, int32{458786}, int32{0} param2 x y z
        %31409 void intr.EXPORT %31699, %31700, %31701, %32250 1/int32 UNDEF, int32{458787}, int32{0} param3 x y z
        %31418 void intr.EXPORT %31708, %31709, %31710, %31711, int32{983076}, int32{0} param4 x y z w
        %31851 void BR 
        --> block:3

      block:3 - exit
        <-- block:32244, block:31717
        --> 


--------------------------------------------------------------------------------

>> pass 618/799: validate graph
    validate graph (0045C2BE)
>> pass 619/799: duplicate_get_elem_ptr
    duplicate_get_elem_ptr (8FE69A7F)
>> pass 620/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 621/799: validate graph
    validate graph (0045C2BE)
>> pass 622/799: legalizegetelem
    legalizegetelem (DA65C66F)
>> pass 623/799: validate graph
    validate graph (0045C2BE)
>> pass 624/799: constant propagation
    constant propagation (5CBB3303)
>> pass 625/799: validate graph
    validate graph (0045C2BE)
>> pass 626/799: legalize dwarf
    legalize dwarf (092DC1C4)
>> pass 627/799: validate graph
    validate graph (0045C2BE)
>> pass 628/799: lower cue resources
    lower cue resources (C2BA3850)
>> pass 629/799: validate graph
    validate graph (0045C2BE)
>> pass 630/799: lower bindless
    lower bindless (201F9C06)
>> pass 631/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 632/799: validate graph
    validate graph (0045C2BE)
>> pass 633/799: lower ptr_from_texture instructions
    lower ptr_from_texture instructions (0DF5FB89)
>> pass 634/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 635/799: validate graph
    validate graph (0045C2BE)
>> pass 636/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 637/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 638/799: validate graph
    validate graph (0045C2BE)
>> pass 639/799: loop analysis
    loop analysis (598E85BD)
>> pass 640/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 641/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 642/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 643/799: optimize loads and stores before lowering
    optimize loads and stores before lowering (EDB916CA)
>> pass 644/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 645/799: validate graph
    validate graph (0045C2BE)
>> pass 646/799: loop analysis
    loop analysis (598E85BD)
>> pass 647/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 648/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 649/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 650/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 651/799: R10SmartRemat
    R10SmartRemat (F8932196)
>> pass 652/799: validate graph
    validate graph (0045C2BE)
>> pass 653/799: memory checker
    memory checker (C7B1F49E)
>> pass 654/799: validate graph
    validate graph (0045C2BE)
>> pass 655/799: lower loads and stores
    lower loads and stores (402CD2A4)
>> pass 656/799: validate graph
    validate graph (0045C2BE)
>> pass 657/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 658/799: remove dead code
    remove dead code (B7E6F507)
>> pass 659/799: validate graph
    validate graph (0045C2BE)
>> pass 660/799: lower address computation
    lower address computation (1B5C9873)
>> pass 661/799: validate graph
    validate graph (0045C2BE)
>> pass 662/799: constant propagation
    constant propagation (5CBB3303)
>> pass 663/799: validate graph
    validate graph (0045C2BE)
>> pass 664/799: loop analysis
    loop analysis (598E85BD)
>> pass 665/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 666/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 667/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 668/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 669/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 670/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 671/799: validate graph
    validate graph (0045C2BE)
>> pass 672/799: loop analysis
    loop analysis (598E85BD)
>> pass 673/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 674/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 675/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 676/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 677/799: r10 scalar scalarizer
    r10 scalar scalarizer (8BB09927)
>> pass 678/799: validate graph
    validate graph (0045C2BE)
>> pass 679/799: r10 optimize discard
    r10 optimize discard (FBBC97CD)
>> pass 680/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 681/799: validate graph
    validate graph (0045C2BE)
>> pass 682/799: loop analysis
    loop analysis (598E85BD)
>> pass 683/799: structural analysis
    structural analysis (A71DE301)
>> pass 684/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 685/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 686/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 687/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 688/799: SLP vectorizer
    SLP vectorizer (638CA5BB)
>> pass 689/799: validate graph
    validate graph (0045C2BE)
>> pass 690/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 691/799: remove dead code
    remove dead code (B7E6F507)
>> pass 692/799: validate graph
    validate graph (0045C2BE)
>> pass 693/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 694/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 695/799: validate graph
    validate graph (0045C2BE)
>> pass 696/799: loop analysis
    loop analysis (598E85BD)
>> pass 697/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 698/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 699/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 700/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 701/799: instruction selection
    instruction selection (AB000BA5)
>> pass 702/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 703/799: validate graph
    validate graph (0045C2BE)
>> pass 704/799: loop analysis
    loop analysis (598E85BD)
>> pass 705/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 706/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 707/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 708/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 709/799: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 710/799: legalize intrinsics
    legalize intrinsics (F8DFB406)
>> pass 711/799: validate graph
    validate graph (0045C2BE)
>> pass 712/799: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 713/799: validate graph
    validate graph (0045C2BE)
>> pass 714/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 715/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 716/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 717/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 718/799: legalize values
    legalize values (3229DE24)
>> pass 719/799: validate graph
    validate graph (0045C2BE)
>> pass 720/799: constant propagation
    constant propagation (5CBB3303)
>> pass 721/799: validate graph
    validate graph (0045C2BE)
>> pass 722/799: simplify for demanded bits
    simplify for demanded bits (C26737CA)
>> pass 723/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 724/799: validate graph
    validate graph (0045C2BE)
>> pass 725/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 726/799: remove dead code
    remove dead code (B7E6F507)
>> pass 727/799: validate graph
    validate graph (0045C2BE)
>> pass 728/799: loop analysis
    loop analysis (598E85BD)
>> pass 729/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 730/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 731/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 732/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 733/799: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 734/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 735/799: validate graph
    validate graph (0045C2BE)
>> pass 736/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:32242

      block:32242
        <-- block:4
        %31162 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31163 1/int32 LSHR %31162, int32{8}[Uniformity(Program)]
        %31164 1/int32 AND %31163, int32{255}[Uniformity(Program)]
        %31165 1/int32 AND %31162, int32{255}[Uniformity(Program)]
        %31172 1/int32 SHL %31164, int32{12}[Uniformity(Program)]
        %31173 1/int32 OR %31165, %31172[Uniformity(Program)]
        %31174 void intr.s_sendmsg %31173, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32418 1/int32 intr.s_sub_i32 int32{64}, %31164[Uniformity(Program)]
        %32421 1/int64 intr.s_lshr_b64 int64{-1}, %32418[Uniformity(Program)]
        %31179 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32421[Uniformity(Lane)] uniform_width
        %31180 1/int1 CMP.ne %31179, int32{0}[Uniformity(Lane)]
        %31181 void BRC %31180[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31307, block:32244

      block:31307
        <-- block:32242
        %31171 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31308 void intr.EXPORT %31171, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31309 void BR [Uniformity(Lane)]
        --> block:32244

      block:32244
        <-- block:31307, block:32242
        %32419 1/int32 intr.s_sub_i32 int32{64}, %31165[Uniformity(Program)]
        %32423 1/int64 intr.s_lshr_b64 int64{-1}, %32419[Uniformity(Program)]
        %31304 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32423[Uniformity(Lane)] uniform_width
        %31305 1/int1 CMP.ne %31304, int32{0}[Uniformity(Lane)]
        %31306 void BRC %31305[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31717, block:3

      block:31717
        <-- block:32244
        %31166 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31167 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %30896 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30897 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32389 1/int64 CONV_reinterp %30897[Uniformity(Program)]
        %32390 1/int64 CONV_reinterp %30896[Uniformity(Program)]
        %32256 1/int32 intr.s_load_dword %32390, int32{0}, int32{0}[Uniformity(Program)]
        %30905 1/int32 LSHR %32256, int32{5}[Uniformity(Program)]
        %30906 1/int32 AND %30905, int32{3}[Uniformity(Program)]
        %30907 1/int32 LSHR %32256, int32{7}[Uniformity(Program)]
        %30908 1/int32 AND %30907, int32{127}[Uniformity(Program)]
        %30909 1/int32 LSHR %32256, int32{14}[Uniformity(Program)]
        %30910 1/int32 AND %30909, int32{4095}[Uniformity(Program)]
        %30911 1/int32 LSHR %32256, int32{26}[Uniformity(Program)]
        %30912 1/int32 AND %30911, int32{1}[Uniformity(Program)]
        %31880 1/int64 intr.v_cmp_eq_u32 %30912, int32{0}[Uniformity(Program)]
        %31881 1/int32 intr.v_cndmask_b32 %31167, %31166, %31880[Uniformity(Lane)]
        %32405 1/int32 SHL %32256, int32{4}[Uniformity(Program)]
        %32408 1/int32 AND %32405, int32{496}[Uniformity(Program)]
        %32258 4/int32 intr.s_load_dwordx4 %32389, %32408, int32{0}[Uniformity(Program)]
        %30919 1/int32 intr.s_lshl4_add_u32 %30906, int32{786432}[Uniformity(Program)]
        %30921 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30919[Uniformity(Program)]
        %30922 1/int32 CONV %30921[Uniformity(Program)]
        %30923 1/int32 SHUF %32258.w[Uniformity(Program)]
        %30925 1/int32 AND %30923, int32{-524288}[Uniformity(Program)]
        %30926 1/int32 SHL %30908, int32{12}[Uniformity(Program)]
        %30927 1/int32 OR %30925, %30926[Uniformity(Program)]
        %30928 1/int32 OR %30927, %30922[Uniformity(Program)]
        %31882 1/int32 intr.s_cmov_scalar %30908, int32{0}, %30923, %30928, int32{0}[Uniformity(Program)]
        %30930 4/int32 SHUF %32258.xyz-,  %31882.---x[Uniformity(Program)]
        %30932 3/fp32 intr.buffer_load_format_xyz %31881, %30930, %30910, int64{36029896530591744}[Uniformity(Lane)]
        %30935 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30936 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32392 1/int64 CONV_reinterp %30936[Uniformity(Program)]
        %32393 1/int64 CONV_reinterp %30935[Uniformity(Program)]
        %32265 1/int32 intr.s_load_dword %32393, int32{4}, int32{0}[Uniformity(Program)]
        %30942 1/int32 LSHR %32265, int32{5}[Uniformity(Program)]
        %30943 1/int32 AND %30942, int32{3}[Uniformity(Program)]
        %30944 1/int32 LSHR %32265, int32{7}[Uniformity(Program)]
        %30945 1/int32 AND %30944, int32{127}[Uniformity(Program)]
        %30946 1/int32 LSHR %32265, int32{14}[Uniformity(Program)]
        %30947 1/int32 AND %30946, int32{4095}[Uniformity(Program)]
        %30948 1/int32 LSHR %32265, int32{26}[Uniformity(Program)]
        %30949 1/int32 AND %30948, int32{1}[Uniformity(Program)]
        %31883 1/int64 intr.v_cmp_eq_u32 %30949, int32{0}[Uniformity(Program)]
        %31884 1/int32 intr.v_cndmask_b32 %31167, %31166, %31883[Uniformity(Lane)]
        %32409 1/int32 SHL %32265, int32{4}[Uniformity(Program)]
        %32411 1/int32 AND %32409, int32{496}[Uniformity(Program)]
        %32267 4/int32 intr.s_load_dwordx4 %32392, %32411, int32{0}[Uniformity(Program)]
        %30955 1/int32 intr.s_lshl4_add_u32 %30943, int32{786432}[Uniformity(Program)]
        %30956 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30955[Uniformity(Program)]
        %30957 1/int32 CONV %30956[Uniformity(Program)]
        %30958 1/int32 SHUF %32267.w[Uniformity(Program)]
        %30959 1/int32 AND %30958, int32{-524288}[Uniformity(Program)]
        %30960 1/int32 SHL %30945, int32{12}[Uniformity(Program)]
        %30961 1/int32 OR %30959, %30960[Uniformity(Program)]
        %30962 1/int32 OR %30961, %30957[Uniformity(Program)]
        %31885 1/int32 intr.s_cmov_scalar %30945, int32{0}, %30958, %30962, int32{0}[Uniformity(Program)]
        %30964 4/int32 SHUF %32267.xyz-,  %31885.---x[Uniformity(Program)]
        %30965 3/fp32 intr.buffer_load_format_xyz %31884, %30964, %30947, int64{36029896530591744}[Uniformity(Lane)]
        %30968 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30969 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32395 1/int64 CONV_reinterp %30969[Uniformity(Program)]
        %32396 1/int64 CONV_reinterp %30968[Uniformity(Program)]
        %32274 1/int32 intr.s_load_dword %32396, int32{8}, int32{0}[Uniformity(Program)]
        %30975 1/int32 LSHR %32274, int32{5}[Uniformity(Program)]
        %30976 1/int32 AND %30975, int32{3}[Uniformity(Program)]
        %30977 1/int32 LSHR %32274, int32{7}[Uniformity(Program)]
        %30978 1/int32 AND %30977, int32{127}[Uniformity(Program)]
        %30979 1/int32 LSHR %32274, int32{14}[Uniformity(Program)]
        %30980 1/int32 AND %30979, int32{4095}[Uniformity(Program)]
        %30981 1/int32 LSHR %32274, int32{26}[Uniformity(Program)]
        %30982 1/int32 AND %30981, int32{1}[Uniformity(Program)]
        %31886 1/int64 intr.v_cmp_eq_u32 %30982, int32{0}[Uniformity(Program)]
        %31887 1/int32 intr.v_cndmask_b32 %31167, %31166, %31886[Uniformity(Lane)]
        %32412 1/int32 SHL %32274, int32{4}[Uniformity(Program)]
        %32414 1/int32 AND %32412, int32{496}[Uniformity(Program)]
        %32276 4/int32 intr.s_load_dwordx4 %32395, %32414, int32{0}[Uniformity(Program)]
        %30988 1/int32 intr.s_lshl4_add_u32 %30976, int32{786432}[Uniformity(Program)]
        %30989 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30988[Uniformity(Program)]
        %30990 1/int32 CONV %30989[Uniformity(Program)]
        %30991 1/int32 SHUF %32276.w[Uniformity(Program)]
        %30992 1/int32 AND %30991, int32{-524288}[Uniformity(Program)]
        %30993 1/int32 SHL %30978, int32{12}[Uniformity(Program)]
        %30994 1/int32 OR %30992, %30993[Uniformity(Program)]
        %30995 1/int32 OR %30994, %30990[Uniformity(Program)]
        %31888 1/int32 intr.s_cmov_scalar %30978, int32{0}, %30991, %30995, int32{0}[Uniformity(Program)]
        %30997 4/int32 SHUF %32276.xyz-,  %31888.---x[Uniformity(Program)]
        %30998 3/fp32 intr.buffer_load_format_xyz %31887, %30997, %30980, int64{36029896530591744}[Uniformity(Lane)]
        %31001 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31002 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32398 1/int64 CONV_reinterp %31002[Uniformity(Program)]
        %32399 1/int64 CONV_reinterp %31001[Uniformity(Program)]
        %32283 1/int32 intr.s_load_dword %32399, int32{12}, int32{0}[Uniformity(Program)]
        %31008 1/int32 LSHR %32283, int32{5}[Uniformity(Program)]
        %31009 1/int32 AND %31008, int32{3}[Uniformity(Program)]
        %31010 1/int32 LSHR %32283, int32{7}[Uniformity(Program)]
        %31011 1/int32 AND %31010, int32{127}[Uniformity(Program)]
        %31012 1/int32 LSHR %32283, int32{14}[Uniformity(Program)]
        %31013 1/int32 AND %31012, int32{4095}[Uniformity(Program)]
        %31014 1/int32 LSHR %32283, int32{26}[Uniformity(Program)]
        %31015 1/int32 AND %31014, int32{1}[Uniformity(Program)]
        %31889 1/int64 intr.v_cmp_eq_u32 %31015, int32{0}[Uniformity(Program)]
        %31890 1/int32 intr.v_cndmask_b32 %31167, %31166, %31889[Uniformity(Lane)]
        %32415 1/int32 SHL %32283, int32{4}[Uniformity(Program)]
        %32417 1/int32 AND %32415, int32{496}[Uniformity(Program)]
        %32285 4/int32 intr.s_load_dwordx4 %32398, %32417, int32{0}[Uniformity(Program)]
        %31021 1/int32 intr.s_lshl4_add_u32 %31009, int32{786432}[Uniformity(Program)]
        %31022 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31021[Uniformity(Program)]
        %31023 1/int32 CONV %31022[Uniformity(Program)]
        %31024 1/int32 SHUF %32285.w[Uniformity(Program)]
        %31025 1/int32 AND %31024, int32{-524288}[Uniformity(Program)]
        %31026 1/int32 SHL %31011, int32{12}[Uniformity(Program)]
        %31027 1/int32 OR %31025, %31026[Uniformity(Program)]
        %31028 1/int32 OR %31027, %31023[Uniformity(Program)]
        %31891 1/int32 intr.s_cmov_scalar %31011, int32{0}, %31024, %31028, int32{0}[Uniformity(Program)]
        %31030 4/int32 SHUF %32285.xyz-,  %31891.---x[Uniformity(Program)]
        %31031 2/fp32 intr.buffer_load_format_xy %31890, %31030, %31013, int64{36029896530591744}[Uniformity(Lane)]
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16][Uniformity(Program)]
        %174 1/int32 LD %153[Uniformity(Program)]
        %32291 4/int32 intr.GET_VSHARP %30340[Uniformity(Program)]
        %32401 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32299 4/int32 intr.s_buffer_load_dwordx4 %32291, %32401, int32{0}[Uniformity(Program)]
        %32305 4/fp32 CONV_reinterp %32299[Uniformity(Program)]
        %32402 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32312 1/int32 ADD int32{16}, %32402[Uniformity(Program)]
        %32313 4/int32 intr.s_buffer_load_dwordx4 %32291, %32312, int32{0}[Uniformity(Program)]
        %32319 4/fp32 CONV_reinterp %32313[Uniformity(Program)]
        %32403 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32326 1/int32 ADD int32{32}, %32403[Uniformity(Program)]
        %32327 4/int32 intr.s_buffer_load_dwordx4 %32291, %32326, int32{0}[Uniformity(Program)]
        %32333 4/fp32 CONV_reinterp %32327[Uniformity(Program)]
        %32404 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32340 1/int32 ADD int32{48}, %32404[Uniformity(Program)]
        %32341 4/int32 intr.s_buffer_load_dwordx4 %32291, %32340, int32{0}[Uniformity(Program)]
        %32347 4/fp32 CONV_reinterp %32341[Uniformity(Program)]
        %30606 1/fp32 MUL %32305, %30932[Uniformity(Lane)]
        %30286 1/fp32 SHUF %30932.y[Uniformity(Lane)]
        %30607 1/fp32 MUL %32319, %30286[Uniformity(Lane)]
        %30287 1/fp32 SHUF %30932.z[Uniformity(Lane)]
        %30608 1/fp32 MUL %32333, %30287[Uniformity(Lane)]
        %30609 1/fp32 ADD %32347, %30606[Uniformity(Lane)]
        %30610 1/fp32 ADD %30609, %30607[Uniformity(Lane)]
        %30611 1/fp32 ADD %30610, %30608[Uniformity(Lane)]
        %30288 1/fp32 SHUF %32305.y[Uniformity(Program)]
        %30612 1/fp32 MUL %30932, %30288[Uniformity(Lane)]
        %30289 1/fp32 SHUF %32319.y[Uniformity(Program)]
        %30613 1/fp32 MUL %30286, %30289[Uniformity(Lane)]
        %30291 1/fp32 SHUF %32333.y[Uniformity(Program)]
        %30614 1/fp32 MUL %30287, %30291[Uniformity(Lane)]
        %30293 1/fp32 SHUF %32347.y[Uniformity(Program)]
        %30615 1/fp32 ADD %30293, %30612[Uniformity(Lane)]
        %30616 1/fp32 ADD %30615, %30613[Uniformity(Lane)]
        %30617 1/fp32 ADD %30616, %30614[Uniformity(Lane)]
        %30294 1/fp32 SHUF %32305.z[Uniformity(Program)]
        %30618 1/fp32 MUL %30932, %30294[Uniformity(Lane)]
        %30295 1/fp32 SHUF %32319.z[Uniformity(Program)]
        %30619 1/fp32 MUL %30286, %30295[Uniformity(Lane)]
        %30297 1/fp32 SHUF %32333.z[Uniformity(Program)]
        %30620 1/fp32 MUL %30287, %30297[Uniformity(Lane)]
        %30299 1/fp32 SHUF %32347.z[Uniformity(Program)]
        %30621 1/fp32 ADD %30299, %30618[Uniformity(Lane)]
        %30622 1/fp32 ADD %30621, %30619[Uniformity(Lane)]
        %30623 1/fp32 ADD %30622, %30620[Uniformity(Lane)]
        %30300 1/fp32 SHUF %32305.w[Uniformity(Program)]
        %30624 1/fp32 MUL %30932, %30300[Uniformity(Lane)]
        %30301 1/fp32 SHUF %32319.w[Uniformity(Program)]
        %30625 1/fp32 MUL %30286, %30301[Uniformity(Lane)]
        %30303 1/fp32 SHUF %32333.w[Uniformity(Program)]
        %30626 1/fp32 MUL %30287, %30303[Uniformity(Lane)]
        %30305 1/fp32 SHUF %32347.w[Uniformity(Program)]
        %30627 1/fp32 ADD %30305, %30624[Uniformity(Lane)]
        %30628 1/fp32 ADD %30627, %30625[Uniformity(Lane)]
        %30629 1/fp32 ADD %30628, %30626[Uniformity(Lane)]
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}[Uniformity(Program)]
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}[Uniformity(Program)]
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}[Uniformity(Program)]
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}[Uniformity(Program)]
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30630 1/fp32 MUL %6933, %30611[Uniformity(Lane)]
        %30631 1/fp32 MUL %6935, %30617[Uniformity(Lane)]
        %30632 1/fp32 MUL %6937, %30623[Uniformity(Lane)]
        %30633 1/fp32 MUL %6939, %30629[Uniformity(Lane)]
        %30634 1/fp32 ADD %30630, %30631[Uniformity(Lane)]
        %30635 1/fp32 ADD %30634, %30632[Uniformity(Lane)]
        %30636 1/fp32 ADD %30635, %30633[Uniformity(Lane)]
        %30306 1/fp32 SHUF %6933.y[Uniformity(Program)]
        %30637 1/fp32 MUL %30306, %30611[Uniformity(Lane)]
        %30307 1/fp32 SHUF %6935.y[Uniformity(Program)]
        %30638 1/fp32 MUL %30307, %30617[Uniformity(Lane)]
        %30308 1/fp32 SHUF %6937.y[Uniformity(Program)]
        %30639 1/fp32 MUL %30308, %30623[Uniformity(Lane)]
        %30309 1/fp32 SHUF %6939.y[Uniformity(Program)]
        %30640 1/fp32 MUL %30309, %30629[Uniformity(Lane)]
        %30641 1/fp32 ADD %30637, %30638[Uniformity(Lane)]
        %30642 1/fp32 ADD %30641, %30639[Uniformity(Lane)]
        %30643 1/fp32 ADD %30642, %30640[Uniformity(Lane)]
        %30310 1/fp32 SHUF %6933.z[Uniformity(Program)]
        %30644 1/fp32 MUL %30310, %30611[Uniformity(Lane)]
        %30311 1/fp32 SHUF %6935.z[Uniformity(Program)]
        %30645 1/fp32 MUL %30311, %30617[Uniformity(Lane)]
        %30312 1/fp32 SHUF %6937.z[Uniformity(Program)]
        %30646 1/fp32 MUL %30312, %30623[Uniformity(Lane)]
        %30313 1/fp32 SHUF %6939.z[Uniformity(Program)]
        %30647 1/fp32 MUL %30313, %30629[Uniformity(Lane)]
        %30648 1/fp32 ADD %30644, %30645[Uniformity(Lane)]
        %30649 1/fp32 ADD %30648, %30646[Uniformity(Lane)]
        %30650 1/fp32 ADD %30649, %30647[Uniformity(Lane)]
        %30314 1/fp32 SHUF %6933.w[Uniformity(Program)]
        %30651 1/fp32 MUL %30314, %30611[Uniformity(Lane)]
        %30315 1/fp32 SHUF %6935.w[Uniformity(Program)]
        %30652 1/fp32 MUL %30315, %30617[Uniformity(Lane)]
        %30316 1/fp32 SHUF %6937.w[Uniformity(Program)]
        %30653 1/fp32 MUL %30316, %30623[Uniformity(Lane)]
        %30317 1/fp32 SHUF %6939.w[Uniformity(Program)]
        %30654 1/fp32 MUL %30317, %30629[Uniformity(Lane)]
        %30655 1/fp32 ADD %30651, %30652[Uniformity(Lane)]
        %30656 1/fp32 ADD %30655, %30653[Uniformity(Lane)]
        %30657 1/fp32 ADD %30656, %30654[Uniformity(Lane)]
        %30658 1/fp32 MUL %32305, %30965[Uniformity(Lane)]
        %30145 1/fp32 SHUF %30965.y[Uniformity(Lane)]
        %30659 1/fp32 MUL %32319, %30145[Uniformity(Lane)]
        %30149 1/fp32 SHUF %30965.z[Uniformity(Lane)]
        %30660 1/fp32 MUL %32333, %30149[Uniformity(Lane)]
        %30661 1/fp32 ADD %30658, %30659[Uniformity(Lane)]
        %30662 1/fp32 ADD %30661, %30660[Uniformity(Lane)]
        %30663 1/fp32 MUL %30965, %30288[Uniformity(Lane)]
        %30664 1/fp32 MUL %30145, %30289[Uniformity(Lane)]
        %30665 1/fp32 MUL %30149, %30291[Uniformity(Lane)]
        %30666 1/fp32 ADD %30663, %30664[Uniformity(Lane)]
        %30667 1/fp32 ADD %30666, %30665[Uniformity(Lane)]
        %30668 1/fp32 MUL %30965, %30294[Uniformity(Lane)]
        %30669 1/fp32 MUL %30145, %30295[Uniformity(Lane)]
        %30670 1/fp32 MUL %30149, %30297[Uniformity(Lane)]
        %30671 1/fp32 ADD %30668, %30669[Uniformity(Lane)]
        %30672 1/fp32 ADD %30671, %30670[Uniformity(Lane)]
        %30673 1/fp32 MUL %30662, %30662[Uniformity(Lane)]
        %30674 1/fp32 MUL %30667, %30667[Uniformity(Lane)]
        %30675 1/fp32 MUL %30672, %30672[Uniformity(Lane)]
        %30676 1/fp32 ADD %30673, %30674[Uniformity(Lane)]
        %30677 1/fp32 ADD %30676, %30675[Uniformity(Lane)]
        %30018 1/fp32 RSQ %30677[Uniformity(Lane)]
        %30678 1/fp32 MUL %30018, %30662[Uniformity(Lane)]
        %30679 1/fp32 MUL %30018, %30667[Uniformity(Lane)]
        %30680 1/fp32 MUL %30018, %30672[Uniformity(Lane)]
        %30681 1/fp32 MUL %32305, %30998[Uniformity(Lane)]
        %30189 1/fp32 SHUF %30998.y[Uniformity(Lane)]
        %30682 1/fp32 MUL %32319, %30189[Uniformity(Lane)]
        %30193 1/fp32 SHUF %30998.z[Uniformity(Lane)]
        %30683 1/fp32 MUL %32333, %30193[Uniformity(Lane)]
        %30684 1/fp32 ADD %30681, %30682[Uniformity(Lane)]
        %30685 1/fp32 ADD %30684, %30683[Uniformity(Lane)]
        %30686 1/fp32 MUL %30998, %30288[Uniformity(Lane)]
        %30687 1/fp32 MUL %30189, %30289[Uniformity(Lane)]
        %30688 1/fp32 MUL %30193, %30291[Uniformity(Lane)]
        %30689 1/fp32 ADD %30686, %30687[Uniformity(Lane)]
        %30690 1/fp32 ADD %30689, %30688[Uniformity(Lane)]
        %30691 1/fp32 MUL %30998, %30294[Uniformity(Lane)]
        %30692 1/fp32 MUL %30189, %30295[Uniformity(Lane)]
        %30693 1/fp32 MUL %30193, %30297[Uniformity(Lane)]
        %30694 1/fp32 ADD %30691, %30692[Uniformity(Lane)]
        %30695 1/fp32 ADD %30694, %30693[Uniformity(Lane)]
        %30696 1/fp32 MUL %30685, %30685[Uniformity(Lane)]
        %30697 1/fp32 MUL %30690, %30690[Uniformity(Lane)]
        %30698 1/fp32 MUL %30695, %30695[Uniformity(Lane)]
        %30699 1/fp32 ADD %30696, %30697[Uniformity(Lane)]
        %30700 1/fp32 ADD %30699, %30698[Uniformity(Lane)]
        %30014 1/fp32 RSQ %30700[Uniformity(Lane)]
        %30701 1/fp32 MUL %30014, %30685[Uniformity(Lane)]
        %30702 1/fp32 MUL %30014, %30690[Uniformity(Lane)]
        %30703 1/fp32 MUL %30014, %30695[Uniformity(Lane)]
        %30704 1/fp32 MUL %30145, %30193[Uniformity(Lane)]
        %30705 1/fp32 MUL %30998, %30149[Uniformity(Lane)]
        %30706 1/fp32 MUL %30965, %30189[Uniformity(Lane)]
        %30537 1/fp32 NEG %30149[Uniformity(Lane)]
        %30707 1/fp32 MUL %30189, %30537[Uniformity(Lane)]
        %30538 1/fp32 NEG %30965[Uniformity(Lane)]
        %30708 1/fp32 MUL %30193, %30538[Uniformity(Lane)]
        %30539 1/fp32 NEG %30145[Uniformity(Lane)]
        %30709 1/fp32 MUL %30998, %30539[Uniformity(Lane)]
        %30710 1/fp32 ADD %30704, %30707[Uniformity(Lane)]
        %30711 1/fp32 ADD %30705, %30708[Uniformity(Lane)]
        %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
        %31044 1/fp32 SHUF %31031.y[Uniformity(Lane)]
        %31672 1/int32 CONV_reinterp %31031[Uniformity(Lane)]
        %31332 void intr.EXPORT %30636, %30643, %30650, %30657, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31385 void intr.EXPORT %31672, %31044, %32250 1/int32 UNDEF, %32250 1/int32 UNDEF, int32{196640}, int32{0}[Uniformity(Lane)] param0 x y
        %31391 void intr.EXPORT %30678, %30679, %30680, %32250 1/int32 UNDEF, int32{458785}, int32{0}[Uniformity(Lane)] param1 x y z
        %31400 void intr.EXPORT %30701, %30702, %30703, %32250 1/int32 UNDEF, int32{458786}, int32{0}[Uniformity(Lane)] param2 x y z
        %31409 void intr.EXPORT %30710, %30711, %30712, %32250 1/int32 UNDEF, int32{458787}, int32{0}[Uniformity(Lane)] param3 x y z
        %31418 void intr.EXPORT %30611, %30617, %30623, %30629, int32{983076}, int32{0}[Uniformity(Lane)] param4 x y z w
        %31851 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:32244, block:31717
        --> 


--------------------------------------------------------------------------------

>> pass 737/799: validate graph
    validate graph (0045C2BE)
>> pass 738/799: loop analysis
    loop analysis (598E85BD)
>> pass 739/799: fix subvector PHIs
    fix subvector PHIs (C8DE249A)
>> pass 740/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 741/799: validate graph
    validate graph (0045C2BE)
>> pass 742/799: loop analysis
    loop analysis (598E85BD)
>> pass 743/799: r10subvector
    r10subvector (7E0E5361)
>> pass 744/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 745/799: validate graph
    validate graph (0045C2BE)
>> pass 746/799: loop analysis
    loop analysis (598E85BD)
>> pass 747/799: remove isolate
    remove isolate (792AD9CA)
>> pass 748/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 749/799: validate graph
    validate graph (0045C2BE)
>> pass 750/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:32242

      block:32242
        <-- block:4
        %31162 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31163 1/int32 LSHR %31162, int32{8}[Uniformity(Program)]
        %31164 1/int32 AND %31163, int32{255}[Uniformity(Program)]
        %31165 1/int32 AND %31162, int32{255}[Uniformity(Program)]
        %31172 1/int32 SHL %31164, int32{12}[Uniformity(Program)]
        %31173 1/int32 OR %31165, %31172[Uniformity(Program)]
        %31174 void intr.s_sendmsg %31173, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32418 1/int32 intr.s_sub_i32 int32{64}, %31164[Uniformity(Program)]
        %32421 1/int64 intr.s_lshr_b64 int64{-1}, %32418[Uniformity(Program)]
        %31179 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32421[Uniformity(Lane)] uniform_width
        %31180 1/int1 CMP.ne %31179, int32{0}[Uniformity(Lane)]
        %31181 void BRC %31180[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31307, block:32244

      block:31307
        <-- block:32242
        %31171 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31308 void intr.EXPORT %31171, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31309 void BR [Uniformity(Lane)]
        --> block:32244

      block:32244
        <-- block:31307, block:32242
        %32419 1/int32 intr.s_sub_i32 int32{64}, %31165[Uniformity(Program)]
        %32423 1/int64 intr.s_lshr_b64 int64{-1}, %32419[Uniformity(Program)]
        %31304 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32423[Uniformity(Lane)] uniform_width
        %31305 1/int1 CMP.ne %31304, int32{0}[Uniformity(Lane)]
        %31306 void BRC %31305[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31717, block:3

      block:31717
        <-- block:32244
        %31166 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31167 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %30896 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30897 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32389 1/int64 CONV_reinterp %30897[Uniformity(Program)]
        %32390 1/int64 CONV_reinterp %30896[Uniformity(Program)]
        %32256 1/int32 intr.s_load_dword %32390, int32{0}, int32{0}[Uniformity(Program)]
        %30905 1/int32 LSHR %32256, int32{5}[Uniformity(Program)]
        %30906 1/int32 AND %30905, int32{3}[Uniformity(Program)]
        %30907 1/int32 LSHR %32256, int32{7}[Uniformity(Program)]
        %30908 1/int32 AND %30907, int32{127}[Uniformity(Program)]
        %30909 1/int32 LSHR %32256, int32{14}[Uniformity(Program)]
        %30910 1/int32 AND %30909, int32{4095}[Uniformity(Program)]
        %30911 1/int32 LSHR %32256, int32{26}[Uniformity(Program)]
        %30912 1/int32 AND %30911, int32{1}[Uniformity(Program)]
        %31880 1/int64 intr.v_cmp_eq_u32 %30912, int32{0}[Uniformity(Program)]
        %31881 1/int32 intr.v_cndmask_b32 %31167, %31166, %31880[Uniformity(Lane)]
        %32405 1/int32 SHL %32256, int32{4}[Uniformity(Program)]
        %32408 1/int32 AND %32405, int32{496}[Uniformity(Program)]
        %32258 4/int32 intr.s_load_dwordx4 %32389, %32408, int32{0}[Uniformity(Program)]
        %30919 1/int32 intr.s_lshl4_add_u32 %30906, int32{786432}[Uniformity(Program)]
        %30921 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30919[Uniformity(Program)]
        %30922 1/int32 CONV %30921[Uniformity(Program)]
        %30923 1/int32 SHUF %32258.w[Uniformity(Program)]
        %30925 1/int32 AND %30923, int32{-524288}[Uniformity(Program)]
        %30926 1/int32 SHL %30908, int32{12}[Uniformity(Program)]
        %30927 1/int32 OR %30925, %30926[Uniformity(Program)]
        %30928 1/int32 OR %30927, %30922[Uniformity(Program)]
        %31882 1/int32 intr.s_cmov_scalar %30908, int32{0}, %30923, %30928, int32{0}[Uniformity(Program)]
        %30930 4/int32 SHUF %32258.xyz-,  %31882.---x[Uniformity(Program)]
        %30932 3/fp32 intr.buffer_load_format_xyz %31881, %30930, %30910, int64{36029896530591744}[Uniformity(Lane)]
        %30935 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30936 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32392 1/int64 CONV_reinterp %30936[Uniformity(Program)]
        %32393 1/int64 CONV_reinterp %30935[Uniformity(Program)]
        %32265 1/int32 intr.s_load_dword %32393, int32{4}, int32{0}[Uniformity(Program)]
        %30942 1/int32 LSHR %32265, int32{5}[Uniformity(Program)]
        %30943 1/int32 AND %30942, int32{3}[Uniformity(Program)]
        %30944 1/int32 LSHR %32265, int32{7}[Uniformity(Program)]
        %30945 1/int32 AND %30944, int32{127}[Uniformity(Program)]
        %30946 1/int32 LSHR %32265, int32{14}[Uniformity(Program)]
        %30947 1/int32 AND %30946, int32{4095}[Uniformity(Program)]
        %30948 1/int32 LSHR %32265, int32{26}[Uniformity(Program)]
        %30949 1/int32 AND %30948, int32{1}[Uniformity(Program)]
        %31883 1/int64 intr.v_cmp_eq_u32 %30949, int32{0}[Uniformity(Program)]
        %31884 1/int32 intr.v_cndmask_b32 %31167, %31166, %31883[Uniformity(Lane)]
        %32409 1/int32 SHL %32265, int32{4}[Uniformity(Program)]
        %32411 1/int32 AND %32409, int32{496}[Uniformity(Program)]
        %32267 4/int32 intr.s_load_dwordx4 %32392, %32411, int32{0}[Uniformity(Program)]
        %30955 1/int32 intr.s_lshl4_add_u32 %30943, int32{786432}[Uniformity(Program)]
        %30956 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30955[Uniformity(Program)]
        %30957 1/int32 CONV %30956[Uniformity(Program)]
        %30958 1/int32 SHUF %32267.w[Uniformity(Program)]
        %30959 1/int32 AND %30958, int32{-524288}[Uniformity(Program)]
        %30960 1/int32 SHL %30945, int32{12}[Uniformity(Program)]
        %30961 1/int32 OR %30959, %30960[Uniformity(Program)]
        %30962 1/int32 OR %30961, %30957[Uniformity(Program)]
        %31885 1/int32 intr.s_cmov_scalar %30945, int32{0}, %30958, %30962, int32{0}[Uniformity(Program)]
        %30964 4/int32 SHUF %32267.xyz-,  %31885.---x[Uniformity(Program)]
        %30965 3/fp32 intr.buffer_load_format_xyz %31884, %30964, %30947, int64{36029896530591744}[Uniformity(Lane)]
        %30968 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30969 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32395 1/int64 CONV_reinterp %30969[Uniformity(Program)]
        %32396 1/int64 CONV_reinterp %30968[Uniformity(Program)]
        %32274 1/int32 intr.s_load_dword %32396, int32{8}, int32{0}[Uniformity(Program)]
        %30975 1/int32 LSHR %32274, int32{5}[Uniformity(Program)]
        %30976 1/int32 AND %30975, int32{3}[Uniformity(Program)]
        %30977 1/int32 LSHR %32274, int32{7}[Uniformity(Program)]
        %30978 1/int32 AND %30977, int32{127}[Uniformity(Program)]
        %30979 1/int32 LSHR %32274, int32{14}[Uniformity(Program)]
        %30980 1/int32 AND %30979, int32{4095}[Uniformity(Program)]
        %30981 1/int32 LSHR %32274, int32{26}[Uniformity(Program)]
        %30982 1/int32 AND %30981, int32{1}[Uniformity(Program)]
        %31886 1/int64 intr.v_cmp_eq_u32 %30982, int32{0}[Uniformity(Program)]
        %31887 1/int32 intr.v_cndmask_b32 %31167, %31166, %31886[Uniformity(Lane)]
        %32412 1/int32 SHL %32274, int32{4}[Uniformity(Program)]
        %32414 1/int32 AND %32412, int32{496}[Uniformity(Program)]
        %32276 4/int32 intr.s_load_dwordx4 %32395, %32414, int32{0}[Uniformity(Program)]
        %30988 1/int32 intr.s_lshl4_add_u32 %30976, int32{786432}[Uniformity(Program)]
        %30989 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30988[Uniformity(Program)]
        %30990 1/int32 CONV %30989[Uniformity(Program)]
        %30991 1/int32 SHUF %32276.w[Uniformity(Program)]
        %30992 1/int32 AND %30991, int32{-524288}[Uniformity(Program)]
        %30993 1/int32 SHL %30978, int32{12}[Uniformity(Program)]
        %30994 1/int32 OR %30992, %30993[Uniformity(Program)]
        %30995 1/int32 OR %30994, %30990[Uniformity(Program)]
        %31888 1/int32 intr.s_cmov_scalar %30978, int32{0}, %30991, %30995, int32{0}[Uniformity(Program)]
        %30997 4/int32 SHUF %32276.xyz-,  %31888.---x[Uniformity(Program)]
        %30998 3/fp32 intr.buffer_load_format_xyz %31887, %30997, %30980, int64{36029896530591744}[Uniformity(Lane)]
        %31001 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31002 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32398 1/int64 CONV_reinterp %31002[Uniformity(Program)]
        %32399 1/int64 CONV_reinterp %31001[Uniformity(Program)]
        %32283 1/int32 intr.s_load_dword %32399, int32{12}, int32{0}[Uniformity(Program)]
        %31008 1/int32 LSHR %32283, int32{5}[Uniformity(Program)]
        %31009 1/int32 AND %31008, int32{3}[Uniformity(Program)]
        %31010 1/int32 LSHR %32283, int32{7}[Uniformity(Program)]
        %31011 1/int32 AND %31010, int32{127}[Uniformity(Program)]
        %31012 1/int32 LSHR %32283, int32{14}[Uniformity(Program)]
        %31013 1/int32 AND %31012, int32{4095}[Uniformity(Program)]
        %31014 1/int32 LSHR %32283, int32{26}[Uniformity(Program)]
        %31015 1/int32 AND %31014, int32{1}[Uniformity(Program)]
        %31889 1/int64 intr.v_cmp_eq_u32 %31015, int32{0}[Uniformity(Program)]
        %31890 1/int32 intr.v_cndmask_b32 %31167, %31166, %31889[Uniformity(Lane)]
        %32415 1/int32 SHL %32283, int32{4}[Uniformity(Program)]
        %32417 1/int32 AND %32415, int32{496}[Uniformity(Program)]
        %32285 4/int32 intr.s_load_dwordx4 %32398, %32417, int32{0}[Uniformity(Program)]
        %31021 1/int32 intr.s_lshl4_add_u32 %31009, int32{786432}[Uniformity(Program)]
        %31022 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31021[Uniformity(Program)]
        %31023 1/int32 CONV %31022[Uniformity(Program)]
        %31024 1/int32 SHUF %32285.w[Uniformity(Program)]
        %31025 1/int32 AND %31024, int32{-524288}[Uniformity(Program)]
        %31026 1/int32 SHL %31011, int32{12}[Uniformity(Program)]
        %31027 1/int32 OR %31025, %31026[Uniformity(Program)]
        %31028 1/int32 OR %31027, %31023[Uniformity(Program)]
        %31891 1/int32 intr.s_cmov_scalar %31011, int32{0}, %31024, %31028, int32{0}[Uniformity(Program)]
        %31030 4/int32 SHUF %32285.xyz-,  %31891.---x[Uniformity(Program)]
        %31031 2/fp32 intr.buffer_load_format_xy %31890, %31030, %31013, int64{36029896530591744}[Uniformity(Lane)]
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16][Uniformity(Program)]
        %174 1/int32 LD %153[Uniformity(Program)]
        %32291 4/int32 intr.GET_VSHARP %30340[Uniformity(Program)]
        %32401 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32299 4/int32 intr.s_buffer_load_dwordx4 %32291, %32401, int32{0}[Uniformity(Program)]
        %32305 4/fp32 CONV_reinterp %32299[Uniformity(Program)]
        %32402 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32312 1/int32 ADD int32{16}, %32402[Uniformity(Program)]
        %32313 4/int32 intr.s_buffer_load_dwordx4 %32291, %32312, int32{0}[Uniformity(Program)]
        %32319 4/fp32 CONV_reinterp %32313[Uniformity(Program)]
        %32403 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32326 1/int32 ADD int32{32}, %32403[Uniformity(Program)]
        %32327 4/int32 intr.s_buffer_load_dwordx4 %32291, %32326, int32{0}[Uniformity(Program)]
        %32333 4/fp32 CONV_reinterp %32327[Uniformity(Program)]
        %32404 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32340 1/int32 ADD int32{48}, %32404[Uniformity(Program)]
        %32341 4/int32 intr.s_buffer_load_dwordx4 %32291, %32340, int32{0}[Uniformity(Program)]
        %32347 4/fp32 CONV_reinterp %32341[Uniformity(Program)]
        %30606 1/fp32 MUL %32305, %30932[Uniformity(Lane)]
        %30286 1/fp32 SHUF %30932.y[Uniformity(Lane)]
        %30607 1/fp32 MUL %32319, %30286[Uniformity(Lane)]
        %30287 1/fp32 SHUF %30932.z[Uniformity(Lane)]
        %30608 1/fp32 MUL %32333, %30287[Uniformity(Lane)]
        %30609 1/fp32 ADD %32347, %30606[Uniformity(Lane)]
        %30610 1/fp32 ADD %30609, %30607[Uniformity(Lane)]
        %30611 1/fp32 ADD %30610, %30608[Uniformity(Lane)]
        %30288 1/fp32 SHUF %32305.y[Uniformity(Program)]
        %30612 1/fp32 MUL %30932, %30288[Uniformity(Lane)]
        %30289 1/fp32 SHUF %32319.y[Uniformity(Program)]
        %30613 1/fp32 MUL %30286, %30289[Uniformity(Lane)]
        %30291 1/fp32 SHUF %32333.y[Uniformity(Program)]
        %30614 1/fp32 MUL %30287, %30291[Uniformity(Lane)]
        %30293 1/fp32 SHUF %32347.y[Uniformity(Program)]
        %30615 1/fp32 ADD %30293, %30612[Uniformity(Lane)]
        %30616 1/fp32 ADD %30615, %30613[Uniformity(Lane)]
        %30617 1/fp32 ADD %30616, %30614[Uniformity(Lane)]
        %30294 1/fp32 SHUF %32305.z[Uniformity(Program)]
        %30618 1/fp32 MUL %30932, %30294[Uniformity(Lane)]
        %30295 1/fp32 SHUF %32319.z[Uniformity(Program)]
        %30619 1/fp32 MUL %30286, %30295[Uniformity(Lane)]
        %30297 1/fp32 SHUF %32333.z[Uniformity(Program)]
        %30620 1/fp32 MUL %30287, %30297[Uniformity(Lane)]
        %30299 1/fp32 SHUF %32347.z[Uniformity(Program)]
        %30621 1/fp32 ADD %30299, %30618[Uniformity(Lane)]
        %30622 1/fp32 ADD %30621, %30619[Uniformity(Lane)]
        %30623 1/fp32 ADD %30622, %30620[Uniformity(Lane)]
        %30300 1/fp32 SHUF %32305.w[Uniformity(Program)]
        %30624 1/fp32 MUL %30932, %30300[Uniformity(Lane)]
        %30301 1/fp32 SHUF %32319.w[Uniformity(Program)]
        %30625 1/fp32 MUL %30286, %30301[Uniformity(Lane)]
        %30303 1/fp32 SHUF %32333.w[Uniformity(Program)]
        %30626 1/fp32 MUL %30287, %30303[Uniformity(Lane)]
        %30305 1/fp32 SHUF %32347.w[Uniformity(Program)]
        %30627 1/fp32 ADD %30305, %30624[Uniformity(Lane)]
        %30628 1/fp32 ADD %30627, %30625[Uniformity(Lane)]
        %30629 1/fp32 ADD %30628, %30626[Uniformity(Lane)]
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}[Uniformity(Program)]
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}[Uniformity(Program)]
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}[Uniformity(Program)]
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}[Uniformity(Program)]
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30630 1/fp32 MUL %6933, %30611[Uniformity(Lane)]
        %30631 1/fp32 MUL %6935, %30617[Uniformity(Lane)]
        %30632 1/fp32 MUL %6937, %30623[Uniformity(Lane)]
        %30633 1/fp32 MUL %6939, %30629[Uniformity(Lane)]
        %30634 1/fp32 ADD %30630, %30631[Uniformity(Lane)]
        %30635 1/fp32 ADD %30634, %30632[Uniformity(Lane)]
        %30636 1/fp32 ADD %30635, %30633[Uniformity(Lane)]
        %30306 1/fp32 SHUF %6933.y[Uniformity(Program)]
        %30637 1/fp32 MUL %30306, %30611[Uniformity(Lane)]
        %30307 1/fp32 SHUF %6935.y[Uniformity(Program)]
        %30638 1/fp32 MUL %30307, %30617[Uniformity(Lane)]
        %30308 1/fp32 SHUF %6937.y[Uniformity(Program)]
        %30639 1/fp32 MUL %30308, %30623[Uniformity(Lane)]
        %30309 1/fp32 SHUF %6939.y[Uniformity(Program)]
        %30640 1/fp32 MUL %30309, %30629[Uniformity(Lane)]
        %30641 1/fp32 ADD %30637, %30638[Uniformity(Lane)]
        %30642 1/fp32 ADD %30641, %30639[Uniformity(Lane)]
        %30643 1/fp32 ADD %30642, %30640[Uniformity(Lane)]
        %30310 1/fp32 SHUF %6933.z[Uniformity(Program)]
        %30644 1/fp32 MUL %30310, %30611[Uniformity(Lane)]
        %30311 1/fp32 SHUF %6935.z[Uniformity(Program)]
        %30645 1/fp32 MUL %30311, %30617[Uniformity(Lane)]
        %30312 1/fp32 SHUF %6937.z[Uniformity(Program)]
        %30646 1/fp32 MUL %30312, %30623[Uniformity(Lane)]
        %30313 1/fp32 SHUF %6939.z[Uniformity(Program)]
        %30647 1/fp32 MUL %30313, %30629[Uniformity(Lane)]
        %30648 1/fp32 ADD %30644, %30645[Uniformity(Lane)]
        %30649 1/fp32 ADD %30648, %30646[Uniformity(Lane)]
        %30650 1/fp32 ADD %30649, %30647[Uniformity(Lane)]
        %30314 1/fp32 SHUF %6933.w[Uniformity(Program)]
        %30651 1/fp32 MUL %30314, %30611[Uniformity(Lane)]
        %30315 1/fp32 SHUF %6935.w[Uniformity(Program)]
        %30652 1/fp32 MUL %30315, %30617[Uniformity(Lane)]
        %30316 1/fp32 SHUF %6937.w[Uniformity(Program)]
        %30653 1/fp32 MUL %30316, %30623[Uniformity(Lane)]
        %30317 1/fp32 SHUF %6939.w[Uniformity(Program)]
        %30654 1/fp32 MUL %30317, %30629[Uniformity(Lane)]
        %30655 1/fp32 ADD %30651, %30652[Uniformity(Lane)]
        %30656 1/fp32 ADD %30655, %30653[Uniformity(Lane)]
        %30657 1/fp32 ADD %30656, %30654[Uniformity(Lane)]
        %30658 1/fp32 MUL %32305, %30965[Uniformity(Lane)]
        %30145 1/fp32 SHUF %30965.y[Uniformity(Lane)]
        %30659 1/fp32 MUL %32319, %30145[Uniformity(Lane)]
        %30149 1/fp32 SHUF %30965.z[Uniformity(Lane)]
        %30660 1/fp32 MUL %32333, %30149[Uniformity(Lane)]
        %30661 1/fp32 ADD %30658, %30659[Uniformity(Lane)]
        %30662 1/fp32 ADD %30661, %30660[Uniformity(Lane)]
        %30663 1/fp32 MUL %30965, %30288[Uniformity(Lane)]
        %30664 1/fp32 MUL %30145, %30289[Uniformity(Lane)]
        %30665 1/fp32 MUL %30149, %30291[Uniformity(Lane)]
        %30666 1/fp32 ADD %30663, %30664[Uniformity(Lane)]
        %30667 1/fp32 ADD %30666, %30665[Uniformity(Lane)]
        %30668 1/fp32 MUL %30965, %30294[Uniformity(Lane)]
        %30669 1/fp32 MUL %30145, %30295[Uniformity(Lane)]
        %30670 1/fp32 MUL %30149, %30297[Uniformity(Lane)]
        %30671 1/fp32 ADD %30668, %30669[Uniformity(Lane)]
        %30672 1/fp32 ADD %30671, %30670[Uniformity(Lane)]
        %30673 1/fp32 MUL %30662, %30662[Uniformity(Lane)]
        %30674 1/fp32 MUL %30667, %30667[Uniformity(Lane)]
        %30675 1/fp32 MUL %30672, %30672[Uniformity(Lane)]
        %30676 1/fp32 ADD %30673, %30674[Uniformity(Lane)]
        %30677 1/fp32 ADD %30676, %30675[Uniformity(Lane)]
        %30018 1/fp32 RSQ %30677[Uniformity(Lane)]
        %30678 1/fp32 MUL %30018, %30662[Uniformity(Lane)]
        %30679 1/fp32 MUL %30018, %30667[Uniformity(Lane)]
        %30680 1/fp32 MUL %30018, %30672[Uniformity(Lane)]
        %30681 1/fp32 MUL %32305, %30998[Uniformity(Lane)]
        %30189 1/fp32 SHUF %30998.y[Uniformity(Lane)]
        %30682 1/fp32 MUL %32319, %30189[Uniformity(Lane)]
        %30193 1/fp32 SHUF %30998.z[Uniformity(Lane)]
        %30683 1/fp32 MUL %32333, %30193[Uniformity(Lane)]
        %30684 1/fp32 ADD %30681, %30682[Uniformity(Lane)]
        %30685 1/fp32 ADD %30684, %30683[Uniformity(Lane)]
        %30686 1/fp32 MUL %30998, %30288[Uniformity(Lane)]
        %30687 1/fp32 MUL %30189, %30289[Uniformity(Lane)]
        %30688 1/fp32 MUL %30193, %30291[Uniformity(Lane)]
        %30689 1/fp32 ADD %30686, %30687[Uniformity(Lane)]
        %30690 1/fp32 ADD %30689, %30688[Uniformity(Lane)]
        %30691 1/fp32 MUL %30998, %30294[Uniformity(Lane)]
        %30692 1/fp32 MUL %30189, %30295[Uniformity(Lane)]
        %30693 1/fp32 MUL %30193, %30297[Uniformity(Lane)]
        %30694 1/fp32 ADD %30691, %30692[Uniformity(Lane)]
        %30695 1/fp32 ADD %30694, %30693[Uniformity(Lane)]
        %30696 1/fp32 MUL %30685, %30685[Uniformity(Lane)]
        %30697 1/fp32 MUL %30690, %30690[Uniformity(Lane)]
        %30698 1/fp32 MUL %30695, %30695[Uniformity(Lane)]
        %30699 1/fp32 ADD %30696, %30697[Uniformity(Lane)]
        %30700 1/fp32 ADD %30699, %30698[Uniformity(Lane)]
        %30014 1/fp32 RSQ %30700[Uniformity(Lane)]
        %30701 1/fp32 MUL %30014, %30685[Uniformity(Lane)]
        %30702 1/fp32 MUL %30014, %30690[Uniformity(Lane)]
        %30703 1/fp32 MUL %30014, %30695[Uniformity(Lane)]
        %30704 1/fp32 MUL %30145, %30193[Uniformity(Lane)]
        %30705 1/fp32 MUL %30998, %30149[Uniformity(Lane)]
        %30706 1/fp32 MUL %30965, %30189[Uniformity(Lane)]
        %30537 1/fp32 NEG %30149[Uniformity(Lane)]
        %30707 1/fp32 MUL %30189, %30537[Uniformity(Lane)]
        %30538 1/fp32 NEG %30965[Uniformity(Lane)]
        %30708 1/fp32 MUL %30193, %30538[Uniformity(Lane)]
        %30539 1/fp32 NEG %30145[Uniformity(Lane)]
        %30709 1/fp32 MUL %30998, %30539[Uniformity(Lane)]
        %30710 1/fp32 ADD %30704, %30707[Uniformity(Lane)]
        %30711 1/fp32 ADD %30705, %30708[Uniformity(Lane)]
        %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
        %31044 1/fp32 SHUF %31031.y[Uniformity(Lane)]
        %31672 1/int32 CONV_reinterp %31031[Uniformity(Lane)]
        %31332 void intr.EXPORT %30636, %30643, %30650, %30657, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31385 void intr.EXPORT %31672, %31044, %32250 1/int32 UNDEF, %32250 1/int32 UNDEF, int32{196640}, int32{0}[Uniformity(Lane)] param0 x y
        %31391 void intr.EXPORT %30678, %30679, %30680, %32250 1/int32 UNDEF, int32{458785}, int32{0}[Uniformity(Lane)] param1 x y z
        %31400 void intr.EXPORT %30701, %30702, %30703, %32250 1/int32 UNDEF, int32{458786}, int32{0}[Uniformity(Lane)] param2 x y z
        %31409 void intr.EXPORT %30710, %30711, %30712, %32250 1/int32 UNDEF, int32{458787}, int32{0}[Uniformity(Lane)] param3 x y z
        %31418 void intr.EXPORT %30611, %30617, %30623, %30629, int32{983076}, int32{0}[Uniformity(Lane)] param4 x y z w
        %31851 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:32244, block:31717
        --> 


--------------------------------------------------------------------------------

>> pass 751/799: validate graph
    validate graph (0045C2BE)
>> pass 752/799: loop analysis
    loop analysis (598E85BD)
>> pass 753/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 754/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 755/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 756/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 757/799: optimize addr64
    optimize addr64 (F865A4F6)
>> pass 758/799: validate graph
    validate graph (0045C2BE)
>> pass 759/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:32242

      block:32242
        <-- block:4
        %31162 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31163 1/int32 LSHR %31162, int32{8}[Uniformity(Program)]
        %31164 1/int32 AND %31163, int32{255}[Uniformity(Program)]
        %31165 1/int32 AND %31162, int32{255}[Uniformity(Program)]
        %31172 1/int32 SHL %31164, int32{12}[Uniformity(Program)]
        %31173 1/int32 OR %31165, %31172[Uniformity(Program)]
        %31174 void intr.s_sendmsg %31173, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32418 1/int32 intr.s_sub_i32 int32{64}, %31164[Uniformity(Program)]
        %32421 1/int64 intr.s_lshr_b64 int64{-1}, %32418[Uniformity(Program)]
        %31179 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32421[Uniformity(Lane)] uniform_width
        %31180 1/int1 CMP.ne %31179, int32{0}[Uniformity(Lane)]
        %31181 void BRC %31180[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31307, block:32244

      block:31307
        <-- block:32242
        %31171 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31308 void intr.EXPORT %31171, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31309 void BR [Uniformity(Lane)]
        --> block:32244

      block:32244
        <-- block:31307, block:32242
        %32419 1/int32 intr.s_sub_i32 int32{64}, %31165[Uniformity(Program)]
        %32423 1/int64 intr.s_lshr_b64 int64{-1}, %32419[Uniformity(Program)]
        %31304 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32423[Uniformity(Lane)] uniform_width
        %31305 1/int1 CMP.ne %31304, int32{0}[Uniformity(Lane)]
        %31306 void BRC %31305[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31717, block:3

      block:31717
        <-- block:32244
        %31166 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31167 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %30896 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30897 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32389 1/int64 CONV_reinterp %30897[Uniformity(Program)]
        %32390 1/int64 CONV_reinterp %30896[Uniformity(Program)]
        %32256 1/int32 intr.s_load_dword %32390, int32{0}, int32{0}[Uniformity(Program)]
        %30905 1/int32 LSHR %32256, int32{5}[Uniformity(Program)]
        %30906 1/int32 AND %30905, int32{3}[Uniformity(Program)]
        %30907 1/int32 LSHR %32256, int32{7}[Uniformity(Program)]
        %30908 1/int32 AND %30907, int32{127}[Uniformity(Program)]
        %30909 1/int32 LSHR %32256, int32{14}[Uniformity(Program)]
        %30910 1/int32 AND %30909, int32{4095}[Uniformity(Program)]
        %30911 1/int32 LSHR %32256, int32{26}[Uniformity(Program)]
        %30912 1/int32 AND %30911, int32{1}[Uniformity(Program)]
        %31880 1/int64 intr.v_cmp_eq_u32 %30912, int32{0}[Uniformity(Program)]
        %31881 1/int32 intr.v_cndmask_b32 %31167, %31166, %31880[Uniformity(Lane)]
        %32405 1/int32 SHL %32256, int32{4}[Uniformity(Program)]
        %32408 1/int32 AND %32405, int32{496}[Uniformity(Program)]
        %32258 4/int32 intr.s_load_dwordx4 %32389, %32408, int32{0}[Uniformity(Program)]
        %30919 1/int32 intr.s_lshl4_add_u32 %30906, int32{786432}[Uniformity(Program)]
        %30921 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30919[Uniformity(Program)]
        %30922 1/int32 CONV %30921[Uniformity(Program)]
        %30923 1/int32 SHUF %32258.w[Uniformity(Program)]
        %30925 1/int32 AND %30923, int32{-524288}[Uniformity(Program)]
        %30926 1/int32 SHL %30908, int32{12}[Uniformity(Program)]
        %30927 1/int32 OR %30925, %30926[Uniformity(Program)]
        %30928 1/int32 OR %30927, %30922[Uniformity(Program)]
        %31882 1/int32 intr.s_cmov_scalar %30908, int32{0}, %30923, %30928, int32{0}[Uniformity(Program)]
        %30930 4/int32 SHUF %32258.xyz-,  %31882.---x[Uniformity(Program)]
        %30932 3/fp32 intr.buffer_load_format_xyz %31881, %30930, %30910, int64{36029896530591744}[Uniformity(Lane)]
        %30935 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30936 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32392 1/int64 CONV_reinterp %30936[Uniformity(Program)]
        %32393 1/int64 CONV_reinterp %30935[Uniformity(Program)]
        %32265 1/int32 intr.s_load_dword %32393, int32{4}, int32{0}[Uniformity(Program)]
        %30942 1/int32 LSHR %32265, int32{5}[Uniformity(Program)]
        %30943 1/int32 AND %30942, int32{3}[Uniformity(Program)]
        %30944 1/int32 LSHR %32265, int32{7}[Uniformity(Program)]
        %30945 1/int32 AND %30944, int32{127}[Uniformity(Program)]
        %30946 1/int32 LSHR %32265, int32{14}[Uniformity(Program)]
        %30947 1/int32 AND %30946, int32{4095}[Uniformity(Program)]
        %30948 1/int32 LSHR %32265, int32{26}[Uniformity(Program)]
        %30949 1/int32 AND %30948, int32{1}[Uniformity(Program)]
        %31883 1/int64 intr.v_cmp_eq_u32 %30949, int32{0}[Uniformity(Program)]
        %31884 1/int32 intr.v_cndmask_b32 %31167, %31166, %31883[Uniformity(Lane)]
        %32409 1/int32 SHL %32265, int32{4}[Uniformity(Program)]
        %32411 1/int32 AND %32409, int32{496}[Uniformity(Program)]
        %32267 4/int32 intr.s_load_dwordx4 %32392, %32411, int32{0}[Uniformity(Program)]
        %30955 1/int32 intr.s_lshl4_add_u32 %30943, int32{786432}[Uniformity(Program)]
        %30956 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30955[Uniformity(Program)]
        %30957 1/int32 CONV %30956[Uniformity(Program)]
        %30958 1/int32 SHUF %32267.w[Uniformity(Program)]
        %30959 1/int32 AND %30958, int32{-524288}[Uniformity(Program)]
        %30960 1/int32 SHL %30945, int32{12}[Uniformity(Program)]
        %30961 1/int32 OR %30959, %30960[Uniformity(Program)]
        %30962 1/int32 OR %30961, %30957[Uniformity(Program)]
        %31885 1/int32 intr.s_cmov_scalar %30945, int32{0}, %30958, %30962, int32{0}[Uniformity(Program)]
        %30964 4/int32 SHUF %32267.xyz-,  %31885.---x[Uniformity(Program)]
        %30965 3/fp32 intr.buffer_load_format_xyz %31884, %30964, %30947, int64{36029896530591744}[Uniformity(Lane)]
        %30968 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30969 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32395 1/int64 CONV_reinterp %30969[Uniformity(Program)]
        %32396 1/int64 CONV_reinterp %30968[Uniformity(Program)]
        %32274 1/int32 intr.s_load_dword %32396, int32{8}, int32{0}[Uniformity(Program)]
        %30975 1/int32 LSHR %32274, int32{5}[Uniformity(Program)]
        %30976 1/int32 AND %30975, int32{3}[Uniformity(Program)]
        %30977 1/int32 LSHR %32274, int32{7}[Uniformity(Program)]
        %30978 1/int32 AND %30977, int32{127}[Uniformity(Program)]
        %30979 1/int32 LSHR %32274, int32{14}[Uniformity(Program)]
        %30980 1/int32 AND %30979, int32{4095}[Uniformity(Program)]
        %30981 1/int32 LSHR %32274, int32{26}[Uniformity(Program)]
        %30982 1/int32 AND %30981, int32{1}[Uniformity(Program)]
        %31886 1/int64 intr.v_cmp_eq_u32 %30982, int32{0}[Uniformity(Program)]
        %31887 1/int32 intr.v_cndmask_b32 %31167, %31166, %31886[Uniformity(Lane)]
        %32412 1/int32 SHL %32274, int32{4}[Uniformity(Program)]
        %32414 1/int32 AND %32412, int32{496}[Uniformity(Program)]
        %32276 4/int32 intr.s_load_dwordx4 %32395, %32414, int32{0}[Uniformity(Program)]
        %30988 1/int32 intr.s_lshl4_add_u32 %30976, int32{786432}[Uniformity(Program)]
        %30989 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30988[Uniformity(Program)]
        %30990 1/int32 CONV %30989[Uniformity(Program)]
        %30991 1/int32 SHUF %32276.w[Uniformity(Program)]
        %30992 1/int32 AND %30991, int32{-524288}[Uniformity(Program)]
        %30993 1/int32 SHL %30978, int32{12}[Uniformity(Program)]
        %30994 1/int32 OR %30992, %30993[Uniformity(Program)]
        %30995 1/int32 OR %30994, %30990[Uniformity(Program)]
        %31888 1/int32 intr.s_cmov_scalar %30978, int32{0}, %30991, %30995, int32{0}[Uniformity(Program)]
        %30997 4/int32 SHUF %32276.xyz-,  %31888.---x[Uniformity(Program)]
        %30998 3/fp32 intr.buffer_load_format_xyz %31887, %30997, %30980, int64{36029896530591744}[Uniformity(Lane)]
        %31001 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31002 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32398 1/int64 CONV_reinterp %31002[Uniformity(Program)]
        %32399 1/int64 CONV_reinterp %31001[Uniformity(Program)]
        %32283 1/int32 intr.s_load_dword %32399, int32{12}, int32{0}[Uniformity(Program)]
        %31008 1/int32 LSHR %32283, int32{5}[Uniformity(Program)]
        %31009 1/int32 AND %31008, int32{3}[Uniformity(Program)]
        %31010 1/int32 LSHR %32283, int32{7}[Uniformity(Program)]
        %31011 1/int32 AND %31010, int32{127}[Uniformity(Program)]
        %31012 1/int32 LSHR %32283, int32{14}[Uniformity(Program)]
        %31013 1/int32 AND %31012, int32{4095}[Uniformity(Program)]
        %31014 1/int32 LSHR %32283, int32{26}[Uniformity(Program)]
        %31015 1/int32 AND %31014, int32{1}[Uniformity(Program)]
        %31889 1/int64 intr.v_cmp_eq_u32 %31015, int32{0}[Uniformity(Program)]
        %31890 1/int32 intr.v_cndmask_b32 %31167, %31166, %31889[Uniformity(Lane)]
        %32415 1/int32 SHL %32283, int32{4}[Uniformity(Program)]
        %32417 1/int32 AND %32415, int32{496}[Uniformity(Program)]
        %32285 4/int32 intr.s_load_dwordx4 %32398, %32417, int32{0}[Uniformity(Program)]
        %31021 1/int32 intr.s_lshl4_add_u32 %31009, int32{786432}[Uniformity(Program)]
        %31022 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31021[Uniformity(Program)]
        %31023 1/int32 CONV %31022[Uniformity(Program)]
        %31024 1/int32 SHUF %32285.w[Uniformity(Program)]
        %31025 1/int32 AND %31024, int32{-524288}[Uniformity(Program)]
        %31026 1/int32 SHL %31011, int32{12}[Uniformity(Program)]
        %31027 1/int32 OR %31025, %31026[Uniformity(Program)]
        %31028 1/int32 OR %31027, %31023[Uniformity(Program)]
        %31891 1/int32 intr.s_cmov_scalar %31011, int32{0}, %31024, %31028, int32{0}[Uniformity(Program)]
        %31030 4/int32 SHUF %32285.xyz-,  %31891.---x[Uniformity(Program)]
        %31031 2/fp32 intr.buffer_load_format_xy %31890, %31030, %31013, int64{36029896530591744}[Uniformity(Lane)]
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16][Uniformity(Program)]
        %174 1/int32 LD %153[Uniformity(Program)]
        %32291 4/int32 intr.GET_VSHARP %30340[Uniformity(Program)]
        %32401 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32299 4/int32 intr.s_buffer_load_dwordx4 %32291, %32401, int32{0}[Uniformity(Program)]
        %32305 4/fp32 CONV_reinterp %32299[Uniformity(Program)]
        %32402 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32312 1/int32 ADD int32{16}, %32402[Uniformity(Program)]
        %32313 4/int32 intr.s_buffer_load_dwordx4 %32291, %32312, int32{0}[Uniformity(Program)]
        %32319 4/fp32 CONV_reinterp %32313[Uniformity(Program)]
        %32403 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32326 1/int32 ADD int32{32}, %32403[Uniformity(Program)]
        %32327 4/int32 intr.s_buffer_load_dwordx4 %32291, %32326, int32{0}[Uniformity(Program)]
        %32333 4/fp32 CONV_reinterp %32327[Uniformity(Program)]
        %32404 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32340 1/int32 ADD int32{48}, %32404[Uniformity(Program)]
        %32341 4/int32 intr.s_buffer_load_dwordx4 %32291, %32340, int32{0}[Uniformity(Program)]
        %32347 4/fp32 CONV_reinterp %32341[Uniformity(Program)]
        %30606 1/fp32 MUL %32305, %30932[Uniformity(Lane)]
        %30286 1/fp32 SHUF %30932.y[Uniformity(Lane)]
        %30607 1/fp32 MUL %32319, %30286[Uniformity(Lane)]
        %30287 1/fp32 SHUF %30932.z[Uniformity(Lane)]
        %30608 1/fp32 MUL %32333, %30287[Uniformity(Lane)]
        %30609 1/fp32 ADD %32347, %30606[Uniformity(Lane)]
        %30610 1/fp32 ADD %30609, %30607[Uniformity(Lane)]
        %30611 1/fp32 ADD %30610, %30608[Uniformity(Lane)]
        %30288 1/fp32 SHUF %32305.y[Uniformity(Program)]
        %30612 1/fp32 MUL %30932, %30288[Uniformity(Lane)]
        %30289 1/fp32 SHUF %32319.y[Uniformity(Program)]
        %30613 1/fp32 MUL %30286, %30289[Uniformity(Lane)]
        %30291 1/fp32 SHUF %32333.y[Uniformity(Program)]
        %30614 1/fp32 MUL %30287, %30291[Uniformity(Lane)]
        %30293 1/fp32 SHUF %32347.y[Uniformity(Program)]
        %30615 1/fp32 ADD %30293, %30612[Uniformity(Lane)]
        %30616 1/fp32 ADD %30615, %30613[Uniformity(Lane)]
        %30617 1/fp32 ADD %30616, %30614[Uniformity(Lane)]
        %30294 1/fp32 SHUF %32305.z[Uniformity(Program)]
        %30618 1/fp32 MUL %30932, %30294[Uniformity(Lane)]
        %30295 1/fp32 SHUF %32319.z[Uniformity(Program)]
        %30619 1/fp32 MUL %30286, %30295[Uniformity(Lane)]
        %30297 1/fp32 SHUF %32333.z[Uniformity(Program)]
        %30620 1/fp32 MUL %30287, %30297[Uniformity(Lane)]
        %30299 1/fp32 SHUF %32347.z[Uniformity(Program)]
        %30621 1/fp32 ADD %30299, %30618[Uniformity(Lane)]
        %30622 1/fp32 ADD %30621, %30619[Uniformity(Lane)]
        %30623 1/fp32 ADD %30622, %30620[Uniformity(Lane)]
        %30300 1/fp32 SHUF %32305.w[Uniformity(Program)]
        %30624 1/fp32 MUL %30932, %30300[Uniformity(Lane)]
        %30301 1/fp32 SHUF %32319.w[Uniformity(Program)]
        %30625 1/fp32 MUL %30286, %30301[Uniformity(Lane)]
        %30303 1/fp32 SHUF %32333.w[Uniformity(Program)]
        %30626 1/fp32 MUL %30287, %30303[Uniformity(Lane)]
        %30305 1/fp32 SHUF %32347.w[Uniformity(Program)]
        %30627 1/fp32 ADD %30305, %30624[Uniformity(Lane)]
        %30628 1/fp32 ADD %30627, %30625[Uniformity(Lane)]
        %30629 1/fp32 ADD %30628, %30626[Uniformity(Lane)]
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}[Uniformity(Program)]
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}[Uniformity(Program)]
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}[Uniformity(Program)]
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}[Uniformity(Program)]
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30630 1/fp32 MUL %6933, %30611[Uniformity(Lane)]
        %30631 1/fp32 MUL %6935, %30617[Uniformity(Lane)]
        %30632 1/fp32 MUL %6937, %30623[Uniformity(Lane)]
        %30633 1/fp32 MUL %6939, %30629[Uniformity(Lane)]
        %30634 1/fp32 ADD %30630, %30631[Uniformity(Lane)]
        %30635 1/fp32 ADD %30634, %30632[Uniformity(Lane)]
        %30636 1/fp32 ADD %30635, %30633[Uniformity(Lane)]
        %30306 1/fp32 SHUF %6933.y[Uniformity(Program)]
        %30637 1/fp32 MUL %30306, %30611[Uniformity(Lane)]
        %30307 1/fp32 SHUF %6935.y[Uniformity(Program)]
        %30638 1/fp32 MUL %30307, %30617[Uniformity(Lane)]
        %30308 1/fp32 SHUF %6937.y[Uniformity(Program)]
        %30639 1/fp32 MUL %30308, %30623[Uniformity(Lane)]
        %30309 1/fp32 SHUF %6939.y[Uniformity(Program)]
        %30640 1/fp32 MUL %30309, %30629[Uniformity(Lane)]
        %30641 1/fp32 ADD %30637, %30638[Uniformity(Lane)]
        %30642 1/fp32 ADD %30641, %30639[Uniformity(Lane)]
        %30643 1/fp32 ADD %30642, %30640[Uniformity(Lane)]
        %30310 1/fp32 SHUF %6933.z[Uniformity(Program)]
        %30644 1/fp32 MUL %30310, %30611[Uniformity(Lane)]
        %30311 1/fp32 SHUF %6935.z[Uniformity(Program)]
        %30645 1/fp32 MUL %30311, %30617[Uniformity(Lane)]
        %30312 1/fp32 SHUF %6937.z[Uniformity(Program)]
        %30646 1/fp32 MUL %30312, %30623[Uniformity(Lane)]
        %30313 1/fp32 SHUF %6939.z[Uniformity(Program)]
        %30647 1/fp32 MUL %30313, %30629[Uniformity(Lane)]
        %30648 1/fp32 ADD %30644, %30645[Uniformity(Lane)]
        %30649 1/fp32 ADD %30648, %30646[Uniformity(Lane)]
        %30650 1/fp32 ADD %30649, %30647[Uniformity(Lane)]
        %30314 1/fp32 SHUF %6933.w[Uniformity(Program)]
        %30651 1/fp32 MUL %30314, %30611[Uniformity(Lane)]
        %30315 1/fp32 SHUF %6935.w[Uniformity(Program)]
        %30652 1/fp32 MUL %30315, %30617[Uniformity(Lane)]
        %30316 1/fp32 SHUF %6937.w[Uniformity(Program)]
        %30653 1/fp32 MUL %30316, %30623[Uniformity(Lane)]
        %30317 1/fp32 SHUF %6939.w[Uniformity(Program)]
        %30654 1/fp32 MUL %30317, %30629[Uniformity(Lane)]
        %30655 1/fp32 ADD %30651, %30652[Uniformity(Lane)]
        %30656 1/fp32 ADD %30655, %30653[Uniformity(Lane)]
        %30657 1/fp32 ADD %30656, %30654[Uniformity(Lane)]
        %30658 1/fp32 MUL %32305, %30965[Uniformity(Lane)]
        %30145 1/fp32 SHUF %30965.y[Uniformity(Lane)]
        %30659 1/fp32 MUL %32319, %30145[Uniformity(Lane)]
        %30149 1/fp32 SHUF %30965.z[Uniformity(Lane)]
        %30660 1/fp32 MUL %32333, %30149[Uniformity(Lane)]
        %30661 1/fp32 ADD %30658, %30659[Uniformity(Lane)]
        %30662 1/fp32 ADD %30661, %30660[Uniformity(Lane)]
        %30663 1/fp32 MUL %30965, %30288[Uniformity(Lane)]
        %30664 1/fp32 MUL %30145, %30289[Uniformity(Lane)]
        %30665 1/fp32 MUL %30149, %30291[Uniformity(Lane)]
        %30666 1/fp32 ADD %30663, %30664[Uniformity(Lane)]
        %30667 1/fp32 ADD %30666, %30665[Uniformity(Lane)]
        %30668 1/fp32 MUL %30965, %30294[Uniformity(Lane)]
        %30669 1/fp32 MUL %30145, %30295[Uniformity(Lane)]
        %30670 1/fp32 MUL %30149, %30297[Uniformity(Lane)]
        %30671 1/fp32 ADD %30668, %30669[Uniformity(Lane)]
        %30672 1/fp32 ADD %30671, %30670[Uniformity(Lane)]
        %30673 1/fp32 MUL %30662, %30662[Uniformity(Lane)]
        %30674 1/fp32 MUL %30667, %30667[Uniformity(Lane)]
        %30675 1/fp32 MUL %30672, %30672[Uniformity(Lane)]
        %30676 1/fp32 ADD %30673, %30674[Uniformity(Lane)]
        %30677 1/fp32 ADD %30676, %30675[Uniformity(Lane)]
        %30018 1/fp32 RSQ %30677[Uniformity(Lane)]
        %30678 1/fp32 MUL %30018, %30662[Uniformity(Lane)]
        %30679 1/fp32 MUL %30018, %30667[Uniformity(Lane)]
        %30680 1/fp32 MUL %30018, %30672[Uniformity(Lane)]
        %30681 1/fp32 MUL %32305, %30998[Uniformity(Lane)]
        %30189 1/fp32 SHUF %30998.y[Uniformity(Lane)]
        %30682 1/fp32 MUL %32319, %30189[Uniformity(Lane)]
        %30193 1/fp32 SHUF %30998.z[Uniformity(Lane)]
        %30683 1/fp32 MUL %32333, %30193[Uniformity(Lane)]
        %30684 1/fp32 ADD %30681, %30682[Uniformity(Lane)]
        %30685 1/fp32 ADD %30684, %30683[Uniformity(Lane)]
        %30686 1/fp32 MUL %30998, %30288[Uniformity(Lane)]
        %30687 1/fp32 MUL %30189, %30289[Uniformity(Lane)]
        %30688 1/fp32 MUL %30193, %30291[Uniformity(Lane)]
        %30689 1/fp32 ADD %30686, %30687[Uniformity(Lane)]
        %30690 1/fp32 ADD %30689, %30688[Uniformity(Lane)]
        %30691 1/fp32 MUL %30998, %30294[Uniformity(Lane)]
        %30692 1/fp32 MUL %30189, %30295[Uniformity(Lane)]
        %30693 1/fp32 MUL %30193, %30297[Uniformity(Lane)]
        %30694 1/fp32 ADD %30691, %30692[Uniformity(Lane)]
        %30695 1/fp32 ADD %30694, %30693[Uniformity(Lane)]
        %30696 1/fp32 MUL %30685, %30685[Uniformity(Lane)]
        %30697 1/fp32 MUL %30690, %30690[Uniformity(Lane)]
        %30698 1/fp32 MUL %30695, %30695[Uniformity(Lane)]
        %30699 1/fp32 ADD %30696, %30697[Uniformity(Lane)]
        %30700 1/fp32 ADD %30699, %30698[Uniformity(Lane)]
        %30014 1/fp32 RSQ %30700[Uniformity(Lane)]
        %30701 1/fp32 MUL %30014, %30685[Uniformity(Lane)]
        %30702 1/fp32 MUL %30014, %30690[Uniformity(Lane)]
        %30703 1/fp32 MUL %30014, %30695[Uniformity(Lane)]
        %30704 1/fp32 MUL %30145, %30193[Uniformity(Lane)]
        %30705 1/fp32 MUL %30998, %30149[Uniformity(Lane)]
        %30706 1/fp32 MUL %30965, %30189[Uniformity(Lane)]
        %30537 1/fp32 NEG %30149[Uniformity(Lane)]
        %30707 1/fp32 MUL %30189, %30537[Uniformity(Lane)]
        %30538 1/fp32 NEG %30965[Uniformity(Lane)]
        %30708 1/fp32 MUL %30193, %30538[Uniformity(Lane)]
        %30539 1/fp32 NEG %30145[Uniformity(Lane)]
        %30709 1/fp32 MUL %30998, %30539[Uniformity(Lane)]
        %30710 1/fp32 ADD %30704, %30707[Uniformity(Lane)]
        %30711 1/fp32 ADD %30705, %30708[Uniformity(Lane)]
        %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
        %31044 1/fp32 SHUF %31031.y[Uniformity(Lane)]
        %31672 1/int32 CONV_reinterp %31031[Uniformity(Lane)]
        %31332 void intr.EXPORT %30636, %30643, %30650, %30657, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31385 void intr.EXPORT %31672, %31044, %32250 1/int32 UNDEF, %32250 1/int32 UNDEF, int32{196640}, int32{0}[Uniformity(Lane)] param0 x y
        %31391 void intr.EXPORT %30678, %30679, %30680, %32250 1/int32 UNDEF, int32{458785}, int32{0}[Uniformity(Lane)] param1 x y z
        %31400 void intr.EXPORT %30701, %30702, %30703, %32250 1/int32 UNDEF, int32{458786}, int32{0}[Uniformity(Lane)] param2 x y z
        %31409 void intr.EXPORT %30710, %30711, %30712, %32250 1/int32 UNDEF, int32{458787}, int32{0}[Uniformity(Lane)] param3 x y z
        %31418 void intr.EXPORT %30611, %30617, %30623, %30629, int32{983076}, int32{0}[Uniformity(Lane)] param4 x y z w
        %31851 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:32244, block:31717
        --> 


--------------------------------------------------------------------------------

>> pass 760/799: validate graph
    validate graph (0045C2BE)
>> pass 761/799: force loop nesting
    force loop nesting (04B28582)
>> pass 762/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 763/799: validate graph
    validate graph (0045C2BE)
>> pass 764/799: loop analysis
    loop analysis (598E85BD)
>> pass 765/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 766/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 767/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 768/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 769/799: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 770/799: validate graph
    validate graph (0045C2BE)
>> pass 771/799: validate steps
    validate steps (3749DDC0)


--- have (4 skips)

  %30657 1/fp32 ADD %30656, %30654[Uniformity(Lane)]
  %30658 1/fp32 MUL %32305, %30965[Uniformity(Lane)]

15   
16       // world transform
17       float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;
25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28 -     output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30       output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv


--- expected

15   
16       // world transform
17       float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23 -     float3x3 worldRotationMatrix;
24 -     worldRotationMatrix[0] = worldMatrix[0].xyz;
25 -     worldRotationMatrix[1] = worldMatrix[1].xyz;
26 -     worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28 -     output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30       output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv


--- have (1 skips)

  %30629 1/fp32 ADD %30628, %30626[Uniformity(Lane)]
  %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}[Uniformity(Program)]

12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];
15   
16       // world transform
17 -     float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;


--- expected

12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];
15   
16       // world transform
17 -     float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19 -     output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31044 1/fp32 SHUF %31031.y[Uniformity(Lane)]

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
35       return output;
36 - }
37   


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31332 void intr.EXPORT %30636, %30643, %30650, %30657, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31385 void intr.EXPORT %31672, %31044, %32250 1/int32 UNDEF, %32250 1/int32 UNDEF, int32{196640}, int32{0}[Uniformity(Lane)] param0 x y

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31391 void intr.EXPORT %30678, %30679, %30680, %32250 1/int32 UNDEF, int32{458785}, int32{0}[Uniformity(Lane)] param1 x y z

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31400 void intr.EXPORT %30701, %30702, %30703, %32250 1/int32 UNDEF, int32{458786}, int32{0}[Uniformity(Lane)] param2 x y z

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31409 void intr.EXPORT %30710, %30711, %30712, %32250 1/int32 UNDEF, int32{458787}, int32{0}[Uniformity(Lane)] param3 x y z

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31418 void intr.EXPORT %30611, %30617, %30623, %30629, int32{983076}, int32{0}[Uniformity(Lane)] param4 x y z w

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   


--- have (1 skips)

  %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
  %31851 void BR [Uniformity(Lane)]

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

25       worldRotationMatrix[1] = worldMatrix[1].xyz;
26       worldRotationMatrix[2] = worldMatrix[2].xyz;
27   
28       output.normal = normalize(mul(worldRotationMatrix, input.normal));
29       output.tangent = normalize(mul(worldRotationMatrix, input.tangent));
30 -     output.bitangent = cross(input.normal, input.tangent);
31   
32       // passthrough uv
33       output.uv = input.uv;
34   
>> pass 772/799: validate graph
    validate graph (0045C2BE)
>> pass 773/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 774/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 775/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 776/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 777/799: interblockregisters
    interblockregisters (6886C745)
>> pass 778/799: validate graph
    validate graph (0045C2BE)
>> pass 779/799: reachability analysis
    reachability analysis (5B231C61)
>> pass 780/799: remove dead code
    remove dead code (B7E6F507)
>> pass 781/799: validate graph
    validate graph (0045C2BE)
>> pass 782/799: removeredundantwritegprs
    removeredundantwritegprs (92D51232)
>> pass 783/799: validate graph
    validate graph (0045C2BE)
>> pass 784/799: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %144 constant buffer: 0 name: ViewConstants
    %145 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %146 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %147 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %148 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %149 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %150 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %151 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %152 constant buffer: 2 name: DrawConstants
    %153 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %154 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %155 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %156 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %157 constant buffer: 5 name: ShadowConstants
    %158 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30525 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30526 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30527 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30528 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30529 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30530 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30531 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30532 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30533 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30534 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30535 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30536 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %145[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %146[0:+64]
    m_viewPosition(80 - 80) -- %147[0:+16]
    m_lightDirection(81 - 81) -- %148[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %149[0:+16]
    m_cascadeFocusFar(83 - 83) -- %150[0:+16]
    m_time(84 - 84) -- %151[0:+16]
    m_entityIndex(85 - 85) -- %153[0:+4]
    m_lodIndex(87 - 87) -- %154[0:+4]
    m_debugOption(88 - 88) -- %155[0:+4]
    m_unused(89 - 89) -- %156[0:+4]
    m_shadowMatrix(92 - 92) -- %158[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30340[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %6933[0:+16] %6935[16:+16] %6937[32:+16] %6939[48:+16]

    body:
      block:4 - entry
        <-- 
        --> block:32242

      block:32242
        <-- block:4
        %31162 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31163 1/int32 LSHR %31162, int32{8}[Uniformity(Program)]
        %31164 1/int32 AND %31163, int32{255}[Uniformity(Program)]
        %31165 1/int32 AND %31162, int32{255}[Uniformity(Program)]
        %32425 void intr.WRITESGPR int32{1024}, %31165, int32{1} has_side_effects dependent_on_side_effects
        %31172 1/int32 SHL %31164, int32{12}[Uniformity(Program)]
        %31173 1/int32 OR %31165, %31172[Uniformity(Program)]
        %31174 void intr.s_sendmsg %31173, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32418 1/int32 intr.s_sub_i32 int32{64}, %31164[Uniformity(Program)]
        %32421 1/int64 intr.s_lshr_b64 int64{-1}, %32418[Uniformity(Program)]
        %31179 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32421[Uniformity(Lane)] uniform_width
        %31180 1/int1 CMP.ne %31179, int32{0}[Uniformity(Lane)]
        %31181 void BRC %31180[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31307, block:32244

      block:31307
        <-- block:32242
        %31171 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31308 void intr.EXPORT %31171, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31309 void BR [Uniformity(Lane)]
        --> block:32244

      block:32244
        <-- block:31307, block:32242
        %32426 1/int32 intr.READSGPR int32{1024}[ValueTrack(000000000000000000000000________)]
        %32419 1/int32 intr.s_sub_i32 int32{64}, %32426[Uniformity(Program)]
        %32423 1/int64 intr.s_lshr_b64 int64{-1}, %32419[Uniformity(Program)]
        %31304 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32423[Uniformity(Lane)] uniform_width
        %31305 1/int1 CMP.ne %31304, int32{0}[Uniformity(Lane)]
        %31306 void BRC %31305[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31717, block:3

      block:31717
        <-- block:32244
        %31166 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31167 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %30896 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30897 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32389 1/int64 CONV_reinterp %30897[Uniformity(Program)]
        %32390 1/int64 CONV_reinterp %30896[Uniformity(Program)]
        %32256 1/int32 intr.s_load_dword %32390, int32{0}, int32{0}[Uniformity(Program)]
        %30905 1/int32 LSHR %32256, int32{5}[Uniformity(Program)]
        %30906 1/int32 AND %30905, int32{3}[Uniformity(Program)]
        %30907 1/int32 LSHR %32256, int32{7}[Uniformity(Program)]
        %30908 1/int32 AND %30907, int32{127}[Uniformity(Program)]
        %30909 1/int32 LSHR %32256, int32{14}[Uniformity(Program)]
        %30910 1/int32 AND %30909, int32{4095}[Uniformity(Program)]
        %30911 1/int32 LSHR %32256, int32{26}[Uniformity(Program)]
        %30912 1/int32 AND %30911, int32{1}[Uniformity(Program)]
        %31880 1/int64 intr.v_cmp_eq_u32 %30912, int32{0}[Uniformity(Program)]
        %31881 1/int32 intr.v_cndmask_b32 %31167, %31166, %31880[Uniformity(Lane)]
        %32405 1/int32 SHL %32256, int32{4}[Uniformity(Program)]
        %32408 1/int32 AND %32405, int32{496}[Uniformity(Program)]
        %32258 4/int32 intr.s_load_dwordx4 %32389, %32408, int32{0}[Uniformity(Program)]
        %30919 1/int32 intr.s_lshl4_add_u32 %30906, int32{786432}[Uniformity(Program)]
        %30921 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30919[Uniformity(Program)]
        %30922 1/int32 CONV %30921[Uniformity(Program)]
        %30923 1/int32 SHUF %32258.w[Uniformity(Program)]
        %30925 1/int32 AND %30923, int32{-524288}[Uniformity(Program)]
        %30926 1/int32 SHL %30908, int32{12}[Uniformity(Program)]
        %30927 1/int32 OR %30925, %30926[Uniformity(Program)]
        %30928 1/int32 OR %30927, %30922[Uniformity(Program)]
        %31882 1/int32 intr.s_cmov_scalar %30908, int32{0}, %30923, %30928, int32{0}[Uniformity(Program)]
        %30930 4/int32 SHUF %32258.xyz-,  %31882.---x[Uniformity(Program)]
        %30932 3/fp32 intr.buffer_load_format_xyz %31881, %30930, %30910, int64{36029896530591744}[Uniformity(Lane)]
        %30935 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30936 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32392 1/int64 CONV_reinterp %30936[Uniformity(Program)]
        %32393 1/int64 CONV_reinterp %30935[Uniformity(Program)]
        %32265 1/int32 intr.s_load_dword %32393, int32{4}, int32{0}[Uniformity(Program)]
        %30942 1/int32 LSHR %32265, int32{5}[Uniformity(Program)]
        %30943 1/int32 AND %30942, int32{3}[Uniformity(Program)]
        %30944 1/int32 LSHR %32265, int32{7}[Uniformity(Program)]
        %30945 1/int32 AND %30944, int32{127}[Uniformity(Program)]
        %30946 1/int32 LSHR %32265, int32{14}[Uniformity(Program)]
        %30947 1/int32 AND %30946, int32{4095}[Uniformity(Program)]
        %30948 1/int32 LSHR %32265, int32{26}[Uniformity(Program)]
        %30949 1/int32 AND %30948, int32{1}[Uniformity(Program)]
        %31883 1/int64 intr.v_cmp_eq_u32 %30949, int32{0}[Uniformity(Program)]
        %31884 1/int32 intr.v_cndmask_b32 %31167, %31166, %31883[Uniformity(Lane)]
        %32409 1/int32 SHL %32265, int32{4}[Uniformity(Program)]
        %32411 1/int32 AND %32409, int32{496}[Uniformity(Program)]
        %32267 4/int32 intr.s_load_dwordx4 %32392, %32411, int32{0}[Uniformity(Program)]
        %30955 1/int32 intr.s_lshl4_add_u32 %30943, int32{786432}[Uniformity(Program)]
        %30956 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30955[Uniformity(Program)]
        %30957 1/int32 CONV %30956[Uniformity(Program)]
        %30958 1/int32 SHUF %32267.w[Uniformity(Program)]
        %30959 1/int32 AND %30958, int32{-524288}[Uniformity(Program)]
        %30960 1/int32 SHL %30945, int32{12}[Uniformity(Program)]
        %30961 1/int32 OR %30959, %30960[Uniformity(Program)]
        %30962 1/int32 OR %30961, %30957[Uniformity(Program)]
        %31885 1/int32 intr.s_cmov_scalar %30945, int32{0}, %30958, %30962, int32{0}[Uniformity(Program)]
        %30964 4/int32 SHUF %32267.xyz-,  %31885.---x[Uniformity(Program)]
        %30965 3/fp32 intr.buffer_load_format_xyz %31884, %30964, %30947, int64{36029896530591744}[Uniformity(Lane)]
        %30968 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %30969 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32395 1/int64 CONV_reinterp %30969[Uniformity(Program)]
        %32396 1/int64 CONV_reinterp %30968[Uniformity(Program)]
        %32274 1/int32 intr.s_load_dword %32396, int32{8}, int32{0}[Uniformity(Program)]
        %30975 1/int32 LSHR %32274, int32{5}[Uniformity(Program)]
        %30976 1/int32 AND %30975, int32{3}[Uniformity(Program)]
        %30977 1/int32 LSHR %32274, int32{7}[Uniformity(Program)]
        %30978 1/int32 AND %30977, int32{127}[Uniformity(Program)]
        %30979 1/int32 LSHR %32274, int32{14}[Uniformity(Program)]
        %30980 1/int32 AND %30979, int32{4095}[Uniformity(Program)]
        %30981 1/int32 LSHR %32274, int32{26}[Uniformity(Program)]
        %30982 1/int32 AND %30981, int32{1}[Uniformity(Program)]
        %31886 1/int64 intr.v_cmp_eq_u32 %30982, int32{0}[Uniformity(Program)]
        %31887 1/int32 intr.v_cndmask_b32 %31167, %31166, %31886[Uniformity(Lane)]
        %32412 1/int32 SHL %32274, int32{4}[Uniformity(Program)]
        %32414 1/int32 AND %32412, int32{496}[Uniformity(Program)]
        %32276 4/int32 intr.s_load_dwordx4 %32395, %32414, int32{0}[Uniformity(Program)]
        %30988 1/int32 intr.s_lshl4_add_u32 %30976, int32{786432}[Uniformity(Program)]
        %30989 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %30988[Uniformity(Program)]
        %30990 1/int32 CONV %30989[Uniformity(Program)]
        %30991 1/int32 SHUF %32276.w[Uniformity(Program)]
        %30992 1/int32 AND %30991, int32{-524288}[Uniformity(Program)]
        %30993 1/int32 SHL %30978, int32{12}[Uniformity(Program)]
        %30994 1/int32 OR %30992, %30993[Uniformity(Program)]
        %30995 1/int32 OR %30994, %30990[Uniformity(Program)]
        %31888 1/int32 intr.s_cmov_scalar %30978, int32{0}, %30991, %30995, int32{0}[Uniformity(Program)]
        %30997 4/int32 SHUF %32276.xyz-,  %31888.---x[Uniformity(Program)]
        %30998 3/fp32 intr.buffer_load_format_xyz %31887, %30997, %30980, int64{36029896530591744}[Uniformity(Lane)]
        %31001 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31002 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32398 1/int64 CONV_reinterp %31002[Uniformity(Program)]
        %32399 1/int64 CONV_reinterp %31001[Uniformity(Program)]
        %32283 1/int32 intr.s_load_dword %32399, int32{12}, int32{0}[Uniformity(Program)]
        %31008 1/int32 LSHR %32283, int32{5}[Uniformity(Program)]
        %31009 1/int32 AND %31008, int32{3}[Uniformity(Program)]
        %31010 1/int32 LSHR %32283, int32{7}[Uniformity(Program)]
        %31011 1/int32 AND %31010, int32{127}[Uniformity(Program)]
        %31012 1/int32 LSHR %32283, int32{14}[Uniformity(Program)]
        %31013 1/int32 AND %31012, int32{4095}[Uniformity(Program)]
        %31014 1/int32 LSHR %32283, int32{26}[Uniformity(Program)]
        %31015 1/int32 AND %31014, int32{1}[Uniformity(Program)]
        %31889 1/int64 intr.v_cmp_eq_u32 %31015, int32{0}[Uniformity(Program)]
        %31890 1/int32 intr.v_cndmask_b32 %31167, %31166, %31889[Uniformity(Lane)]
        %32415 1/int32 SHL %32283, int32{4}[Uniformity(Program)]
        %32417 1/int32 AND %32415, int32{496}[Uniformity(Program)]
        %32285 4/int32 intr.s_load_dwordx4 %32398, %32417, int32{0}[Uniformity(Program)]
        %31021 1/int32 intr.s_lshl4_add_u32 %31009, int32{786432}[Uniformity(Program)]
        %31022 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31021[Uniformity(Program)]
        %31023 1/int32 CONV %31022[Uniformity(Program)]
        %31024 1/int32 SHUF %32285.w[Uniformity(Program)]
        %31025 1/int32 AND %31024, int32{-524288}[Uniformity(Program)]
        %31026 1/int32 SHL %31011, int32{12}[Uniformity(Program)]
        %31027 1/int32 OR %31025, %31026[Uniformity(Program)]
        %31028 1/int32 OR %31027, %31023[Uniformity(Program)]
        %31891 1/int32 intr.s_cmov_scalar %31011, int32{0}, %31024, %31028, int32{0}[Uniformity(Program)]
        %31030 4/int32 SHUF %32285.xyz-,  %31891.---x[Uniformity(Program)]
        %31031 2/fp32 intr.buffer_load_format_xy %31890, %31030, %31013, int64{36029896530591744}[Uniformity(Lane)]
        %30339 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30340 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30339 [0,srt(51),0,16][Uniformity(Program)]
        %174 1/int32 LD %153[Uniformity(Program)]
        %32291 4/int32 intr.GET_VSHARP %30340[Uniformity(Program)]
        %32401 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32299 4/int32 intr.s_buffer_load_dwordx4 %32291, %32401, int32{0}[Uniformity(Program)]
        %32305 4/fp32 CONV_reinterp %32299[Uniformity(Program)]
        %32402 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32312 1/int32 ADD int32{16}, %32402[Uniformity(Program)]
        %32313 4/int32 intr.s_buffer_load_dwordx4 %32291, %32312, int32{0}[Uniformity(Program)]
        %32319 4/fp32 CONV_reinterp %32313[Uniformity(Program)]
        %32403 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32326 1/int32 ADD int32{32}, %32403[Uniformity(Program)]
        %32327 4/int32 intr.s_buffer_load_dwordx4 %32291, %32326, int32{0}[Uniformity(Program)]
        %32333 4/fp32 CONV_reinterp %32327[Uniformity(Program)]
        %32404 1/int32 SHL %174, int32{6}[Uniformity(Program)]
        %32340 1/int32 ADD int32{48}, %32404[Uniformity(Program)]
        %32341 4/int32 intr.s_buffer_load_dwordx4 %32291, %32340, int32{0}[Uniformity(Program)]
        %32347 4/fp32 CONV_reinterp %32341[Uniformity(Program)]
        %30606 1/fp32 MUL %32305, %30932[Uniformity(Lane)]
        %30286 1/fp32 SHUF %30932.y[Uniformity(Lane)]
        %30607 1/fp32 MUL %32319, %30286[Uniformity(Lane)]
        %30287 1/fp32 SHUF %30932.z[Uniformity(Lane)]
        %30608 1/fp32 MUL %32333, %30287[Uniformity(Lane)]
        %30609 1/fp32 ADD %32347, %30606[Uniformity(Lane)]
        %30610 1/fp32 ADD %30609, %30607[Uniformity(Lane)]
        %30611 1/fp32 ADD %30610, %30608[Uniformity(Lane)]
        %30288 1/fp32 SHUF %32305.y[Uniformity(Program)]
        %30612 1/fp32 MUL %30932, %30288[Uniformity(Lane)]
        %30289 1/fp32 SHUF %32319.y[Uniformity(Program)]
        %30613 1/fp32 MUL %30286, %30289[Uniformity(Lane)]
        %30291 1/fp32 SHUF %32333.y[Uniformity(Program)]
        %30614 1/fp32 MUL %30287, %30291[Uniformity(Lane)]
        %30293 1/fp32 SHUF %32347.y[Uniformity(Program)]
        %30615 1/fp32 ADD %30293, %30612[Uniformity(Lane)]
        %30616 1/fp32 ADD %30615, %30613[Uniformity(Lane)]
        %30617 1/fp32 ADD %30616, %30614[Uniformity(Lane)]
        %30294 1/fp32 SHUF %32305.z[Uniformity(Program)]
        %30618 1/fp32 MUL %30932, %30294[Uniformity(Lane)]
        %30295 1/fp32 SHUF %32319.z[Uniformity(Program)]
        %30619 1/fp32 MUL %30286, %30295[Uniformity(Lane)]
        %30297 1/fp32 SHUF %32333.z[Uniformity(Program)]
        %30620 1/fp32 MUL %30287, %30297[Uniformity(Lane)]
        %30299 1/fp32 SHUF %32347.z[Uniformity(Program)]
        %30621 1/fp32 ADD %30299, %30618[Uniformity(Lane)]
        %30622 1/fp32 ADD %30621, %30619[Uniformity(Lane)]
        %30623 1/fp32 ADD %30622, %30620[Uniformity(Lane)]
        %30300 1/fp32 SHUF %32305.w[Uniformity(Program)]
        %30624 1/fp32 MUL %30932, %30300[Uniformity(Lane)]
        %30301 1/fp32 SHUF %32319.w[Uniformity(Program)]
        %30625 1/fp32 MUL %30286, %30301[Uniformity(Lane)]
        %30303 1/fp32 SHUF %32333.w[Uniformity(Program)]
        %30626 1/fp32 MUL %30287, %30303[Uniformity(Lane)]
        %30305 1/fp32 SHUF %32347.w[Uniformity(Program)]
        %30627 1/fp32 ADD %30305, %30624[Uniformity(Lane)]
        %30628 1/fp32 ADD %30627, %30625[Uniformity(Lane)]
        %30629 1/fp32 ADD %30628, %30626[Uniformity(Lane)]
        %6932 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{0}[Uniformity(Program)]
        %6933 4/fp32 LD %6932 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %6934 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{1}[Uniformity(Program)]
        %6935 4/fp32 LD %6934 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %6936 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{2}[Uniformity(Program)]
        %6937 4/fp32 LD %6936 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %6938 roconstant(0) * 4/fp32 GETELEMPTR %145, int32{0}, int32{3}[Uniformity(Program)]
        %6939 4/fp32 LD %6938 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30630 1/fp32 MUL %6933, %30611[Uniformity(Lane)]
        %30631 1/fp32 MUL %6935, %30617[Uniformity(Lane)]
        %30632 1/fp32 MUL %6937, %30623[Uniformity(Lane)]
        %30633 1/fp32 MUL %6939, %30629[Uniformity(Lane)]
        %30634 1/fp32 ADD %30630, %30631[Uniformity(Lane)]
        %30635 1/fp32 ADD %30634, %30632[Uniformity(Lane)]
        %30636 1/fp32 ADD %30635, %30633[Uniformity(Lane)]
        %30306 1/fp32 SHUF %6933.y[Uniformity(Program)]
        %30637 1/fp32 MUL %30306, %30611[Uniformity(Lane)]
        %30307 1/fp32 SHUF %6935.y[Uniformity(Program)]
        %30638 1/fp32 MUL %30307, %30617[Uniformity(Lane)]
        %30308 1/fp32 SHUF %6937.y[Uniformity(Program)]
        %30639 1/fp32 MUL %30308, %30623[Uniformity(Lane)]
        %30309 1/fp32 SHUF %6939.y[Uniformity(Program)]
        %30640 1/fp32 MUL %30309, %30629[Uniformity(Lane)]
        %30641 1/fp32 ADD %30637, %30638[Uniformity(Lane)]
        %30642 1/fp32 ADD %30641, %30639[Uniformity(Lane)]
        %30643 1/fp32 ADD %30642, %30640[Uniformity(Lane)]
        %30310 1/fp32 SHUF %6933.z[Uniformity(Program)]
        %30644 1/fp32 MUL %30310, %30611[Uniformity(Lane)]
        %30311 1/fp32 SHUF %6935.z[Uniformity(Program)]
        %30645 1/fp32 MUL %30311, %30617[Uniformity(Lane)]
        %30312 1/fp32 SHUF %6937.z[Uniformity(Program)]
        %30646 1/fp32 MUL %30312, %30623[Uniformity(Lane)]
        %30313 1/fp32 SHUF %6939.z[Uniformity(Program)]
        %30647 1/fp32 MUL %30313, %30629[Uniformity(Lane)]
        %30648 1/fp32 ADD %30644, %30645[Uniformity(Lane)]
        %30649 1/fp32 ADD %30648, %30646[Uniformity(Lane)]
        %30650 1/fp32 ADD %30649, %30647[Uniformity(Lane)]
        %30314 1/fp32 SHUF %6933.w[Uniformity(Program)]
        %30651 1/fp32 MUL %30314, %30611[Uniformity(Lane)]
        %30315 1/fp32 SHUF %6935.w[Uniformity(Program)]
        %30652 1/fp32 MUL %30315, %30617[Uniformity(Lane)]
        %30316 1/fp32 SHUF %6937.w[Uniformity(Program)]
        %30653 1/fp32 MUL %30316, %30623[Uniformity(Lane)]
        %30317 1/fp32 SHUF %6939.w[Uniformity(Program)]
        %30654 1/fp32 MUL %30317, %30629[Uniformity(Lane)]
        %30655 1/fp32 ADD %30651, %30652[Uniformity(Lane)]
        %30656 1/fp32 ADD %30655, %30653[Uniformity(Lane)]
        %30657 1/fp32 ADD %30656, %30654[Uniformity(Lane)]
        %30658 1/fp32 MUL %32305, %30965[Uniformity(Lane)]
        %30145 1/fp32 SHUF %30965.y[Uniformity(Lane)]
        %30659 1/fp32 MUL %32319, %30145[Uniformity(Lane)]
        %30149 1/fp32 SHUF %30965.z[Uniformity(Lane)]
        %30660 1/fp32 MUL %32333, %30149[Uniformity(Lane)]
        %30661 1/fp32 ADD %30658, %30659[Uniformity(Lane)]
        %30662 1/fp32 ADD %30661, %30660[Uniformity(Lane)]
        %30663 1/fp32 MUL %30965, %30288[Uniformity(Lane)]
        %30664 1/fp32 MUL %30145, %30289[Uniformity(Lane)]
        %30665 1/fp32 MUL %30149, %30291[Uniformity(Lane)]
        %30666 1/fp32 ADD %30663, %30664[Uniformity(Lane)]
        %30667 1/fp32 ADD %30666, %30665[Uniformity(Lane)]
        %30668 1/fp32 MUL %30965, %30294[Uniformity(Lane)]
        %30669 1/fp32 MUL %30145, %30295[Uniformity(Lane)]
        %30670 1/fp32 MUL %30149, %30297[Uniformity(Lane)]
        %30671 1/fp32 ADD %30668, %30669[Uniformity(Lane)]
        %30672 1/fp32 ADD %30671, %30670[Uniformity(Lane)]
        %30673 1/fp32 MUL %30662, %30662[Uniformity(Lane)]
        %30674 1/fp32 MUL %30667, %30667[Uniformity(Lane)]
        %30675 1/fp32 MUL %30672, %30672[Uniformity(Lane)]
        %30676 1/fp32 ADD %30673, %30674[Uniformity(Lane)]
        %30677 1/fp32 ADD %30676, %30675[Uniformity(Lane)]
        %30018 1/fp32 RSQ %30677[Uniformity(Lane)]
        %30678 1/fp32 MUL %30018, %30662[Uniformity(Lane)]
        %30679 1/fp32 MUL %30018, %30667[Uniformity(Lane)]
        %30680 1/fp32 MUL %30018, %30672[Uniformity(Lane)]
        %30681 1/fp32 MUL %32305, %30998[Uniformity(Lane)]
        %30189 1/fp32 SHUF %30998.y[Uniformity(Lane)]
        %30682 1/fp32 MUL %32319, %30189[Uniformity(Lane)]
        %30193 1/fp32 SHUF %30998.z[Uniformity(Lane)]
        %30683 1/fp32 MUL %32333, %30193[Uniformity(Lane)]
        %30684 1/fp32 ADD %30681, %30682[Uniformity(Lane)]
        %30685 1/fp32 ADD %30684, %30683[Uniformity(Lane)]
        %30686 1/fp32 MUL %30998, %30288[Uniformity(Lane)]
        %30687 1/fp32 MUL %30189, %30289[Uniformity(Lane)]
        %30688 1/fp32 MUL %30193, %30291[Uniformity(Lane)]
        %30689 1/fp32 ADD %30686, %30687[Uniformity(Lane)]
        %30690 1/fp32 ADD %30689, %30688[Uniformity(Lane)]
        %30691 1/fp32 MUL %30998, %30294[Uniformity(Lane)]
        %30692 1/fp32 MUL %30189, %30295[Uniformity(Lane)]
        %30693 1/fp32 MUL %30193, %30297[Uniformity(Lane)]
        %30694 1/fp32 ADD %30691, %30692[Uniformity(Lane)]
        %30695 1/fp32 ADD %30694, %30693[Uniformity(Lane)]
        %30696 1/fp32 MUL %30685, %30685[Uniformity(Lane)]
        %30697 1/fp32 MUL %30690, %30690[Uniformity(Lane)]
        %30698 1/fp32 MUL %30695, %30695[Uniformity(Lane)]
        %30699 1/fp32 ADD %30696, %30697[Uniformity(Lane)]
        %30700 1/fp32 ADD %30699, %30698[Uniformity(Lane)]
        %30014 1/fp32 RSQ %30700[Uniformity(Lane)]
        %30701 1/fp32 MUL %30014, %30685[Uniformity(Lane)]
        %30702 1/fp32 MUL %30014, %30690[Uniformity(Lane)]
        %30703 1/fp32 MUL %30014, %30695[Uniformity(Lane)]
        %30704 1/fp32 MUL %30145, %30193[Uniformity(Lane)]
        %30705 1/fp32 MUL %30998, %30149[Uniformity(Lane)]
        %30706 1/fp32 MUL %30965, %30189[Uniformity(Lane)]
        %30537 1/fp32 NEG %30149[Uniformity(Lane)]
        %30707 1/fp32 MUL %30189, %30537[Uniformity(Lane)]
        %30538 1/fp32 NEG %30965[Uniformity(Lane)]
        %30708 1/fp32 MUL %30193, %30538[Uniformity(Lane)]
        %30539 1/fp32 NEG %30145[Uniformity(Lane)]
        %30709 1/fp32 MUL %30998, %30539[Uniformity(Lane)]
        %30710 1/fp32 ADD %30704, %30707[Uniformity(Lane)]
        %30711 1/fp32 ADD %30705, %30708[Uniformity(Lane)]
        %30712 1/fp32 ADD %30706, %30709[Uniformity(Lane)]
        %31044 1/fp32 SHUF %31031.y[Uniformity(Lane)]
        %31672 1/int32 CONV_reinterp %31031[Uniformity(Lane)]
        %31332 void intr.EXPORT %30636, %30643, %30650, %30657, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31385 void intr.EXPORT %31672, %31044, int32{0}, int32{0}, int32{196640}, int32{0}[Uniformity(Lane)] param0 x y
        %31391 void intr.EXPORT %30678, %30679, %30680, int32{0}, int32{458785}, int32{0}[Uniformity(Lane)] param1 x y z
        %31400 void intr.EXPORT %30701, %30702, %30703, int32{0}, int32{458786}, int32{0}[Uniformity(Lane)] param2 x y z
        %31409 void intr.EXPORT %30710, %30711, %30712, int32{0}, int32{458787}, int32{0}[Uniformity(Lane)] param3 x y z
        %31418 void intr.EXPORT %30611, %30617, %30623, %30629, int32{983076}, int32{0}[Uniformity(Lane)] param4 x y z w
        %31851 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:32244, block:31717
        --> 


--------------------------------------------------------------------------------

>> pass 785/799: validate graph
    validate graph (0045C2BE)
>> pass 786/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 787/799: uninline sub-routines
    uninline sub-routines (7C5E3842)
>> pass 788/799: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 789/799: validate graph
    validate graph (0045C2BE)
>> pass 790/799: loop analysis
    loop analysis (598E85BD)
>> pass 791/799: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 792/799: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 793/799: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 794/799: structural analysis
    structural analysis (A71DE301)
>> pass 795/799: scalar analysis
    scalar analysis (6B88E817)
>> pass 796/799: R10CompileHwCode
    R10CompileHwCode (4028FCBE)

Transform List (block32242):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

Transform List (block31307):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

Transform List (block32244):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

Transform List (block31717):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

--------------------------------------------------------------------------------
>> assembler pass 0/47: merge blocks

--------------------------------------------------------------------------------
>> assembler pass 1/47: fix sgpr alignment

--------------------------------------------------------------------------------
>> assembler pass 2/47: optimize nsa

--------------------------------------------------------------------------------
>> assembler pass 3/47: move coalescing using interference graph

--------------------------------------------------------------------------------
>> assembler pass 4/47: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 5/47: Remove unecessary v_readfirstlane_b32 + lds_direct instructions

--------------------------------------------------------------------------------
>> assembler pass 6/47: reschedule instructions in basic block before register allocation to decrease register pressure

--------------------------------------------------------------------------------
>> assembler pass 7/47: schedule latency: reschedule instructions to hide instruction latency

--------------------------------------------------------------------------------
>> assembler pass 8/47: schedule cache thrashing: reschedule instructions to increase cache hit on loads

--------------------------------------------------------------------------------
>> assembler pass 9/47: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 10/47: lower pseudo ops

--------------------------------------------------------------------------------
>> assembler pass 11/47: optimize range moves

--------------------------------------------------------------------------------
>> assembler pass 12/47: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 13/47: basic block optimization on asm

--------------------------------------------------------------------------------
>> assembler pass 14/47: copy propagation

--------------------------------------------------------------------------------
>> assembler pass 15/47: allocate vcc

--------------------------------------------------------------------------------
>> assembler pass 16/47: assign sub-registers

--------------------------------------------------------------------------------
>> assembler pass 17/47: opsel movs optimization

--------------------------------------------------------------------------------
>> assembler pass 18/47: dpp movs optimization

--------------------------------------------------------------------------------
>> assembler pass 19/47: vop pk vectorizer

--------------------------------------------------------------------------------
>> assembler pass 20/47: allocate sub-registers

--------------------------------------------------------------------------------
>> assembler pass 21/47: optimize sop/vop encoding

--------------------------------------------------------------------------------
>> assembler pass 22/47: legalize instructions

--------------------------------------------------------------------------------
>> assembler pass 23/47: legalize pops

--------------------------------------------------------------------------------
>> assembler pass 24/47: Remove unecessary v_readfirstlane_b32 + lds_direct instructions

--------------------------------------------------------------------------------
>> assembler pass 25/47: move coalescing using interference graph

--------------------------------------------------------------------------------
>> assembler pass 26/47: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 27/47: reschedule instructions in basic block before register allocation to improve latency hiding

--------------------------------------------------------------------------------
>> assembler pass 28/47: allocate vcc

--------------------------------------------------------------------------------
>> assembler pass 29/47: allocateregisters

--------------------------------------------------------------------------------
>> assembler pass 30/47: postralowerpseudoinst

--------------------------------------------------------------------------------
>> assembler pass 31/47: copy propagation

--------------------------------------------------------------------------------
>> assembler pass 32/47: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 33/47: loop invariant code motion

--------------------------------------------------------------------------------
>> assembler pass 34/47: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 35/47: optimize sop/vop encoding

--------------------------------------------------------------------------------
>> assembler pass 36/47: schedule cache thrashing: reschedule instructions to increase cache hit on loads

--------------------------------------------------------------------------------
>> assembler pass 37/47: expand summary

--------------------------------------------------------------------------------
>> assembler pass 38/47: insert_waits

--------------------------------------------------------------------------------
>> assembler pass 39/47: finalize exports

--------------------------------------------------------------------------------
>> assembler pass 40/47: insert manual dependencies

--------------------------------------------------------------------------------
>> assembler pass 41/47: remove vcc stalls with v_sad_u32

--------------------------------------------------------------------------------
>> assembler pass 42/47: validate hw instructions

--------------------------------------------------------------------------------
>> assembler pass 43/47: resolve labels

--------------------------------------------------------------------------------
>> assembler pass 44/47: calculate register count

--------------------------------------------------------------------------------
>> assembler pass 45/47: generate debug info

--------------------------------------------------------------------------------
>> assembler pass 46/47: generate_vs_info
>> pass 797/799: validate graph
    validate graph (0045C2BE)
>> pass 798/799: r10 validate hw code
    r10 validate hw code (878340BD)
>> pass 799/799: validate graph
    validate graph (0045C2BE)
// guid: e2af83c100000000
// githash: 0xbaadc0de
// compiler version: development version
// profile: vertex
// srt: yes
// variant: vertex
// code-size: 1392
// header-size: 400
.pragma argument(target=common; chiprev=trinity-proto2)
.shader
  type(GS)
  sgpr_count(70)
  vgpr_count(28)
  user_sgpr_count(16)
  cxxsymbol("shaders::material_vv")
  wavemode(wave64)
  set_shader_type("geometry")  // v_primitive_id in v2
  num_prims(64)
  num_verts(64)
  amp_factor(1)
  passthrough(1)
  gs_vgpr_component_count(3)
  es_vgpr_component_count(3)
  prim_shader(vs)
  float_mode(kFloatModeRoundNearestEven|kFloatModeFlushDenormIn|kFloatModeFlushDenormOut, kFloatModeRoundNearestEven|kFloatModeAllowDenormIn|kFloatModeAllowDenormOut)
  dx10_clamp(1)
  user_sgpr_usage([0:3], kShaderInputUsageImmShaderResourceTable, 0) // s[8:11]
  user_sgpr_usage([4:7], kShaderInputUsageImmConstBuffer, 0) // s[12:15]
  user_sgpr_usage([8:11], kShaderInputUsageImmConstBuffer, 2) // s[16:19]
  user_sgpr_usage([12:13], kShaderInputUsagePtrVertexBufferTable, 0) // s[20:21]
  user_sgpr_usage([14:15], kShaderInputUsagePtrVertexAttribDescTable, 0) // s[22:23]
  vertex_input_semantic(v[9:11], 0, "kTypeFloat3")
  vertex_input_semantic(v[12:14], 1, "kTypeFloat3")
  vertex_input_semantic(v[15:17], 2, "kTypeFloat3")
  vertex_input_semantic(v[18:19], 3, "kTypeFloat2")
  vs_output_semantic(param0, 0xf, fp32)
  vs_output_semantic(param1, 0x10, fp32)
  vs_output_semantic(param2, 0x11, fp32)
  vs_output_semantic(param3, 0x12, fp32)
  vs_output_semantic(param4, 0x13, fp32)

  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  s_inst_prefetch 0x3                                                    // 00000000: SOPP, BFA00003, 
  s_bfe_u32 vcc1, s3, #0x80008                                           // 00000004: SOP2, 93EBFF03 00080008, 
  s_and_b32 s0, s3, #0xff                                                // 0000000C: SOP2, 8700FF03 000000FF, 
  s_lshl_b32 vcc0, vcc1, 12                                              // 00000014: SOP2, 8F6A8C6B, 
  s_or_b32 m0, s0, vcc0                                                  // 00000018: SOP2, 887C6A00,  1cy stall (vcc0)
  s_nop 0x0                                                              // 0000001C: SOPP, BF800000, 
  s_sendmsg sendmsg(kMsgGsAllocReq)                                      // 00000020: SOPP, BF900009,  7cy stall (sa_m0)
  s_sub_i32 vcc0, 64, vcc1                                               // 00000024: SOP2, 81EA6BC0, 
  s_lshr_b64 exec[0:1], -1, vcc0                                         // 00000028: SOP2, 90FE6AC1,  1cy stall (vcc0)
  exp prim, v0, off, off, off done row_en                                // 0000002C: EXP, F8000941 00000000, 
  s_sub_i32 vcc0, 64, s0                                                 // 00000034: SOP2, 81EA00C0, 
  s_waitcnt expcnt(0)                                                    // 00000038: SOPP, BF8CFF0F, 
  s_lshr_b64 exec[0:1], -1, vcc0                                         // 0000003C: SOP2, 90FE6AC1, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\common.pssli */
  /* 50: float3 position : POSITION; */
  s_load_dwordx4 s[40:43], s[22:23], null                                // 00000040: SMEM, F4080A0B FA000000, 
  s_mov_b32 s44, #0x22c0204                                              // 00000048: SOP1, BEAC03FF 022C0204, 
  s_mov_b32 s45, #0xfac03ac                                              // 00000050: SOP1, BEAD03FF 0FAC03AC, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_buffer_load_dword s22, s[16:19], null                                // 00000058: SMEM, F4200588 FA000000,  6cy stall (sa_sdst)
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  s_buffer_load_dwordx16 s[24:39], s[12:15], null                        // 00000060: SMEM, F4300606 FA000000, 
  s_waitcnt lgkmcnt(0)                                                   // 00000068: SOPP, BF8CC07F, 34cy stall (lgkm_cnt)
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\common.pssli */
  /* 50: float3 position : POSITION; */
  s_lshl_b32 vcc1, s40, 4                                                // 0000006C: SOP2, 8F6B8428, 
  s_bfe_u32 vcc0, s40, #0x1001a                                          // 00000070: SOP2, 93EAFF28 0001001A, 
  s_and_b32 vcc1, vcc1, #0x1f0                                           // 00000078: SOP2, 876BFF6B 000001F0, 
  s_cmp_eq_u32 0, vcc0                                                   // 00000080: SOPC, BF066A80, 
  s_load_dwordx4 s[4:7], s[20:21], vcc1                                  // 00000084: SMEM, F408010A D6000000,  8cy stall (sa_sdst)
  s_cselect_b64 s[0:1], exec[0:1], 0                                     // 0000008C: SOP2, 8580807E, 
  s_bfe_u32 s2, s40, #0x70007                                            // 00000090: SOP2, 9382FF28 00070007, 
  s_bfe_u32 vcc0, s40, #0x20005                                          // 00000098: SOP2, 93EAFF28 00020005, 
  s_lshl_b32 s3, s2, 12                                                  // 000000A0: SOP2, 8F038C02, 
  s_lshl4_add_u32 vcc1, vcc0, #0xc0000                                   // 000000A4: SOP2, 98EBFF6A 000C0000, 
  s_waitcnt lgkmcnt(0)                                                   // 000000AC: SOPP, BF8CC07F, 26cy stall (lgkm_cnt)
  s_and_b32 vcc0, s7, #0xfff80000                                        // 000000B0: SOP2, 876AFF07 FFF80000, 
  v_cndmask_b32 v0, v8, v5, s[0:1]                                       // 000000B8: VOP3, D5010000 00020B08, 
  s_or_b32 vcc0, vcc0, s3                                                // 000000C0: SOP2, 886A036A,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u64 s[0:1], s[44:45], vcc1                                       // 000000C4: SOP2, 94806B2C, 
  s_bfe_u32 s12, s40, #0xc000e                                           // 000000C8: SOP2, 938CFF28 000C000E, 
  s_or_b32 vcc0, vcc0, s0                                                // 000000D0: SOP2, 886A006A, 
  s_cmp_eq_u32 s2, 0                                                     // 000000D4: SOPC, BF068002, 
  s_nop 0x0                                                              // 000000D8: SOPP, BF800000, 
  s_cselect_b32 s7, s7, vcc0                                             // 000000DC: SOP2, 85076A07, 
  /* 51: float3 normal : NORMAL; */
  s_lshl_b32 vcc0, s41, 4                                                // 000000E0: SOP2, 8F6A8429, 
  /* 50: float3 position : POSITION; */
  buffer_load_format_xyz v[12:14], v0, s[4:7], s12 idxen                 // 000000E4: MUBUF, E0082000 0C010C00,  8cy stall (sa_sdst)
  /* 52: float3 tangent : TEXCOORD0; */
  s_lshl_b32 vcc1, s42, 4                                                // 000000EC: SOP2, 8F6B842A, 
  /* 51: float3 normal : NORMAL; */
  s_and_b32 vcc0, vcc0, #0x1f0                                           // 000000F0: SOP2, 876AFF6A 000001F0, 
  /* 52: float3 tangent : TEXCOORD0; */
  s_and_b32 vcc1, vcc1, #0x1f0                                           // 000000F8: SOP2, 876BFF6B 000001F0, 
  /* 51: float3 normal : NORMAL; */
  s_load_dwordx4 s[0:3], s[20:21], vcc0                                  // 00000100: SMEM, F408000A D4000000,  8cy stall (sa_sdst)
  s_bfe_u32 vcc0, s41, #0x1001a                                          // 00000108: SOP2, 93EAFF29 0001001A, 
  /* 52: float3 tangent : TEXCOORD0; */
  s_load_dwordx4 s[16:19], s[20:21], vcc1                                // 00000110: SMEM, F408040A D6000000,  8cy stall (sa_sdst)
  /* 51: float3 normal : NORMAL; */
  s_cmp_eq_u32 0, vcc0                                                   // 00000118: SOPC, BF066A80, 
  s_nop 0x0                                                              // 0000011C: SOPP, BF800000, 
  s_cselect_b64 s[4:5], exec[0:1], 0                                     // 00000120: SOP2, 8584807E, 
  s_bfe_u32 s13, s41, #0x70007                                           // 00000124: SOP2, 938DFF29 00070007, 
  s_bfe_u32 vcc1, s41, #0x20005                                          // 0000012C: SOP2, 93EBFF29 00020005, 
  s_lshl_b32 vcc0, s13, 12                                               // 00000134: SOP2, 8F6A8C0D, 
  s_lshl4_add_u32 vcc1, vcc1, #0xc0000                                   // 00000138: SOP2, 98EBFF6B 000C0000, 
  s_waitcnt lgkmcnt(0)                                                   // 00000140: SOPP, BF8CC07F, 24cy stall (lgkm_cnt)
  s_and_b32 s7, s3, #0xfff80000                                          // 00000144: SOP2, 8707FF03 FFF80000, 
  v_cndmask_b32 v0, v8, v5, s[4:5]                                       // 0000014C: VOP3, D5010000 00120B08, 
  s_or_b32 s4, s7, vcc0                                                  // 00000154: SOP2, 88046A07,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u64 vcc[0:1], s[44:45], vcc1                                     // 00000158: SOP2, 94EA6B2C, 
  s_bfe_u32 s15, s41, #0xc000e                                           // 0000015C: SOP2, 938FFF29 000C000E, 
  s_or_b32 vcc1, s4, vcc0                                                // 00000164: SOP2, 886B6A04, 
  /* 53: float2 uv : TEXCOORD1; */
  s_lshl_b32 vcc0, s43, 4                                                // 00000168: SOP2, 8F6A842B, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_lshl_b32 s41, s22, 6                                                 // 0000016C: SOP2, 8F298616, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\common.pssli */
  /* 53: float2 uv : TEXCOORD1; */
  s_and_b32 vcc0, vcc0, #0x1f0                                           // 00000170: SOP2, 876AFF6A 000001F0, 
  /* 51: float3 normal : NORMAL; */
  s_cmp_eq_u32 s13, 0                                                    // 00000178: SOPC, BF06800D, 
  /* 53: float2 uv : TEXCOORD1; */
  s_load_dwordx4 s[20:23], s[20:21], vcc0                                // 0000017C: SMEM, F408050A D4000000,  8cy stall (sa_sdst)
  /* 51: float3 normal : NORMAL; */
  s_cselect_b32 s3, s3, vcc1                                             // 00000184: SOP2, 85036B03, 
  /* 52: float3 tangent : TEXCOORD0; */
  s_bfe_u32 vcc0, s42, #0x1001a                                          // 00000188: SOP2, 93EAFF2A 0001001A, 
  s_bfe_u32 s14, s42, #0x70007                                           // 00000190: SOP2, 938EFF2A 00070007, 
  s_cmp_eq_u32 0, vcc0                                                   // 00000198: SOPC, BF066A80, 
  /* 51: float3 normal : NORMAL; */
  buffer_load_format_xyz v[0:2], v0, s[0:3], s15 idxen                   // 0000019C: MUBUF, E0082000 0F000000,  8cy stall (sa_sdst)
  /* 52: float3 tangent : TEXCOORD0; */
  s_cselect_b64 s[0:1], exec[0:1], 0                                     // 000001A4: SOP2, 8580807E, 
  s_bfe_u32 vcc1, s42, #0x20005                                          // 000001A8: SOP2, 93EBFF2A 00020005, 
  s_and_b32 s5, s19, #0xfff80000                                         // 000001B0: SOP2, 8705FF13 FFF80000, 
  s_lshl_b32 vcc0, s14, 12                                               // 000001B8: SOP2, 8F6A8C0E, 
  s_lshl4_add_u32 vcc1, vcc1, #0xc0000                                   // 000001BC: SOP2, 98EBFF6B 000C0000, 
  s_or_b32 s2, s5, vcc0                                                  // 000001C4: SOP2, 88026A05, 
  s_bfe_u64 vcc[0:1], s[44:45], vcc1                                     // 000001C8: SOP2, 94EA6B2C, 
  v_cndmask_b32 v3, v8, v5, s[0:1]                                       // 000001CC: VOP3, D5010003 00020B08,  2cy stall (vm_vsrc)
  s_or_b32 vcc0, s2, vcc0                                                // 000001D4: SOP2, 886A6A02,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u32 vcc1, s42, #0xc000e                                          // 000001D8: SOP2, 93EBFF2A 000C000E, 
  s_cmp_eq_u32 s14, 0                                                    // 000001E0: SOPC, BF06800E, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_buffer_load_dwordx16 s[48:63], s[8:11], s41                          // 000001E4: SMEM, F4300C04 52000000,  8cy stall (sa_sdst)
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\common.pssli */
  /* 52: float3 tangent : TEXCOORD0; */
  s_cselect_b32 s19, s19, vcc0                                           // 000001EC: SOP2, 85136A13, 
  /* 53: float2 uv : TEXCOORD1; */
  s_bfe_u32 vcc0, s43, #0x1001a                                          // 000001F0: SOP2, 93EAFF2B 0001001A, 
  /* 52: float3 tangent : TEXCOORD0; */
  buffer_load_format_xyz v[9:11], v3, s[16:19], vcc1 idxen               // 000001F8: MUBUF, E0082000 6B040903,  8cy stall (sa_sdst)
  /* 53: float2 uv : TEXCOORD1; */
  s_cmp_eq_u32 0, vcc0                                                   // 00000200: SOPC, BF066A80, 
  s_nop 0x0                                                              // 00000204: SOPP, BF800000, 
  s_cselect_b64 s[16:17], exec[0:1], 0                                   // 00000208: SOP2, 8590807E, 
  s_bfe_u32 s40, s43, #0x70007                                           // 0000020C: SOP2, 93A8FF2B 00070007, 
  s_bfe_u32 vcc1, s43, #0x20005                                          // 00000214: SOP2, 93EBFF2B 00020005, 
  s_waitcnt lgkmcnt(0)                                                   // 0000021C: SOPP, BF8CC07F, 17cy stall (lgkm_cnt)
  s_and_b32 s19, s23, #0xfff80000                                        // 00000220: SOP2, 8713FF17 FFF80000, 
  s_lshl_b32 vcc0, s40, 12                                               // 00000228: SOP2, 8F6A8C28, 
  s_lshl4_add_u32 vcc1, vcc1, #0xc0000                                   // 0000022C: SOP2, 98EBFF6B 000C0000, 
  s_or_b32 s19, s19, vcc0                                                // 00000234: SOP2, 88136A13, 
  s_bfe_u64 vcc[0:1], s[44:45], vcc1                                     // 00000238: SOP2, 94EA6B2C, 
  v_cndmask_b32 v3, v8, v5, s[16:17]                                     // 0000023C: VOP3, D5010003 00420B08, 
  s_or_b32 vcc1, s19, vcc0                                               // 00000244: SOP2, 886B6A13,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u32 vcc0, s43, #0xc000e                                          // 00000248: SOP2, 93EAFF2B 000C000E, 
  s_cmp_eq_u32 s40, 0                                                    // 00000250: SOPC, BF068028, 
  s_nop 0x0                                                              // 00000254: SOPP, BF800000, 
  s_cselect_b32 s23, s23, vcc1                                           // 00000258: SOP2, 85176B17, 
  buffer_load_format_xy v[3:4], v3, s[20:23], vcc0 idxen                 // 0000025C: MUBUF, E0042000 6A050303,  8cy stall (sa_sdst)
  s_waitcnt vmcnt(3)                                                     // 00000264: SOPP, BF8C3F73, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 17: float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0)); */
  v_mad_f32 v7, s48, v12, s60                                            // 00000268: VOP3, D5410007 00F21830,  8cy stall (vm_vsrc)
  v_mad_f32 v15, v12, s49, s61                                           // 00000270: VOP3, D541000F 00F4630C, 
  v_mad_f32 v8, v12, s50, s62                                            // 00000278: VOP3, D5410008 00F8650C, 
  v_mad_f32 v12, v12, s51, s63                                           // 00000280: VOP3, D541000C 00FC670C, 
  v_mad_f32 v5, s52, v13, v7                                             // 00000288: VOP3, D5410005 041E1A34, 
  v_mac_f32 v15, s53, v13                                                // 00000290: VOP2, 3E1E1A35, 
  v_mad_f32 v6, v13, s54, v8                                             // 00000294: VOP3, D5410006 04206D0D, 
  v_mac_f32 v12, s55, v13                                                // 0000029C: VOP2, 3E181A37, 
  v_mac_f32 v5, s56, v14                                                 // 000002A0: VOP2, 3E0A1C38, 
  v_mad_f32 v7, v14, s57, v15                                            // 000002A4: VOP3, D5410007 043C730E, 
  v_mac_f32 v6, s58, v14                                                 // 000002AC: VOP2, 3E0C1C3A, 
  v_mad_f32 v8, v14, s59, v12                                            // 000002B0: VOP3, D5410008 0430770E, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mul_f32 v14, s25, v5                                                 // 000002B8: VOP2, 101C0A19, 
  v_mul_f32 v12, s26, v5                                                 // 000002BC: VOP2, 10180A1A, 
  v_mul_f32 v16, s24, v5                                                 // 000002C0: VOP2, 10200A18, 
  v_mul_f32 v15, s27, v5                                                 // 000002C4: VOP2, 101E0A1B, 
  v_mac_f32 v14, s29, v7                                                 // 000002C8: VOP2, 3E1C0E1D, 
  v_mad_f32 v20, s30, v7, v12                                            // 000002CC: VOP3, D5410014 04320E1E, 
  v_mac_f32 v16, s28, v7                                                 // 000002D4: VOP2, 3E200E1C, 
  v_mad_f32 v17, s31, v7, v15                                            // 000002D8: VOP3, D5410011 043E0E1F, 
  v_mac_f32 v20, s34, v6                                                 // 000002E0: VOP2, 3E280C22, 
  v_mad_f32 v26, s32, v6, v16                                            // 000002E4: VOP3, D541001A 04420C20, 
  v_mac_f32 v17, s35, v6                                                 // 000002EC: VOP2, 3E220C23, 
  s_waitcnt vmcnt(2)                                                     // 000002F0: SOPP, BF8C3F72, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v18, s48, v0                                                 // 000002F4: VOP2, 10240030, 
  v_mul_f32 v19, s49, v0                                                 // 000002F8: VOP2, 10260031, 
  v_mul_f32 v25, s50, v0                                                 // 000002FC: VOP2, 10320032, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mac_f32 v26, s36, v8                                                 // 00000300: VOP2, 3E341024, 
  v_mac_f32 v20, s38, v8                                                 // 00000304: VOP2, 3E281026, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mad_f32 v12, s52, v1, v18                                            // 00000308: VOP3, D541000C 044A0234, 
  v_mad_f32 v13, v1, s53, v19                                            // 00000310: VOP3, D541000D 044C6B01, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mad_f32 v18, s33, v6, v14                                            // 00000318: VOP3, D5410012 043A0C21, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v25, s54, v1                                                 // 00000320: VOP2, 3E320236, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mad_f32 v19, s39, v8, v17                                            // 00000324: VOP3, D5410013 04461027, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v12, s56, v2                                                 // 0000032C: VOP2, 3E180438, 
  v_mac_f32 v13, s57, v2                                                 // 00000330: VOP2, 3E1A0439, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mac_f32 v18, s37, v8                                                 // 00000334: VOP2, 3E241025, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v25, s58, v2                                                 // 00000338: VOP2, 3E32043A, 
  s_waitcnt vmcnt(1)                                                     // 0000033C: SOPP, BF8C3F71, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mul_f32 v14, s48, v9                                                 // 00000340: VOP2, 101C1230, 
  v_mul_f32 v22, s49, v9                                                 // 00000344: VOP2, 102C1231, 
  v_mul_f32 v21, s50, v9                                                 // 00000348: VOP2, 102A1232, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v23, v12, v12                                                // 0000034C: VOP2, 102E190C, 
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  exp pos0, v26, v18, v20, v19 done row_en                               // 00000350: EXP, F80008CF 1314121A, 13cy stall (va_vdst)
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mac_f32 v14, s52, v10                                                // 00000358: VOP2, 3E1C1434, 
  v_mad_f32 v15, v10, s53, v22                                           // 0000035C: VOP3, D541000F 04586B0A, 
  v_mac_f32 v21, s54, v10                                                // 00000364: VOP2, 3E2A1436, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v23, v13, v13                                                // 00000368: VOP2, 3E2E1B0D, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mul_f32 v17, v0, v10                                                 // 0000036C: VOP2, 10221500, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mac_f32 v14, s56, v11                                                // 00000370: VOP2, 3E1C1638, 
  v_mac_f32 v15, s57, v11                                                // 00000374: VOP2, 3E1E1639, 
  v_mad_f32 v16, v11, s58, v21                                           // 00000378: VOP3, D5410010 0454750B, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mac_f32 v23, v25, v25                                                // 00000380: VOP2, 3E2E3319, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mul_f32 v24, v9, v2                                                  // 00000384: VOP2, 10300509, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mul_f32 v22, v14, v14                                                // 00000388: VOP2, 102C1D0E, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mul_f32 v21, v1, v11                                                 // 0000038C: VOP2, 102A1701, 
  v_mac_f32 v17, -v1, v9                                                 // 00000390: VOP3, D51F0011 20021301, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_rsq_f32 v9, v23                                                      // 00000398: VOP1, 7E125D17, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mad_f32 v0, v11, -v0, v24                                            // 0000039C: VOP3, D5410000 4462010B,  4cy stall (trans VALU wave64)
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mac_f32 v22, v15, v15                                                // 000003A4: VOP2, 3E2C1F0F, 
  /* 30: output.bitangent = cross(input.normal, input.tangent); */
  v_mac_f32 v21, -v2, v10                                                // 000003A8: VOP3, D51F0015 20021502, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v10, v9, v12                                                 // 000003B0: VOP2, 10141909, 
  v_mul_f32 v11, v9, v13                                                 // 000003B4: VOP2, 10161B09, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_mad_f32 v1, v16, v16, v22                                            // 000003B8: VOP3, D5410001 045A2110, 
  /* 28: output.normal = normalize(mul(worldRotationMatrix, input.normal)); */
  v_mul_f32 v9, v9, v25                                                  // 000003C0: VOP2, 10123309, 
  /* 29: output.tangent = normalize(mul(worldRotationMatrix, input.tangent)); */
  v_rsq_f32 v12, v1                                                      // 000003C4: VOP1, 7E185D01,  1cy stall (v1)
  v_mul_f32 v13, v12, v14                                                // 000003C8: VOP2, 101A1D0C,  8cy stall (v12)
  v_mul_f32 v14, v12, v15                                                // 000003CC: VOP2, 101C1F0C, 
  v_mul_f32 v12, v12, v16                                                // 000003D0: VOP2, 1018210C, 
  s_waitcnt vmcnt(0)                                                     // 000003D4: SOPP, BF8C3F70, 
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  exp param0, v3, v4, off, off row_en                                    // 000003D8: EXP, F8000203 00000403, 12cy stall (va_vdst)
  exp param1, v10, v11, v9, off row_en                                   // 000003E0: EXP, F8000217 00090B0A, 
  exp param2, v13, v14, v12, off row_en                                  // 000003E8: EXP, F8000227 000C0E0D, 
  exp param3, v21, v0, v17, off row_en                                   // 000003F0: EXP, F8000237 00110015, 
  exp param4, v5, v7, v6, v8 row_en                                      // 000003F8: EXP, F800024F 08060705, 
  /* 36: } */
  s_endpgm                                                               // 00000400: SOPP, BF810000, 

/*
=== resources:
 0) class: srt        slot: 0   name:srt            type: ShaderResourceTable
 1) class: cb         slot: 0   name:ViewConstants  type: ConstantBuffer<ViewConstants>
 2) class: cb         slot: 2   name:DrawConstants  type: ConstantBuffer<DrawConstants>
 3) class: input      slot: 0   name:input.position semantic: POSITION index: 0 type: float3
 4) class: input      slot: 1   name:input.normal   semantic: NORMAL index: 0 type: float3
 5) class: input      slot: 2   name:input.tangent  semantic: TEXCOORD index: 0 type: float3
 6) class: input      slot: 3   name:input.uv       semantic: TEXCOORD index: 1 type: float2
 7) class: output     slot: 0   name:main.uv        semantic: TEXCOORD index: 0 type: float2
 8) class: output     slot: 1   name:main.normal    semantic: TEXCOORD index: 1 type: float3
 9) class: output     slot: 2   name:main.tangent   semantic: TEXCOORD index: 2 type: float3
10) class: output     slot: 3   name:main.bitangent semantic: TEXCOORD index: 3 type: float3
11) class: output     slot: 4   name:main.worldPos  semantic: TEXCOORD index: 4 type: float4
12) class: output     slot: 5   name:main.position  semantic: S_POSITION index: 0 type: float4

=== user-types:
struct MaterialProperties  { // size=32
 float4 m_albedoColor;    // offset:0, unused
 float4 m_emissiveColor;  // offset:16, unused
};

struct MaterialSRT  { // size=96
 RegularBuffer<unsigned int> m_materialFlags;             // offset:0, unused
 RegularBuffer<MaterialProperties> m_materialProperties;  // offset:16, unused
 RegularBuffer<Texture2D<float4>> m_albedoTexture;        // offset:32, unused
 RegularBuffer<Texture2D<float4>> m_normalTexture;        // offset:48, unused
 RegularBuffer<Texture2D<float4>> m_roughnessTexture;     // offset:64, unused
 RegularBuffer<Texture2D<float4>> m_emissiveTexture;      // offset:80, unused
};

struct ShaderResourceTable  { // size=24
 RegularBuffer<float4x4> m_worldMatrix;  // offset:0
 MaterialSRT* m_material;                // offset:16, unused
};

struct ViewConstants  { // size=208
 float4x4 m_viewProjectionMatrix;         // offset:0
 float4x4 m_inverseViewProjectionMatrix;  // offset:64, unused
 float4 m_viewPosition;                   // offset:128, unused
 float4 m_lightDirection;                 // offset:144, unused
 float4 m_shadowFocusNearFar;             // offset:160, unused
 float4 m_cascadeFocusFar;                // offset:176, unused
 float4 m_time;                           // offset:192, unused
};

struct DrawConstants  { // size=16
 unsigned int m_entityIndex;  // offset:0
 int m_lodIndex;              // offset:4, unused
 unsigned int m_debugOption;  // offset:8, unused
 unsigned int m_unused;       // offset:12, unused
};

*/