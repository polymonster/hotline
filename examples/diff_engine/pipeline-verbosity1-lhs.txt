>> pass 0/2: finalize unparse
>> pass 1/2: dominance analysis
>> pass 2/2: validate graph

Pass List:
>> pass 0/815: attach options
    attach options (ED6904A2)
>> pass 1/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 2/815: validate graph
    validate graph (0045C2BE)
>> pass 3/815: R10PrepareNggVs
    R10PrepareNggVs (7CBA6C00)
>> pass 4/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 5/815: validate graph
    validate graph (0045C2BE)
>> pass 6/815: inline hull shader patch constant function
    inline hull shader patch constant function (B88B43F7)
>> pass 7/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 8/815: validate graph
    validate graph (0045C2BE)
>> pass 9/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %156 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
      'cubemapTexture' - texObj:t0
    %157 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
      'brdfLUT' - texObj:t1
    %158 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
      'albedoTexture' - texObj:t2
    %159 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
      'normalTexture' - texObj:t3
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
      'roughnessTexture' - texObj:t4
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
      'emissiveTexture' - texObj:t5
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
      'shadowmapTexture0' - texObj:t6
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
      'shadowmapTexture1' - texObj:t7
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
      'shadowmapTexture2' - texObj:t8
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
      'shadowmapTexture3' - texObj:t9
    %166 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
      'samplerWrapLinear' - smpUnit:0
    %167 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
      'samplerShadowCompare' - smpUnit:1

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %11 temp: temp(0) * 1/int32[64] - '__function_shader_read_only_vgpr'

  %16 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_gpuPrintfFunctionShaderAbi'

  %44 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_gpuNggValidateFunctionShaderAbi'

  %64 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_nullFunctionShaderAbi'

  %82 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_orderedcount_check_abi'

  %102 temp: lds(0) * 1/int32[8] - 'lds_prefixSumBuffer'

  %103 temp: lds(0) * 4/fp32[256][5] - 'pos_compaction'[GsVertexOutput][Sroa]

  %104 temp: lds(0) * 4/int32[256][32] - 'param_compaction'[GsVertexOutput][Sroa]

  %105 temp: lds(0) * 1/int32[256] - 'index_compaction'[GsIndexOutput][Sroa]

  %106 temp: lds(0) * 1/int32[256] - 'primid_compaction'[GsIndexOutput][Sroa]

  %112 temp: temp(0) * struct (PrintfNoArg) {} - 's_invalid'

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %19 temp(0) * 1/int32 GETELEMPTR %16, int32{0}, int32{0}
        %21 void ST int32{4}, %19
        %22 temp(0) * 1/int32 GETELEMPTR %16, int32{0}, int32{1}
        %25 void ST int32{40}, %22
        %26 temp(0) * 1/int32 GETELEMPTR %16, int32{0}, int32{2}
        %29 void ST int32{16}, %26
        %30 temp(0) * 1/int32 GETELEMPTR %16, int32{0}, int32{3}
        %32 void ST int32{16}, %30
        %33 temp(0) * 1/int32 GETELEMPTR %16, int32{0}, int32{4}
        %34 void ST int32{0}, %33
        %35 temp(0) * 1/int32 GETELEMPTR %16, int32{0}, int32{5}
        %37 void ST int32{0}, %35
        %38 temp(0) * 1/int64 GETELEMPTR %16, int32{0}, int32{6}
        %40 void ST int64{0}, %38
        %41 temp(0) * 1/int64 GETELEMPTR %16, int32{0}, int32{7}
        %43 void ST int64{0}, %41
        %46 temp(0) * 1/int32 GETELEMPTR %44, int32{0}, int32{0}
        %47 void ST int32{4}, %46
        %48 temp(0) * 1/int32 GETELEMPTR %44, int32{0}, int32{1}
        %50 void ST int32{12}, %48
        %51 temp(0) * 1/int32 GETELEMPTR %44, int32{0}, int32{2}
        %52 void ST int32{16}, %51
        %53 temp(0) * 1/int32 GETELEMPTR %44, int32{0}, int32{3}
        %54 void ST int32{16}, %53
        %55 temp(0) * 1/int32 GETELEMPTR %44, int32{0}, int32{4}
        %57 void ST int32{64}, %55
        %58 temp(0) * 1/int32 GETELEMPTR %44, int32{0}, int32{5}
        %59 void ST int32{0}, %58
        %60 temp(0) * 1/int64 GETELEMPTR %44, int32{0}, int32{6}
        %61 void ST int64{0}, %60
        %62 temp(0) * 1/int64 GETELEMPTR %44, int32{0}, int32{7}
        %63 void ST int64{0}, %62
        %66 temp(0) * 1/int32 GETELEMPTR %64, int32{0}, int32{0}
        %67 void ST int32{4}, %66
        %68 temp(0) * 1/int32 GETELEMPTR %64, int32{0}, int32{1}
        %69 void ST int32{16}, %68
        %70 temp(0) * 1/int32 GETELEMPTR %64, int32{0}, int32{2}
        %71 void ST int32{16}, %70
        %72 temp(0) * 1/int32 GETELEMPTR %64, int32{0}, int32{3}
        %73 void ST int32{0}, %72
        %74 temp(0) * 1/int32 GETELEMPTR %64, int32{0}, int32{4}
        %75 void ST int32{0}, %74
        %76 temp(0) * 1/int32 GETELEMPTR %64, int32{0}, int32{5}
        %77 void ST int32{0}, %76
        %78 temp(0) * 1/int64 GETELEMPTR %64, int32{0}, int32{6}
        %79 void ST int64{0}, %78
        %80 temp(0) * 1/int64 GETELEMPTR %64, int32{0}, int32{7}
        %81 void ST int64{0}, %80
        %84 temp(0) * 1/int32 GETELEMPTR %82, int32{0}, int32{0}
        %85 void ST int32{4}, %84
        %86 temp(0) * 1/int32 GETELEMPTR %82, int32{0}, int32{1}
        %87 void ST int32{16}, %86
        %88 temp(0) * 1/int32 GETELEMPTR %82, int32{0}, int32{2}
        %89 void ST int32{16}, %88
        %90 temp(0) * 1/int32 GETELEMPTR %82, int32{0}, int32{3}
        %92 void ST int32{8}, %90
        %93 temp(0) * 1/int32 GETELEMPTR %82, int32{0}, int32{4}
        %94 void ST int32{0}, %93
        %95 temp(0) * 1/int32 GETELEMPTR %82, int32{0}, int32{5}
        %96 void ST int32{0}, %95
        %97 temp(0) * 1/int64 GETELEMPTR %82, int32{0}, int32{6}
        %98 void ST int64{0}, %97
        %99 temp(0) * 1/int64 GETELEMPTR %82, int32{0}, int32{7}
        %100 void ST int64{0}, %99
        %8 void BR 
        --> block:172

      block:172
        <-- block:7
        %170 4/fp32 SHUF fp32{1.0}.x-xx,  fp32{0.0}.-x--
        %171 void ST %170, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:172
        --> 


--------------------------------------------------------------------------------

>> pass 10/815: validate graph
    validate graph (0045C2BE)
>> pass 11/815: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 12/815: validate graph
    validate graph (0045C2BE)
>> pass 13/815: constant propagation
    constant propagation (5CBB3303)
>> pass 14/815: validate graph
    validate graph (0045C2BE)
>> pass 15/815: cost analysis
    cost analysis (716789B8)
>> pass 16/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 17/815: validate graph
    validate graph (0045C2BE)
>> pass 18/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 19/815: validate graph
    validate graph (0045C2BE)
>> pass 20/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 21/815: validate graph
    validate graph (0045C2BE)
>> pass 22/815: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 23/815: isolate function
    isolate function (2FD72558)
>> pass 24/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 25/815: validate graph
    validate graph (0045C2BE)
>> pass 26/815: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 27/815: trivial alias analysis
    trivial alias analysis (359D1A97)
>> pass 28/815: inline function calls
    inline function calls (0A71E457)
>> pass 29/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 30/815: validate graph
    validate graph (0045C2BE)
>> pass 31/815: assign fastmath flags
    assign fastmath flags (BAADFB36)
>> pass 32/815: validate graph
    validate graph (0045C2BE)
>> pass 33/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 34/815: validate graph
    validate graph (0045C2BE)
>> pass 35/815: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 36/815: validate graph
    validate graph (0045C2BE)
>> pass 37/815: optimize unions
    optimize unions (C7BDF63C)
>> pass 38/815: validate graph
    validate graph (0045C2BE)
>> pass 39/815: constant propagation
    constant propagation (5CBB3303)
>> pass 40/815: validate graph
    validate graph (0045C2BE)
>> pass 41/815: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 42/815: validate graph
    validate graph (0045C2BE)
>> pass 43/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 44/815: validate graph
    validate graph (0045C2BE)
>> pass 45/815: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 46/815: validate graph
    validate graph (0045C2BE)
>> pass 47/815: loop analysis
    loop analysis (598E85BD)
>> pass 48/815: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 49/815: mark GET_WAVEMODE
    mark GET_WAVEMODE (3283A7BF)
>> pass 50/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 51/815: validate graph
    validate graph (0045C2BE)
>> pass 52/815: constant propagation
    constant propagation (5CBB3303)
>> pass 53/815: validate graph
    validate graph (0045C2BE)
>> pass 54/815: R10 legalize entry args
    R10 legalize entry args (A3F30344)
>> pass 55/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 56/815: validate graph
    validate graph (0045C2BE)
>> pass 57/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 58/815: validate graph
    validate graph (0045C2BE)
>> pass 59/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 60/815: validate graph
    validate graph (0045C2BE)
>> pass 61/815: legalize sub-routines
    legalize sub-routines (97462243)
>> pass 62/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 63/815: validate graph
    validate graph (0045C2BE)
>> pass 64/815: sparse conditional constant propagation
    sparse conditional constant propagation (41B5CAD4)
>> pass 65/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 66/815: validate graph
    validate graph (0045C2BE)
>> pass 67/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 68/815: validate graph
    validate graph (0045C2BE)
>> pass 69/815: merge getelemptr
    merge getelemptr (D655006F)
>> pass 70/815: validate graph
    validate graph (0045C2BE)
>> pass 71/815: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 72/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 73/815: remove dead code
    remove dead code (B7E6F507)
>> pass 74/815: validate graph
    validate graph (0045C2BE)
>> pass 75/815: loop analysis
    loop analysis (598E85BD)
>> pass 76/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 77/815: validate graph
    validate graph (0045C2BE)
>> pass 78/815: constant propagation
    constant propagation (5CBB3303)
>> pass 79/815: validate graph
    validate graph (0045C2BE)
>> pass 80/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 81/815: validate graph
    validate graph (0045C2BE)
>> pass 82/815: legalize constant writes
    legalize constant writes (D629C4D9)
>> pass 83/815: validate graph
    validate graph (0045C2BE)
>> pass 84/815: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 85/815: validate graph
    validate graph (0045C2BE)
>> pass 86/815: remove dead code
    remove dead code (B7E6F507)
>> pass 87/815: validate graph
    validate graph (0045C2BE)
>> pass 88/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %156 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
      'cubemapTexture' - texObj:t0_dead
    %157 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
      'brdfLUT' - texObj:t1_dead
    %158 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
      'albedoTexture' - texObj:t2_dead
    %159 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
      'normalTexture' - texObj:t3_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
      'roughnessTexture' - texObj:t4_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
      'emissiveTexture' - texObj:t5_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
      'shadowmapTexture0' - texObj:t6_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
      'shadowmapTexture1' - texObj:t7_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
      'shadowmapTexture2' - texObj:t8_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
      'shadowmapTexture3' - texObj:t9_dead
    %166 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
      'samplerWrapLinear' - smpUnit:0_dead
    %167 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
      'samplerShadowCompare' - smpUnit:1_dead

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 89/815: validate graph
    validate graph (0045C2BE)
>> pass 90/815: constant propagation
    constant propagation (5CBB3303)
>> pass 91/815: validate graph
    validate graph (0045C2BE)
>> pass 92/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 93/815: validate graph
    validate graph (0045C2BE)
>> pass 94/815: legalize ptr_from_texture instructions
    legalize ptr_from_texture instructions (F97DC9E0)
>> pass 95/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 96/815: validate graph
    validate graph (0045C2BE)
>> pass 97/815: apply cubemap WAR
    apply cubemap WAR (5F879B97)
>> pass 98/815: validate graph
    validate graph (0045C2BE)
>> pass 99/815: constant propagation
    constant propagation (5CBB3303)
>> pass 100/815: validate graph
    validate graph (0045C2BE)
>> pass 101/815: create uniform default values
    create uniform default values (43C6F162)
>> pass 102/815: validate graph
    validate graph (0045C2BE)
>> pass 103/815: suspend-resume
    suspend-resume (3714C203)
>> pass 104/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 105/815: validate graph
    validate graph (0045C2BE)
>> pass 106/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %156 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
      'cubemapTexture' - texObj:t0_dead
    %157 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
      'brdfLUT' - texObj:t1_dead
    %158 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
      'albedoTexture' - texObj:t2_dead
    %159 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
      'normalTexture' - texObj:t3_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
      'roughnessTexture' - texObj:t4_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
      'emissiveTexture' - texObj:t5_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
      'shadowmapTexture0' - texObj:t6_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
      'shadowmapTexture1' - texObj:t7_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
      'shadowmapTexture2' - texObj:t8_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
      'shadowmapTexture3' - texObj:t9_dead
    %166 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
      'samplerWrapLinear' - smpUnit:0_dead
    %167 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
      'samplerShadowCompare' - smpUnit:1_dead

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 107/815: validate graph
    validate graph (0045C2BE)
>> pass 108/815: lower compute special registers
    lower compute special registers (404775D5)
>> pass 109/815: validate graph
    validate graph (0045C2BE)
>> pass 110/815: validate pipeline
    validate pipeline (D7B54D79)
>> pass 0/2: finalize unparse
>> pass 1/2: dominance analysis
>> pass 2/2: validate graph

Pass List:
>> pass 0/815: attach options
    attach options (ED6904A2)
>> pass 1/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 2/815: validate graph
    validate graph (0045C2BE)
>> pass 3/815: R10PrepareNggVs
    R10PrepareNggVs (7CBA6C00)
>> pass 4/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 5/815: validate graph
    validate graph (0045C2BE)
>> pass 6/815: inline hull shader patch constant function
    inline hull shader patch constant function (B88B43F7)
>> pass 7/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 8/815: validate graph
    validate graph (0045C2BE)
>> pass 9/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default
    %230 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %327 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0
    %328 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1
    %329 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2
    %330 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3
    %331 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4
    %332 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5
    %333 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6
    %334 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7
    %335 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8
    %336 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9
    %337 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0
    %338 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %233 temp: temp(0) * 1/int32[64] - '__function_shader_read_only_vgpr'

  %234 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_gpuPrintfFunctionShaderAbi'

  %252 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_gpuNggValidateFunctionShaderAbi'

  %270 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_nullFunctionShaderAbi'

  %288 temp: temp(0) * struct (FunctionABI) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int64, 1/int64} - 's_orderedcount_check_abi'

  %306 temp: lds(0) * 1/int32[8] - 'lds_prefixSumBuffer'

  %307 temp: lds(0) * 4/fp32[256][5] - 'pos_compaction'[GsVertexOutput][Sroa]

  %308 temp: lds(0) * 4/int32[256][32] - 'param_compaction'[GsVertexOutput][Sroa]

  %309 temp: lds(0) * 1/int32[256] - 'index_compaction'[GsIndexOutput][Sroa]

  %310 temp: lds(0) * 1/int32[256] - 'primid_compaction'[GsIndexOutput][Sroa]

  %311 temp: temp(0) * struct (PrintfNoArg) {} - 's_invalid'

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %230[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]
    cubemapTexture(96 - 96) -- %327[0:+32]
    brdfLUT(97 - 97) -- %328[0:+32]
    albedoTexture(98 - 98) -- %329[0:+32]
    normalTexture(99 - 99) -- %330[0:+32]
    roughnessTexture(100 - 100) -- %331[0:+32]
    emissiveTexture(101 - 101) -- %332[0:+32]
    shadowmapTexture0(102 - 102) -- %333[0:+32]
    shadowmapTexture1(103 - 103) -- %334[0:+32]
    shadowmapTexture2(104 - 104) -- %335[0:+32]
    shadowmapTexture3(105 - 105) -- %336[0:+32]
    samplerWrapLinear(107 - 107) -- %337[0:+16]
    samplerShadowCompare(109 - 109) -- %338[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %229 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %232 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %230[0:+24]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %236 temp(0) * 1/int32 GETELEMPTR %234, int32{0}, int32{0}
        %237 void ST int32{4}, %236
        %238 temp(0) * 1/int32 GETELEMPTR %234, int32{0}, int32{1}
        %239 void ST int32{40}, %238
        %240 temp(0) * 1/int32 GETELEMPTR %234, int32{0}, int32{2}
        %241 void ST int32{16}, %240
        %242 temp(0) * 1/int32 GETELEMPTR %234, int32{0}, int32{3}
        %243 void ST int32{16}, %242
        %244 temp(0) * 1/int32 GETELEMPTR %234, int32{0}, int32{4}
        %245 void ST int32{0}, %244
        %246 temp(0) * 1/int32 GETELEMPTR %234, int32{0}, int32{5}
        %247 void ST int32{0}, %246
        %248 temp(0) * 1/int64 GETELEMPTR %234, int32{0}, int32{6}
        %249 void ST int64{0}, %248
        %250 temp(0) * 1/int64 GETELEMPTR %234, int32{0}, int32{7}
        %251 void ST int64{0}, %250
        %254 temp(0) * 1/int32 GETELEMPTR %252, int32{0}, int32{0}
        %255 void ST int32{4}, %254
        %256 temp(0) * 1/int32 GETELEMPTR %252, int32{0}, int32{1}
        %257 void ST int32{12}, %256
        %258 temp(0) * 1/int32 GETELEMPTR %252, int32{0}, int32{2}
        %259 void ST int32{16}, %258
        %260 temp(0) * 1/int32 GETELEMPTR %252, int32{0}, int32{3}
        %261 void ST int32{16}, %260
        %262 temp(0) * 1/int32 GETELEMPTR %252, int32{0}, int32{4}
        %263 void ST int32{64}, %262
        %264 temp(0) * 1/int32 GETELEMPTR %252, int32{0}, int32{5}
        %265 void ST int32{0}, %264
        %266 temp(0) * 1/int64 GETELEMPTR %252, int32{0}, int32{6}
        %267 void ST int64{0}, %266
        %268 temp(0) * 1/int64 GETELEMPTR %252, int32{0}, int32{7}
        %269 void ST int64{0}, %268
        %272 temp(0) * 1/int32 GETELEMPTR %270, int32{0}, int32{0}
        %273 void ST int32{4}, %272
        %274 temp(0) * 1/int32 GETELEMPTR %270, int32{0}, int32{1}
        %275 void ST int32{16}, %274
        %276 temp(0) * 1/int32 GETELEMPTR %270, int32{0}, int32{2}
        %277 void ST int32{16}, %276
        %278 temp(0) * 1/int32 GETELEMPTR %270, int32{0}, int32{3}
        %279 void ST int32{0}, %278
        %280 temp(0) * 1/int32 GETELEMPTR %270, int32{0}, int32{4}
        %281 void ST int32{0}, %280
        %282 temp(0) * 1/int32 GETELEMPTR %270, int32{0}, int32{5}
        %283 void ST int32{0}, %282
        %284 temp(0) * 1/int64 GETELEMPTR %270, int32{0}, int32{6}
        %285 void ST int64{0}, %284
        %286 temp(0) * 1/int64 GETELEMPTR %270, int32{0}, int32{7}
        %287 void ST int64{0}, %286
        %290 temp(0) * 1/int32 GETELEMPTR %288, int32{0}, int32{0}
        %291 void ST int32{4}, %290
        %292 temp(0) * 1/int32 GETELEMPTR %288, int32{0}, int32{1}
        %293 void ST int32{16}, %292
        %294 temp(0) * 1/int32 GETELEMPTR %288, int32{0}, int32{2}
        %295 void ST int32{16}, %294
        %296 temp(0) * 1/int32 GETELEMPTR %288, int32{0}, int32{3}
        %297 void ST int32{8}, %296
        %298 temp(0) * 1/int32 GETELEMPTR %288, int32{0}, int32{4}
        %299 void ST int32{0}, %298
        %300 temp(0) * 1/int32 GETELEMPTR %288, int32{0}, int32{5}
        %301 void ST int32{0}, %300
        %302 temp(0) * 1/int64 GETELEMPTR %288, int32{0}, int32{6}
        %303 void ST int64{0}, %302
        %304 temp(0) * 1/int64 GETELEMPTR %288, int32{0}, int32{7}
        %305 void ST int64{0}, %304
        %228 void BR 
        --> block:638

      block:638
        <-- block:227
        %231 generic(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} CONV_reinterp %230
        %339 temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} 'output': INSTA 
        %340 temp(0) * 4/fp32[4]:column_major 'worldMatrix': INSTA 
        %341 generic(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %231, int32{0}, int32{0}
        %342 1/int32 LD %321
        %343 temp(0) * generic(0) * 4/fp32[4]:column_major INSTA 
        %362 void CALL 'column_major float4x4 const& RegularBuffer::operator[](uint) const', byval %342, byref %343, byref %341
        %363 generic(0) * 4/fp32[4]:column_major LD %343
        %364 generic(0) * 4/fp32 GETELEMPTR %363, int32{0}, int32{0}
        %365 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{0}
        %366 4/fp32 LD %364
        %367 void ST %366, %365
        %368 generic(0) * 4/fp32 GETELEMPTR %363, int32{0}, int32{1}
        %369 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{1}
        %370 4/fp32 LD %368
        %371 void ST %370, %369
        %372 generic(0) * 4/fp32 GETELEMPTR %363, int32{0}, int32{2}
        %373 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{2}
        %374 4/fp32 LD %372
        %375 void ST %374, %373
        %376 generic(0) * 4/fp32 GETELEMPTR %363, int32{0}, int32{3}
        %377 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{3}
        %378 4/fp32 LD %376
        %379 void ST %378, %377
        %380 temp(0) * 4/fp32 'worldPos': INSTA 
        %381 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{0}
        %382 3/fp32 LD %381
        %383 3/fp32 SHUF %382.xyz
        %384 4/fp32 SHUF %383.xyz-,  fp32{1.0}.---x
        %443 void CALL 'float4 mul(column_major float4x4, float4)', byref %340, byval %384, byref %380
        %444 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{5}
        %445 4/fp32 LD %380
        %446 void ST %445, %444
        %447 4/fp32 LD %380
        %448 temp(0) * 4/fp32 INSTA 
        %449 void CALL 'float4 mul(column_major float4x4, float4)', byref %313, byval %447, byref %448
        %450 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{0}
        %451 4/fp32 LD %448
        %452 void ST %451, %450
        %453 temp(0) * 3/fp32[3]:column_major 'worldRotationMatrix': INSTA 
        %454 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{0}
        %455 4/fp32 LD %454
        %456 1/fp32 EXTRCOEFF %455, int32{0}
        %457 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{1}
        %458 4/fp32 LD %457
        %459 1/fp32 EXTRCOEFF %458, int32{0}
        %460 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{2}
        %461 4/fp32 LD %460
        %462 1/fp32 EXTRCOEFF %461, int32{0}
        %463 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{3}
        %464 4/fp32 LD %463
        %465 1/fp32 EXTRCOEFF %464, int32{0}
        %466 4/fp32 SHUF %456.x---,  %459.-x--,  %462.--x-,  %465.---x
        %467 3/fp32 SHUF %466.xyz
        %468 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{0}
        %469 3/fp32 LD %468
        %470 1/fp32 EXTRCOEFF %467, int32{0}
        %471 3/fp32 INSCOEFF %469, %470, int32{0}
        %472 void ST %471, %468
        %473 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{1}
        %474 3/fp32 LD %473
        %475 1/fp32 EXTRCOEFF %467, int32{1}
        %476 3/fp32 INSCOEFF %474, %475, int32{0}
        %477 void ST %476, %473
        %478 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{2}
        %479 3/fp32 LD %478
        %480 1/fp32 EXTRCOEFF %467, int32{2}
        %481 3/fp32 INSCOEFF %479, %480, int32{0}
        %482 void ST %481, %478
        %483 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{0}
        %484 4/fp32 LD %483
        %485 1/fp32 EXTRCOEFF %484, int32{1}
        %486 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{1}
        %487 4/fp32 LD %486
        %488 1/fp32 EXTRCOEFF %487, int32{1}
        %489 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{2}
        %490 4/fp32 LD %489
        %491 1/fp32 EXTRCOEFF %490, int32{1}
        %492 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{3}
        %493 4/fp32 LD %492
        %494 1/fp32 EXTRCOEFF %493, int32{1}
        %495 4/fp32 SHUF %485.x---,  %488.-x--,  %491.--x-,  %494.---x
        %496 3/fp32 SHUF %495.xyz
        %497 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{0}
        %498 3/fp32 LD %497
        %499 1/fp32 EXTRCOEFF %496, int32{0}
        %500 3/fp32 INSCOEFF %498, %499, int32{1}
        %501 void ST %500, %497
        %502 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{1}
        %503 3/fp32 LD %502
        %504 1/fp32 EXTRCOEFF %496, int32{1}
        %505 3/fp32 INSCOEFF %503, %504, int32{1}
        %506 void ST %505, %502
        %507 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{2}
        %508 3/fp32 LD %507
        %509 1/fp32 EXTRCOEFF %496, int32{2}
        %510 3/fp32 INSCOEFF %508, %509, int32{1}
        %511 void ST %510, %507
        %512 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{0}
        %513 4/fp32 LD %512
        %514 1/fp32 EXTRCOEFF %513, int32{2}
        %515 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{1}
        %516 4/fp32 LD %515
        %517 1/fp32 EXTRCOEFF %516, int32{2}
        %518 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{2}
        %519 4/fp32 LD %518
        %520 1/fp32 EXTRCOEFF %519, int32{2}
        %521 temp(0) * 4/fp32 GETELEMPTR %340, int32{0}, int32{3}
        %522 4/fp32 LD %521
        %523 1/fp32 EXTRCOEFF %522, int32{2}
        %524 4/fp32 SHUF %514.x---,  %517.-x--,  %520.--x-,  %523.---x
        %525 3/fp32 SHUF %524.xyz
        %526 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{0}
        %527 3/fp32 LD %526
        %528 1/fp32 EXTRCOEFF %525, int32{0}
        %529 3/fp32 INSCOEFF %527, %528, int32{2}
        %530 void ST %529, %526
        %531 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{1}
        %532 3/fp32 LD %531
        %533 1/fp32 EXTRCOEFF %525, int32{1}
        %534 3/fp32 INSCOEFF %532, %533, int32{2}
        %535 void ST %534, %531
        %536 temp(0) * 3/fp32 GETELEMPTR %453, int32{0}, int32{2}
        %537 3/fp32 LD %536
        %538 1/fp32 EXTRCOEFF %525, int32{2}
        %539 3/fp32 INSCOEFF %537, %538, int32{2}
        %540 void ST %539, %536
        %541 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{1}
        %542 3/fp32 LD %541
        %543 temp(0) * 3/fp32 INSTA 
        %585 void CALL 'float3 mul(column_major float3x3, float3)', byref %453, byval %542, byref %543
        %586 3/fp32 LD %543
        %587 3/fp32 NRM %586
        %588 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{2}
        %589 void ST %587, %588
        %590 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{2}
        %591 3/fp32 LD %590
        %592 temp(0) * 3/fp32 INSTA 
        %593 void CALL 'float3 mul(column_major float3x3, float3)', byref %453, byval %591, byref %592
        %594 3/fp32 LD %592
        %595 3/fp32 NRM %594
        %596 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{3}
        %597 void ST %595, %596
        %598 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{1}
        %599 3/fp32 LD %598
        %600 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{2}
        %601 3/fp32 LD %600
        %602 temp(0) * 3/fp32 INSTA 
        %630 void CALL 'float3 cross(float3, float3)', byval %599, byval %601, byref %602
        %631 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{4}
        %632 3/fp32 LD %602
        %633 void ST %632, %631
        %634 temp(0) * 2/fp32 GETELEMPTR %229, int32{0}, int32{3}
        %635 temp(0) * 2/fp32 GETELEMPTR %232, int32{0}, int32{1}
        %636 2/fp32 LD %634
        %637 void ST %636, %635
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:638
        --> 


  func:column_major float4x4 const& RegularBuffer::operator[](uint) const
    arguments:
      %349 in    arg: 1/int32 - 'address'
      %352 out   arg: temp(0) * generic(0) * 4/fp32[4]:column_major - 'operator[]'
      %353 inout arg: temp(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major - 'this'

    dwarf:
      operator[](113 - 113)

    body:
      block:346 - entry
        <-- 
        --> block:360

      block:360
        <-- block:346
        %350 temp(0) * 1/int32 INSTA 
        %351 void ST %349, %350
        %354 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %353
        %355 1/int32 LD %350
        %356 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %354
        %357 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %356, int32{0}, %355
        %358 generic(0) * 4/fp32[4]:column_major CONV_reinterp %357
        %359 void ST %358, %352
        %361 void BR 
        --> block:345

      block:345 - exit
        <-- block:360
        --> 


  func:float4 mul(column_major float4x4, float4)
    arguments:
      %390 in    arg: temp(0) * 4/fp32[4]:column_major - 'mtx'
      %391 in    arg: 4/fp32 - 'v'
      %394 out   arg: temp(0) * 4/fp32 - 'mul'

    dwarf:
      mul(115 - 115)

    body:
      block:387 - entry
        <-- 
        --> block:441

      block:441
        <-- block:387
        %392 temp(0) * 4/fp32 INSTA 
        %393 void ST %391, %392
        %395 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{0}
        %396 4/fp32 LD %395
        %397 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{1}
        %398 4/fp32 LD %397
        %399 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{2}
        %400 4/fp32 LD %399
        %401 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{3}
        %402 4/fp32 LD %401
        %403 4/fp32 SHUF %396.x---,  %398.-x--,  %400.--x-,  %402.---x
        %404 4/fp32 LD %392
        %405 1/fp32 DOT4 %403, %404
        %406 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{0}
        %407 4/fp32 LD %406
        %408 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{1}
        %409 4/fp32 LD %408
        %410 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{2}
        %411 4/fp32 LD %410
        %412 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{3}
        %413 4/fp32 LD %412
        %414 4/fp32 SHUF %407.y---,  %409.-y--,  %411.--y-,  %413.---y
        %415 4/fp32 LD %392
        %416 1/fp32 DOT4 %414, %415
        %417 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{0}
        %418 4/fp32 LD %417
        %419 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{1}
        %420 4/fp32 LD %419
        %421 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{2}
        %422 4/fp32 LD %421
        %423 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{3}
        %424 4/fp32 LD %423
        %425 4/fp32 SHUF %418.z---,  %420.-z--,  %422.--z-,  %424.---z
        %426 4/fp32 LD %392
        %427 1/fp32 DOT4 %425, %426
        %428 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{0}
        %429 4/fp32 LD %428
        %430 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{1}
        %431 4/fp32 LD %430
        %432 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{2}
        %433 4/fp32 LD %432
        %434 temp(0) * 4/fp32 GETELEMPTR %390, int32{0}, int32{3}
        %435 4/fp32 LD %434
        %436 4/fp32 SHUF %429.w---,  %431.-w--,  %433.--w-,  %435.---w
        %437 4/fp32 LD %392
        %438 1/fp32 DOT4 %436, %437
        %439 4/fp32 SHUF %405.x---,  %416.-x--,  %427.--x-,  %438.---x
        %440 void ST %439, %394
        %442 void BR 
        --> block:386

      block:386 - exit
        <-- block:441
        --> 


  func:float3 mul(column_major float3x3, float3)
    arguments:
      %549 in    arg: temp(0) * 3/fp32[3]:column_major - 'mtx'
      %550 in    arg: 3/fp32 - 'v'
      %553 out   arg: temp(0) * 3/fp32 - 'mul'

    dwarf:
      mul(119 - 119)

    body:
      block:546 - entry
        <-- 
        --> block:583

      block:583
        <-- block:546
        %551 temp(0) * 3/fp32 INSTA 
        %552 void ST %550, %551
        %554 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{0}
        %555 3/fp32 LD %554
        %556 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{1}
        %557 3/fp32 LD %556
        %558 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{2}
        %559 3/fp32 LD %558
        %560 3/fp32 SHUF %555.x--,  %557.-x-,  %559.--x
        %561 3/fp32 LD %551
        %562 1/fp32 DOT3 %560, %561
        %563 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{0}
        %564 3/fp32 LD %563
        %565 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{1}
        %566 3/fp32 LD %565
        %567 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{2}
        %568 3/fp32 LD %567
        %569 3/fp32 SHUF %564.y--,  %566.-y-,  %568.--y
        %570 3/fp32 LD %551
        %571 1/fp32 DOT3 %569, %570
        %572 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{0}
        %573 3/fp32 LD %572
        %574 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{1}
        %575 3/fp32 LD %574
        %576 temp(0) * 3/fp32 GETELEMPTR %549, int32{0}, int32{2}
        %577 3/fp32 LD %576
        %578 3/fp32 SHUF %573.z--,  %575.-z-,  %577.--z
        %579 3/fp32 LD %551
        %580 1/fp32 DOT3 %578, %579
        %581 3/fp32 SHUF %562.x--,  %571.-x-,  %580.--x
        %582 void ST %581, %553
        %584 void BR 
        --> block:545

      block:545 - exit
        <-- block:583
        --> 


  func:float3 cross(float3, float3)
    arguments:
      %608 in    arg: 3/fp32 - 'a'
      %611 in    arg: 3/fp32 - 'b'
      %614 out   arg: temp(0) * 3/fp32 - 'cross'

    dwarf:
      cross(121 - 121)

    body:
      block:605 - entry
        <-- 
        --> block:628

      block:628
        <-- block:605
        %609 temp(0) * 3/fp32 INSTA 
        %610 void ST %608, %609
        %612 temp(0) * 3/fp32 INSTA 
        %613 void ST %611, %612
        %615 3/fp32 LD %609
        %616 3/fp32 SHUF %615.yzx
        %617 3/fp32 LD %612
        %618 3/fp32 SHUF %617.zxy
        %619 3/fp32 MUL %616, %618
        %620 3/fp32 LD %609
        %621 3/fp32 SHUF %620.zxy
        %622 3/fp32 LD %612
        %623 3/fp32 SHUF %622.yzx
        %624 3/fp32 MUL %621, %623
        %625 3/fp32 NEG %624
        %626 3/fp32 ADD %619, %625
        %627 void ST %626, %614
        %629 void BR 
        --> block:604

      block:604 - exit
        <-- block:628
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %646 temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} 'ctx': INSTA 
        %1146 void CALL 'Ngg::NggCtx BuildNggCtx(uint)', byval int32{3}, byref %646
        %1147 temp(0) * 1/int32 'options': INSTA 
        %1148 temp(0) * 1/int32 INSTA 
        %1149 1/int32 intr.get_ngg_options 
        %1150 void ST int32{545}, %1148
        %1151 1/int32 LD %1148
        %1152 void ST %1151, %1147
        %1153 temp(0) * 1/int32 'isSingleWave': INSTA 
        %1154 1/int32 LD %1147
        %1155 1/int32 AND %1154, int32{1}
        %1156 1/int32 CMOV.ne (int32{0}, %1155) int32{1}, int32{0}
        %1157 void ST %1156, %1153
        %1158 temp(0) * 1/int32 'enableCulling': INSTA 
        %1159 1/int32 LD %1147
        %1160 1/int32 AND %1159, int32{2}
        %1161 1/int32 CMOV.ne (int32{0}, %1160) int32{1}, int32{0}
        %1162 void ST %1161, %1158
        %1163 temp(0) * 1/int32 'enableCompaction': INSTA 
        %1164 1/int32 LD %1147
        %1165 1/int32 AND %1164, int32{8}
        %1166 1/int32 CMOV.ne (int32{0}, %1165) int32{1}, int32{0}
        %1167 void ST %1166, %1163
        %1168 temp(0) * 1/int32 'enableKillPrim': INSTA 
        %1169 1/int32 LD %1147
        %1170 1/int32 AND %1169, int32{16}
        %1171 1/int32 CMOV.ne (int32{0}, %1170) int32{1}, int32{0}
        %1172 void ST %1171, %1168
        %1173 temp(0) * 1/int32 'enablePassthru': INSTA 
        %1174 1/int32 LD %1147
        %1175 1/int32 AND %1174, int32{32}
        %1176 1/int32 CMOV.ne (int32{0}, %1175) int32{1}, int32{0}
        %1177 void ST %1176, %1173
        %1178 temp(0) * 1/int32 'enablePrimId': INSTA 
        %1179 1/int32 LD %1147
        %1180 1/int32 AND %1179, int32{64}
        %1181 1/int32 CMOV.ne (int32{0}, %1180) int32{1}, int32{0}
        %1182 void ST %1181, %1178
        %1183 temp(0) * 1/int32 'useStdlibCulling': INSTA 
        %1185 1/int32 LD %1147
        %1186 1/int32 AND %1185, int32{128}
        %1187 1/int32 CMOV.ne (int32{0}, %1186) int32{1}, int32{0}
        %1188 void ST %1187, %1183
        %1189 temp(0) * 1/int32 'is_gen5': INSTA 
        %1190 void CALL 'bool IsGen5()', byref %1189
        %1191 1/int32 LD %1153
        %1192 1/int1 CMP.ne %1191, int32{0}
        %1197 void BRC %1192
        --> block:1193, block:1227

      block:1193 - if-then
        <-- block:1195
        %1198 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{1}
        %1199 void ST int32{0}, %1198
        %1200 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{0}
        %1201 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %1202 1/int32 LD %1200
        %1203 void ST %1202, %1201
        %1204 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{4}
        %1205 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %1206 1/int32 LD %1204
        %1207 void ST %1206, %1205
        %1208 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{5}
        %1209 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{7}
        %1210 1/int32 LD %1208
        %1211 void ST %1210, %1209
        %1194 void BR 
        --> block:1227

      block:1227 - if-predicate
        <-- block:1193, block:1195
        %1212 1/int32 LD %1173
        %1213 1/int32 CMOV.eq (%1212, int32{0}) int32{1}, int32{0}
        %1214 1/int32 LD %1158
        %1215 1/int32 CMOV.eq (%1214, int32{0}) int32{1}, int32{0}
        %1216 1/int32 OR %1213, %1215
        %1218 void intr.OUTPUT_ERROR %1216, "inconsistent passthrough setup" has_side_effects pinned
        %1219 1/int32 LD %1153
        %1220 1/int32 CMOV.eq (%1219, int32{0}) int32{1}, int32{0}
        %1221 1/int32 LD %1163
        %1222 1/int32 CMOV.eq (%1221, int32{0}) int32{1}, int32{0}
        %1223 1/int32 AND %1220, %1222
        %1224 1/int1 CMP.ne %1223, int32{0}
        %1229 void BRC %1224
        --> block:1225, block:1276

      block:1225 - if-then
        <-- block:1227
        %1269 void CALL 'void __ldsBarrier(bool)', byval int32{0}
        %1226 void BR 
        --> block:1276

      block:1276 - if-predicate
        <-- block:1225, block:1227
        %1270 1/int32 LD %1173
        %1271 1/int1 CMP.ne %1270, int32{0}
        %1278 void BRC %1271
        --> block:1287, block:2641

      block:2641 - if-predicate
        <-- block:1276
        %2627 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} 'vsOutput': INSTA 
        %2628 1/int32 LD %1153
        %2629 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{0}
        %2630 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{5}
        %2631 1/int32 LD %2629
        %2632 1/int32 LD %2630
        %2633 1/int32 CMOV.ult (%2631, %2632) int32{1}, int32{0}
        %2634 temp(0) * 1/int32 INSTA 
        %2635 1/int32 intr.FORCE_FLATTEN_IF %2628, %2633
        %2636 void ST %2635, %2634
        %2637 1/int32 LD %2634
        %2638 1/int1 CMP.ne %2637, int32{0}
        %2643 void BRC %2638
        --> block:2809, block:3257

      block:2809 - if-predicate
        <-- block:2641
        %2644 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{8}
        %2645 1/int32 LD %2644
        %2646 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{10}
        %2647 1/int32 LD %2646
        %2648 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{11}
        %2649 1/int32 LD %2648
        %2650 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{12}
        %2651 1/int32 LD %2650
        %2652 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %2653 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %2645, %2647, %2649, %2651 has_side_effects pinned
        %2654 void ST %2653, %2652
        %2655 temp(0) * 4/fp32 GETELEMPTR %2652, int32{0}, int32{0}, int32{0}
        %2656 temp(0) * 4/fp32 GETELEMPTR %2627, int32{0}, int32{0}, int32{0}
        %2657 4/fp32 LD %2655
        %2658 void ST %2657, %2656
        %2659 temp(0) * 4/fp32 GETELEMPTR %2652, int32{0}, int32{0}, int32{1}
        %2660 temp(0) * 4/fp32 GETELEMPTR %2627, int32{0}, int32{0}, int32{1}
        %2661 4/fp32 LD %2659
        %2662 void ST %2661, %2660
        %2663 temp(0) * 4/fp32 GETELEMPTR %2652, int32{0}, int32{0}, int32{2}
        %2664 temp(0) * 4/fp32 GETELEMPTR %2627, int32{0}, int32{0}, int32{2}
        %2665 4/fp32 LD %2663
        %2666 void ST %2665, %2664
        %2667 temp(0) * 4/fp32 GETELEMPTR %2652, int32{0}, int32{0}, int32{3}
        %2668 temp(0) * 4/fp32 GETELEMPTR %2627, int32{0}, int32{0}, int32{3}
        %2669 4/fp32 LD %2667
        %2670 void ST %2669, %2668
        %2671 temp(0) * 4/fp32 GETELEMPTR %2652, int32{0}, int32{0}, int32{4}
        %2672 temp(0) * 4/fp32 GETELEMPTR %2627, int32{0}, int32{0}, int32{4}
        %2673 4/fp32 LD %2671
        %2674 void ST %2673, %2672
        %2675 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{0}
        %2676 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{0}
        %2677 4/int32 LD %2675
        %2678 void ST %2677, %2676
        %2679 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{1}
        %2680 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{1}
        %2681 4/int32 LD %2679
        %2682 void ST %2681, %2680
        %2683 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{2}
        %2684 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{2}
        %2685 4/int32 LD %2683
        %2686 void ST %2685, %2684
        %2687 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{3}
        %2688 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{3}
        %2689 4/int32 LD %2687
        %2690 void ST %2689, %2688
        %2691 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{4}
        %2692 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{4}
        %2693 4/int32 LD %2691
        %2694 void ST %2693, %2692
        %2695 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{5}
        %2696 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{5}
        %2697 4/int32 LD %2695
        %2698 void ST %2697, %2696
        %2699 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{6}
        %2700 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{6}
        %2701 4/int32 LD %2699
        %2702 void ST %2701, %2700
        %2703 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{7}
        %2704 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{7}
        %2705 4/int32 LD %2703
        %2706 void ST %2705, %2704
        %2707 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{8}
        %2708 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{8}
        %2709 4/int32 LD %2707
        %2710 void ST %2709, %2708
        %2711 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{9}
        %2712 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{9}
        %2713 4/int32 LD %2711
        %2714 void ST %2713, %2712
        %2715 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{10}
        %2716 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{10}
        %2717 4/int32 LD %2715
        %2718 void ST %2717, %2716
        %2719 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{11}
        %2720 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{11}
        %2721 4/int32 LD %2719
        %2722 void ST %2721, %2720
        %2723 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{12}
        %2724 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{12}
        %2725 4/int32 LD %2723
        %2726 void ST %2725, %2724
        %2727 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{13}
        %2728 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{13}
        %2729 4/int32 LD %2727
        %2730 void ST %2729, %2728
        %2731 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{14}
        %2732 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{14}
        %2733 4/int32 LD %2731
        %2734 void ST %2733, %2732
        %2735 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{15}
        %2736 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{15}
        %2737 4/int32 LD %2735
        %2738 void ST %2737, %2736
        %2739 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{16}
        %2740 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{16}
        %2741 4/int32 LD %2739
        %2742 void ST %2741, %2740
        %2743 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{17}
        %2744 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{17}
        %2745 4/int32 LD %2743
        %2746 void ST %2745, %2744
        %2747 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{18}
        %2748 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{18}
        %2749 4/int32 LD %2747
        %2750 void ST %2749, %2748
        %2751 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{19}
        %2752 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{19}
        %2753 4/int32 LD %2751
        %2754 void ST %2753, %2752
        %2755 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{20}
        %2756 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{20}
        %2757 4/int32 LD %2755
        %2758 void ST %2757, %2756
        %2759 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{21}
        %2760 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{21}
        %2761 4/int32 LD %2759
        %2762 void ST %2761, %2760
        %2763 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{22}
        %2764 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{22}
        %2765 4/int32 LD %2763
        %2766 void ST %2765, %2764
        %2767 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{23}
        %2768 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{23}
        %2769 4/int32 LD %2767
        %2770 void ST %2769, %2768
        %2771 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{24}
        %2772 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{24}
        %2773 4/int32 LD %2771
        %2774 void ST %2773, %2772
        %2775 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{25}
        %2776 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{25}
        %2777 4/int32 LD %2775
        %2778 void ST %2777, %2776
        %2779 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{26}
        %2780 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{26}
        %2781 4/int32 LD %2779
        %2782 void ST %2781, %2780
        %2783 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{27}
        %2784 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{27}
        %2785 4/int32 LD %2783
        %2786 void ST %2785, %2784
        %2787 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{28}
        %2788 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{28}
        %2789 4/int32 LD %2787
        %2790 void ST %2789, %2788
        %2791 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{29}
        %2792 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{29}
        %2793 4/int32 LD %2791
        %2794 void ST %2793, %2792
        %2795 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{30}
        %2796 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{30}
        %2797 4/int32 LD %2795
        %2798 void ST %2797, %2796
        %2799 temp(0) * 4/int32 GETELEMPTR %2652, int32{0}, int32{1}, int32{31}
        %2800 temp(0) * 4/int32 GETELEMPTR %2627, int32{0}, int32{1}, int32{31}
        %2801 4/int32 LD %2799
        %2802 void ST %2801, %2800
        %2803 1/int32 LD %1158
        %2804 1/int32 LD %1183
        %2805 1/int32 AND %2803, %2804
        %2806 1/int1 CMP.ne %2805, int32{0}
        %2811 void BRC %2806
        --> block:3062, block:2639

      block:3062 - if-predicate
        <-- block:2809
        %2812 temp(0) * 4/fp32[5] GETELEMPTR %2627, int32{0}, int32{0}
        %2813 temp(0) * 4/fp32 GETELEMPTR %2812, int32{0}, int32{0}
        %2814 4/fp32 LD %2813
        %2994 void CALL 'void __cull_func_prepare_vertex(Ngg::NggCtx, float4, uint)', byref %646, byval %2814, byval int32{0}
        %2995 temp(0) * 1/int32 INSTA 
        %3057 void CALL 'bool __require_stdlib_stereo_culling()', byref %2995
        %3058 1/int32 LD %2995
        %3059 1/int1 CMP.ne %3058, int32{0}
        %3064 void BRC %3059
        --> block:3060, block:2807

      block:3060 - if-then
        <-- block:3062
        %3065 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} CONV_reinterp %641
        %3066 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} CONV_reinterp %2627
        %3067 temp(0) * 4/fp32 INSTA 
        %3247 void CALL 'float4 __get_right_eye_position(Ngg::NggVsConfig const&, Ngg::NggVsOutput const&)', byval %3065, byval %3066, byref %3067
        %3248 4/fp32 LD %3067
        %3249 void CALL 'void __cull_func_prepare_vertex(Ngg::NggCtx, float4, uint)', byref %646, byval %3248, byval int32{1}
        %3061 void BR 
        --> block:2807

      block:2807 - if-then
        <-- block:3060, block:3062
        %2808 void BR 
        --> block:2639

      block:2639 - if-then
        <-- block:2807, block:2809
        %2640 void BR 
        --> block:3257

      block:3257 - if-predicate
        <-- block:2639, block:2641
        %3250 temp(0) * 1/int32 'visiblePrim': INSTA 
        %3251 1/int32 LD %1158
        %3252 1/int1 CMP.ne %3251, int32{0}
        %3259 void BRC %3252
        --> block:3276, block:3253

      block:3253 - if-else
        <-- block:3257
        %3545 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %3546 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %3547 1/int32 LD %3545
        %3548 1/int32 LD %3546
        %3549 1/int32 CMOV.ult (%3547, %3548) int32{1}, int32{0}
        %3550 void ST %3549, %3250
        %3254 void BR 
        --> block:3568

      block:3276 - if-predicate
        <-- block:3257
        %3260 void ST int32{0}, %3250
        %3261 1/int32 LD %1153
        %3262 void CALL 'void __ldsBarrier(bool)', byval %3261
        %3263 1/int32 LD %1153
        %3264 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %3265 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %3266 1/int32 LD %3264
        %3267 1/int32 LD %3265
        %3268 1/int32 CMOV.ult (%3266, %3267) int32{1}, int32{0}
        %3269 temp(0) * 1/int32 INSTA 
        %3270 1/int32 intr.FORCE_FLATTEN_IF %3263, %3268
        %3271 void ST %3270, %3269
        %3272 1/int32 LD %3269
        %3273 1/int1 CMP.ne %3272, int32{0}
        %3278 void BRC %3273
        --> block:3285, block:3255

      block:3285 - if-predicate
        <-- block:3276
        %3279 1/int32 LD %1183
        %3280 1/int1 CMP.ne %3279, int32{0}
        %3287 void BRC %3280
        --> block:3530, block:3281

      block:3281 - if-else
        <-- block:3285
        %3539 temp(0) * 1/int32 INSTA 
        %3540 1/int32 intr.ngg_cull_func  has_side_effects
        %3541 void ST %3540, %3539
        %3542 1/int32 LD %3539
        %3543 1/int32 CMOV.eq (%3542, int32{0}) int32{1}, int32{0}
        %3544 void ST %3543, %3250
        %3282 void BR 
        --> block:3274

      block:3530 - if-predicate
        <-- block:3285
        %3288 temp(0) * 1/int32 INSTA 
        %3521 void CALL 'bool __cull_func_stdlib(Ngg::NggCtx, uint)', byref %646, byval int32{0}, byref %3288
        %3522 1/int32 LD %3288
        %3523 void ST %3522, %3250
        %3524 temp(0) * 1/int32 INSTA 
        %3525 void CALL 'bool __require_stdlib_stereo_culling()', byref %3524
        %3526 1/int32 LD %3524
        %3527 1/int1 CMP.ne %3526, int32{0}
        %3532 void BRC %3527
        --> block:3528, block:3283

      block:3528 - if-then
        <-- block:3530
        %3533 temp(0) * 1/int32 INSTA 
        %3534 void CALL 'bool __cull_func_stdlib(Ngg::NggCtx, uint)', byref %646, byval int32{1}, byref %3533
        %3535 1/int32 LD %3250
        %3536 1/int32 LD %3533
        %3537 1/int32 OR %3535, %3536
        %3538 void ST %3537, %3250
        %3529 void BR 
        --> block:3283

      block:3283 - if-then
        <-- block:3528, block:3530
        %3284 void BR 
        --> block:3274

      block:3274 - if-then
        <-- block:3281, block:3283
        %3275 void BR 
        --> block:3255

      block:3255 - if-then
        <-- block:3274, block:3276
        %3256 void BR 
        --> block:3568

      block:3568 - if-predicate
        <-- block:3253, block:3255
        %3551 temp(0) * 1/int32 'primForExport': INSTA 
        %3552 temp(0) * 1/int32 'primIdForExport': INSTA 
        %3553 void CALL 'uint __get_primitive_id()', byref %3552
        %3554 temp(0) * 1/int32 'primGroupVertCount': INSTA 
        %3555 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{7}
        %3556 1/int32 LD %3555
        %3557 void ST %3556, %3554
        %3558 temp(0) * 1/int32 'primGroupPrimCount': INSTA 
        %3559 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %3560 1/int32 LD %3559
        %3561 void ST %3560, %3558
        %3562 1/int32 LD %1163
        %3563 1/int1 CMP.ne %3562, int32{0}
        %3570 void BRC %3563
        --> block:3580, block:5852

      block:5852 - if-predicate
        <-- block:3568
        %5844 temp(0) * 1/int32 'kb': INSTA 
        %5845 1/int32 LD %1168
        %5846 temp(0) * 1/int32 INSTA 
        %5847 1/int1 CMP.ne %5845, int32{0}
        %5854 void BRC %5847
        --> block:5850, block:5848

      block:5848 - if-else
        <-- block:5852
        %5858 void ST int32{0}, %5846
        %5849 void BR 
        --> block:3564

      block:5850 - if-then
        <-- block:5852
        %5855 1/int32 LD %3250
        %5856 1/int32 CMOV.eq (%5855, int32{0}) int32{1}, int32{0}
        %5857 void ST %5856, %5846
        %5851 void BR 
        --> block:3564

      block:3564 - if-else
        <-- block:5848, block:5850
        %5859 1/int32 LD %5846
        %5860 void ST %5859, %5844
        %5861 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5862 temp(0) * 1/int32 GETELEMPTR %5861, int32{0}, int32{0}
        %5863 1/int32 LD %5862
        %5864 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5865 temp(0) * 1/int32 GETELEMPTR %5864, int32{0}, int32{1}
        %5866 1/int32 LD %5865
        %5867 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5868 temp(0) * 1/int32 GETELEMPTR %5867, int32{0}, int32{2}
        %5869 1/int32 LD %5868
        %5870 1/int32 LD %5844
        %5871 temp(0) * 1/int32 INSTA 
        %5872 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval %5863, byval %5866, byval %5869, byval %5870, byref %5871
        %5873 1/int32 LD %5871
        %5874 void ST %5873, %3551
        %3565 void BR 
        --> block:5887

      block:3580 - if-predicate
        <-- block:3568
        %3571 temp(0) * 1/int32 'primCompactionIndex': INSTA 
        %3572 void ST int32{0}, %3571
        %3573 1/int32 LD %1168
        %3574 1/int32 CMOV.eq (int32{0}, %3573) int32{1}, int32{0}
        %3575 1/int1 CMP.ne %3574, int32{0}
        %3582 void BRC %3575
        --> block:3578, block:3576

      block:3576 - if-else
        <-- block:3580
        %4191 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %4192 1/int32 LD %4191
        %4193 void ST %4192, %3558
        %3577 void BR 
        --> block:4211

      block:3578 - if-then
        <-- block:3580
        %3583 1/int32 LD %3250
        %3584 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{0}
        %3585 1/int32 LD %3584
        %3586 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{1}
        %3587 1/int32 LD %3586
        %3588 1/int32 LD %1153
        %3589 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %4174 void CALL 'Ngg::PrefixSumResult __prefixSum(uint, uint, uint, bool)', byval %3583, byval %3585, byval %3587, byval %3588, byref %3589
        %4175 temp(0) * 1/int32 'i': INSTA 
        %4176 temp(0) * 1/int32 GETELEMPTR %3589, int32{0}, int32{0}
        %4177 1/int32 LD %4176
        %4178 void ST %4177, %4175
        %4179 temp(0) * 1/int32 'gc': INSTA 
        %4180 temp(0) * 1/int32 GETELEMPTR %3589, int32{0}, int32{1}
        %4181 1/int32 LD %4180
        %4182 void ST %4181, %4179
        %4183 temp(0) * 1/int32 'c': INSTA 
        %4184 temp(0) * 1/int32 GETELEMPTR %3589, int32{0}, int32{2}
        %4185 1/int32 LD %4184
        %4186 void ST %4185, %4183
        %4187 1/int32 LD %4175
        %4188 void ST %4187, %3571
        %4189 1/int32 LD %4179
        %4190 void ST %4189, %3558
        %3579 void BR 
        --> block:4211

      block:4211 - if-predicate
        <-- block:3576, block:3578
        %4194 1/int32 LD %1153
        %4195 void CALL 'void __ldsBarrier(bool)', byval %4194
        %4196 temp(0) * 1/int32 'shouldCompact': INSTA 
        %4197 1/int32 LD %3558
        %4198 1/int32 CMOV.ugt (%4197, int32{0}) int32{1}, int32{0}
        %4199 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %4200 1/int32 LD %3558
        %4201 1/int32 LD %4199
        %4202 1/int32 CMOV.ne (%4200, %4201) int32{1}, int32{0}
        %4203 1/int32 AND %4198, %4202
        %4204 void ST %4203, %4196
        %4205 1/int32 LD %4196
        %4206 1/int1 CMP.ne %4205, int32{0}
        %4213 void BRC %4206
        --> block:5087, block:5840

      block:5840 - if-predicate
        <-- block:4211
        %5822 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5823 temp(0) * 1/int32 GETELEMPTR %5822, int32{0}, int32{0}
        %5824 1/int32 LD %5823
        %5825 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5826 temp(0) * 1/int32 GETELEMPTR %5825, int32{0}, int32{1}
        %5827 1/int32 LD %5826
        %5828 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5829 temp(0) * 1/int32 GETELEMPTR %5828, int32{0}, int32{2}
        %5830 1/int32 LD %5829
        %5831 temp(0) * 1/int32 INSTA 
        %5832 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval %5824, byval %5827, byval %5830, byval int32{0}, byref %5831
        %5833 1/int32 LD %5831
        %5834 void ST %5833, %3551
        %5835 1/int32 LD %3558
        %5836 1/int32 CMOV.eq (int32{0}, %5835) int32{1}, int32{0}
        %5837 1/int1 CMP.ne %5836, int32{0}
        %5842 void BRC %5837
        --> block:5838, block:4207

      block:5838 - if-then
        <-- block:5840
        %5843 void ST int32{0}, %3554
        %5839 void BR 
        --> block:4207

      block:4207 - if-else
        <-- block:5838, block:5840
        %4208 void BR 
        --> block:3566

      block:5087 - if-predicate
        <-- block:4211
        %4214 temp(0) * 1/int32 'activeVert': INSTA 
        %4215 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} CONV_reinterp %646
        %4216 1/int32 LD %3250
        %4732 void CALL 'uint FindLiveVerts(Ngg::NggCtx const&, bool)', byval %4215, byval %4216, byref %4214
        %4733 1/int32 LD %4214
        %4734 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{0}
        %4735 1/int32 LD %4734
        %4736 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{1}
        %4737 1/int32 LD %4736
        %4738 1/int32 LD %1153
        %4739 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %4740 void CALL 'Ngg::PrefixSumResult __prefixSum(uint, uint, uint, bool)', byval %4733, byval %4735, byval %4737, byval %4738, byref %4739
        %4741 temp(0) * 1/int32 'iv': INSTA 
        %4742 temp(0) * 1/int32 GETELEMPTR %4739, int32{0}, int32{0}
        %4743 1/int32 LD %4742
        %4744 void ST %4743, %4741
        %4745 temp(0) * 1/int32 'gcv': INSTA 
        %4746 temp(0) * 1/int32 GETELEMPTR %4739, int32{0}, int32{1}
        %4747 1/int32 LD %4746
        %4748 void ST %4747, %4745
        %4749 temp(0) * 1/int32 'cv': INSTA 
        %4750 temp(0) * 1/int32 GETELEMPTR %4739, int32{0}, int32{2}
        %4751 1/int32 LD %4750
        %4752 void ST %4751, %4749
        %4753 1/int32 LD %4745
        %4754 void ST %4753, %3554
        %4755 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} CONV_reinterp %646
        %4756 1/int32 LD %4214
        %4757 1/int32 CMOV.ne (%4756, int32{0}) int32{1}, int32{0}
        %4758 1/int32 LD %3250
        %4759 1/int32 LD %4741
        %5078 void CALL 'void ReindexPrimitives(Ngg::NggCtx&, bool, bool, uint)', byval %4755, byval %4757, byval %4758, byval %4759
        %5079 temp(0) * 1/int32 'kb': INSTA 
        %5080 1/int32 LD %1168
        %5081 temp(0) * 1/int32 INSTA 
        %5082 1/int1 CMP.ne %5080, int32{0}
        %5089 void BRC %5082
        --> block:5085, block:5083

      block:5083 - if-else
        <-- block:5087
        %5093 void ST int32{0}, %5081
        %5084 void BR 
        --> block:4209

      block:5085 - if-then
        <-- block:5087
        %5090 1/int32 LD %3250
        %5091 1/int32 CMOV.eq (%5090, int32{0}) int32{1}, int32{0}
        %5092 void ST %5091, %5081
        %5086 void BR 
        --> block:4209

      block:4209 - if-then
        <-- block:5083, block:5085
        %5094 1/int32 LD %5081
        %5095 void ST %5094, %5079
        %5096 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5097 temp(0) * 1/int32 GETELEMPTR %5096, int32{0}, int32{0}
        %5098 1/int32 LD %5097
        %5099 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5100 temp(0) * 1/int32 GETELEMPTR %5099, int32{0}, int32{1}
        %5101 1/int32 LD %5100
        %5102 temp(0) * 1/int32[6] GETELEMPTR %646, int32{0}, int32{9}
        %5103 temp(0) * 1/int32 GETELEMPTR %5102, int32{0}, int32{2}
        %5104 1/int32 LD %5103
        %5105 1/int32 LD %5079
        %5106 temp(0) * 1/int32 INSTA 
        %5162 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval %5098, byval %5101, byval %5104, byval %5105, byref %5106
        %5163 1/int32 LD %5106
        %5164 void ST %5163, %3551
        %5165 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} CONV_reinterp %641
        %5166 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %5167 1/int32 LD %5166
        %5168 1/int32 LD %4214
        %5169 1/int32 CMOV.ne (%5168, int32{0}) int32{1}, int32{0}
        %5170 1/int32 LD %4741
        %5171 1/int32 LD %3554
        %5172 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} CONV_reinterp %2627
        %5173 1/int32 LD %3250
        %5174 1/int32 LD %3571
        %5175 1/int32 LD %3558
        %5176 generic(0) * 1/int32 CONV_reinterp %3551
        %5177 generic(0) * 1/int32 CONV_reinterp %3552
        %5821 void CALL 'void PerformCompaction(Ngg::NggVsConfig const&, uint, bool, uint, uint, Ngg::NggVsOutput&, bool, uint, uint, uint&, uint&)', byval %5165, byval %5167, byval %5169, byval %5170, byval %5171, byval %5172, byval %5173, byval %5174, byval %5175, byval %5176, byval %5177
        %4210 void BR 
        --> block:3566

      block:3566 - if-then
        <-- block:4207, block:4209
        %3567 void BR 
        --> block:5887

      block:5887 - if-predicate
        <-- block:3564, block:3566
        %5875 temp(0) * 1/int32 'war9294': INSTA 
        %5877 1/int32 LD %1147
        %5878 1/int32 AND %5877, int32{512}
        %5879 1/int32 CMOV.ne (int32{0}, %5878) int32{1}, int32{0}
        %5880 void ST %5879, %5875
        %5881 temp(0) * 1/int32 'requiresWar': INSTA 
        %5882 void ST int32{0}, %5881
        %5883 1/int32 LD %1158
        %5884 1/int1 CMP.ne %5883, int32{0}
        %5889 void BRC %5884
        --> block:5897, block:5913

      block:5897 - if-predicate
        <-- block:5887
        %5890 1/int32 LD %3558
        %5891 1/int32 CMOV.eq (int32{0}, %5890) int32{1}, int32{0}
        %5892 1/int32 LD %5875
        %5893 1/int32 AND %5892, %5891
        %5894 1/int1 CMP.ne %5893, int32{0}
        %5899 void BRC %5894
        --> block:5895, block:5885

      block:5895 - if-then
        <-- block:5897
        %5900 void ST int32{1}, %3558
        %5901 void ST int32{1}, %3554
        %5902 temp(0) * 1/int32 INSTA 
        %5903 void CALL 'uint make_index_for_export(uint, uint, uint, uint)', byval int32{0}, byval int32{0}, byval int32{0}, byval int32{0}, byref %5902
        %5904 1/int32 LD %5902
        %5905 void ST %5904, %3551
        %5906 void ST int32{1}, %5881
        %5896 void BR 
        --> block:5885

      block:5885 - if-then
        <-- block:5895, block:5897
        %5886 void BR 
        --> block:5913

      block:5913 - if-predicate
        <-- block:5885, block:5887
        %5907 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{1}
        %5908 1/int32 LD %5907
        %5909 1/int32 CMOV.eq (%5908, int32{0}) int32{1}, int32{0}
        %5910 1/int1 CMP.ne %5909, int32{0}
        %5915 void BRC %5910
        --> block:5911, block:5933

      block:5911 - if-then
        <-- block:5913
        %5916 1/int32 LD %3558
        %5917 1/int32 LD %3554
        %5918 void CALL 'void SendAllocMessage(uint, uint)', byval %5916, byval %5917
        %5912 void BR 
        --> block:5933

      block:5933 - if-predicate
        <-- block:5911, block:5913
        %5919 1/int32 LD %1153
        %5920 1/int32 LD %5875
        %5921 1/int32 AND %5919, %5920
        %5922 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %5923 1/int32 LD %5922
        %5924 1/int32 LD %3558
        %5925 1/int32 CMOV.ult (%5923, %5924) int32{1}, int32{0}
        %5926 temp(0) * 1/int32 INSTA 
        %5927 1/int32 intr.FORCE_FLATTEN_IF %5921, %5925
        %5928 void ST %5927, %5926
        %5929 1/int32 LD %5926
        %5930 1/int1 CMP.ne %5929, int32{0}
        %5935 void BRC %5930
        --> block:5931, block:5954

      block:5931 - if-then
        <-- block:5933
        %5936 1/int32 LD %3551
        %5937 1/int32 LD %3552
        %5938 1/int32 LD %1178
        %5939 void CALL 'void ExportNggIndex(uint, uint, bool)', byval %5936, byval %5937, byval %5938
        %5932 void BR 
        --> block:5954

      block:5954 - if-predicate
        <-- block:5931, block:5933
        %5940 1/int32 LD %1153
        %5941 1/int32 LD %5875
        %5942 1/int32 AND %5940, %5941
        %5943 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %5944 1/int32 LD %5943
        %5945 1/int32 LD %3554
        %5946 1/int32 CMOV.ult (%5944, %5945) int32{1}, int32{0}
        %5947 temp(0) * 1/int32 INSTA 
        %5948 1/int32 intr.FORCE_FLATTEN_IF %5942, %5946
        %5949 void ST %5948, %5947
        %5950 1/int32 LD %5947
        %5951 1/int1 CMP.ne %5950, int32{0}
        %5956 void BRC %5951
        --> block:5952, block:1272

      block:5952 - if-then
        <-- block:5954
        %5957 1/int32 LD %5881
        %5958 void CALL 'void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)', byref %641, byref %2627, byval %5957
        %5953 void BR 
        --> block:1272

      block:1272 - if-else
        <-- block:5952, block:5954
        %1273 void BR 
        --> block:644

      block:1287 - if-predicate
        <-- block:1276
        %1279 temp(0) * 1/int32 'primForExport': INSTA 
        %1280 1/int32 LD %1189
        %1281 temp(0) * 1/int32 INSTA 
        %1282 1/int1 CMP.ne %1280, int32{0}
        %1289 void BRC %1282
        --> block:1285, block:1283

      block:1283 - if-else
        <-- block:1287
        %1295 temp(0) * 1/int32 INSTA 
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %1297 void ST %1296, %1295
        %1298 1/int32 LD %1295
        %1299 void ST %1298, %1281
        %1284 void BR 
        --> block:1315

      block:1285 - if-then
        <-- block:1287
        %1290 temp(0) * 1/int32 INSTA 
        %1291 1/int32 intr.READSPECIALVECTORREG int32{88} 'v_vtx0_vtx1_vtx2_gs_instance'
        %1292 void ST %1291, %1290
        %1293 1/int32 LD %1290
        %1294 void ST %1293, %1281
        %1286 void BR 
        --> block:1315

      block:1315 - if-predicate
        <-- block:1283, block:1285
        %1300 1/int32 LD %1281
        %1301 void ST %1300, %1279
        %1302 temp(0) * 1/int32 'useLateAlloc': INSTA 
        %1304 1/int32 LD %1147
        %1305 1/int32 AND %1304, int32{1024}
        %1306 1/int32 CMOV.ne (int32{0}, %1305) int32{1}, int32{0}
        %1307 void ST %1306, %1302
        %1308 1/int32 LD %1302
        %1309 1/int32 CMOV.eq (%1308, int32{0}) int32{1}, int32{0}
        %1310 1/int1 CMP.ne %1309, int32{0}
        %1317 void BRC %1310
        --> block:1327, block:2395

      block:2395 - if-predicate
        <-- block:1315
        %2379 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} 'vsOutput': INSTA 
        %2380 1/int32 LD %1153
        %2381 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %2382 1/int32 LD %2381
        %2383 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{7}
        %2384 1/int32 LD %2383
        %2385 temp(0) * 1/int32 INSTA 
        %2386 void CALL 'bool EnableLanes(uint, uint)', byval %2382, byval %2384, byref %2385
        %2387 1/int32 LD %2385
        %2388 temp(0) * 1/int32 INSTA 
        %2389 1/int32 intr.FORCE_FLATTEN_IF %2380, %2387
        %2390 void ST %2389, %2388
        %2391 1/int32 LD %2388
        %2392 1/int1 CMP.ne %2391, int32{0}
        %2397 void BRC %2392
        --> block:2393, block:2558

      block:2393 - if-then
        <-- block:2395
        %2398 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{8}
        %2399 1/int32 LD %2398
        %2400 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{10}
        %2401 1/int32 LD %2400
        %2402 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{11}
        %2403 1/int32 LD %2402
        %2404 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{12}
        %2405 1/int32 LD %2404
        %2406 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %2407 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %2399, %2401, %2403, %2405 has_side_effects pinned
        %2408 void ST %2407, %2406
        %2409 temp(0) * 4/fp32 GETELEMPTR %2406, int32{0}, int32{0}, int32{0}
        %2410 temp(0) * 4/fp32 GETELEMPTR %2379, int32{0}, int32{0}, int32{0}
        %2411 4/fp32 LD %2409
        %2412 void ST %2411, %2410
        %2413 temp(0) * 4/fp32 GETELEMPTR %2406, int32{0}, int32{0}, int32{1}
        %2414 temp(0) * 4/fp32 GETELEMPTR %2379, int32{0}, int32{0}, int32{1}
        %2415 4/fp32 LD %2413
        %2416 void ST %2415, %2414
        %2417 temp(0) * 4/fp32 GETELEMPTR %2406, int32{0}, int32{0}, int32{2}
        %2418 temp(0) * 4/fp32 GETELEMPTR %2379, int32{0}, int32{0}, int32{2}
        %2419 4/fp32 LD %2417
        %2420 void ST %2419, %2418
        %2421 temp(0) * 4/fp32 GETELEMPTR %2406, int32{0}, int32{0}, int32{3}
        %2422 temp(0) * 4/fp32 GETELEMPTR %2379, int32{0}, int32{0}, int32{3}
        %2423 4/fp32 LD %2421
        %2424 void ST %2423, %2422
        %2425 temp(0) * 4/fp32 GETELEMPTR %2406, int32{0}, int32{0}, int32{4}
        %2426 temp(0) * 4/fp32 GETELEMPTR %2379, int32{0}, int32{0}, int32{4}
        %2427 4/fp32 LD %2425
        %2428 void ST %2427, %2426
        %2429 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{0}
        %2430 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{0}
        %2431 4/int32 LD %2429
        %2432 void ST %2431, %2430
        %2433 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{1}
        %2434 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{1}
        %2435 4/int32 LD %2433
        %2436 void ST %2435, %2434
        %2437 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{2}
        %2438 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{2}
        %2439 4/int32 LD %2437
        %2440 void ST %2439, %2438
        %2441 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{3}
        %2442 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{3}
        %2443 4/int32 LD %2441
        %2444 void ST %2443, %2442
        %2445 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{4}
        %2446 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{4}
        %2447 4/int32 LD %2445
        %2448 void ST %2447, %2446
        %2449 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{5}
        %2450 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{5}
        %2451 4/int32 LD %2449
        %2452 void ST %2451, %2450
        %2453 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{6}
        %2454 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{6}
        %2455 4/int32 LD %2453
        %2456 void ST %2455, %2454
        %2457 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{7}
        %2458 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{7}
        %2459 4/int32 LD %2457
        %2460 void ST %2459, %2458
        %2461 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{8}
        %2462 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{8}
        %2463 4/int32 LD %2461
        %2464 void ST %2463, %2462
        %2465 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{9}
        %2466 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{9}
        %2467 4/int32 LD %2465
        %2468 void ST %2467, %2466
        %2469 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{10}
        %2470 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{10}
        %2471 4/int32 LD %2469
        %2472 void ST %2471, %2470
        %2473 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{11}
        %2474 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{11}
        %2475 4/int32 LD %2473
        %2476 void ST %2475, %2474
        %2477 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{12}
        %2478 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{12}
        %2479 4/int32 LD %2477
        %2480 void ST %2479, %2478
        %2481 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{13}
        %2482 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{13}
        %2483 4/int32 LD %2481
        %2484 void ST %2483, %2482
        %2485 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{14}
        %2486 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{14}
        %2487 4/int32 LD %2485
        %2488 void ST %2487, %2486
        %2489 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{15}
        %2490 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{15}
        %2491 4/int32 LD %2489
        %2492 void ST %2491, %2490
        %2493 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{16}
        %2494 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{16}
        %2495 4/int32 LD %2493
        %2496 void ST %2495, %2494
        %2497 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{17}
        %2498 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{17}
        %2499 4/int32 LD %2497
        %2500 void ST %2499, %2498
        %2501 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{18}
        %2502 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{18}
        %2503 4/int32 LD %2501
        %2504 void ST %2503, %2502
        %2505 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{19}
        %2506 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{19}
        %2507 4/int32 LD %2505
        %2508 void ST %2507, %2506
        %2509 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{20}
        %2510 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{20}
        %2511 4/int32 LD %2509
        %2512 void ST %2511, %2510
        %2513 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{21}
        %2514 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{21}
        %2515 4/int32 LD %2513
        %2516 void ST %2515, %2514
        %2517 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{22}
        %2518 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{22}
        %2519 4/int32 LD %2517
        %2520 void ST %2519, %2518
        %2521 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{23}
        %2522 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{23}
        %2523 4/int32 LD %2521
        %2524 void ST %2523, %2522
        %2525 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{24}
        %2526 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{24}
        %2527 4/int32 LD %2525
        %2528 void ST %2527, %2526
        %2529 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{25}
        %2530 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{25}
        %2531 4/int32 LD %2529
        %2532 void ST %2531, %2530
        %2533 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{26}
        %2534 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{26}
        %2535 4/int32 LD %2533
        %2536 void ST %2535, %2534
        %2537 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{27}
        %2538 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{27}
        %2539 4/int32 LD %2537
        %2540 void ST %2539, %2538
        %2541 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{28}
        %2542 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{28}
        %2543 4/int32 LD %2541
        %2544 void ST %2543, %2542
        %2545 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{29}
        %2546 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{29}
        %2547 4/int32 LD %2545
        %2548 void ST %2547, %2546
        %2549 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{30}
        %2550 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{30}
        %2551 4/int32 LD %2549
        %2552 void ST %2551, %2550
        %2553 temp(0) * 4/int32 GETELEMPTR %2406, int32{0}, int32{1}, int32{31}
        %2554 temp(0) * 4/int32 GETELEMPTR %2379, int32{0}, int32{1}, int32{31}
        %2555 4/int32 LD %2553
        %2556 void ST %2555, %2554
        %2394 void BR 
        --> block:2558

      block:2558
        <-- block:2393, block:2395
        %2557 1/int32 intr.ISOLATE  has_side_effects dependent_on_side_effects pinned
        %2559 void BR 
        --> block:2576

      block:2576 - if-predicate
        <-- block:2558, block:2562
        %2567 1/int32 LD %1189
        %2568 1/int32 CMOV.eq (%2567, int32{0}) int32{1}, int32{0}
        %2569 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{1}
        %2570 1/int32 LD %2569
        %2571 1/int32 CMOV.eq (%2570, int32{0}) int32{1}, int32{0}
        %2572 1/int32 AND %2568, %2571
        %2573 1/int1 CMP.ne %2572, int32{0}
        %2578 void BRC %2573
        --> block:2574, block:2599

      block:2574 - if-then
        <-- block:2576
        %2579 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %2580 1/int32 LD %2579
        %2581 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{7}
        %2582 1/int32 LD %2581
        %2583 void CALL 'void SendAllocMessage(uint, uint)', byval %2580, byval %2582
        %2575 void BR 
        --> block:2599

      block:2599 - if-predicate
        <-- block:2574, block:2576
        %2584 1/int32 LD %1153
        %2585 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %2586 1/int32 LD %2585
        %2587 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %2588 1/int32 LD %2587
        %2589 temp(0) * 1/int32 INSTA 
        %2590 void CALL 'bool EnableLanes(uint, uint)', byval %2586, byval %2588, byref %2589
        %2591 1/int32 LD %2589
        %2592 temp(0) * 1/int32 INSTA 
        %2593 1/int32 intr.FORCE_FLATTEN_IF %2584, %2591
        %2594 void ST %2593, %2592
        %2595 1/int32 LD %2592
        %2596 1/int1 CMP.ne %2595, int32{0}
        %2601 void BRC %2596
        --> block:2597, block:2623

      block:2597 - if-then
        <-- block:2599
        %2602 1/int32 LD %1279
        %2603 temp(0) * 1/int32 INSTA 
        %2604 void CALL 'uint __get_primitive_id()', byref %2603
        %2605 1/int32 LD %2603
        %2606 1/int32 LD %1178
        %2607 void CALL 'void ExportNggIndex(uint, uint, bool)', byval %2602, byval %2605, byval %2606
        %2598 void BR 
        --> block:2623

      block:2623 - if-predicate
        <-- block:2597, block:2599
        %2608 1/int32 LD %1153
        %2609 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %2610 1/int32 LD %2609
        %2611 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{7}
        %2612 1/int32 LD %2611
        %2613 temp(0) * 1/int32 INSTA 
        %2614 void CALL 'bool EnableLanes(uint, uint)', byval %2610, byval %2612, byref %2613
        %2615 1/int32 LD %2613
        %2616 temp(0) * 1/int32 INSTA 
        %2617 1/int32 intr.FORCE_FLATTEN_IF %2608, %2615
        %2618 void ST %2617, %2616
        %2619 1/int32 LD %2616
        %2620 1/int1 CMP.ne %2619, int32{0}
        %2625 void BRC %2620
        --> block:2621, block:2560

      block:2621 - if-then
        <-- block:2623
        %2626 void CALL 'void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)', byref %641, byref %2379, byval int32{0}
        %2622 void BR 
        --> block:2560

      block:2560 - do-while-body
        <-- block:2621, block:2623
        %2561 void BR 
        --> block:2562

      block:2562 - do-while-condition[unroll:never,licm:never,rotate:never,unswitch:never]
        <-- block:2560
        %2565 1/int32 intr.ISOLATE  has_side_effects dependent_on_side_effects pinned
        %2566 1/int1 CMP.ne int32{0}, %2565
        %2564 void BRC %2566
        --> block:2576, block:1311

      block:1311 - if-else
        <-- block:2562
        %1312 void BR 
        --> block:1274

      block:1327 - if-predicate
        <-- block:1315
        %1318 1/int32 LD %1189
        %1319 1/int32 CMOV.eq (%1318, int32{0}) int32{1}, int32{0}
        %1320 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{1}
        %1321 1/int32 LD %1320
        %1322 1/int32 CMOV.eq (%1321, int32{0}) int32{1}, int32{0}
        %1323 1/int32 AND %1319, %1322
        %1324 1/int1 CMP.ne %1323, int32{0}
        %1329 void BRC %1324
        --> block:1325, block:1478

      block:1325 - if-then
        <-- block:1327
        %1330 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %1331 1/int32 LD %1330
        %1332 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{7}
        %1333 1/int32 LD %1332
        %1372 void CALL 'void SendAllocMessage(uint, uint)', byval %1331, byval %1333
        %1326 void BR 
        --> block:1478

      block:1478 - if-predicate
        <-- block:1325, block:1327
        %1373 1/int32 LD %1153
        %1374 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %1375 1/int32 LD %1374
        %1376 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{6}
        %1377 1/int32 LD %1376
        %1378 temp(0) * 1/int32 INSTA 
        %1469 void CALL 'bool EnableLanes(uint, uint)', byval %1375, byval %1377, byref %1378
        %1470 1/int32 LD %1378
        %1471 temp(0) * 1/int32 INSTA 
        %1472 1/int32 intr.FORCE_FLATTEN_IF %1373, %1470
        %1473 void ST %1472, %1471
        %1474 1/int32 LD %1471
        %1475 1/int1 CMP.ne %1474, int32{0}
        %1480 void BRC %1475
        --> block:1476, block:1580

      block:1476 - if-then
        <-- block:1478
        %1481 1/int32 LD %1279
        %1482 temp(0) * 1/int32 INSTA 
        %1496 void CALL 'uint __get_primitive_id()', byref %1482
        %1497 1/int32 LD %1482
        %1498 1/int32 LD %1178
        %1564 void CALL 'void ExportNggIndex(uint, uint, bool)', byval %1481, byval %1497, byval %1498
        %1477 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:1476, block:1478
        %1565 1/int32 LD %1153
        %1566 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{3}
        %1567 1/int32 LD %1566
        %1568 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{7}
        %1569 1/int32 LD %1568
        %1570 temp(0) * 1/int32 INSTA 
        %1571 void CALL 'bool EnableLanes(uint, uint)', byval %1567, byval %1569, byref %1570
        %1572 1/int32 LD %1570
        %1573 temp(0) * 1/int32 INSTA 
        %1574 1/int32 intr.FORCE_FLATTEN_IF %1565, %1572
        %1575 void ST %1574, %1573
        %1576 1/int32 LD %1573
        %1577 1/int1 CMP.ne %1576, int32{0}
        %1582 void BRC %1577
        --> block:1578, block:1313

      block:1578 - if-then
        <-- block:1580
        %1583 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} 'vsOutput': INSTA 
        %1584 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{8}
        %1585 1/int32 LD %1584
        %1586 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{10}
        %1587 1/int32 LD %1586
        %1588 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{11}
        %1589 1/int32 LD %1588
        %1590 temp(0) * 1/int32 GETELEMPTR %646, int32{0}, int32{12}
        %1591 1/int32 LD %1590
        %1592 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %1585, %1587, %1589, %1591 has_side_effects pinned
        %1594 void ST %1593, %1592
        %1595 temp(0) * 4/fp32 GETELEMPTR %1592, int32{0}, int32{0}, int32{0}
        %1596 temp(0) * 4/fp32 GETELEMPTR %1583, int32{0}, int32{0}, int32{0}
        %1597 4/fp32 LD %1595
        %1598 void ST %1597, %1596
        %1599 temp(0) * 4/fp32 GETELEMPTR %1592, int32{0}, int32{0}, int32{1}
        %1600 temp(0) * 4/fp32 GETELEMPTR %1583, int32{0}, int32{0}, int32{1}
        %1601 4/fp32 LD %1599
        %1602 void ST %1601, %1600
        %1603 temp(0) * 4/fp32 GETELEMPTR %1592, int32{0}, int32{0}, int32{2}
        %1604 temp(0) * 4/fp32 GETELEMPTR %1583, int32{0}, int32{0}, int32{2}
        %1605 4/fp32 LD %1603
        %1606 void ST %1605, %1604
        %1607 temp(0) * 4/fp32 GETELEMPTR %1592, int32{0}, int32{0}, int32{3}
        %1608 temp(0) * 4/fp32 GETELEMPTR %1583, int32{0}, int32{0}, int32{3}
        %1609 4/fp32 LD %1607
        %1610 void ST %1609, %1608
        %1611 temp(0) * 4/fp32 GETELEMPTR %1592, int32{0}, int32{0}, int32{4}
        %1612 temp(0) * 4/fp32 GETELEMPTR %1583, int32{0}, int32{0}, int32{4}
        %1613 4/fp32 LD %1611
        %1614 void ST %1613, %1612
        %1615 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{0}
        %1616 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{0}
        %1617 4/int32 LD %1615
        %1618 void ST %1617, %1616
        %1619 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{1}
        %1620 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{1}
        %1621 4/int32 LD %1619
        %1622 void ST %1621, %1620
        %1623 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{2}
        %1624 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{2}
        %1625 4/int32 LD %1623
        %1626 void ST %1625, %1624
        %1627 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{3}
        %1628 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{3}
        %1629 4/int32 LD %1627
        %1630 void ST %1629, %1628
        %1631 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{4}
        %1632 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{4}
        %1633 4/int32 LD %1631
        %1634 void ST %1633, %1632
        %1635 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{5}
        %1636 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{5}
        %1637 4/int32 LD %1635
        %1638 void ST %1637, %1636
        %1639 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{6}
        %1640 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{6}
        %1641 4/int32 LD %1639
        %1642 void ST %1641, %1640
        %1643 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{7}
        %1644 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{7}
        %1645 4/int32 LD %1643
        %1646 void ST %1645, %1644
        %1647 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{8}
        %1648 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{8}
        %1649 4/int32 LD %1647
        %1650 void ST %1649, %1648
        %1651 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{9}
        %1652 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{9}
        %1653 4/int32 LD %1651
        %1654 void ST %1653, %1652
        %1655 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{10}
        %1656 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{10}
        %1657 4/int32 LD %1655
        %1658 void ST %1657, %1656
        %1659 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{11}
        %1660 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{11}
        %1661 4/int32 LD %1659
        %1662 void ST %1661, %1660
        %1663 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{12}
        %1664 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{12}
        %1665 4/int32 LD %1663
        %1666 void ST %1665, %1664
        %1667 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{13}
        %1668 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{13}
        %1669 4/int32 LD %1667
        %1670 void ST %1669, %1668
        %1671 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{14}
        %1672 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{14}
        %1673 4/int32 LD %1671
        %1674 void ST %1673, %1672
        %1675 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{15}
        %1676 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{15}
        %1677 4/int32 LD %1675
        %1678 void ST %1677, %1676
        %1679 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{16}
        %1680 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{16}
        %1681 4/int32 LD %1679
        %1682 void ST %1681, %1680
        %1683 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{17}
        %1684 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{17}
        %1685 4/int32 LD %1683
        %1686 void ST %1685, %1684
        %1687 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{18}
        %1688 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{18}
        %1689 4/int32 LD %1687
        %1690 void ST %1689, %1688
        %1691 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{19}
        %1692 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{19}
        %1693 4/int32 LD %1691
        %1694 void ST %1693, %1692
        %1696 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{20}
        %1697 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{20}
        %1698 4/int32 LD %1696
        %1699 void ST %1698, %1697
        %1700 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{21}
        %1701 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{21}
        %1702 4/int32 LD %1700
        %1703 void ST %1702, %1701
        %1704 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{22}
        %1705 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{22}
        %1706 4/int32 LD %1704
        %1707 void ST %1706, %1705
        %1708 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{23}
        %1709 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{23}
        %1710 4/int32 LD %1708
        %1711 void ST %1710, %1709
        %1713 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{24}
        %1714 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{24}
        %1715 4/int32 LD %1713
        %1716 void ST %1715, %1714
        %1717 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{25}
        %1718 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{25}
        %1719 4/int32 LD %1717
        %1720 void ST %1719, %1718
        %1722 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{26}
        %1723 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{26}
        %1724 4/int32 LD %1722
        %1725 void ST %1724, %1723
        %1727 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{27}
        %1728 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{27}
        %1729 4/int32 LD %1727
        %1730 void ST %1729, %1728
        %1732 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{28}
        %1733 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{28}
        %1734 4/int32 LD %1732
        %1735 void ST %1734, %1733
        %1737 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{29}
        %1738 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{29}
        %1739 4/int32 LD %1737
        %1740 void ST %1739, %1738
        %1742 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{30}
        %1743 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{30}
        %1744 4/int32 LD %1742
        %1745 void ST %1744, %1743
        %1747 temp(0) * 4/int32 GETELEMPTR %1592, int32{0}, int32{1}, int32{31}
        %1748 temp(0) * 4/int32 GETELEMPTR %1583, int32{0}, int32{1}, int32{31}
        %1749 4/int32 LD %1747
        %1750 void ST %1749, %1748
        %2378 void CALL 'void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)', byref %641, byref %1583, byval int32{0}
        %1579 void BR 
        --> block:1313

      block:1313 - if-then
        <-- block:1578, block:1580
        %1314 void BR 
        --> block:1274

      block:1274 - if-then
        <-- block:1311, block:1313
        %1275 void BR 
        --> block:644

      block:644
        <-- block:1272, block:1274
        %645 void BR 
        --> block:5959

      block:5959 - return-block
        <-- block:644
        %5960 void BR 
        --> block:642

      block:642 - exit
        <-- block:5959
        --> 


  func:Ngg::NggCtx BuildNggCtx(uint)
    arguments:
      %652 in    arg: 1/int32 - 'vertCountPerPrim'
      %655 out   arg: temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'BuildNggCtx'

    dwarf:
      BuildNggCtx(151 - 151)

    body:
      block:649 - entry
        <-- 
        --> block:668

      block:668 - if-predicate
        <-- block:649
        %653 temp(0) * 1/int32 INSTA 
        %654 void ST %652, %653
        %656 temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} 'ctx': INSTA 
        %657 temp(0) * 1/int32 INSTA 
        %658 1/int32 intr.GET_WAVEMODE 
        %659 void ST %658, %657
        %660 1/int32 LD %657
        %661 1/int32 CMOV.eq (%660, int32{1}) int32{1}, int32{0}
        %662 temp(0) * 1/int32 INSTA 
        %663 1/int1 CMP.ne %661, int32{0}
        %670 void BRC %663
        --> block:666, block:664

      block:664 - if-else
        <-- block:668
        %680 temp(0) * 1/int32 INSTA 
        %681 1/int32 intr.v_mbcnt_lo_u32_b32 int32{-1}, int32{0} uniform_width
        %682 void ST %681, %680
        %683 1/int32 LD %680
        %684 void ST %683, %662
        %665 void BR 
        --> block:722

      block:666 - if-then
        <-- block:668
        %671 temp(0) * 1/int32 INSTA 
        %672 1/int32 intr.v_mbcnt_lo_u32_b32 int32{-1}, int32{0} uniform_width
        %673 void ST %672, %671
        %674 1/int32 LD %671
        %675 temp(0) * 1/int32 INSTA 
        %676 1/int32 intr.v_mbcnt_hi_u32_b32 int32{-1}, %674 uniform_width
        %677 void ST %676, %675
        %678 1/int32 LD %675
        %679 void ST %678, %662
        %667 void BR 
        --> block:722

      block:722 - if-predicate
        <-- block:664, block:666
        %685 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{0}
        %686 1/int32 LD %662
        %687 void ST %686, %685
        %688 temp(0) * 1/int32 INSTA 
        %707 void CALL 'uint __gs_wave_in_subgroup()', byref %688
        %708 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{1}
        %709 1/int32 LD %688
        %710 void ST %709, %708
        %711 temp(0) * 1/int32 INSTA 
        %712 1/int32 intr.GET_WAVEMODE 
        %713 void ST %712, %711
        %714 1/int32 LD %711
        %715 1/int32 CMOV.eq (%714, int32{1}) int32{1}, int32{0}
        %716 temp(0) * 1/int32 INSTA 
        %717 1/int1 CMP.ne %715, int32{0}
        %724 void BRC %717
        --> block:720, block:718

      block:718 - if-else
        <-- block:722
        %727 void ST int32{32}, %716
        %719 void BR 
        --> block:855

      block:720 - if-then
        <-- block:722
        %725 void ST int32{64}, %716
        %721 void BR 
        --> block:855

      block:855 - if-predicate
        <-- block:718, block:720
        %728 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{2}
        %729 1/int32 LD %716
        %730 void ST %729, %728
        %731 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{0}
        %732 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{1}
        %733 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{2}
        %734 1/int32 LD %732
        %735 1/int32 LD %733
        %736 1/int32 MUL %734, %735
        %737 1/int32 LD %731
        %738 1/int32 ADD %737, %736
        %739 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{3}
        %740 void ST %738, %739
        %741 temp(0) * 1/int32 INSTA 
        %758 void CALL 'uint __get_wave_prim_count()', byref %741
        %759 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{4}
        %760 1/int32 LD %741
        %761 void ST %760, %759
        %762 temp(0) * 1/int32 INSTA 
        %777 void CALL 'uint __get_wave_vert_count()', byref %762
        %778 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{5}
        %779 1/int32 LD %762
        %780 void ST %779, %778
        %781 temp(0) * 1/int32 INSTA 
        %800 void CALL 'uint __get_subgroup_prim_count()', byref %781
        %801 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{6}
        %802 1/int32 LD %781
        %803 void ST %802, %801
        %804 temp(0) * 1/int32 INSTA 
        %820 void CALL 'uint __get_subgroup_vert_count()', byref %804
        %821 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{7}
        %822 1/int32 LD %804
        %823 void ST %822, %821
        %824 temp(0) * 1/int32 INSTA 
        %847 void CALL 'bool IsGen5()', byref %824
        %848 1/int32 LD %824
        %849 1/int32 CMOV.eq (%848, int32{0}) int32{1}, int32{0}
        %850 1/int1 CMP.ne %849, int32{0}
        %857 void BRC %850
        --> block:891, block:851

      block:851 - if-else
        <-- block:855
        %1080 temp(0) * 1/int32 'v0v1v2': INSTA 
        %1082 temp(0) * 1/int32 INSTA 
        %1083 1/int32 intr.READSPECIALVECTORREG int32{88} 'v_vtx0_vtx1_vtx2_gs_instance'
        %1084 void ST %1083, %1082
        %1085 1/int32 LD %1082
        %1086 void ST %1085, %1080
        %1087 1/int32 LD %1080
        %1088 1/int32 AND %1087, int32{255}
        %1089 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %1090 temp(0) * 1/int32 GETELEMPTR %1089, int32{0}, int32{0}
        %1091 void ST %1088, %1090
        %1092 1/int32 LD %1080
        %1093 1/int32 LSHR %1092, int32{9}
        %1094 1/int32 AND %1093, int32{255}
        %1095 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %1096 temp(0) * 1/int32 GETELEMPTR %1095, int32{0}, int32{1}
        %1097 void ST %1094, %1096
        %1099 1/int32 LD %1080
        %1100 1/int32 LSHR %1099, int32{18}
        %1101 1/int32 AND %1100, int32{255}
        %1102 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %1103 temp(0) * 1/int32 GETELEMPTR %1102, int32{0}, int32{2}
        %1104 void ST %1101, %1103
        %852 void BR 
        --> block:1144

      block:891 - if-predicate
        <-- block:855
        %858 temp(0) * 1/int32 'kIndexGran': INSTA 
        %859 void ST int32{4}, %858
        %860 temp(0) * 1/int32 INSTA 
        %876 void CALL 'uint __get_prim_vtx0_offset_gen23()', byref %860
        %877 1/int32 LD %860
        %878 1/int32 LD %858
        %879 1/int32 UDIV %877, %878
        %880 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %881 temp(0) * 1/int32 GETELEMPTR %880, int32{0}, int32{0}
        %882 void ST %879, %881
        %883 1/int32 LD %653
        %884 1/int32 CMOV.ugt (%883, int32{1}) int32{1}, int32{0}
        %885 temp(0) * 1/int32 INSTA 
        %886 1/int1 CMP.ne %884, int32{0}
        %893 void BRC %886
        --> block:889, block:887

      block:887 - if-else
        <-- block:891
        %914 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %915 temp(0) * 1/int32 GETELEMPTR %914, int32{0}, int32{0}
        %916 1/int32 LD %915
        %917 void ST %916, %885
        %888 void BR 
        --> block:930

      block:889 - if-then
        <-- block:891
        %894 temp(0) * 1/int32 INSTA 
        %909 void CALL 'uint __get_prim_vtx1_offset_gen23()', byref %894
        %910 1/int32 LD %894
        %911 1/int32 LD %858
        %912 1/int32 UDIV %910, %911
        %913 void ST %912, %885
        %890 void BR 
        --> block:930

      block:930 - if-predicate
        <-- block:887, block:889
        %918 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %919 temp(0) * 1/int32 GETELEMPTR %918, int32{0}, int32{1}
        %920 1/int32 LD %885
        %921 void ST %920, %919
        %922 1/int32 LD %653
        %923 1/int32 CMOV.ugt (%922, int32{2}) int32{1}, int32{0}
        %924 temp(0) * 1/int32 INSTA 
        %925 1/int1 CMP.ne %923, int32{0}
        %932 void BRC %925
        --> block:928, block:926

      block:926 - if-else
        <-- block:930
        %954 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %955 temp(0) * 1/int32 GETELEMPTR %954, int32{0}, int32{1}
        %956 1/int32 LD %955
        %957 void ST %956, %924
        %927 void BR 
        --> block:970

      block:928 - if-then
        <-- block:930
        %933 temp(0) * 1/int32 INSTA 
        %949 void CALL 'uint __get_prim_vtx2_offset_gen23()', byref %933
        %950 1/int32 LD %933
        %951 1/int32 LD %858
        %952 1/int32 UDIV %950, %951
        %953 void ST %952, %924
        %929 void BR 
        --> block:970

      block:970 - if-predicate
        <-- block:926, block:928
        %958 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %959 temp(0) * 1/int32 GETELEMPTR %958, int32{0}, int32{2}
        %960 1/int32 LD %924
        %961 void ST %960, %959
        %962 1/int32 LD %653
        %963 1/int32 CMOV.ugt (%962, int32{3}) int32{1}, int32{0}
        %964 temp(0) * 1/int32 INSTA 
        %965 1/int1 CMP.ne %963, int32{0}
        %972 void BRC %965
        --> block:968, block:966

      block:966 - if-else
        <-- block:970
        %993 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %994 temp(0) * 1/int32 GETELEMPTR %993, int32{0}, int32{2}
        %995 1/int32 LD %994
        %996 void ST %995, %964
        %967 void BR 
        --> block:1009

      block:968 - if-then
        <-- block:970
        %973 temp(0) * 1/int32 INSTA 
        %988 void CALL 'uint __get_prim_vtx3_offset_gen23()', byref %973
        %989 1/int32 LD %973
        %990 1/int32 LD %858
        %991 1/int32 UDIV %989, %990
        %992 void ST %991, %964
        %969 void BR 
        --> block:1009

      block:1009 - if-predicate
        <-- block:966, block:968
        %997 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %998 temp(0) * 1/int32 GETELEMPTR %997, int32{0}, int32{3}
        %999 1/int32 LD %964
        %1000 void ST %999, %998
        %1001 1/int32 LD %653
        %1002 1/int32 CMOV.ugt (%1001, int32{4}) int32{1}, int32{0}
        %1003 temp(0) * 1/int32 INSTA 
        %1004 1/int1 CMP.ne %1002, int32{0}
        %1011 void BRC %1004
        --> block:1007, block:1005

      block:1005 - if-else
        <-- block:1009
        %1033 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %1034 temp(0) * 1/int32 GETELEMPTR %1033, int32{0}, int32{3}
        %1035 1/int32 LD %1034
        %1036 void ST %1035, %1003
        %1006 void BR 
        --> block:1049

      block:1007 - if-then
        <-- block:1009
        %1012 temp(0) * 1/int32 INSTA 
        %1028 void CALL 'uint __get_prim_vtx4_offset_gen23()', byref %1012
        %1029 1/int32 LD %1012
        %1030 1/int32 LD %858
        %1031 1/int32 UDIV %1029, %1030
        %1032 void ST %1031, %1003
        %1008 void BR 
        --> block:1049

      block:1049 - if-predicate
        <-- block:1005, block:1007
        %1037 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %1038 temp(0) * 1/int32 GETELEMPTR %1037, int32{0}, int32{4}
        %1039 1/int32 LD %1003
        %1040 void ST %1039, %1038
        %1041 1/int32 LD %653
        %1042 1/int32 CMOV.ugt (%1041, int32{5}) int32{1}, int32{0}
        %1043 temp(0) * 1/int32 INSTA 
        %1044 1/int1 CMP.ne %1042, int32{0}
        %1051 void BRC %1044
        --> block:1047, block:1045

      block:1045 - if-else
        <-- block:1049
        %1072 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %1073 temp(0) * 1/int32 GETELEMPTR %1072, int32{0}, int32{4}
        %1074 1/int32 LD %1073
        %1075 void ST %1074, %1043
        %1046 void BR 
        --> block:853

      block:1047 - if-then
        <-- block:1049
        %1052 temp(0) * 1/int32 INSTA 
        %1067 void CALL 'uint __get_prim_vtx5_offset_gen23()', byref %1052
        %1068 1/int32 LD %1052
        %1069 1/int32 LD %858
        %1070 1/int32 UDIV %1068, %1069
        %1071 void ST %1070, %1043
        %1048 void BR 
        --> block:853

      block:853 - if-then
        <-- block:1045, block:1047
        %1076 temp(0) * 1/int32[6] GETELEMPTR %655, int32{0}, int32{9}
        %1077 temp(0) * 1/int32 GETELEMPTR %1076, int32{0}, int32{5}
        %1078 1/int32 LD %1043
        %1079 void ST %1078, %1077
        %854 void BR 
        --> block:1144

      block:1144
        <-- block:851, block:853
        %1105 temp(0) * 1/int32 INSTA 
        %1119 void CALL 'uint __get_vertex_index()', byref %1105
        %1120 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{8}
        %1121 1/int32 LD %1105
        %1122 void ST %1121, %1120
        %1123 temp(0) * 1/int32 INSTA 
        %1124 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %1125 void ST %1124, %1123
        %1126 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{10}
        %1127 1/int32 LD %1123
        %1128 void ST %1127, %1126
        %1130 temp(0) * 1/int32 INSTA 
        %1131 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %1132 void ST %1131, %1130
        %1133 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{11}
        %1135 1/int32 LD %1130
        %1136 void ST %1135, %1133
        %1138 temp(0) * 1/int32 INSTA 
        %1139 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1140 void ST %1139, %1138
        %1141 temp(0) * 1/int32 GETELEMPTR %655, int32{0}, int32{12}
        %1142 1/int32 LD %1138
        %1143 void ST %1142, %1141
        %1145 void BR 
        --> block:648

      block:648 - exit
        <-- block:1144
        --> 


  func:uint __gs_wave_in_subgroup()
    arguments:
      %690 out   arg: temp(0) * 1/int32 - '__gs_wave_in_subgroup'

    dwarf:
      __gs_wave_in_subgroup(154 - 154)

    body:
      block:692 - entry
        <-- 
        --> block:705

      block:705
        <-- block:692
        %696 temp(0) * 1/int32 INSTA 
        %697 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %698 void ST %697, %696
        %700 1/int32 LD %696
        %701 1/int32 LSHR %700, int32{24}
        %703 1/int32 AND %701, int32{15}
        %704 void ST %703, %690
        %706 void BR 
        --> block:691

      block:691 - exit
        <-- block:705
        --> 


  func:uint __get_wave_prim_count()
    arguments:
      %743 out   arg: temp(0) * 1/int32 - '__get_wave_prim_count'

    dwarf:
      __get_wave_prim_count(284 - 284)

    body:
      block:745 - entry
        <-- 
        --> block:756

      block:756
        <-- block:745
        %748 temp(0) * 1/int32 INSTA 
        %749 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %750 void ST %749, %748
        %751 1/int32 LD %748
        %752 1/int32 LSHR %751, int32{8}
        %754 1/int32 AND %752, int32{255}
        %755 void ST %754, %743
        %757 void BR 
        --> block:744

      block:744 - exit
        <-- block:756
        --> 


  func:uint __get_wave_vert_count()
    arguments:
      %764 out   arg: temp(0) * 1/int32 - '__get_wave_vert_count'

    dwarf:
      __get_wave_vert_count(286 - 286)

    body:
      block:766 - entry
        <-- 
        --> block:775

      block:775
        <-- block:766
        %769 temp(0) * 1/int32 INSTA 
        %770 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %771 void ST %770, %769
        %772 1/int32 LD %769
        %773 1/int32 AND %772, int32{255}
        %774 void ST %773, %764
        %776 void BR 
        --> block:765

      block:765 - exit
        <-- block:775
        --> 


  func:uint __get_subgroup_prim_count()
    arguments:
      %783 out   arg: temp(0) * 1/int32 - '__get_subgroup_prim_count'

    dwarf:
      __get_subgroup_prim_count(288 - 288)

    body:
      block:785 - entry
        <-- 
        --> block:798

      block:798
        <-- block:785
        %789 temp(0) * 1/int32 INSTA 
        %790 1/int32 intr.READSPECIALSCALARREG int32{79} 's_gs_control_wave_id'
        %791 void ST %790, %789
        %793 1/int32 LD %789
        %794 1/int32 LSHR %793, int32{22}
        %796 1/int32 AND %794, int32{511}
        %797 void ST %796, %783
        %799 void BR 
        --> block:784

      block:784 - exit
        <-- block:798
        --> 


  func:uint __get_subgroup_vert_count()
    arguments:
      %806 out   arg: temp(0) * 1/int32 - '__get_subgroup_vert_count'

    dwarf:
      __get_subgroup_vert_count(290 - 290)

    body:
      block:808 - entry
        <-- 
        --> block:818

      block:818
        <-- block:808
        %811 temp(0) * 1/int32 INSTA 
        %812 1/int32 intr.READSPECIALSCALARREG int32{79} 's_gs_control_wave_id'
        %813 void ST %812, %811
        %814 1/int32 LD %811
        %815 1/int32 LSHR %814, int32{12}
        %816 1/int32 AND %815, int32{511}
        %817 void ST %816, %806
        %819 void BR 
        --> block:807

      block:807 - exit
        <-- block:818
        --> 


  func:bool IsGen5()
    arguments:
      %826 out   arg: temp(0) * 1/int32 - 'IsGen5'

    dwarf:
      IsGen5(292 - 292)

    body:
      block:828 - entry
        <-- 
        --> block:845

      block:845
        <-- block:828
        %831 temp(0) * 1/int32 'target': INSTA 
        %832 temp(0) * 1/int32 INSTA 
        %833 1/int32 intr.GET_TARGET 
        %834 void ST %833, %832
        %835 1/int32 LD %832
        %836 void ST %835, %831
        %838 1/int32 LD %831
        %839 1/int32 CMOV.eq (int32{9}, %838) int32{1}, int32{0}
        %841 1/int32 LD %831
        %842 1/int32 CMOV.eq (int32{10}, %841) int32{1}, int32{0}
        %843 1/int32 OR %839, %842
        %844 void ST %843, %826
        %846 void BR 
        --> block:827

      block:827 - exit
        <-- block:845
        --> 


  func:uint __get_prim_vtx0_offset_gen23()
    arguments:
      %862 out   arg: temp(0) * 1/int32 - '__get_prim_vtx0_offset_gen23'

    dwarf:
      __get_prim_vtx0_offset_gen23(296 - 296)

    body:
      block:864 - entry
        <-- 
        --> block:874

      block:874
        <-- block:864
        %868 temp(0) * 1/int32 INSTA 
        %869 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %870 void ST %869, %868
        %871 1/int32 LD %868
        %872 1/int32 AND %871, int32{65535}
        %873 void ST %872, %862
        %875 void BR 
        --> block:863

      block:863 - exit
        <-- block:874
        --> 


  func:uint __get_prim_vtx1_offset_gen23()
    arguments:
      %896 out   arg: temp(0) * 1/int32 - '__get_prim_vtx1_offset_gen23'

    dwarf:
      __get_prim_vtx1_offset_gen23(298 - 298)

    body:
      block:898 - entry
        <-- 
        --> block:907

      block:907
        <-- block:898
        %901 temp(0) * 1/int32 INSTA 
        %902 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %903 void ST %902, %901
        %904 1/int32 LD %901
        %905 1/int32 LSHR %904, int32{16}
        %906 void ST %905, %896
        %908 void BR 
        --> block:897

      block:897 - exit
        <-- block:907
        --> 


  func:uint __get_prim_vtx2_offset_gen23()
    arguments:
      %935 out   arg: temp(0) * 1/int32 - '__get_prim_vtx2_offset_gen23'

    dwarf:
      __get_prim_vtx2_offset_gen23(300 - 300)

    body:
      block:937 - entry
        <-- 
        --> block:947

      block:947
        <-- block:937
        %941 temp(0) * 1/int32 INSTA 
        %942 1/int32 intr.READSPECIALVECTORREG int32{84} 'v_vtx2_vtx3_offset'
        %943 void ST %942, %941
        %944 1/int32 LD %941
        %945 1/int32 AND %944, int32{65535}
        %946 void ST %945, %935
        %948 void BR 
        --> block:936

      block:936 - exit
        <-- block:947
        --> 


  func:uint __get_prim_vtx3_offset_gen23()
    arguments:
      %975 out   arg: temp(0) * 1/int32 - '__get_prim_vtx3_offset_gen23'

    dwarf:
      __get_prim_vtx3_offset_gen23(302 - 302)

    body:
      block:977 - entry
        <-- 
        --> block:986

      block:986
        <-- block:977
        %980 temp(0) * 1/int32 INSTA 
        %981 1/int32 intr.READSPECIALVECTORREG int32{84} 'v_vtx2_vtx3_offset'
        %982 void ST %981, %980
        %983 1/int32 LD %980
        %984 1/int32 LSHR %983, int32{16}
        %985 void ST %984, %975
        %987 void BR 
        --> block:976

      block:976 - exit
        <-- block:986
        --> 


  func:uint __get_prim_vtx4_offset_gen23()
    arguments:
      %1014 out   arg: temp(0) * 1/int32 - '__get_prim_vtx4_offset_gen23'

    dwarf:
      __get_prim_vtx4_offset_gen23(304 - 304)

    body:
      block:1016 - entry
        <-- 
        --> block:1026

      block:1026
        <-- block:1016
        %1020 temp(0) * 1/int32 INSTA 
        %1021 1/int32 intr.READSPECIALVECTORREG int32{85} 'v_vtx4_vtx5_offset'
        %1022 void ST %1021, %1020
        %1023 1/int32 LD %1020
        %1024 1/int32 AND %1023, int32{65535}
        %1025 void ST %1024, %1014
        %1027 void BR 
        --> block:1015

      block:1015 - exit
        <-- block:1026
        --> 


  func:uint __get_prim_vtx5_offset_gen23()
    arguments:
      %1054 out   arg: temp(0) * 1/int32 - '__get_prim_vtx5_offset_gen23'

    dwarf:
      __get_prim_vtx5_offset_gen23(306 - 306)

    body:
      block:1056 - entry
        <-- 
        --> block:1065

      block:1065
        <-- block:1056
        %1059 temp(0) * 1/int32 INSTA 
        %1060 1/int32 intr.READSPECIALVECTORREG int32{85} 'v_vtx4_vtx5_offset'
        %1061 void ST %1060, %1059
        %1062 1/int32 LD %1059
        %1063 1/int32 LSHR %1062, int32{16}
        %1064 void ST %1063, %1054
        %1066 void BR 
        --> block:1055

      block:1055 - exit
        <-- block:1065
        --> 


  func:uint __get_vertex_index()
    arguments:
      %1107 out   arg: temp(0) * 1/int32 - '__get_vertex_index'

    dwarf:
      __get_vertex_index(309 - 309)

    body:
      block:1109 - entry
        <-- 
        --> block:1117

      block:1117
        <-- block:1109
        %1112 temp(0) * 1/int32 INSTA 
        %1113 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %1114 void ST %1113, %1112
        %1115 1/int32 LD %1112
        %1116 void ST %1115, %1107
        %1118 void BR 
        --> block:1108

      block:1108 - exit
        <-- block:1117
        --> 


  func:void __ldsBarrier(bool)
    arguments:
      %1235 in    arg: 1/int32 - 'singleWave'

    dwarf:
      __ldsBarrier(327 - 327)

    body:
      block:1232 - entry
        <-- 
        --> block:1243

      block:1243 - if-predicate
        <-- block:1232
        %1236 temp(0) * 1/int32 INSTA 
        %1237 void ST %1235, %1236
        %1238 1/int32 LD %1236
        %1239 1/int32 CMOV.eq (int32{0}, %1238) int32{1}, int32{0}
        %1240 1/int1 CMP.ne %1239, int32{0}
        %1245 void BRC %1240
        --> block:1241, block:1233

      block:1241 - if-then
        <-- block:1243
        %1266 void CALL 'void ThreadGroupMemoryBarrierSync()'
        %1242 void BR 
        --> block:1233

      block:1233
        <-- block:1241, block:1243
        %1234 void BR 
        --> block:1267

      block:1267 - return-block
        <-- block:1233
        %1268 void BR 
        --> block:1231

      block:1231 - exit
        <-- block:1267
        --> 


  func:void ThreadGroupMemoryBarrierSync()
    arguments:
      none

    dwarf:
      ThreadGroupMemoryBarrierSync(330 - 330)

    body:
      block:1248 - entry
        <-- 
        --> block:1249

      block:1249
        <-- block:1248
        %1251 temp(0) * 1/int64 'behaviour': INSTA 
        %1258 void ST int64{23}, %1251
        %1262 1/int64 LD %1251
        %1263 void intr.BARRIER int64{4294967295}, %1262 has_side_effects dependent_on_side_effects
        %1250 void BR 
        --> block:1264

      block:1264 - return-block
        <-- block:1249
        %1265 void BR 
        --> block:1247

      block:1247 - exit
        <-- block:1264
        --> 


  func:void SendAllocMessage(uint, uint)
    arguments:
      %1339 in    arg: 1/int32 - 'numPrim'
      %1342 in    arg: 1/int32 - 'numVerts'

    dwarf:
      SendAllocMessage(344 - 344)

    body:
      block:1336 - entry
        <-- 
        --> block:1337

      block:1337
        <-- block:1336
        %1340 temp(0) * 1/int32 INSTA 
        %1341 void ST %1339, %1340
        %1343 temp(0) * 1/int32 INSTA 
        %1344 void ST %1342, %1343
        %1345 temp(0) * 1/int32 'm0': INSTA 
        %1346 1/int32 LD %1340
        %1347 1/int32 LD %1343
        %1367 void CALL 'uint make_m0_for_gsallocreq(uint, uint)', byval %1346, byval %1347, byref %1345
        %1368 1/int32 LD %1345
        %1369 void intr.s_sendmsg %1368, int32{9} has_side_effects dependent_on_side_effects
        %1338 void BR 
        --> block:1370

      block:1370 - return-block
        <-- block:1337
        %1371 void BR 
        --> block:1335

      block:1335 - exit
        <-- block:1370
        --> 


  func:uint make_m0_for_gsallocreq(uint, uint)
    arguments:
      %1353 in    arg: 1/int32 - 'outPrims'
      %1356 in    arg: 1/int32 - 'outVerts'
      %1359 out   arg: temp(0) * 1/int32 - 'make_m0_for_gsallocreq'

    dwarf:
      make_m0_for_gsallocreq(346 - 346)

    body:
      block:1350 - entry
        <-- 
        --> block:1365

      block:1365
        <-- block:1350
        %1354 temp(0) * 1/int32 INSTA 
        %1355 void ST %1353, %1354
        %1357 temp(0) * 1/int32 INSTA 
        %1358 void ST %1356, %1357
        %1360 1/int32 LD %1354
        %1361 1/int32 SHL %1360, int32{12}
        %1362 1/int32 LD %1357
        %1363 1/int32 OR %1361, %1362
        %1364 void ST %1363, %1359
        %1366 void BR 
        --> block:1349

      block:1349 - exit
        <-- block:1365
        --> 


  func:bool EnableLanes(uint, uint)
    arguments:
      %1384 in    arg: 1/int32 - 'tid'
      %1387 in    arg: 1/int32 - 'count'
      %1390 out   arg: temp(0) * 1/int32 - 'EnableLanes'

    dwarf:
      EnableLanes(361 - 361)

    body:
      block:1381 - entry
        <-- 
        --> block:1416

      block:1416 - if-predicate
        <-- block:1381
        %1385 temp(0) * 1/int32 INSTA 
        %1386 void ST %1384, %1385
        %1388 temp(0) * 1/int32 INSTA 
        %1389 void ST %1387, %1388
        %1391 temp(0) * 1/int32 'options': INSTA 
        %1392 temp(0) * 1/int32 INSTA 
        %1393 1/int32 intr.get_ngg_options 
        %1394 void ST int32{545}, %1392
        %1395 1/int32 LD %1392
        %1396 void ST %1395, %1391
        %1397 temp(0) * 1/int32 'w64': INSTA 
        %1398 temp(0) * 1/int32 INSTA 
        %1399 1/int32 intr.GET_WAVEMODE 
        %1400 void ST %1399, %1398
        %1401 1/int32 LD %1398
        %1402 1/int32 CMOV.eq (%1401, int32{1}) int32{1}, int32{0}
        %1403 void ST %1402, %1397
        %1404 temp(0) * 1/int32 'isSingleWave': INSTA 
        %1405 1/int32 LD %1391
        %1406 1/int32 AND %1405, int32{1}
        %1407 1/int32 CMOV.ne (int32{0}, %1406) int32{1}, int32{0}
        %1408 void ST %1407, %1404
        %1409 1/int32 LD %1404
        %1410 1/int32 CMOV.eq (%1409, int32{0}) int32{1}, int32{0}
        %1411 1/int1 CMP.ne %1410, int32{0}
        %1418 void BRC %1411
        --> block:1423, block:1431

      block:1431 - if-predicate
        <-- block:1416
        %1425 1/int32 LD %1397
        %1426 1/int1 CMP.ne %1425, int32{0}
        %1433 void BRC %1426
        --> block:1451, block:1467

      block:1467
        <-- block:1431
        %1453 temp(0) * 1/int32 'm': INSTA 
        %1455 1/int32 LD %1388
        %1456 1/int32 NEG %1455
        %1457 1/int32 ADD int32{32}, %1456
        %1458 1/int32 LSHR int32{-1}, %1457
        %1459 void ST %1458, %1453
        %1460 1/int32 LD %1453
        %1461 temp(0) * 1/int32 INSTA 
        %1462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %1460 uniform_width
        %1463 void ST %1462, %1461
        %1464 1/int32 LD %1461
        %1465 1/int32 CMOV.ne (%1464, int32{0}) int32{1}, int32{0}
        %1466 void ST %1465, %1390
        %1468 void BR 
        --> block:1380

      block:1451
        <-- block:1431
        %1434 temp(0) * 1/int64 'm': INSTA 
        %1438 1/int32 LD %1388
        %1439 1/int32 NEG %1438
        %1440 1/int32 ADD int32{64}, %1439
        %1441 1/int64 CONV %1440
        %1442 1/int64 LSHR int64{-1}, %1441
        %1443 void ST %1442, %1434
        %1444 1/int64 LD %1434
        %1445 temp(0) * 1/int32 INSTA 
        %1446 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %1444 uniform_width
        %1447 void ST %1446, %1445
        %1448 1/int32 LD %1445
        %1449 1/int32 CMOV.ne (%1448, int32{0}) int32{1}, int32{0}
        %1450 void ST %1449, %1390
        %1452 void BR 
        --> block:1380

      block:1423
        <-- block:1416
        %1419 1/int32 LD %1385
        %1420 1/int32 LD %1388
        %1421 1/int32 CMOV.ult (%1419, %1420) int32{1}, int32{0}
        %1422 void ST %1421, %1390
        %1424 void BR 
        --> block:1380

      block:1380 - exit
        <-- block:1423, block:1451, block:1467
        --> 


  func:uint __get_primitive_id()
    arguments:
      %1484 out   arg: temp(0) * 1/int32 - '__get_primitive_id'

    dwarf:
      __get_primitive_id(369 - 369)

    body:
      block:1486 - entry
        <-- 
        --> block:1494

      block:1494
        <-- block:1486
        %1489 temp(0) * 1/int32 INSTA 
        %1490 1/int32 intr.READSPECIALVECTORREG int32{64} 'v_gs_primitive_id'
        %1491 void ST %1490, %1489
        %1492 1/int32 LD %1489
        %1493 void ST %1492, %1484
        %1495 void BR 
        --> block:1485

      block:1485 - exit
        <-- block:1494
        --> 


  func:void ExportNggIndex(uint, uint, bool)
    arguments:
      %1504 in    arg: 1/int32 - 'index'
      %1507 in    arg: 1/int32 - 'primId'
      %1510 in    arg: 1/int32 - 'enablePrimId'

    dwarf:
      ExportNggIndex(371 - 371)

    body:
      block:1501 - entry
        <-- 
        --> block:1531

      block:1531 - if-predicate
        <-- block:1501
        %1505 temp(0) * 1/int32 INSTA 
        %1506 void ST %1504, %1505
        %1508 temp(0) * 1/int32 INSTA 
        %1509 void ST %1507, %1508
        %1511 temp(0) * 1/int32 INSTA 
        %1512 void ST %1510, %1511
        %1513 temp(0) * 1/int32 'indexExpMask': INSTA 
        %1524 1/int32 LD %1511
        %1525 temp(0) * 1/int32 INSTA 
        %1526 1/int1 CMP.ne %1524, int32{0}
        %1533 void BRC %1526
        --> block:1529, block:1527

      block:1527 - if-else
        <-- block:1531
        %1538 void ST int32{0}, %1525
        %1528 void BR 
        --> block:1550

      block:1529 - if-then
        <-- block:1531
        %1537 void ST int32{131072}, %1525
        %1530 void BR 
        --> block:1550

      block:1550 - if-predicate
        <-- block:1527, block:1529
        %1539 1/int32 LD %1525
        %1540 1/int32 OR int32{2162708}, %1539
        %1541 void ST %1540, %1513
        %1542 temp(0) * 1/int32 'Y': INSTA 
        %1543 1/int32 LD %1511
        %1544 temp(0) * 1/int32 INSTA 
        %1545 1/int1 CMP.ne %1543, int32{0}
        %1552 void BRC %1545
        --> block:1548, block:1546

      block:1546 - if-else
        <-- block:1550
        %1555 void ST int32{0}, %1544
        %1547 void BR 
        --> block:1502

      block:1548 - if-then
        <-- block:1550
        %1553 1/int32 LD %1508
        %1554 void ST %1553, %1544
        %1549 void BR 
        --> block:1502

      block:1502
        <-- block:1546, block:1548
        %1556 1/int32 LD %1544
        %1557 void ST %1556, %1542
        %1558 1/int32 LD %1505
        %1559 1/int32 LD %1542
        %1560 1/int32 LD %1513
        %1561 void intr.EXPORT %1558, %1559, int32{0}, int32{0}, %1560, int32{0}
        %1503 void BR 
        --> block:1562

      block:1562 - return-block
        <-- block:1502
        %1563 void BR 
        --> block:1500

      block:1500 - exit
        <-- block:1562
        --> 


  func:void ExportPosAndParams(Ngg::NggVsConfig, Ngg::NggVsOutput, bool)
    arguments:
      %1757 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'
      %1758 in    arg: temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} - 'vsOutput'
      %1759 in    arg: 1/int32 - 'skipParam'

    dwarf:
      ExportPosAndParams(382 - 382)

    body:
      block:1754 - entry
        <-- 
        --> block:1773

      block:1773 - if-predicate
        <-- block:1754
        %1760 temp(0) * 1/int32 INSTA 
        %1761 void ST %1759, %1760
        %1762 temp(0) * 1/int32 'doneIndex': INSTA 
        %1763 temp(0) * 1/int32[5] GETELEMPTR %1757, int32{0}, int32{1}
        %1764 temp(0) * 1/int32 GETELEMPTR %1763, int32{0}, int32{4}
        %1765 1/int32 LD %1764
        %1766 1/int32 CMOV.ne (int32{0}, %1765) int32{1}, int32{0}
        %1767 temp(0) * 1/int32 INSTA 
        %1768 1/int1 CMP.ne %1766, int32{0}
        %1775 void BRC %1768
        --> block:1771, block:1787

      block:1787 - if-predicate
        <-- block:1773
        %1777 temp(0) * 1/int32[5] GETELEMPTR %1757, int32{0}, int32{1}
        %1778 temp(0) * 1/int32 GETELEMPTR %1777, int32{0}, int32{3}
        %1779 1/int32 LD %1778
        %1780 1/int32 CMOV.ne (int32{0}, %1779) int32{1}, int32{0}
        %1781 temp(0) * 1/int32 INSTA 
        %1782 1/int1 CMP.ne %1780, int32{0}
        %1789 void BRC %1782
        --> block:1785, block:1801

      block:1801 - if-predicate
        <-- block:1787
        %1791 temp(0) * 1/int32[5] GETELEMPTR %1757, int32{0}, int32{1}
        %1792 temp(0) * 1/int32 GETELEMPTR %1791, int32{0}, int32{2}
        %1793 1/int32 LD %1792
        %1794 1/int32 CMOV.ne (int32{0}, %1793) int32{1}, int32{0}
        %1795 temp(0) * 1/int32 INSTA 
        %1796 1/int1 CMP.ne %1794, int32{0}
        %1803 void BRC %1796
        --> block:1799, block:1815

      block:1815 - if-predicate
        <-- block:1801
        %1805 temp(0) * 1/int32[5] GETELEMPTR %1757, int32{0}, int32{1}
        %1806 temp(0) * 1/int32 GETELEMPTR %1805, int32{0}, int32{1}
        %1807 1/int32 LD %1806
        %1808 1/int32 CMOV.ne (int32{0}, %1807) int32{1}, int32{0}
        %1809 temp(0) * 1/int32 INSTA 
        %1810 1/int1 CMP.ne %1808, int32{0}
        %1817 void BRC %1810
        --> block:1813, block:1811

      block:1811 - if-else
        <-- block:1815
        %1819 void ST int32{0}, %1809
        %1812 void BR 
        --> block:1797

      block:1813 - if-then
        <-- block:1815
        %1818 void ST int32{1}, %1809
        %1814 void BR 
        --> block:1797

      block:1797 - if-else
        <-- block:1811, block:1813
        %1820 1/int32 LD %1809
        %1821 void ST %1820, %1795
        %1798 void BR 
        --> block:1783

      block:1799 - if-then
        <-- block:1801
        %1804 void ST int32{2}, %1795
        %1800 void BR 
        --> block:1783

      block:1783 - if-else
        <-- block:1797, block:1799
        %1822 1/int32 LD %1795
        %1823 void ST %1822, %1781
        %1784 void BR 
        --> block:1769

      block:1785 - if-then
        <-- block:1787
        %1790 void ST int32{3}, %1781
        %1786 void BR 
        --> block:1769

      block:1769 - if-else
        <-- block:1783, block:1785
        %1824 1/int32 LD %1781
        %1825 void ST %1824, %1767
        %1770 void BR 
        --> block:1982

      block:1771 - if-then
        <-- block:1773
        %1776 void ST int32{4}, %1767
        %1772 void BR 
        --> block:1982

      block:1982 - if-predicate
        <-- block:1769, block:1771
        %1826 1/int32 LD %1767
        %1827 void ST %1826, %1762
        %1828 temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} INSTA 
        %1829 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %1828, int32{0}, int32{0}
        %1830 void ST %1757, %1829
        %1831 temp(0) * temp(0) * 1/int32 GETELEMPTR %1828, int32{0}, int32{1}
        %1832 void ST %1762, %1831
        %1833 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1828, int32{0}, int32{2}
        %1834 void ST %1758, %1833
        %1976 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1828
        %1977 1/int32 LD %1760
        %1978 1/int32 CMOV.eq (%1977, int32{0}) int32{1}, int32{0}
        %1979 1/int1 CMP.ne %1978, int32{0}
        %1984 void BRC %1979
        --> block:1980, block:1755

      block:1980 - if-then
        <-- block:1982
        %1985 temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} INSTA 
        %1986 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %1985, int32{0}, int32{0}
        %1987 void ST %1757, %1986
        %1988 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1985, int32{0}, int32{1}
        %1989 void ST %1758, %1988
        %2375 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1985
        %1981 void BR 
        --> block:1755

      block:1755
        <-- block:1980, block:1982
        %1756 void BR 
        --> block:2376

      block:2376 - return-block
        <-- block:1755
        %2377 void BR 
        --> block:1753

      block:1753 - exit
        <-- block:2376
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1836 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(395 - 395)

    body:
      block:1838 - entry
        <-- 
        --> block:1839

      block:1839
        <-- block:1838
        %1924 void CALL 'void @lambda_90::operator()(int) const', byval int32{0}, byref %1836
        %1973 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1836
        %1840 void BR 
        --> block:1974

      block:1974 - return-block
        <-- block:1839
        %1975 void BR 
        --> block:1837

      block:1837 - exit
        <-- block:1974
        --> 


  func:void @lambda_90::operator()(int) const
    arguments:
      %1846 in    arg: 1/int32 - 'p'
      %1849 inout arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'this'

    dwarf:
      operator()(400 - 400)

    body:
      block:1843 - entry
        <-- 
        --> block:1863

      block:1863 - if-predicate
        <-- block:1843
        %1847 temp(0) * 1/int32 INSTA 
        %1848 void ST %1846, %1847
        %1850 temp(0) * 1/int32 'expOpts': INSTA 
        %1851 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %1849, int32{0}, int32{0}
        %1852 temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %1851
        %1853 temp(0) * 1/int32[5] GETELEMPTR %1852, int32{0}, int32{1}
        %1854 1/int32 LD %1847
        %1855 temp(0) * 1/int32 GETELEMPTR %1853, int32{0}, %1854
        %1856 1/int32 LD %1855
        %1857 void ST %1856, %1850
        %1858 1/int32 LD %1850
        %1859 1/int32 CMOV.ne (int32{0}, %1858) int32{1}, int32{0}
        %1860 1/int1 CMP.ne %1859, int32{0}
        %1865 void BRC %1860
        --> block:1883, block:1844

      block:1883 - if-predicate
        <-- block:1863
        %1866 temp(0) * 1/int32 'opts': INSTA 
        %1870 1/int32 LD %1850
        %1871 1/int32 AND %1870, int32{-2097153}
        %1872 temp(0) * temp(0) * 1/int32 GETELEMPTR %1849, int32{0}, int32{1}
        %1873 temp(0) * 1/int32 LD %1872
        %1874 1/int32 LD %1847
        %1875 1/int32 LD %1873
        %1876 1/int32 CMOV.eq (%1874, %1875) int32{1}, int32{0}
        %1877 temp(0) * 1/int32 INSTA 
        %1878 1/int1 CMP.ne %1876, int32{0}
        %1885 void BRC %1878
        --> block:1881, block:1879

      block:1879 - if-else
        <-- block:1883
        %1888 void ST int32{0}, %1877
        %1880 void BR 
        --> block:1861

      block:1881 - if-then
        <-- block:1883
        %1887 void ST int32{2097152}, %1877
        %1882 void BR 
        --> block:1861

      block:1861 - if-then
        <-- block:1879, block:1881
        %1889 1/int32 LD %1877
        %1890 1/int32 OR %1871, %1889
        %1891 void ST %1890, %1866
        %1892 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1849, int32{0}, int32{2}
        %1893 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1892
        %1894 temp(0) * 4/fp32[5] GETELEMPTR %1893, int32{0}, int32{0}
        %1895 1/int32 LD %1847
        %1896 temp(0) * 4/fp32 GETELEMPTR %1894, int32{0}, %1895
        %1897 4/fp32 LD %1896
        %1898 1/fp32 SHUF %1897.x
        %1899 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1849, int32{0}, int32{2}
        %1900 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1899
        %1901 temp(0) * 4/fp32[5] GETELEMPTR %1900, int32{0}, int32{0}
        %1902 1/int32 LD %1847
        %1903 temp(0) * 4/fp32 GETELEMPTR %1901, int32{0}, %1902
        %1904 4/fp32 LD %1903
        %1905 1/fp32 SHUF %1904.y
        %1906 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1849, int32{0}, int32{2}
        %1907 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1906
        %1908 temp(0) * 4/fp32[5] GETELEMPTR %1907, int32{0}, int32{0}
        %1909 1/int32 LD %1847
        %1910 temp(0) * 4/fp32 GETELEMPTR %1908, int32{0}, %1909
        %1911 4/fp32 LD %1910
        %1912 1/fp32 SHUF %1911.z
        %1913 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %1849, int32{0}, int32{2}
        %1914 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %1913
        %1915 temp(0) * 4/fp32[5] GETELEMPTR %1914, int32{0}, int32{0}
        %1916 1/int32 LD %1847
        %1917 temp(0) * 4/fp32 GETELEMPTR %1915, int32{0}, %1916
        %1918 4/fp32 LD %1917
        %1919 1/fp32 SHUF %1918.w
        %1920 1/int32 LD %1866
        %1921 void intr.EXPORT %1898, %1905, %1912, %1919, %1920, int32{0}
        %1862 void BR 
        --> block:1844

      block:1844
        <-- block:1861, block:1863
        %1845 void BR 
        --> block:1922

      block:1922 - return-block
        <-- block:1844
        %1923 void BR 
        --> block:1842

      block:1842 - exit
        <-- block:1922
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1926 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(407 - 407)

    body:
      block:1928 - entry
        <-- 
        --> block:1929

      block:1929
        <-- block:1928
        %1931 void CALL 'void @lambda_90::operator()(int) const', byval int32{1}, byref %1926
        %1970 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1926
        %1930 void BR 
        --> block:1971

      block:1971 - return-block
        <-- block:1929
        %1972 void BR 
        --> block:1927

      block:1927 - exit
        <-- block:1971
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1933 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(415 - 415)

    body:
      block:1935 - entry
        <-- 
        --> block:1936

      block:1936
        <-- block:1935
        %1938 void CALL 'void @lambda_90::operator()(int) const', byval int32{2}, byref %1933
        %1967 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1933
        %1937 void BR 
        --> block:1968

      block:1968 - return-block
        <-- block:1936
        %1969 void BR 
        --> block:1934

      block:1934 - exit
        <-- block:1968
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1940 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(423 - 423)

    body:
      block:1942 - entry
        <-- 
        --> block:1943

      block:1943
        <-- block:1942
        %1945 void CALL 'void @lambda_90::operator()(int) const', byval int32{3}, byref %1940
        %1964 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1940
        %1944 void BR 
        --> block:1965

      block:1965 - return-block
        <-- block:1943
        %1966 void BR 
        --> block:1941

      block:1941 - exit
        <-- block:1965
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1947 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(431 - 431)

    body:
      block:1949 - entry
        <-- 
        --> block:1950

      block:1950
        <-- block:1949
        %1952 void CALL 'void @lambda_90::operator()(int) const', byval int32{4}, byref %1947
        %1961 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_90)', byref %1947
        %1951 void BR 
        --> block:1962

      block:1962 - return-block
        <-- block:1950
        %1963 void BR 
        --> block:1948

      block:1948 - exit
        <-- block:1962
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_90)
    arguments:
      %1954 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_90) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * 1/int32, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(439 - 439)

    body:
      block:1956 - entry
        <-- 
        --> block:1957

      block:1957
        <-- block:1956
        %1958 void BR 
        --> block:1959

      block:1959 - return-block
        <-- block:1957
        %1960 void BR 
        --> block:1955

      block:1955 - exit
        <-- block:1959
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %1991 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(451 - 451)

    body:
      block:1993 - entry
        <-- 
        --> block:1994

      block:1994
        <-- block:1993
        %2053 void CALL 'void @lambda_91::operator()(int) const', byval int32{0}, byref %1991
        %2372 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %1991
        %1995 void BR 
        --> block:2373

      block:2373 - return-block
        <-- block:1994
        %2374 void BR 
        --> block:1992

      block:1992 - exit
        <-- block:2373
        --> 


  func:void @lambda_91::operator()(int) const
    arguments:
      %2001 in    arg: 1/int32 - 'p'
      %2004 inout arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'this'

    dwarf:
      operator()(456 - 456)

    body:
      block:1998 - entry
        <-- 
        --> block:2018

      block:2018 - if-predicate
        <-- block:1998
        %2002 temp(0) * 1/int32 INSTA 
        %2003 void ST %2001, %2002
        %2005 temp(0) * 1/int32 'expOpts': INSTA 
        %2006 temp(0) * temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} GETELEMPTR %2004, int32{0}, int32{0}
        %2007 temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %2006
        %2008 temp(0) * 1/int32[32] GETELEMPTR %2007, int32{0}, int32{2}
        %2009 1/int32 LD %2002
        %2010 temp(0) * 1/int32 GETELEMPTR %2008, int32{0}, %2009
        %2011 1/int32 LD %2010
        %2012 void ST %2011, %2005
        %2013 1/int32 LD %2005
        %2014 1/int32 CMOV.ne (int32{0}, %2013) int32{1}, int32{0}
        %2015 1/int1 CMP.ne %2014, int32{0}
        %2020 void BRC %2015
        --> block:2016, block:1999

      block:2016 - if-then
        <-- block:2018
        %2021 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %2004, int32{0}, int32{1}
        %2022 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2021
        %2023 temp(0) * 4/int32[32] GETELEMPTR %2022, int32{0}, int32{1}
        %2024 1/int32 LD %2002
        %2025 temp(0) * 4/int32 GETELEMPTR %2023, int32{0}, %2024
        %2026 4/int32 LD %2025
        %2027 1/int32 SHUF %2026.x
        %2028 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %2004, int32{0}, int32{1}
        %2029 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2028
        %2030 temp(0) * 4/int32[32] GETELEMPTR %2029, int32{0}, int32{1}
        %2031 1/int32 LD %2002
        %2032 temp(0) * 4/int32 GETELEMPTR %2030, int32{0}, %2031
        %2033 4/int32 LD %2032
        %2034 1/int32 SHUF %2033.y
        %2035 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %2004, int32{0}, int32{1}
        %2036 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2035
        %2037 temp(0) * 4/int32[32] GETELEMPTR %2036, int32{0}, int32{1}
        %2038 1/int32 LD %2002
        %2039 temp(0) * 4/int32 GETELEMPTR %2037, int32{0}, %2038
        %2040 4/int32 LD %2039
        %2041 1/int32 SHUF %2040.z
        %2042 temp(0) * temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} GETELEMPTR %2004, int32{0}, int32{1}
        %2043 temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %2042
        %2044 temp(0) * 4/int32[32] GETELEMPTR %2043, int32{0}, int32{1}
        %2045 1/int32 LD %2002
        %2046 temp(0) * 4/int32 GETELEMPTR %2044, int32{0}, %2045
        %2047 4/int32 LD %2046
        %2048 1/int32 SHUF %2047.w
        %2049 1/int32 LD %2005
        %2050 void intr.EXPORT %2027, %2034, %2041, %2048, %2049, int32{0}
        %2017 void BR 
        --> block:1999

      block:1999
        <-- block:2016, block:2018
        %2000 void BR 
        --> block:2051

      block:2051 - return-block
        <-- block:1999
        %2052 void BR 
        --> block:1997

      block:1997 - exit
        <-- block:2051
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2055 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(463 - 463)

    body:
      block:2057 - entry
        <-- 
        --> block:2058

      block:2058
        <-- block:2057
        %2060 void CALL 'void @lambda_91::operator()(int) const', byval int32{1}, byref %2055
        %2369 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2055
        %2059 void BR 
        --> block:2370

      block:2370 - return-block
        <-- block:2058
        %2371 void BR 
        --> block:2056

      block:2056 - exit
        <-- block:2370
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2062 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(471 - 471)

    body:
      block:2064 - entry
        <-- 
        --> block:2065

      block:2065
        <-- block:2064
        %2067 void CALL 'void @lambda_91::operator()(int) const', byval int32{2}, byref %2062
        %2366 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2062
        %2066 void BR 
        --> block:2367

      block:2367 - return-block
        <-- block:2065
        %2368 void BR 
        --> block:2063

      block:2063 - exit
        <-- block:2367
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2069 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(479 - 479)

    body:
      block:2071 - entry
        <-- 
        --> block:2072

      block:2072
        <-- block:2071
        %2074 void CALL 'void @lambda_91::operator()(int) const', byval int32{3}, byref %2069
        %2363 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2069
        %2073 void BR 
        --> block:2364

      block:2364 - return-block
        <-- block:2072
        %2365 void BR 
        --> block:2070

      block:2070 - exit
        <-- block:2364
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2076 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(487 - 487)

    body:
      block:2078 - entry
        <-- 
        --> block:2079

      block:2079
        <-- block:2078
        %2081 void CALL 'void @lambda_91::operator()(int) const', byval int32{4}, byref %2076
        %2360 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2076
        %2080 void BR 
        --> block:2361

      block:2361 - return-block
        <-- block:2079
        %2362 void BR 
        --> block:2077

      block:2077 - exit
        <-- block:2361
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2083 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(495 - 495)

    body:
      block:2085 - entry
        <-- 
        --> block:2086

      block:2086
        <-- block:2085
        %2088 void CALL 'void @lambda_91::operator()(int) const', byval int32{5}, byref %2083
        %2357 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2083
        %2087 void BR 
        --> block:2358

      block:2358 - return-block
        <-- block:2086
        %2359 void BR 
        --> block:2084

      block:2084 - exit
        <-- block:2358
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2090 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(503 - 503)

    body:
      block:2092 - entry
        <-- 
        --> block:2093

      block:2093
        <-- block:2092
        %2095 void CALL 'void @lambda_91::operator()(int) const', byval int32{6}, byref %2090
        %2354 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2090
        %2094 void BR 
        --> block:2355

      block:2355 - return-block
        <-- block:2093
        %2356 void BR 
        --> block:2091

      block:2091 - exit
        <-- block:2355
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2097 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(511 - 511)

    body:
      block:2099 - entry
        <-- 
        --> block:2100

      block:2100
        <-- block:2099
        %2102 void CALL 'void @lambda_91::operator()(int) const', byval int32{7}, byref %2097
        %2351 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2097
        %2101 void BR 
        --> block:2352

      block:2352 - return-block
        <-- block:2100
        %2353 void BR 
        --> block:2098

      block:2098 - exit
        <-- block:2352
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2104 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(519 - 519)

    body:
      block:2106 - entry
        <-- 
        --> block:2107

      block:2107
        <-- block:2106
        %2109 void CALL 'void @lambda_91::operator()(int) const', byval int32{8}, byref %2104
        %2348 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2104
        %2108 void BR 
        --> block:2349

      block:2349 - return-block
        <-- block:2107
        %2350 void BR 
        --> block:2105

      block:2105 - exit
        <-- block:2349
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2111 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(527 - 527)

    body:
      block:2113 - entry
        <-- 
        --> block:2114

      block:2114
        <-- block:2113
        %2116 void CALL 'void @lambda_91::operator()(int) const', byval int32{9}, byref %2111
        %2345 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2111
        %2115 void BR 
        --> block:2346

      block:2346 - return-block
        <-- block:2114
        %2347 void BR 
        --> block:2112

      block:2112 - exit
        <-- block:2346
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2118 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(535 - 535)

    body:
      block:2120 - entry
        <-- 
        --> block:2121

      block:2121
        <-- block:2120
        %2123 void CALL 'void @lambda_91::operator()(int) const', byval int32{10}, byref %2118
        %2342 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2118
        %2122 void BR 
        --> block:2343

      block:2343 - return-block
        <-- block:2121
        %2344 void BR 
        --> block:2119

      block:2119 - exit
        <-- block:2343
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2125 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(543 - 543)

    body:
      block:2127 - entry
        <-- 
        --> block:2128

      block:2128
        <-- block:2127
        %2130 void CALL 'void @lambda_91::operator()(int) const', byval int32{11}, byref %2125
        %2339 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2125
        %2129 void BR 
        --> block:2340

      block:2340 - return-block
        <-- block:2128
        %2341 void BR 
        --> block:2126

      block:2126 - exit
        <-- block:2340
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2132 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(551 - 551)

    body:
      block:2134 - entry
        <-- 
        --> block:2135

      block:2135
        <-- block:2134
        %2137 void CALL 'void @lambda_91::operator()(int) const', byval int32{12}, byref %2132
        %2336 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2132
        %2136 void BR 
        --> block:2337

      block:2337 - return-block
        <-- block:2135
        %2338 void BR 
        --> block:2133

      block:2133 - exit
        <-- block:2337
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2139 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(559 - 559)

    body:
      block:2141 - entry
        <-- 
        --> block:2142

      block:2142
        <-- block:2141
        %2144 void CALL 'void @lambda_91::operator()(int) const', byval int32{13}, byref %2139
        %2333 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2139
        %2143 void BR 
        --> block:2334

      block:2334 - return-block
        <-- block:2142
        %2335 void BR 
        --> block:2140

      block:2140 - exit
        <-- block:2334
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2146 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(567 - 567)

    body:
      block:2148 - entry
        <-- 
        --> block:2149

      block:2149
        <-- block:2148
        %2151 void CALL 'void @lambda_91::operator()(int) const', byval int32{14}, byref %2146
        %2330 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2146
        %2150 void BR 
        --> block:2331

      block:2331 - return-block
        <-- block:2149
        %2332 void BR 
        --> block:2147

      block:2147 - exit
        <-- block:2331
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2153 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(575 - 575)

    body:
      block:2155 - entry
        <-- 
        --> block:2156

      block:2156
        <-- block:2155
        %2158 void CALL 'void @lambda_91::operator()(int) const', byval int32{15}, byref %2153
        %2327 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2153
        %2157 void BR 
        --> block:2328

      block:2328 - return-block
        <-- block:2156
        %2329 void BR 
        --> block:2154

      block:2154 - exit
        <-- block:2328
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2160 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(583 - 583)

    body:
      block:2162 - entry
        <-- 
        --> block:2163

      block:2163
        <-- block:2162
        %2165 void CALL 'void @lambda_91::operator()(int) const', byval int32{16}, byref %2160
        %2324 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2160
        %2164 void BR 
        --> block:2325

      block:2325 - return-block
        <-- block:2163
        %2326 void BR 
        --> block:2161

      block:2161 - exit
        <-- block:2325
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2167 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(591 - 591)

    body:
      block:2169 - entry
        <-- 
        --> block:2170

      block:2170
        <-- block:2169
        %2172 void CALL 'void @lambda_91::operator()(int) const', byval int32{17}, byref %2167
        %2321 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2167
        %2171 void BR 
        --> block:2322

      block:2322 - return-block
        <-- block:2170
        %2323 void BR 
        --> block:2168

      block:2168 - exit
        <-- block:2322
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2174 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(599 - 599)

    body:
      block:2176 - entry
        <-- 
        --> block:2177

      block:2177
        <-- block:2176
        %2179 void CALL 'void @lambda_91::operator()(int) const', byval int32{18}, byref %2174
        %2318 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2174
        %2178 void BR 
        --> block:2319

      block:2319 - return-block
        <-- block:2177
        %2320 void BR 
        --> block:2175

      block:2175 - exit
        <-- block:2319
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2181 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(607 - 607)

    body:
      block:2183 - entry
        <-- 
        --> block:2184

      block:2184
        <-- block:2183
        %2186 void CALL 'void @lambda_91::operator()(int) const', byval int32{19}, byref %2181
        %2315 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2181
        %2185 void BR 
        --> block:2316

      block:2316 - return-block
        <-- block:2184
        %2317 void BR 
        --> block:2182

      block:2182 - exit
        <-- block:2316
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2188 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(615 - 615)

    body:
      block:2190 - entry
        <-- 
        --> block:2191

      block:2191
        <-- block:2190
        %2193 void CALL 'void @lambda_91::operator()(int) const', byval int32{20}, byref %2188
        %2312 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2188
        %2192 void BR 
        --> block:2313

      block:2313 - return-block
        <-- block:2191
        %2314 void BR 
        --> block:2189

      block:2189 - exit
        <-- block:2313
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2195 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(623 - 623)

    body:
      block:2197 - entry
        <-- 
        --> block:2198

      block:2198
        <-- block:2197
        %2200 void CALL 'void @lambda_91::operator()(int) const', byval int32{21}, byref %2195
        %2309 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2195
        %2199 void BR 
        --> block:2310

      block:2310 - return-block
        <-- block:2198
        %2311 void BR 
        --> block:2196

      block:2196 - exit
        <-- block:2310
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2202 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(631 - 631)

    body:
      block:2204 - entry
        <-- 
        --> block:2205

      block:2205
        <-- block:2204
        %2207 void CALL 'void @lambda_91::operator()(int) const', byval int32{22}, byref %2202
        %2306 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2202
        %2206 void BR 
        --> block:2307

      block:2307 - return-block
        <-- block:2205
        %2308 void BR 
        --> block:2203

      block:2203 - exit
        <-- block:2307
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2209 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(639 - 639)

    body:
      block:2211 - entry
        <-- 
        --> block:2212

      block:2212
        <-- block:2211
        %2214 void CALL 'void @lambda_91::operator()(int) const', byval int32{23}, byref %2209
        %2303 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2209
        %2213 void BR 
        --> block:2304

      block:2304 - return-block
        <-- block:2212
        %2305 void BR 
        --> block:2210

      block:2210 - exit
        <-- block:2304
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2216 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(647 - 647)

    body:
      block:2218 - entry
        <-- 
        --> block:2219

      block:2219
        <-- block:2218
        %2221 void CALL 'void @lambda_91::operator()(int) const', byval int32{24}, byref %2216
        %2300 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2216
        %2220 void BR 
        --> block:2301

      block:2301 - return-block
        <-- block:2219
        %2302 void BR 
        --> block:2217

      block:2217 - exit
        <-- block:2301
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2223 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(655 - 655)

    body:
      block:2225 - entry
        <-- 
        --> block:2226

      block:2226
        <-- block:2225
        %2228 void CALL 'void @lambda_91::operator()(int) const', byval int32{25}, byref %2223
        %2297 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2223
        %2227 void BR 
        --> block:2298

      block:2298 - return-block
        <-- block:2226
        %2299 void BR 
        --> block:2224

      block:2224 - exit
        <-- block:2298
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2230 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(663 - 663)

    body:
      block:2232 - entry
        <-- 
        --> block:2233

      block:2233
        <-- block:2232
        %2235 void CALL 'void @lambda_91::operator()(int) const', byval int32{26}, byref %2230
        %2294 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2230
        %2234 void BR 
        --> block:2295

      block:2295 - return-block
        <-- block:2233
        %2296 void BR 
        --> block:2231

      block:2231 - exit
        <-- block:2295
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2237 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(671 - 671)

    body:
      block:2239 - entry
        <-- 
        --> block:2240

      block:2240
        <-- block:2239
        %2242 void CALL 'void @lambda_91::operator()(int) const', byval int32{27}, byref %2237
        %2291 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2237
        %2241 void BR 
        --> block:2292

      block:2292 - return-block
        <-- block:2240
        %2293 void BR 
        --> block:2238

      block:2238 - exit
        <-- block:2292
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2244 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(679 - 679)

    body:
      block:2246 - entry
        <-- 
        --> block:2247

      block:2247
        <-- block:2246
        %2249 void CALL 'void @lambda_91::operator()(int) const', byval int32{28}, byref %2244
        %2288 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2244
        %2248 void BR 
        --> block:2289

      block:2289 - return-block
        <-- block:2247
        %2290 void BR 
        --> block:2245

      block:2245 - exit
        <-- block:2289
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2251 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(687 - 687)

    body:
      block:2253 - entry
        <-- 
        --> block:2254

      block:2254
        <-- block:2253
        %2256 void CALL 'void @lambda_91::operator()(int) const', byval int32{29}, byref %2251
        %2285 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2251
        %2255 void BR 
        --> block:2286

      block:2286 - return-block
        <-- block:2254
        %2287 void BR 
        --> block:2252

      block:2252 - exit
        <-- block:2286
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2258 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(695 - 695)

    body:
      block:2260 - entry
        <-- 
        --> block:2261

      block:2261
        <-- block:2260
        %2263 void CALL 'void @lambda_91::operator()(int) const', byval int32{30}, byref %2258
        %2282 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2258
        %2262 void BR 
        --> block:2283

      block:2283 - return-block
        <-- block:2261
        %2284 void BR 
        --> block:2259

      block:2259 - exit
        <-- block:2283
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2265 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(703 - 703)

    body:
      block:2267 - entry
        <-- 
        --> block:2268

      block:2268
        <-- block:2267
        %2270 void CALL 'void @lambda_91::operator()(int) const', byval int32{31}, byref %2265
        %2279 void CALL 'void run(Ngg::ExportPosAndParams::@lambda_91)', byref %2265
        %2269 void BR 
        --> block:2280

      block:2280 - return-block
        <-- block:2268
        %2281 void BR 
        --> block:2266

      block:2266 - exit
        <-- block:2280
        --> 


  func:void run(Ngg::ExportPosAndParams::@lambda_91)
    arguments:
      %2272 in    arg: temp(0) * struct (Ngg::ExportPosAndParams::@lambda_91) {temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]}, temp(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]}} - 'body'

    dwarf:
      run(711 - 711)

    body:
      block:2274 - entry
        <-- 
        --> block:2275

      block:2275
        <-- block:2274
        %2276 void BR 
        --> block:2277

      block:2277 - return-block
        <-- block:2275
        %2278 void BR 
        --> block:2273

      block:2273 - exit
        <-- block:2277
        --> 


  func:void __cull_func_prepare_vertex(Ngg::NggCtx, float4, uint)
    arguments:
      %2820 in    arg: temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %2821 in    arg: 4/fp32 - 'pos'
      %2824 in    arg: 1/int32 - 'eye'

    dwarf:
      __cull_func_prepare_vertex(726 - 726)

    body:
      block:2817 - entry
        <-- 
        --> block:2935

      block:2935 - if-predicate
        <-- block:2817
        %2822 temp(0) * 4/fp32 INSTA 
        %2823 void ST %2821, %2822
        %2825 temp(0) * 1/int32 INSTA 
        %2826 void ST %2824, %2825
        %2827 temp(0) * 1/int32 'nggData': INSTA 
        %2884 void CALL 'uint __get_gs_flags()', byref %2827
        %2885 temp(0) * 1/int32 'ogl_clip_space': INSTA 
        %2886 1/int32 LD %2827
        %2887 1/int32 AND %2886, int32{8}
        %2888 1/int32 CMOV.ne (int32{0}, %2887) int32{1}, int32{0}
        %2889 void ST %2888, %2885
        %2890 temp(0) * 1/int32 'clip_x_pos': INSTA 
        %2891 4/fp32 LD %2822
        %2892 1/fp32 SHUF %2891.x
        %2893 4/fp32 LD %2822
        %2894 1/fp32 SHUF %2893.w
        %2895 1/int32 CMOV.fle (%2892, %2894) int32{1}, int32{0}
        %2896 void ST %2895, %2890
        %2897 temp(0) * 1/int32 'clip_y_pos': INSTA 
        %2898 4/fp32 LD %2822
        %2899 1/fp32 SHUF %2898.y
        %2900 4/fp32 LD %2822
        %2901 1/fp32 SHUF %2900.w
        %2902 1/int32 CMOV.fle (%2899, %2901) int32{1}, int32{0}
        %2903 void ST %2902, %2897
        %2904 temp(0) * 1/int32 'clip_z_pos': INSTA 
        %2905 4/fp32 LD %2822
        %2906 1/fp32 SHUF %2905.z
        %2907 4/fp32 LD %2822
        %2908 1/fp32 SHUF %2907.w
        %2909 1/int32 CMOV.fle (%2906, %2908) int32{1}, int32{0}
        %2910 void ST %2909, %2904
        %2911 temp(0) * 1/int32 'clip_x_neg': INSTA 
        %2912 4/fp32 LD %2822
        %2913 1/fp32 SHUF %2912.w
        %2914 1/fp32 NEG %2913
        %2915 4/fp32 LD %2822
        %2916 1/fp32 SHUF %2915.x
        %2917 1/int32 CMOV.fge (%2916, %2914) int32{1}, int32{0}
        %2918 void ST %2917, %2911
        %2919 temp(0) * 1/int32 'clip_y_neg': INSTA 
        %2920 4/fp32 LD %2822
        %2921 1/fp32 SHUF %2920.w
        %2922 1/fp32 NEG %2921
        %2923 4/fp32 LD %2822
        %2924 1/fp32 SHUF %2923.y
        %2925 1/int32 CMOV.fge (%2924, %2922) int32{1}, int32{0}
        %2926 void ST %2925, %2919
        %2927 temp(0) * 1/int32 'clip_z_neg': INSTA 
        %2928 1/int32 LD %2885
        %2929 temp(0) * 1/fp32 INSTA 
        %2930 1/int1 CMP.ne %2928, int32{0}
        %2937 void BRC %2930
        --> block:2933, block:2931

      block:2931 - if-else
        <-- block:2935
        %2942 void ST fp32{0.0}, %2929
        %2932 void BR 
        --> block:2818

      block:2933 - if-then
        <-- block:2935
        %2938 4/fp32 LD %2822
        %2939 1/fp32 SHUF %2938.w
        %2940 1/fp32 NEG %2939
        %2941 void ST %2940, %2929
        %2934 void BR 
        --> block:2818

      block:2818
        <-- block:2931, block:2933
        %2943 4/fp32 LD %2822
        %2944 1/fp32 SHUF %2943.z
        %2945 1/fp32 LD %2929
        %2946 1/int32 CMOV.fge (%2944, %2945) int32{1}, int32{0}
        %2947 void ST %2946, %2927
        %2948 temp(0) * 1/int32 'flags': INSTA 
        %2950 1/int32 LD %2890
        %2951 1/int32 SHL %2950, int32{0}
        %2952 1/int32 LD %2897
        %2953 1/int32 SHL %2952, int32{1}
        %2954 1/int32 OR %2951, %2953
        %2955 1/int32 LD %2904
        %2956 1/int32 SHL %2955, int32{2}
        %2957 1/int32 OR %2954, %2956
        %2958 1/int32 LD %2911
        %2959 1/int32 SHL %2958, int32{3}
        %2960 1/int32 OR %2957, %2959
        %2961 1/int32 LD %2919
        %2962 1/int32 SHL %2961, int32{4}
        %2963 1/int32 OR %2960, %2962
        %2964 1/int32 LD %2927
        %2965 1/int32 SHL %2964, int32{5}
        %2966 1/int32 OR %2963, %2965
        %2967 1/int32 XOR int32{63}, %2966
        %2968 void ST %2967, %2948
        %2969 temp(0) * 1/int32 'wneg': INSTA 
        %2971 4/fp32 LD %2822
        %2972 1/fp32 SHUF %2971.w
        %2973 1/int32 CMOV.flt (%2972, fp32{0.0}) int32{1}, int32{0}
        %2974 void ST %2973, %2969
        %2975 4/fp32 LD %2822
        %2976 1/fp32 SHUF %2975.w
        %2977 2/fp32 SHUF %2976.xx
        %2978 4/fp32 LD %2822
        %2979 2/fp32 SHUF %2978.xy
        %2980 2/fp32 FDIV %2979, %2977
        %2981 1/int32 LD %2948
        %2982 1/fp32 CONV_reinterp %2981
        %2983 1/int32 LD %2969
        %2984 1/fp32 CONV_reinterp %2983
        %2985 4/fp32 SHUF %2980.xy--,  %2982.--x-,  %2984.---x
        %2986 1/int32 LD %2825
        %2987 lds(0) * 4/fp32[256] GETELEMPTR %307, int32{0}, %2986
        %2988 temp(0) * 1/int32 GETELEMPTR %2820, int32{0}, int32{3}
        %2989 1/int32 LD %2988
        %2990 lds(0) * 4/fp32 GETELEMPTR %2987, int32{0}, %2989
        %2991 void ST %2985, %2990
        %2819 void BR 
        --> block:2992

      block:2992 - return-block
        <-- block:2818
        %2993 void BR 
        --> block:2816

      block:2816 - exit
        <-- block:2992
        --> 


  func:uint __get_gs_flags()
    arguments:
      %2829 out   arg: temp(0) * 1/int32 - '__get_gs_flags'

    dwarf:
      __get_gs_flags(728 - 728)

    body:
      block:2831 - entry
        <-- 
        --> block:2848

      block:2848 - if-predicate
        <-- block:2831
        %2834 temp(0) * 1/int32 'options': INSTA 
        %2835 temp(0) * 1/int32 INSTA 
        %2836 1/int32 intr.get_ngg_options 
        %2837 void ST int32{545}, %2835
        %2838 1/int32 LD %2835
        %2839 void ST %2838, %2834
        %2840 1/int32 LD %2834
        %2841 1/int32 AND int32{256}, %2840
        %2842 1/int32 CMOV.ne (int32{0}, %2841) int32{1}, int32{0}
        %2843 1/int1 CMP.ne %2842, int32{0}
        %2850 void BRC %2843
        --> block:2857, block:2868

      block:2868 - if-predicate
        <-- block:2848
        %2860 1/int32 LD %2834
        %2861 1/int32 AND int32{2048}, %2860
        %2862 1/int32 CMOV.ne (int32{0}, %2861) int32{1}, int32{0}
        %2863 1/int1 CMP.ne %2862, int32{0}
        %2870 void BRC %2863
        --> block:2875, block:2882

      block:2882
        <-- block:2868
        %2877 temp(0) * 1/int32 INSTA 
        %2878 1/int32 intr.READ_SHADER_INPUT int32{21}, int32{0}
        %2879 void ST %2878, %2877
        %2880 1/int32 LD %2877
        %2881 void ST %2880, %2829
        %2883 void BR 
        --> block:2830

      block:2875
        <-- block:2868
        %2871 1/int32 LD %2834
        %2872 1/int32 LSHR %2871, int32{16}
        %2873 1/int32 AND %2872, int32{31}
        %2874 void ST %2873, %2829
        %2876 void BR 
        --> block:2830

      block:2857
        <-- block:2848
        %2852 temp(0) * 1/int32 INSTA 
        %2853 1/int32 intr.READSPECIALSCALARREG int32{77} 's_gs_user_data_addr_lo'
        %2854 void ST %2853, %2852
        %2855 1/int32 LD %2852
        %2856 void ST %2855, %2829
        %2858 void BR 
        --> block:2830

      block:2830 - exit
        <-- block:2857, block:2875, block:2882
        --> 


  func:bool __require_stdlib_stereo_culling()
    arguments:
      %2997 out   arg: temp(0) * 1/int32 - '__require_stdlib_stereo_culling'

    dwarf:
      __require_stdlib_stereo_culling(768 - 768)

    body:
      block:2999 - entry
        <-- 
        --> block:3013

      block:3013 - if-predicate
        <-- block:2999
        %3002 temp(0) * 1/int32 'stereomode': INSTA 
        %3003 temp(0) * 1/int32 INSTA 
        %3004 1/int32 intr.get_stereo_mode 
        %3005 void ST int32{0}, %3003
        %3006 1/int32 LD %3003
        %3007 void ST %3006, %3002
        %3008 1/int32 LD %3002
        %3009 1/int32 CMOV.eq (%3008, int32{0}) int32{1}, int32{0}
        %3010 1/int1 CMP.ne %3009, int32{0}
        %3015 void BRC %3010
        --> block:3017, block:3043

      block:3043 - if-predicate
        <-- block:3013
        %3019 temp(0) * 1/int32 'options': INSTA 
        %3020 temp(0) * 1/int32 INSTA 
        %3021 1/int32 intr.get_ngg_options 
        %3022 void ST int32{545}, %3020
        %3023 1/int32 LD %3020
        %3024 void ST %3023, %3019
        %3025 temp(0) * 1/int32 'enableCulling': INSTA 
        %3026 1/int32 LD %3019
        %3027 1/int32 AND %3026, int32{2}
        %3028 1/int32 CMOV.ne (int32{0}, %3027) int32{1}, int32{0}
        %3029 void ST %3028, %3025
        %3030 temp(0) * 1/int32 'useStdlibCulling': INSTA 
        %3031 1/int32 LD %3019
        %3032 1/int32 AND %3031, int32{128}
        %3033 1/int32 CMOV.ne (int32{0}, %3032) int32{1}, int32{0}
        %3034 void ST %3033, %3030
        %3035 1/int32 LD %3025
        %3036 1/int32 CMOV.eq (%3035, int32{0}) int32{1}, int32{0}
        %3037 1/int32 LD %3030
        %3038 1/int32 CMOV.eq (%3037, int32{0}) int32{1}, int32{0}
        %3039 1/int32 OR %3036, %3038
        %3040 1/int1 CMP.ne %3039, int32{0}
        %3045 void BRC %3040
        --> block:3047, block:3055

      block:3055
        <-- block:3043
        %3049 temp(0) * 1/int32 'nggData': INSTA 
        %3050 void CALL 'uint __get_gs_flags()', byref %3049
        %3051 1/int32 LD %3049
        %3052 1/int32 AND %3051, int32{16}
        %3053 1/int32 CMOV.ne (int32{0}, %3052) int32{1}, int32{0}
        %3054 void ST %3053, %2997
        %3056 void BR 
        --> block:2998

      block:3047
        <-- block:3043
        %3046 void ST int32{0}, %2997
        %3048 void BR 
        --> block:2998

      block:3017
        <-- block:3013
        %3016 void ST int32{0}, %2997
        %3018 void BR 
        --> block:2998

      block:2998 - exit
        <-- block:3017, block:3047, block:3055
        --> 


  func:float4 __get_right_eye_position(Ngg::NggVsConfig const&, Ngg::NggVsOutput const&)
    arguments:
      %3073 in    arg: generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'
      %3076 in    arg: generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} - 'vsOutput'
      %3079 out   arg: temp(0) * 4/fp32 - '__get_right_eye_position'

    dwarf:
      __get_right_eye_position(782 - 782)

    body:
      block:3070 - entry
        <-- 
        --> block:3097

      block:3097 - if-predicate
        <-- block:3070
        %3074 temp(0) * generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} INSTA 
        %3075 void ST %3073, %3074
        %3077 temp(0) * generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %3078 void ST %3076, %3077
        %3080 temp(0) * 1/int32 'stereomode': INSTA 
        %3081 temp(0) * 1/int32 INSTA 
        %3082 1/int32 intr.get_stereo_mode 
        %3083 void ST int32{0}, %3081
        %3084 1/int32 LD %3081
        %3085 void ST %3084, %3080
        %3086 1/int32 LD %3080
        %3087 1/int32 CMOV.ne (%3086, int32{0}) int32{1}, int32{0}
        %3089 void intr.OUTPUT_ERROR %3087, "error: calling __get_right_eye_position with stereomode == kStereoModeOff" has_side_effects pinned
        %3090 1/int32 LD %3080
        %3091 1/int32 CMOV.eq (%3090, int32{1}) int32{1}, int32{0}
        %3092 1/int1 CMP.ne %3091, int32{0}
        %3099 void BRC %3092
        --> block:3112, block:3185

      block:3185 - if-predicate
        <-- block:3097
        %3178 1/int32 LD %3080
        %3179 1/int32 CMOV.eq (%3178, int32{2}) int32{1}, int32{0}
        %3180 1/int1 CMP.ne %3179, int32{0}
        %3187 void BRC %3180
        --> block:3206, block:3215

      block:3215 - if-predicate
        <-- block:3185
        %3208 1/int32 LD %3080
        %3209 1/int32 CMOV.eq (%3208, int32{3}) int32{1}, int32{0}
        %3210 1/int1 CMP.ne %3209, int32{0}
        %3217 void BRC %3210
        --> block:3239, block:3211

      block:3211 - if-else
        <-- block:3215
        %3242 void intr.OUTPUT_ERROR int32{0}, "error: invalid stereo mode" has_side_effects pinned
        %3212 void BR 
        --> block:3181

      block:3181 - if-else
        <-- block:3211
        %3182 void BR 
        --> block:3093

      block:3093 - if-else
        <-- block:3181
        %3094 void BR 
        --> block:3245

      block:3245
        <-- block:3093
        %3243 4/fp32 SHUF fp32{0.0}.xxxx
        %3244 void ST %3243, %3079
        %3246 void BR 
        --> block:3069

      block:3239
        <-- block:3215
        %3218 temp(0) * 4/fp32 'p0': INSTA 
        %3219 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %3077
        %3220 generic(0) * 4/fp32[5] GETELEMPTR %3219, int32{0}, int32{0}
        %3221 generic(0) * 4/fp32 GETELEMPTR %3220, int32{0}, int32{0}
        %3222 4/fp32 LD %3221
        %3223 void ST %3222, %3218
        %3224 temp(0) * 1/fp32 'xo': INSTA 
        %3225 temp(0) * 1/int32 INSTA 
        %3226 1/int32 intr.READ_SHADER_INPUT int32{22}, int32{0}
        %3227 void ST %3226, %3225
        %3228 1/int32 LD %3225
        %3229 1/fp32 CONV_reinterp %3228
        %3230 void ST %3229, %3224
        %3231 4/fp32 LD %3218
        %3232 1/fp32 SHUF %3231.x
        %3233 1/fp32 LD %3224
        %3234 1/fp32 ADD %3232, %3233
        %3235 4/fp32 LD %3218
        %3236 3/fp32 SHUF %3235.yzw
        %3237 4/fp32 SHUF %3234.x---,  %3236.-xyz
        %3238 void ST %3237, %3079
        %3240 void BR 
        --> block:3069

      block:3206
        <-- block:3185
        %3188 temp(0) * 4/fp32 'p0': INSTA 
        %3189 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %3077
        %3190 generic(0) * 4/fp32[5] GETELEMPTR %3189, int32{0}, int32{0}
        %3191 generic(0) * 4/fp32 GETELEMPTR %3190, int32{0}, int32{0}
        %3192 4/fp32 LD %3191
        %3193 void ST %3192, %3188
        %3194 temp(0) * 4/fp32 'p1': INSTA 
        %3195 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %3077
        %3196 generic(0) * 4/fp32[5] GETELEMPTR %3195, int32{0}, int32{0}
        %3197 generic(0) * 4/fp32 GETELEMPTR %3196, int32{0}, int32{1}
        %3198 4/fp32 LD %3197
        %3199 void ST %3198, %3194
        %3200 4/fp32 LD %3194
        %3201 1/fp32 SHUF %3200.w
        %3202 4/fp32 LD %3188
        %3203 3/fp32 SHUF %3202.yzw
        %3204 4/fp32 SHUF %3201.x---,  %3203.-xyz
        %3205 void ST %3204, %3079
        %3207 void BR 
        --> block:3069

      block:3112 - if-predicate
        <-- block:3097
        %3100 temp(0) * 1/int32 'lastIndex': INSTA 
        %3101 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %3074
        %3102 generic(0) * 1/int32[5] GETELEMPTR %3101, int32{0}, int32{1}
        %3103 generic(0) * 1/int32 GETELEMPTR %3102, int32{0}, int32{4}
        %3104 1/int32 LD %3103
        %3105 1/int32 CMOV.ne (int32{0}, %3104) int32{1}, int32{0}
        %3106 temp(0) * 1/int32 INSTA 
        %3107 1/int1 CMP.ne %3105, int32{0}
        %3114 void BRC %3107
        --> block:3110, block:3127

      block:3127 - if-predicate
        <-- block:3112
        %3116 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %3074
        %3117 generic(0) * 1/int32[5] GETELEMPTR %3116, int32{0}, int32{1}
        %3118 generic(0) * 1/int32 GETELEMPTR %3117, int32{0}, int32{3}
        %3119 1/int32 LD %3118
        %3120 1/int32 CMOV.ne (int32{0}, %3119) int32{1}, int32{0}
        %3121 temp(0) * 1/int32 INSTA 
        %3122 1/int1 CMP.ne %3120, int32{0}
        %3129 void BRC %3122
        --> block:3125, block:3142

      block:3142 - if-predicate
        <-- block:3127
        %3131 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %3074
        %3132 generic(0) * 1/int32[5] GETELEMPTR %3131, int32{0}, int32{1}
        %3133 generic(0) * 1/int32 GETELEMPTR %3132, int32{0}, int32{2}
        %3134 1/int32 LD %3133
        %3135 1/int32 CMOV.ne (int32{0}, %3134) int32{1}, int32{0}
        %3136 temp(0) * 1/int32 INSTA 
        %3137 1/int1 CMP.ne %3135, int32{0}
        %3144 void BRC %3137
        --> block:3140, block:3157

      block:3157 - if-predicate
        <-- block:3142
        %3146 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %3074
        %3147 generic(0) * 1/int32[5] GETELEMPTR %3146, int32{0}, int32{1}
        %3148 generic(0) * 1/int32 GETELEMPTR %3147, int32{0}, int32{1}
        %3149 1/int32 LD %3148
        %3150 1/int32 CMOV.ne (int32{0}, %3149) int32{1}, int32{0}
        %3151 temp(0) * 1/int32 INSTA 
        %3152 1/int1 CMP.ne %3150, int32{0}
        %3159 void BRC %3152
        --> block:3155, block:3153

      block:3153 - if-else
        <-- block:3157
        %3161 void ST int32{0}, %3151
        %3154 void BR 
        --> block:3138

      block:3155 - if-then
        <-- block:3157
        %3160 void ST int32{1}, %3151
        %3156 void BR 
        --> block:3138

      block:3138 - if-else
        <-- block:3153, block:3155
        %3162 1/int32 LD %3151
        %3163 void ST %3162, %3136
        %3139 void BR 
        --> block:3123

      block:3140 - if-then
        <-- block:3142
        %3145 void ST int32{2}, %3136
        %3141 void BR 
        --> block:3123

      block:3123 - if-else
        <-- block:3138, block:3140
        %3164 1/int32 LD %3136
        %3165 void ST %3164, %3121
        %3124 void BR 
        --> block:3108

      block:3125 - if-then
        <-- block:3127
        %3130 void ST int32{3}, %3121
        %3126 void BR 
        --> block:3108

      block:3108 - if-else
        <-- block:3123, block:3125
        %3166 1/int32 LD %3121
        %3167 void ST %3166, %3106
        %3109 void BR 
        --> block:3176

      block:3110 - if-then
        <-- block:3112
        %3115 void ST int32{4}, %3106
        %3111 void BR 
        --> block:3176

      block:3176
        <-- block:3108, block:3110
        %3168 1/int32 LD %3106
        %3169 void ST %3168, %3100
        %3170 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %3077
        %3171 generic(0) * 4/fp32[5] GETELEMPTR %3170, int32{0}, int32{0}
        %3172 1/int32 LD %3100
        %3173 generic(0) * 4/fp32 GETELEMPTR %3171, int32{0}, %3172
        %3174 4/fp32 LD %3173
        %3175 void ST %3174, %3079
        %3177 void BR 
        --> block:3069

      block:3069 - exit
        <-- block:3176, block:3206, block:3239, block:3245
        --> 


  func:bool __cull_func_stdlib(Ngg::NggCtx, uint)
    arguments:
      %3294 in    arg: temp(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %3295 in    arg: 1/int32 - 'eye'
      %3298 out   arg: temp(0) * 1/int32 - '__cull_func_stdlib'

    dwarf:
      __cull_func_stdlib(796 - 796)

    body:
      block:3291 - entry
        <-- 
        --> block:3469

      block:3469 - if-predicate
        <-- block:3291
        %3296 temp(0) * 1/int32 INSTA 
        %3297 void ST %3295, %3296
        %3299 temp(0) * 1/int32 'nggData': INSTA 
        %3300 void CALL 'uint __get_gs_flags()', byref %3299
        %3301 temp(0) * 1/int32 'cullFront': INSTA 
        %3302 1/int32 LD %3299
        %3303 1/int32 AND %3302, int32{1}
        %3304 1/int32 CMOV.ne (int32{0}, %3303) int32{1}, int32{0}
        %3305 void ST %3304, %3301
        %3306 temp(0) * 1/int32 'cullBack': INSTA 
        %3307 1/int32 LD %3299
        %3308 1/int32 AND %3307, int32{2}
        %3309 1/int32 CMOV.ne (int32{0}, %3308) int32{1}, int32{0}
        %3310 void ST %3309, %3306
        %3311 temp(0) * 1/int32 'offscreenCheck': INSTA 
        %3312 1/int32 LD %3299
        %3313 1/int32 AND %3312, int32{4}
        %3314 1/int32 CMOV.ne (int32{0}, %3313) int32{1}, int32{0}
        %3315 void ST %3314, %3311
        %3316 temp(0) * 4/fp32 'pc0': INSTA 
        %3317 1/int32 LD %3296
        %3318 lds(0) * 4/fp32[256] GETELEMPTR %307, int32{0}, %3317
        %3319 temp(0) * 1/int32[6] GETELEMPTR %3294, int32{0}, int32{9}
        %3320 temp(0) * 1/int32 GETELEMPTR %3319, int32{0}, int32{0}
        %3321 1/int32 LD %3320
        %3322 lds(0) * 4/fp32 GETELEMPTR %3318, int32{0}, %3321
        %3323 4/fp32 LD %3322
        %3324 void ST %3323, %3316
        %3325 temp(0) * 4/fp32 'pc1': INSTA 
        %3326 1/int32 LD %3296
        %3327 lds(0) * 4/fp32[256] GETELEMPTR %307, int32{0}, %3326
        %3328 temp(0) * 1/int32[6] GETELEMPTR %3294, int32{0}, int32{9}
        %3329 temp(0) * 1/int32 GETELEMPTR %3328, int32{0}, int32{1}
        %3330 1/int32 LD %3329
        %3331 lds(0) * 4/fp32 GETELEMPTR %3327, int32{0}, %3330
        %3332 4/fp32 LD %3331
        %3333 void ST %3332, %3325
        %3334 temp(0) * 4/fp32 'pc2': INSTA 
        %3335 1/int32 LD %3296
        %3336 lds(0) * 4/fp32[256] GETELEMPTR %307, int32{0}, %3335
        %3337 temp(0) * 1/int32[6] GETELEMPTR %3294, int32{0}, int32{9}
        %3338 temp(0) * 1/int32 GETELEMPTR %3337, int32{0}, int32{2}
        %3339 1/int32 LD %3338
        %3340 lds(0) * 4/fp32 GETELEMPTR %3336, int32{0}, %3339
        %3341 4/fp32 LD %3340
        %3342 void ST %3341, %3334
        %3343 temp(0) * 3/int32 'clip_flags': INSTA 
        %3344 4/fp32 LD %3316
        %3345 1/fp32 SHUF %3344.z
        %3346 4/fp32 LD %3325
        %3347 1/fp32 SHUF %3346.z
        %3348 4/fp32 LD %3334
        %3349 1/fp32 SHUF %3348.z
        %3350 3/fp32 SHUF %3345.x--,  %3347.-x-,  %3349.--x
        %3351 3/int32 CONV_reinterp %3350
        %3352 void ST %3351, %3343
        %3353 temp(0) * 3/int32 'negw': INSTA 
        %3354 4/fp32 LD %3316
        %3355 1/fp32 SHUF %3354.w
        %3356 4/fp32 LD %3325
        %3357 1/fp32 SHUF %3356.w
        %3358 4/fp32 LD %3334
        %3359 1/fp32 SHUF %3358.w
        %3360 3/fp32 SHUF %3355.x--,  %3357.-x-,  %3359.--x
        %3361 3/int32 CONV_reinterp %3360
        %3362 void ST %3361, %3353
        %3363 temp(0) * 1/int32 'determinat_reflect': INSTA 
        %3364 3/int32 LD %3353
        %3365 1/int32 SHUF %3364.x
        %3366 3/int32 LD %3353
        %3367 1/int32 SHUF %3366.y
        %3368 1/int32 XOR %3365, %3367
        %3369 3/int32 LD %3353
        %3370 1/int32 SHUF %3369.z
        %3371 1/int32 XOR %3368, %3370
        %3372 void ST %3371, %3363
        %3373 temp(0) * 1/int32 'clip_flags_and': INSTA 
        %3374 3/int32 LD %3343
        %3375 1/int32 SHUF %3374.x
        %3376 3/int32 LD %3343
        %3377 1/int32 SHUF %3376.y
        %3378 1/int32 AND %3375, %3377
        %3379 3/int32 LD %3343
        %3380 1/int32 SHUF %3379.z
        %3381 1/int32 AND %3378, %3380
        %3382 void ST %3381, %3373
        %3383 temp(0) * 1/int32 'fullyOutside': INSTA 
        %3384 1/int32 LD %3373
        %3385 1/int32 CMOV.ne (int32{0}, %3384) int32{1}, int32{0}
        %3386 1/int32 LD %3311
        %3387 1/int32 AND %3386, %3385
        %3388 void ST %3387, %3383
        %3389 temp(0) * 1/int32 'clip_flags_or': INSTA 
        %3390 3/int32 LD %3343
        %3391 1/int32 SHUF %3390.x
        %3392 3/int32 LD %3343
        %3393 1/int32 SHUF %3392.y
        %3394 1/int32 OR %3391, %3393
        %3395 3/int32 LD %3343
        %3396 1/int32 SHUF %3395.z
        %3397 1/int32 OR %3394, %3396
        %3398 void ST %3397, %3389
        %3399 temp(0) * 1/int32 'znear_clip': INSTA 
        %3401 1/int32 LD %3389
        %3402 1/int32 AND %3401, int32{32}
        %3403 1/int32 CMOV.ne (int32{0}, %3402) int32{1}, int32{0}
        %3404 void ST %3403, %3399
        %3405 temp(0) * 2/fp32[3] 'proj_pos': INSTA 
        %3406 temp(0) * 2/fp32 GETELEMPTR %3405, int32{0}, int32{0}
        %3407 4/fp32 LD %3316
        %3408 2/fp32 SHUF %3407.xy
        %3409 void ST %3408, %3406
        %3410 temp(0) * 2/fp32 GETELEMPTR %3405, int32{0}, int32{1}
        %3411 4/fp32 LD %3325
        %3412 2/fp32 SHUF %3411.xy
        %3413 void ST %3412, %3410
        %3414 temp(0) * 2/fp32 GETELEMPTR %3405, int32{0}, int32{2}
        %3415 4/fp32 LD %3334
        %3416 2/fp32 SHUF %3415.xy
        %3417 void ST %3416, %3414
        %3418 temp(0) * 2/fp32 'vtx0': INSTA 
        %3419 temp(0) * 2/fp32 GETELEMPTR %3405, int32{0}, int32{0}
        %3420 2/fp32 LD %3419
        %3421 void ST %3420, %3418
        %3422 temp(0) * 2/fp32 'vtx1': INSTA 
        %3423 temp(0) * 2/fp32 GETELEMPTR %3405, int32{0}, int32{1}
        %3424 2/fp32 LD %3423
        %3425 void ST %3424, %3422
        %3426 temp(0) * 2/fp32 'vtx2': INSTA 
        %3427 temp(0) * 2/fp32 GETELEMPTR %3405, int32{0}, int32{2}
        %3428 2/fp32 LD %3427
        %3429 void ST %3428, %3426
        %3430 temp(0) * 2/fp32 'delta_10': INSTA 
        %3431 2/fp32 LD %3422
        %3432 2/fp32 LD %3418
        %3433 2/fp32 NEG %3432
        %3434 2/fp32 ADD %3431, %3433
        %3435 void ST %3434, %3430
        %3436 temp(0) * 2/fp32 'delta_20': INSTA 
        %3437 2/fp32 LD %3426
        %3438 2/fp32 LD %3418
        %3439 2/fp32 NEG %3438
        %3440 2/fp32 ADD %3437, %3439
        %3441 void ST %3440, %3436
        %3442 temp(0) * 1/fp32 'det': INSTA 
        %3443 2/fp32 LD %3430
        %3444 1/fp32 SHUF %3443.x
        %3445 2/fp32 LD %3436
        %3446 1/fp32 SHUF %3445.y
        %3447 1/fp32 MUL %3444, %3446
        %3448 2/fp32 LD %3430
        %3449 1/fp32 SHUF %3448.y
        %3450 2/fp32 LD %3436
        %3451 1/fp32 SHUF %3450.x
        %3452 1/fp32 MUL %3449, %3451
        %3453 1/fp32 NEG %3452
        %3454 1/fp32 ADD %3447, %3453
        %3455 temp(0) * 1/fp32 INSTA 
        %3456 1/fp32 intr.INVARIANT %3454
        %3457 void ST %3456, %3455
        %3458 1/fp32 LD %3455
        %3459 void ST %3458, %3442
        %3460 temp(0) * 1/fp32 'a': INSTA 
        %3461 1/int32 LD %3363
        %3462 1/int32 CMOV.ne (%3461, int32{0}) int32{1}, int32{0}
        %3463 temp(0) * 1/fp32 INSTA 
        %3464 1/int1 CMP.ne %3462, int32{0}
        %3471 void BRC %3464
        --> block:3467, block:3465

      block:3465 - if-else
        <-- block:3469
        %3477 1/fp32 LD %3442
        %3478 void ST %3477, %3463
        %3466 void BR 
        --> block:3519

      block:3467 - if-then
        <-- block:3469
        %3474 1/fp32 LD %3442
        %3475 1/fp32 MUL %3474, fp32{-1.0}
        %3476 void ST %3475, %3463
        %3468 void BR 
        --> block:3519

      block:3519
        <-- block:3465, block:3467
        %3479 1/fp32 LD %3463
        %3480 void ST %3479, %3460
        %3481 temp(0) * 1/int32 'isFrontFacingCCW': INSTA 
        %3482 1/fp32 LD %3460
        %3483 1/int32 CMOV.fgt (%3482, fp32{0.0}) int32{1}, int32{0}
        %3484 temp(0) * 1/int32 INSTA 
        %3485 1/int32 intr.INVARIANT %3483
        %3486 void ST %3485, %3484
        %3487 1/int32 LD %3484
        %3488 void ST %3487, %3481
        %3489 temp(0) * 1/int32 'isFrontFacingCW': INSTA 
        %3490 1/fp32 LD %3460
        %3491 1/int32 CMOV.flt (%3490, fp32{0.0}) int32{1}, int32{0}
        %3492 temp(0) * 1/int32 INSTA 
        %3493 1/int32 intr.INVARIANT %3491
        %3494 void ST %3493, %3492
        %3495 1/int32 LD %3492
        %3496 void ST %3495, %3489
        %3497 temp(0) * 1/int32 'backface': INSTA 
        %3498 1/int32 LD %3481
        %3499 1/int32 CMOV.eq (%3498, int32{0}) int32{1}, int32{0}
        %3500 1/int32 LD %3306
        %3501 1/int32 AND %3500, %3499
        %3502 1/int32 LD %3489
        %3503 1/int32 CMOV.eq (%3502, int32{0}) int32{1}, int32{0}
        %3504 1/int32 LD %3301
        %3505 1/int32 AND %3504, %3503
        %3506 1/int32 OR %3501, %3505
        %3507 void ST %3506, %3497
        %3508 temp(0) * 1/int32 'frontface': INSTA 
        %3509 1/int32 LD %3497
        %3510 1/int32 CMOV.eq (%3509, int32{0}) int32{1}, int32{0}
        %3511 1/int32 LD %3399
        %3512 1/int32 OR %3510, %3511
        %3513 void ST %3512, %3508
        %3514 1/int32 LD %3383
        %3515 1/int32 CMOV.eq (%3514, int32{0}) int32{1}, int32{0}
        %3516 1/int32 LD %3508
        %3517 1/int32 AND %3515, %3516
        %3518 void ST %3517, %3298
        %3520 void BR 
        --> block:3290

      block:3290 - exit
        <-- block:3519
        --> 


  func:Ngg::PrefixSumResult __prefixSum(uint, uint, uint, bool)
    arguments:
      %3595 in    arg: 1/int32 - 'pred'
      %3598 in    arg: 1/int32 - 'tid'
      %3601 in    arg: 1/int32 - 'waveIndex'
      %3604 in    arg: 1/int32 - 'isSingleWave'
      %3607 out   arg: temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} - '__prefixSum'

    dwarf:
      __prefixSum(810 - 810)

    body:
      block:3592 - entry
        <-- 
        --> block:3758

      block:3758 - if-predicate
        <-- block:3592
        %3596 temp(0) * 1/int32 INSTA 
        %3597 void ST %3595, %3596
        %3599 temp(0) * 1/int32 INSTA 
        %3600 void ST %3598, %3599
        %3602 temp(0) * 1/int32 INSTA 
        %3603 void ST %3601, %3602
        %3605 temp(0) * 1/int32 INSTA 
        %3606 void ST %3604, %3605
        %3608 1/int32 LD %3596
        %3609 temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} INSTA 
        %3745 void CALL 'Ngg::pair<uint, uint> ballotAndCount(uint)', byval %3608, byref %3609
        %3746 temp(0) * 1/int32 'i': INSTA 
        %3747 temp(0) * 1/int32 GETELEMPTR %3609, int32{0}, int32{0}
        %3748 1/int32 LD %3747
        %3749 void ST %3748, %3746
        %3750 temp(0) * 1/int32 'c': INSTA 
        %3751 temp(0) * 1/int32 GETELEMPTR %3609, int32{0}, int32{1}
        %3752 1/int32 LD %3751
        %3753 void ST %3752, %3750
        %3754 1/int32 LD %3605
        %3755 1/int1 CMP.ne %3754, int32{0}
        %3760 void BRC %3755
        --> block:3783, block:4120

      block:4120 - if-predicate
        <-- block:3758
        %3785 1/int32 LD %3746
        %3786 1/int32 LD %3750
        %3787 1/int32 LD %3599
        %3788 1/int32 LD %3602
        %3789 1/int32 LD %3605
        %3790 temp(0) * struct (Ngg::PartialPrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %4092 void CALL 'Ngg::PartialPrefixSumResult __prefixSum(uint, uint, uint, uint, bool)', byval %3785, byval %3786, byval %3787, byval %3788, byval %3789, byref %3790
        %4093 temp(0) * 1/int32 'idx': INSTA 
        %4094 temp(0) * 1/int32 GETELEMPTR %3790, int32{0}, int32{0}
        %4095 1/int32 LD %4094
        %4096 void ST %4095, %4093
        %4097 temp(0) * 1/int32 'gc': INSTA 
        %4098 temp(0) * 1/int32 GETELEMPTR %3790, int32{0}, int32{1}
        %4099 1/int32 LD %4098
        %4100 void ST %4099, %4097
        %4101 temp(0) * 1/int32 'start': INSTA 
        %4102 temp(0) * 1/int32 GETELEMPTR %3790, int32{0}, int32{2}
        %4103 1/int32 LD %4102
        %4104 void ST %4103, %4101
        %4105 temp(0) * 1/int32 'w64': INSTA 
        %4106 temp(0) * 1/int32 INSTA 
        %4107 1/int32 intr.GET_WAVEMODE 
        %4108 void ST %4107, %4106
        %4109 1/int32 LD %4106
        %4110 1/int32 CMOV.eq (%4109, int32{1}) int32{1}, int32{0}
        %4111 void ST %4110, %4105
        %4112 temp(0) * 1/int32 'maxLanes': INSTA 
        %4113 1/int32 LD %4105
        %4114 temp(0) * 1/int32 INSTA 
        %4115 1/int1 CMP.ne %4113, int32{0}
        %4122 void BRC %4115
        --> block:4118, block:4116

      block:4116 - if-else
        <-- block:4120
        %4124 void ST int32{32}, %4114
        %4117 void BR 
        --> block:4137

      block:4118 - if-then
        <-- block:4120
        %4123 void ST int32{64}, %4114
        %4119 void BR 
        --> block:4137

      block:4137 - if-predicate
        <-- block:4116, block:4118
        %4125 1/int32 LD %4114
        %4126 void ST %4125, %4112
        %4127 temp(0) * 1/int32 'lc': INSTA 
        %4128 1/int32 LD %4101
        %4129 1/int32 LD %4097
        %4130 1/int32 CMOV.ugt (%4128, %4129) int32{1}, int32{0}
        %4131 temp(0) * 1/int32 INSTA 
        %4132 1/int1 CMP.ne %4130, int32{0}
        %4139 void BRC %4132
        --> block:4135, block:4133

      block:4133 - if-else
        <-- block:4137
        %4141 1/int32 LD %4097
        %4142 1/int32 LD %4101
        %4143 1/int32 NEG %4142
        %4144 1/int32 ADD %4141, %4143
        %4145 1/int32 LD %4112
        %4146 1/int32 UMIN %4145, %4144
        %4147 void ST %4146, %4131
        %4134 void BR 
        --> block:4172

      block:4135 - if-then
        <-- block:4137
        %4140 void ST int32{0}, %4131
        %4136 void BR 
        --> block:4172

      block:4172
        <-- block:4133, block:4135
        %4148 1/int32 LD %4131
        %4149 void ST %4148, %4127
        %4150 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %4151 temp(0) * 1/int32 GETELEMPTR %4150, int32{0}, int32{0}
        %4152 1/int32 LD %4093
        %4153 void ST %4152, %4151
        %4154 temp(0) * 1/int32 GETELEMPTR %4150, int32{0}, int32{1}
        %4155 1/int32 LD %4097
        %4156 void ST %4155, %4154
        %4157 temp(0) * 1/int32 GETELEMPTR %4150, int32{0}, int32{2}
        %4158 1/int32 LD %4127
        %4159 void ST %4158, %4157
        %4160 temp(0) * 1/int32 GETELEMPTR %4150, int32{0}, int32{0}
        %4161 temp(0) * 1/int32 GETELEMPTR %3607, int32{0}, int32{0}
        %4162 1/int32 LD %4160
        %4163 void ST %4162, %4161
        %4164 temp(0) * 1/int32 GETELEMPTR %4150, int32{0}, int32{1}
        %4165 temp(0) * 1/int32 GETELEMPTR %3607, int32{0}, int32{1}
        %4166 1/int32 LD %4164
        %4167 void ST %4166, %4165
        %4168 temp(0) * 1/int32 GETELEMPTR %4150, int32{0}, int32{2}
        %4169 temp(0) * 1/int32 GETELEMPTR %3607, int32{0}, int32{2}
        %4170 1/int32 LD %4168
        %4171 void ST %4170, %4169
        %4173 void BR 
        --> block:3591

      block:3783
        <-- block:3758
        %3761 temp(0) * struct (Ngg::PrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %3762 temp(0) * 1/int32 GETELEMPTR %3761, int32{0}, int32{0}
        %3763 1/int32 LD %3746
        %3764 void ST %3763, %3762
        %3765 temp(0) * 1/int32 GETELEMPTR %3761, int32{0}, int32{1}
        %3766 1/int32 LD %3750
        %3767 void ST %3766, %3765
        %3768 temp(0) * 1/int32 GETELEMPTR %3761, int32{0}, int32{2}
        %3769 1/int32 LD %3750
        %3770 void ST %3769, %3768
        %3771 temp(0) * 1/int32 GETELEMPTR %3761, int32{0}, int32{0}
        %3772 temp(0) * 1/int32 GETELEMPTR %3607, int32{0}, int32{0}
        %3773 1/int32 LD %3771
        %3774 void ST %3773, %3772
        %3775 temp(0) * 1/int32 GETELEMPTR %3761, int32{0}, int32{1}
        %3776 temp(0) * 1/int32 GETELEMPTR %3607, int32{0}, int32{1}
        %3777 1/int32 LD %3775
        %3778 void ST %3777, %3776
        %3779 temp(0) * 1/int32 GETELEMPTR %3761, int32{0}, int32{2}
        %3780 temp(0) * 1/int32 GETELEMPTR %3607, int32{0}, int32{2}
        %3781 1/int32 LD %3779
        %3782 void ST %3781, %3780
        %3784 void BR 
        --> block:3591

      block:3591 - exit
        <-- block:3783, block:4172
        --> 


  func:Ngg::pair<uint, uint> ballotAndCount(uint)
    arguments:
      %3615 in    arg: 1/int32 - 'pred'
      %3618 out   arg: temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} - 'ballotAndCount'

    dwarf:
      ballotAndCount(817 - 817)

    body:
      block:3612 - entry
        <-- 
        --> block:3629

      block:3629 - if-predicate
        <-- block:3612
        %3616 temp(0) * 1/int32 INSTA 
        %3617 void ST %3615, %3616
        %3619 temp(0) * 1/int32 INSTA 
        %3620 1/int32 intr.GET_WAVEMODE 
        %3621 void ST %3620, %3619
        %3622 1/int32 LD %3619
        %3623 1/int32 CMOV.eq (%3622, int32{1}) int32{1}, int32{0}
        %3624 1/int1 CMP.ne %3623, int32{0}
        %3631 void BRC %3624
        --> block:3692, block:3743

      block:3743
        <-- block:3629
        %3694 temp(0) * 1/int32 'b': INSTA 
        %3695 1/int32 LD %3616
        %3713 void CALL 'uint ballot(int)', byval %3695, byref %3694
        %3714 temp(0) * 1/int32 'c': INSTA 
        %3715 1/int32 LD %3694
        %3716 temp(0) * 1/int32 INSTA 
        %3717 1/int32 intr.s_bcnt1_i32_b32 %3715 uniform_width
        %3718 void ST %3717, %3716
        %3719 1/int32 LD %3716
        %3720 void ST %3719, %3714
        %3721 temp(0) * 1/int32 'i': INSTA 
        %3722 1/int32 LD %3694
        %3723 temp(0) * 1/int32 INSTA 
        %3724 1/int32 intr.v_mbcnt_lo_u32_b32 %3722, int32{0} uniform_width
        %3725 void ST %3724, %3723
        %3726 1/int32 LD %3723
        %3727 void ST %3726, %3721
        %3728 temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} INSTA 
        %3729 temp(0) * 1/int32 GETELEMPTR %3728, int32{0}, int32{0}
        %3730 1/int32 LD %3721
        %3731 void ST %3730, %3729
        %3732 temp(0) * 1/int32 GETELEMPTR %3728, int32{0}, int32{1}
        %3733 1/int32 LD %3714
        %3734 void ST %3733, %3732
        %3735 temp(0) * 1/int32 GETELEMPTR %3728, int32{0}, int32{0}
        %3736 temp(0) * 1/int32 GETELEMPTR %3618, int32{0}, int32{0}
        %3737 1/int32 LD %3735
        %3738 void ST %3737, %3736
        %3739 temp(0) * 1/int32 GETELEMPTR %3728, int32{0}, int32{1}
        %3740 temp(0) * 1/int32 GETELEMPTR %3618, int32{0}, int32{1}
        %3741 1/int32 LD %3739
        %3742 void ST %3741, %3740
        %3744 void BR 
        --> block:3611

      block:3692
        <-- block:3629
        %3632 temp(0) * 1/int64 'b': INSTA 
        %3633 1/int32 LD %3616
        %3651 void CALL 'ulong ballot(int)', byval %3633, byref %3632
        %3652 temp(0) * 1/int32 'c': INSTA 
        %3653 1/int64 LD %3632
        %3654 temp(0) * 1/int32 INSTA 
        %3655 1/int32 intr.s_bcnt1_i32_b64 %3653 uniform_width
        %3656 void ST %3655, %3654
        %3657 1/int32 LD %3654
        %3658 void ST %3657, %3652
        %3659 temp(0) * 2/int32 'u': INSTA 
        %3660 1/int64 LD %3632
        %3661 2/int32 CONV_reinterp %3660
        %3662 void ST %3661, %3659
        %3663 temp(0) * 1/int32 'i': INSTA 
        %3664 2/int32 LD %3659
        %3665 1/int32 SHUF %3664.y
        %3666 2/int32 LD %3659
        %3667 1/int32 SHUF %3666.x
        %3668 temp(0) * 1/int32 INSTA 
        %3669 1/int32 intr.v_mbcnt_lo_u32_b32 %3667, int32{0} uniform_width
        %3670 void ST %3669, %3668
        %3671 1/int32 LD %3668
        %3672 temp(0) * 1/int32 INSTA 
        %3673 1/int32 intr.v_mbcnt_hi_u32_b32 %3665, %3671 uniform_width
        %3674 void ST %3673, %3672
        %3675 1/int32 LD %3672
        %3676 void ST %3675, %3663
        %3677 temp(0) * struct (Ngg::pair<uint, uint>) {1/int32, 1/int32} INSTA 
        %3678 temp(0) * 1/int32 GETELEMPTR %3677, int32{0}, int32{0}
        %3679 1/int32 LD %3663
        %3680 void ST %3679, %3678
        %3681 temp(0) * 1/int32 GETELEMPTR %3677, int32{0}, int32{1}
        %3682 1/int32 LD %3652
        %3683 void ST %3682, %3681
        %3684 temp(0) * 1/int32 GETELEMPTR %3677, int32{0}, int32{0}
        %3685 temp(0) * 1/int32 GETELEMPTR %3618, int32{0}, int32{0}
        %3686 1/int32 LD %3684
        %3687 void ST %3686, %3685
        %3688 temp(0) * 1/int32 GETELEMPTR %3677, int32{0}, int32{1}
        %3689 temp(0) * 1/int32 GETELEMPTR %3618, int32{0}, int32{1}
        %3690 1/int32 LD %3688
        %3691 void ST %3690, %3689
        %3693 void BR 
        --> block:3611

      block:3611 - exit
        <-- block:3692, block:3743
        --> 


  func:ulong ballot(int)
    arguments:
      %3639 in    arg: 1/int32 - 'pred'
      %3642 out   arg: temp(0) * 1/int64 - 'ballot'

    dwarf:
      ballot(822 - 822)

    body:
      block:3636 - entry
        <-- 
        --> block:3649

      block:3649
        <-- block:3636
        %3640 temp(0) * 1/int32 INSTA 
        %3641 void ST %3639, %3640
        %3643 1/int32 LD %3640
        %3644 temp(0) * 1/int64 INSTA 
        %3645 1/int64 intr.v_cmp_ne_u32 %3643, int32{0} uniform_width pinned
        %3646 void ST %3645, %3644
        %3647 1/int64 LD %3644
        %3648 void ST %3647, %3642
        %3650 void BR 
        --> block:3635

      block:3635 - exit
        <-- block:3649
        --> 


  func:uint ballot(int)
    arguments:
      %3701 in    arg: 1/int32 - 'pred'
      %3704 out   arg: temp(0) * 1/int32 - 'ballot'

    dwarf:
      ballot(827 - 827)

    body:
      block:3698 - entry
        <-- 
        --> block:3711

      block:3711
        <-- block:3698
        %3702 temp(0) * 1/int32 INSTA 
        %3703 void ST %3701, %3702
        %3705 1/int32 LD %3702
        %3706 temp(0) * 1/int32 INSTA 
        %3707 1/int32 intr.v_cmp_ne_u32 %3705, int32{0} uniform_width pinned
        %3708 void ST %3707, %3706
        %3709 1/int32 LD %3706
        %3710 void ST %3709, %3704
        %3712 void BR 
        --> block:3697

      block:3697 - exit
        <-- block:3711
        --> 


  func:Ngg::PartialPrefixSumResult __prefixSum(uint, uint, uint, uint, bool)
    arguments:
      %3796 in    arg: 1/int32 - 'i'
      %3799 in    arg: 1/int32 - 'c'
      %3802 in    arg: 1/int32 - 'tid'
      %3805 in    arg: 1/int32 - 'waveIndex'
      %3808 in    arg: 1/int32 - 'isSingleWave'
      %3811 out   arg: temp(0) * struct (Ngg::PartialPrefixSumResult) {1/int32, 1/int32, 1/int32} - '__prefixSum'

    dwarf:
      __prefixSum(834 - 834)

    body:
      block:3793 - entry
        <-- 
        --> block:3827

      block:3827 - if-predicate
        <-- block:3793
        %3797 temp(0) * 1/int32 INSTA 
        %3798 void ST %3796, %3797
        %3800 temp(0) * 1/int32 INSTA 
        %3801 void ST %3799, %3800
        %3803 temp(0) * 1/int32 INSTA 
        %3804 void ST %3802, %3803
        %3806 temp(0) * 1/int32 INSTA 
        %3807 void ST %3805, %3806
        %3809 temp(0) * 1/int32 INSTA 
        %3810 void ST %3808, %3809
        %3812 temp(0) * 1/int32 'w64': INSTA 
        %3813 temp(0) * 1/int32 INSTA 
        %3814 1/int32 intr.GET_WAVEMODE 
        %3815 void ST %3814, %3813
        %3816 1/int32 LD %3813
        %3817 1/int32 CMOV.eq (%3816, int32{1}) int32{1}, int32{0}
        %3818 void ST %3817, %3812
        %3819 temp(0) * 1/int32 'maxWaveCount': INSTA 
        %3820 1/int32 LD %3812
        %3821 temp(0) * 1/int32 INSTA 
        %3822 1/int1 CMP.ne %3820, int32{0}
        %3829 void BRC %3822
        --> block:3825, block:3823

      block:3823 - if-else
        <-- block:3827
        %3831 void ST int32{8}, %3821
        %3824 void BR 
        --> block:3881

      block:3825 - if-then
        <-- block:3827
        %3830 void ST int32{4}, %3821
        %3826 void BR 
        --> block:3881

      block:3881 - if-predicate
        <-- block:3823, block:3825
        %3832 1/int32 LD %3821
        %3833 void ST %3832, %3819
        %3835 temp(0) * 1/int32 INSTA 
        %3875 void CALL 'uint __predicate(ulong)', byval int64{1}, byref %3835
        %3876 1/int32 LD %3835
        %3877 1/int32 CMOV.ne (%3876, int32{0}) int32{1}, int32{0}
        %3878 1/int1 CMP.ne %3877, int32{0}
        %3883 void BRC %3878
        --> block:3879, block:3924

      block:3879 - if-then
        <-- block:3881
        %3884 1/int32 LD %3806
        %3885 lds(0) * 1/int32 GETELEMPTR %306, int32{0}, %3884
        %3886 1/int32 LD %3800
        %3887 void ST %3886, %3885
        %3880 void BR 
        --> block:3924

      block:3924 - if-predicate
        <-- block:3879, block:3881
        %3888 1/int32 LD %3809
        %3889 void CALL 'void __ldsBarrier(bool)', byval %3888
        %3890 temp(0) * 1/int32 'data': INSTA 
        %3891 void ST int32{0}, %3890
        %3892 temp(0) * 1/int64 'exec': INSTA 
        %3893 temp(0) * 1/int32 INSTA 
        %3909 void CALL 'uint __get_gs_thread_group_size()', byref %3893
        %3910 1/int32 LD %3893
        %3911 temp(0) * 1/int64 INSTA 
        %3912 1/int64 intr.s_bfm_b64 %3910, int32{0} uniform_width
        %3913 void ST %3912, %3911
        %3914 1/int64 LD %3911
        %3915 void ST %3914, %3892
        %3916 1/int64 LD %3892
        %3917 temp(0) * 1/int32 INSTA 
        %3918 void CALL 'uint __predicate(ulong)', byval %3916, byref %3917
        %3919 1/int32 LD %3917
        %3920 1/int32 CMOV.ne (%3919, int32{0}) int32{1}, int32{0}
        %3921 1/int1 CMP.ne %3920, int32{0}
        %3926 void BRC %3921
        --> block:3922, block:3983

      block:3922 - if-then
        <-- block:3924
        %3927 1/int32 LD %3803
        %3928 lds(0) * 1/int32 GETELEMPTR %306, int32{0}, %3927
        %3929 1/int32 LD %3928
        %3930 void ST %3929, %3890
        %3923 void BR 
        --> block:3983

      block:3983 - if-predicate
        <-- block:3922, block:3924
        %3931 1/int32 LD %3890
        %3932 1/int32 LD %3890
        %3936 temp(0) * 1/int32 INSTA 
        %3937 void ST int32{15}, %3936
        %3938 1/int32 LD %3936
        %3939 temp(0) * 1/int32 INSTA 
        %3940 void ST int32{15}, %3939
        %3941 1/int32 LD %3939
        %3942 temp(0) * 1/int32 INSTA 
        %3943 void ST int32{0}, %3942
        %3944 1/int32 LD %3942
        %3945 temp(0) * 1/int32 INSTA 
        %3946 1/int32 intr.v_mov_dpp16 %3931, %3932, int32{273}, int32{1}, %3938, %3941, %3944 uniform_width pinned
        %3947 void ST %3946, %3945
        %3948 1/int32 LD %3945
        %3949 1/int32 LD %3890
        %3950 temp(0) * 1/int32 INSTA 
        %3951 1/int32 intr.v_add_nc_u32 %3948, %3949 uniform_width
        %3952 void ST %3951, %3950
        %3953 1/int32 LD %3950
        %3954 void ST %3953, %3890
        %3955 1/int32 LD %3890
        %3956 1/int32 LD %3890
        %3959 temp(0) * 1/int32 INSTA 
        %3960 void ST int32{15}, %3959
        %3961 1/int32 LD %3959
        %3962 temp(0) * 1/int32 INSTA 
        %3963 void ST int32{15}, %3962
        %3964 1/int32 LD %3962
        %3965 temp(0) * 1/int32 INSTA 
        %3966 void ST int32{0}, %3965
        %3967 1/int32 LD %3965
        %3968 temp(0) * 1/int32 INSTA 
        %3969 1/int32 intr.v_mov_dpp16 %3955, %3956, int32{274}, int32{1}, %3961, %3964, %3967 uniform_width pinned
        %3970 void ST %3969, %3968
        %3971 1/int32 LD %3968
        %3972 1/int32 LD %3890
        %3973 temp(0) * 1/int32 INSTA 
        %3974 1/int32 intr.v_add_nc_u32 %3971, %3972 uniform_width
        %3975 void ST %3974, %3973
        %3976 1/int32 LD %3973
        %3977 void ST %3976, %3890
        %3978 1/int32 LD %3812
        %3979 1/int32 CMOV.eq (%3978, int32{0}) int32{1}, int32{0}
        %3980 1/int1 CMP.ne %3979, int32{0}
        %3985 void BRC %3980
        --> block:3981, block:4038

      block:3981 - if-then
        <-- block:3983
        %3986 1/int32 LD %3890
        %3987 1/int32 LD %3890
        %3990 temp(0) * 1/int32 INSTA 
        %3991 void ST int32{15}, %3990
        %3992 1/int32 LD %3990
        %3993 temp(0) * 1/int32 INSTA 
        %3994 void ST int32{15}, %3993
        %3995 1/int32 LD %3993
        %3996 temp(0) * 1/int32 INSTA 
        %3997 void ST int32{0}, %3996
        %3998 1/int32 LD %3996
        %3999 temp(0) * 1/int32 INSTA 
        %4000 1/int32 intr.v_mov_dpp16 %3986, %3987, int32{276}, int32{1}, %3992, %3995, %3998 uniform_width pinned
        %4001 void ST %4000, %3999
        %4002 1/int32 LD %3999
        %4003 1/int32 LD %3890
        %4004 temp(0) * 1/int32 INSTA 
        %4005 1/int32 intr.v_add_nc_u32 %4002, %4003 uniform_width
        %4006 void ST %4005, %4004
        %4007 1/int32 LD %4004
        %4008 void ST %4007, %3890
        %3982 void BR 
        --> block:4038

      block:4038 - if-predicate
        <-- block:3981, block:3983
        %4009 temp(0) * 1/int32 'gc': INSTA 
        %4010 1/int32 LD %3890
        %4011 1/int32 LD %3819
        %4013 1/int32 ADD %4011, int32{-1}
        %4014 temp(0) * 1/int32 INSTA 
        %4015 1/int32 intr.v_readlane_b32 %4010, %4013 uniform_width pinned
        %4016 void ST %4015, %4014
        %4017 1/int32 LD %4014
        %4018 void ST %4017, %4009
        %4019 temp(0) * 1/int32 't': INSTA 
        %4020 1/int32 LD %3890
        %4021 1/int32 LD %3806
        %4023 1/int32 ADD %4021, int32{-1}
        %4024 temp(0) * 1/int32 INSTA 
        %4025 1/int32 intr.v_readlane_b32 %4020, %4023 uniform_width pinned
        %4026 void ST %4025, %4024
        %4027 1/int32 LD %4024
        %4028 void ST %4027, %4019
        %4029 temp(0) * 1/int32 'gi': INSTA 
        %4030 1/int32 LD %3806
        %4031 1/int32 CMOV.eq (int32{0}, %4030) int32{1}, int32{0}
        %4032 temp(0) * 1/int32 INSTA 
        %4033 1/int1 CMP.ne %4031, int32{0}
        %4040 void BRC %4033
        --> block:4036, block:4034

      block:4034 - if-else
        <-- block:4038
        %4042 1/int32 LD %4019
        %4043 void ST %4042, %4032
        %4035 void BR 
        --> block:4054

      block:4036 - if-then
        <-- block:4038
        %4041 void ST int32{0}, %4032
        %4037 void BR 
        --> block:4054

      block:4054 - if-predicate
        <-- block:4034, block:4036
        %4044 1/int32 LD %4032
        %4045 void ST %4044, %4029
        %4046 temp(0) * 1/int32 'maxLanes': INSTA 
        %4047 1/int32 LD %3812
        %4048 temp(0) * 1/int32 INSTA 
        %4049 1/int1 CMP.ne %4047, int32{0}
        %4056 void BRC %4049
        --> block:4052, block:4050

      block:4050 - if-else
        <-- block:4054
        %4058 void ST int32{32}, %4048
        %4051 void BR 
        --> block:4090

      block:4052 - if-then
        <-- block:4054
        %4057 void ST int32{64}, %4048
        %4053 void BR 
        --> block:4090

      block:4090
        <-- block:4050, block:4052
        %4059 1/int32 LD %4048
        %4060 void ST %4059, %4046
        %4061 temp(0) * 1/int32 'start': INSTA 
        %4062 1/int32 LD %3806
        %4063 1/int32 LD %4046
        %4064 1/int32 MUL %4062, %4063
        %4065 void ST %4064, %4061
        %4066 temp(0) * struct (Ngg::PartialPrefixSumResult) {1/int32, 1/int32, 1/int32} INSTA 
        %4067 temp(0) * 1/int32 GETELEMPTR %4066, int32{0}, int32{0}
        %4068 1/int32 LD %4029
        %4069 1/int32 LD %3797
        %4070 1/int32 ADD %4068, %4069
        %4071 void ST %4070, %4067
        %4072 temp(0) * 1/int32 GETELEMPTR %4066, int32{0}, int32{1}
        %4073 1/int32 LD %4009
        %4074 void ST %4073, %4072
        %4075 temp(0) * 1/int32 GETELEMPTR %4066, int32{0}, int32{2}
        %4076 1/int32 LD %4061
        %4077 void ST %4076, %4075
        %4078 temp(0) * 1/int32 GETELEMPTR %4066, int32{0}, int32{0}
        %4079 temp(0) * 1/int32 GETELEMPTR %3811, int32{0}, int32{0}
        %4080 1/int32 LD %4078
        %4081 void ST %4080, %4079
        %4082 temp(0) * 1/int32 GETELEMPTR %4066, int32{0}, int32{1}
        %4083 temp(0) * 1/int32 GETELEMPTR %3811, int32{0}, int32{1}
        %4084 1/int32 LD %4082
        %4085 void ST %4084, %4083
        %4086 temp(0) * 1/int32 GETELEMPTR %4066, int32{0}, int32{2}
        %4087 temp(0) * 1/int32 GETELEMPTR %3811, int32{0}, int32{2}
        %4088 1/int32 LD %4086
        %4089 void ST %4088, %4087
        %4091 void BR 
        --> block:3792

      block:3792 - exit
        <-- block:4090
        --> 


  func:uint __predicate(ulong)
    arguments:
      %3841 in    arg: 1/int64 - 'v'
      %3844 out   arg: temp(0) * 1/int32 - '__predicate'

    dwarf:
      __predicate(836 - 836)

    body:
      block:3838 - entry
        <-- 
        --> block:3855

      block:3855 - if-predicate
        <-- block:3838
        %3842 temp(0) * 1/int64 INSTA 
        %3843 void ST %3841, %3842
        %3845 temp(0) * 1/int32 INSTA 
        %3846 1/int32 intr.GET_WAVEMODE 
        %3847 void ST %3846, %3845
        %3848 1/int32 LD %3845
        %3849 1/int32 CMOV.eq (%3848, int32{1}) int32{1}, int32{0}
        %3850 1/int1 CMP.ne %3849, int32{0}
        %3857 void BRC %3850
        --> block:3864, block:3873

      block:3873
        <-- block:3855
        %3866 1/int64 LD %3842
        %3867 1/int32 CONV %3866
        %3868 temp(0) * 1/int32 INSTA 
        %3869 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %3867 uniform_width
        %3870 void ST %3869, %3868
        %3871 1/int32 LD %3868
        %3872 void ST %3871, %3844
        %3874 void BR 
        --> block:3837

      block:3864
        <-- block:3855
        %3858 1/int64 LD %3842
        %3859 temp(0) * 1/int32 INSTA 
        %3860 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %3858 uniform_width
        %3861 void ST %3860, %3859
        %3862 1/int32 LD %3859
        %3863 void ST %3862, %3844
        %3865 void BR 
        --> block:3837

      block:3837 - exit
        <-- block:3864, block:3873
        --> 


  func:uint __get_gs_thread_group_size()
    arguments:
      %3895 out   arg: temp(0) * 1/int32 - '__get_gs_thread_group_size'

    dwarf:
      __get_gs_thread_group_size(840 - 840)

    body:
      block:3897 - entry
        <-- 
        --> block:3907

      block:3907
        <-- block:3897
        %3900 temp(0) * 1/int32 INSTA 
        %3901 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %3902 void ST %3901, %3900
        %3903 1/int32 LD %3900
        %3904 1/int32 LSHR %3903, int32{28}
        %3905 1/int32 AND %3904, int32{15}
        %3906 void ST %3905, %3895
        %3908 void BR 
        --> block:3896

      block:3896 - exit
        <-- block:3907
        --> 


  func:uint FindLiveVerts(Ngg::NggCtx const&, bool)
    arguments:
      %4222 in    arg: generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %4225 in    arg: 1/int32 - 'visiblePrim'
      %4228 out   arg: temp(0) * 1/int32 - 'FindLiveVerts'

    dwarf:
      FindLiveVerts(849 - 849)

    body:
      block:4219 - entry
        <-- 
        --> block:4254

      block:4254 - if-predicate
        <-- block:4219
        %4223 temp(0) * generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} INSTA 
        %4224 void ST %4222, %4223
        %4226 temp(0) * 1/int32 INSTA 
        %4227 void ST %4225, %4226
        %4229 temp(0) * 1/int32 'options': INSTA 
        %4230 temp(0) * 1/int32 INSTA 
        %4231 1/int32 intr.get_ngg_options 
        %4232 void ST int32{545}, %4230
        %4233 1/int32 LD %4230
        %4234 void ST %4233, %4229
        %4235 temp(0) * 1/int32 'isSingleWave': INSTA 
        %4236 1/int32 LD %4229
        %4237 1/int32 AND %4236, int32{1}
        %4238 1/int32 CMOV.ne (int32{0}, %4237) int32{1}, int32{0}
        %4239 void ST %4238, %4235
        %4240 temp(0) * 1/int32 'w64': INSTA 
        %4241 temp(0) * 1/int32 INSTA 
        %4242 1/int32 intr.GET_WAVEMODE 
        %4243 void ST %4242, %4241
        %4244 1/int32 LD %4241
        %4245 1/int32 CMOV.eq (%4244, int32{1}) int32{1}, int32{0}
        %4246 void ST %4245, %4240
        %4247 temp(0) * 1/int32 'activeVert': INSTA 
        %4248 1/int32 LD %4235
        %4249 1/int1 CMP.ne %4248, int32{0}
        %4256 void BRC %4249
        --> block:4263, block:4671

      block:4671 - if-predicate
        <-- block:4254
        %4661 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4662 generic(0) * 1/int32 GETELEMPTR %4661, int32{0}, int32{3}
        %4663 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4664 generic(0) * 1/int32 GETELEMPTR %4663, int32{0}, int32{7}
        %4665 1/int32 LD %4662
        %4666 1/int32 LD %4664
        %4667 1/int32 CMOV.ult (%4665, %4666) int32{1}, int32{0}
        %4668 1/int1 CMP.ne %4667, int32{0}
        %4673 void BRC %4668
        --> block:4669, block:4685

      block:4669 - if-then
        <-- block:4671
        %4674 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4675 generic(0) * 1/int32 GETELEMPTR %4674, int32{0}, int32{3}
        %4676 1/int32 LD %4675
        %4677 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %4676
        %4678 void ST int32{0}, %4677
        %4670 void BR 
        --> block:4685

      block:4685 - if-predicate
        <-- block:4669, block:4671
        %4679 1/int32 LD %4235
        %4680 void CALL 'void __ldsBarrier(bool)', byval %4679
        %4681 1/int32 LD %4226
        %4682 1/int1 CMP.ne %4681, int32{0}
        %4687 void BRC %4682
        --> block:4683, block:4720

      block:4683 - if-then
        <-- block:4685
        %4688 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4689 generic(0) * 1/int32[6] GETELEMPTR %4688, int32{0}, int32{9}
        %4690 generic(0) * 1/int32 GETELEMPTR %4689, int32{0}, int32{0}
        %4691 1/int32 LD %4690
        %4692 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %4691
        %4693 void ST int32{1}, %4692
        %4694 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4695 generic(0) * 1/int32[6] GETELEMPTR %4694, int32{0}, int32{9}
        %4696 generic(0) * 1/int32 GETELEMPTR %4695, int32{0}, int32{1}
        %4697 1/int32 LD %4696
        %4698 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %4697
        %4699 void ST int32{1}, %4698
        %4700 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4701 generic(0) * 1/int32[6] GETELEMPTR %4700, int32{0}, int32{9}
        %4702 generic(0) * 1/int32 GETELEMPTR %4701, int32{0}, int32{2}
        %4703 1/int32 LD %4702
        %4704 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %4703
        %4705 void ST int32{1}, %4704
        %4684 void BR 
        --> block:4720

      block:4720 - if-predicate
        <-- block:4683, block:4685
        %4706 1/int32 LD %4235
        %4707 void CALL 'void __ldsBarrier(bool)', byval %4706
        %4708 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4709 generic(0) * 1/int32 GETELEMPTR %4708, int32{0}, int32{3}
        %4710 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4711 generic(0) * 1/int32 GETELEMPTR %4710, int32{0}, int32{7}
        %4712 1/int32 LD %4709
        %4713 1/int32 LD %4711
        %4714 1/int32 CMOV.ult (%4712, %4713) int32{1}, int32{0}
        %4715 1/int1 CMP.ne %4714, int32{0}
        %4722 void BRC %4715
        --> block:4718, block:4716

      block:4716 - if-else
        <-- block:4720
        %4729 void ST int32{0}, %4228
        %4717 void BR 
        --> block:4250

      block:4718 - if-then
        <-- block:4720
        %4723 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4724 generic(0) * 1/int32 GETELEMPTR %4723, int32{0}, int32{3}
        %4725 1/int32 LD %4724
        %4726 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %4725
        %4727 1/int32 LD %4726
        %4728 void ST %4727, %4228
        %4719 void BR 
        --> block:4250

      block:4250 - if-else
        <-- block:4716, block:4718
        %4251 void BR 
        --> block:4730

      block:4263 - if-predicate
        <-- block:4254
        %4257 1/int32 LD %4240
        %4258 1/int1 CMP.ne %4257, int32{0}
        %4265 void BRC %4258
        --> block:4299, block:4624

      block:4624 - if-predicate
        <-- block:4263
        %4616 temp(0) * 1/int32 'm': INSTA 
        %4617 1/int32 LD %4226
        %4618 temp(0) * 1/int32 INSTA 
        %4619 1/int1 CMP.ne %4617, int32{0}
        %4626 void BRC %4619
        --> block:4622, block:4620

      block:4620 - if-else
        <-- block:4624
        %4645 void ST int32{0}, %4618
        %4621 void BR 
        --> block:4259

      block:4622 - if-then
        <-- block:4624
        %4627 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4628 generic(0) * 1/int32[6] GETELEMPTR %4627, int32{0}, int32{9}
        %4629 generic(0) * 1/int32 GETELEMPTR %4628, int32{0}, int32{0}
        %4630 1/int32 LD %4629
        %4631 1/int32 SHL int32{1}, %4630
        %4632 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4633 generic(0) * 1/int32[6] GETELEMPTR %4632, int32{0}, int32{9}
        %4634 generic(0) * 1/int32 GETELEMPTR %4633, int32{0}, int32{1}
        %4635 1/int32 LD %4634
        %4636 1/int32 SHL int32{1}, %4635
        %4637 1/int32 OR %4631, %4636
        %4638 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4639 generic(0) * 1/int32[6] GETELEMPTR %4638, int32{0}, int32{9}
        %4640 generic(0) * 1/int32 GETELEMPTR %4639, int32{0}, int32{2}
        %4641 1/int32 LD %4640
        %4642 1/int32 SHL int32{1}, %4641
        %4643 1/int32 OR %4637, %4642
        %4644 void ST %4643, %4618
        %4623 void BR 
        --> block:4259

      block:4259 - if-else
        <-- block:4620, block:4622
        %4646 1/int32 LD %4618
        %4647 void ST %4646, %4616
        %4648 1/int32 LD %4616
        %4649 temp(0) * 1/int32 INSTA 
        %4650 1/int32 intr.crosslane_or_b32 %4648 uniform_width pinned
        %4651 void ST %4650, %4649
        %4652 1/int32 LD %4649
        %4653 void ST %4652, %4616
        %4654 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4655 generic(0) * 1/int32 GETELEMPTR %4654, int32{0}, int32{3}
        %4656 1/int32 LD %4616
        %4657 1/int32 LD %4655
        %4658 1/int32 LSHR %4656, %4657
        %4659 1/int32 AND int32{1}, %4658
        %4660 void ST %4659, %4228
        %4260 void BR 
        --> block:4252

      block:4299 - if-predicate
        <-- block:4263
        %4266 temp(0) * 1/int64 'pm': INSTA 
        %4268 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4269 generic(0) * 1/int32[6] GETELEMPTR %4268, int32{0}, int32{9}
        %4270 generic(0) * 1/int32 GETELEMPTR %4269, int32{0}, int32{0}
        %4271 1/int32 LD %4270
        %4272 1/int64 CONV %4271
        %4273 1/int64 SHL int64{1}, %4272
        %4275 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4276 generic(0) * 1/int32[6] GETELEMPTR %4275, int32{0}, int32{9}
        %4277 generic(0) * 1/int32 GETELEMPTR %4276, int32{0}, int32{1}
        %4278 1/int32 LD %4277
        %4279 1/int64 CONV %4278
        %4280 1/int64 SHL int64{1}, %4279
        %4281 1/int64 OR %4273, %4280
        %4283 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4284 generic(0) * 1/int32[6] GETELEMPTR %4283, int32{0}, int32{9}
        %4285 generic(0) * 1/int32 GETELEMPTR %4284, int32{0}, int32{2}
        %4286 1/int32 LD %4285
        %4287 1/int64 CONV %4286
        %4288 1/int64 SHL int64{1}, %4287
        %4289 1/int64 OR %4281, %4288
        %4290 void ST %4289, %4266
        %4291 temp(0) * 1/int64 'm': INSTA 
        %4292 1/int32 LD %4226
        %4293 temp(0) * 1/int64 INSTA 
        %4294 1/int1 CMP.ne %4292, int32{0}
        %4301 void BRC %4294
        --> block:4297, block:4295

      block:4295 - if-else
        <-- block:4299
        %4305 void ST int64{0}, %4293
        %4296 void BR 
        --> block:4261

      block:4297 - if-then
        <-- block:4299
        %4302 1/int64 LD %4266
        %4303 void ST %4302, %4293
        %4298 void BR 
        --> block:4261

      block:4261 - if-then
        <-- block:4295, block:4297
        %4306 1/int64 LD %4293
        %4307 void ST %4306, %4291
        %4308 temp(0) * 2/int32 'v': INSTA 
        %4309 1/int64 LD %4291
        %4310 2/int32 CONV_reinterp %4309
        %4311 void ST %4310, %4308
        %4312 2/int32 LD %4308
        %4313 1/int32 SHUF %4312.x
        %4314 2/int32 LD %4308
        %4315 1/int32 SHUF %4314.x
        %4317 temp(0) * 1/int32 INSTA 
        %4318 void ST int32{15}, %4317
        %4319 1/int32 LD %4317
        %4320 temp(0) * 1/int32 INSTA 
        %4321 void ST int32{15}, %4320
        %4322 1/int32 LD %4320
        %4323 temp(0) * 1/int32 INSTA 
        %4324 void ST int32{0}, %4323
        %4325 1/int32 LD %4323
        %4326 temp(0) * 1/int32 INSTA 
        %4327 1/int32 intr.v_mov_dpp16 %4313, %4315, int32{273}, int32{1}, %4319, %4322, %4325 uniform_width pinned
        %4328 void ST %4327, %4326
        %4329 1/int32 LD %4326
        %4330 2/int32 LD %4308
        %4331 1/int32 SHUF %4330.x
        %4332 temp(0) * 1/int32 INSTA 
        %4333 1/int32 intr.v_or_b32 %4329, %4331 uniform_width
        %4334 void ST %4333, %4332
        %4335 1/int32 LD %4332
        %4336 2/int32 LD %4308
        %4337 2/int32 SHUF %4335.x-,  %4336.-y
        %4338 void ST %4337, %4308
        %4339 2/int32 LD %4308
        %4340 1/int32 SHUF %4339.x
        %4341 2/int32 LD %4308
        %4342 1/int32 SHUF %4341.x
        %4344 temp(0) * 1/int32 INSTA 
        %4345 void ST int32{15}, %4344
        %4346 1/int32 LD %4344
        %4347 temp(0) * 1/int32 INSTA 
        %4348 void ST int32{15}, %4347
        %4349 1/int32 LD %4347
        %4350 temp(0) * 1/int32 INSTA 
        %4351 void ST int32{0}, %4350
        %4352 1/int32 LD %4350
        %4353 temp(0) * 1/int32 INSTA 
        %4354 1/int32 intr.v_mov_dpp16 %4340, %4342, int32{274}, int32{1}, %4346, %4349, %4352 uniform_width pinned
        %4355 void ST %4354, %4353
        %4356 1/int32 LD %4353
        %4357 2/int32 LD %4308
        %4358 1/int32 SHUF %4357.x
        %4359 temp(0) * 1/int32 INSTA 
        %4360 1/int32 intr.v_or_b32 %4356, %4358 uniform_width
        %4361 void ST %4360, %4359
        %4362 1/int32 LD %4359
        %4363 2/int32 LD %4308
        %4364 2/int32 SHUF %4362.x-,  %4363.-y
        %4365 void ST %4364, %4308
        %4366 2/int32 LD %4308
        %4367 1/int32 SHUF %4366.x
        %4368 2/int32 LD %4308
        %4369 1/int32 SHUF %4368.x
        %4371 temp(0) * 1/int32 INSTA 
        %4372 void ST int32{15}, %4371
        %4373 1/int32 LD %4371
        %4374 temp(0) * 1/int32 INSTA 
        %4375 void ST int32{15}, %4374
        %4376 1/int32 LD %4374
        %4377 temp(0) * 1/int32 INSTA 
        %4378 void ST int32{0}, %4377
        %4379 1/int32 LD %4377
        %4380 temp(0) * 1/int32 INSTA 
        %4381 1/int32 intr.v_mov_dpp16 %4367, %4369, int32{276}, int32{1}, %4373, %4376, %4379 uniform_width pinned
        %4382 void ST %4381, %4380
        %4383 1/int32 LD %4380
        %4384 2/int32 LD %4308
        %4385 1/int32 SHUF %4384.x
        %4386 temp(0) * 1/int32 INSTA 
        %4387 1/int32 intr.v_or_b32 %4383, %4385 uniform_width
        %4388 void ST %4387, %4386
        %4389 1/int32 LD %4386
        %4390 2/int32 LD %4308
        %4391 2/int32 SHUF %4389.x-,  %4390.-y
        %4392 void ST %4391, %4308
        %4393 2/int32 LD %4308
        %4394 1/int32 SHUF %4393.x
        %4395 2/int32 LD %4308
        %4396 1/int32 SHUF %4395.x
        %4399 temp(0) * 1/int32 INSTA 
        %4400 void ST int32{15}, %4399
        %4401 1/int32 LD %4399
        %4402 temp(0) * 1/int32 INSTA 
        %4403 void ST int32{15}, %4402
        %4404 1/int32 LD %4402
        %4405 temp(0) * 1/int32 INSTA 
        %4406 void ST int32{0}, %4405
        %4407 1/int32 LD %4405
        %4408 temp(0) * 1/int32 INSTA 
        %4409 1/int32 intr.v_mov_dpp16 %4394, %4396, int32{280}, int32{1}, %4401, %4404, %4407 uniform_width pinned
        %4410 void ST %4409, %4408
        %4411 1/int32 LD %4408
        %4412 2/int32 LD %4308
        %4413 1/int32 SHUF %4412.x
        %4414 temp(0) * 1/int32 INSTA 
        %4415 1/int32 intr.v_or_b32 %4411, %4413 uniform_width
        %4416 void ST %4415, %4414
        %4417 1/int32 LD %4414
        %4418 2/int32 LD %4308
        %4419 2/int32 SHUF %4417.x-,  %4418.-y
        %4420 void ST %4419, %4308
        %4421 2/int32 LD %4308
        %4422 1/int32 SHUF %4421.x
        %4423 2/int32 LD %4308
        %4424 1/int32 SHUF %4423.x
        %4425 2/int32 LD %4308
        %4426 1/int32 SHUF %4425.x
        %4429 temp(0) * 1/int32 INSTA 
        %4430 void ST int32{0}, %4429
        %4431 1/int32 LD %4429
        %4432 temp(0) * 1/int32 INSTA 
        %4433 1/int32 intr.v_permlanex16_b32 %4424, %4426, int32{-1}, int32{-1}, int32{1}, %4431 uniform_width pinned
        %4434 void ST %4433, %4432
        %4435 1/int32 LD %4432
        %4436 temp(0) * 1/int32 INSTA 
        %4437 1/int32 intr.v_or_b32 %4422, %4435 uniform_width
        %4438 void ST %4437, %4436
        %4439 1/int32 LD %4436
        %4440 2/int32 LD %4308
        %4441 2/int32 SHUF %4439.x-,  %4440.-y
        %4442 void ST %4441, %4308
        %4443 2/int32 LD %4308
        %4444 1/int32 SHUF %4443.x
        %4445 temp(0) * 1/int32 INSTA 
        %4446 1/int32 intr.v_readlane_b32 %4444, int32{31} uniform_width pinned
        %4447 void ST %4446, %4445
        %4448 2/int32 LD %4308
        %4449 1/int32 SHUF %4448.x
        %4450 temp(0) * 1/int32 INSTA 
        %4451 1/int32 intr.v_readlane_b32 %4449, int32{63} uniform_width pinned
        %4452 void ST %4451, %4450
        %4453 1/int32 LD %4445
        %4454 1/int32 LD %4450
        %4455 1/int32 OR %4453, %4454
        %4456 2/int32 LD %4308
        %4457 2/int32 SHUF %4455.x-,  %4456.-y
        %4458 void ST %4457, %4308
        %4459 2/int32 LD %4308
        %4460 1/int32 SHUF %4459.y
        %4461 2/int32 LD %4308
        %4462 1/int32 SHUF %4461.y
        %4464 temp(0) * 1/int32 INSTA 
        %4465 void ST int32{15}, %4464
        %4466 1/int32 LD %4464
        %4467 temp(0) * 1/int32 INSTA 
        %4468 void ST int32{15}, %4467
        %4469 1/int32 LD %4467
        %4470 temp(0) * 1/int32 INSTA 
        %4471 void ST int32{0}, %4470
        %4472 1/int32 LD %4470
        %4473 temp(0) * 1/int32 INSTA 
        %4474 1/int32 intr.v_mov_dpp16 %4460, %4462, int32{273}, int32{1}, %4466, %4469, %4472 uniform_width pinned
        %4475 void ST %4474, %4473
        %4476 1/int32 LD %4473
        %4477 2/int32 LD %4308
        %4478 1/int32 SHUF %4477.y
        %4479 temp(0) * 1/int32 INSTA 
        %4480 1/int32 intr.v_or_b32 %4476, %4478 uniform_width
        %4481 void ST %4480, %4479
        %4482 1/int32 LD %4479
        %4483 2/int32 LD %4308
        %4484 2/int32 SHUF %4483.x-,  %4482.-x
        %4485 void ST %4484, %4308
        %4486 2/int32 LD %4308
        %4487 1/int32 SHUF %4486.y
        %4488 2/int32 LD %4308
        %4489 1/int32 SHUF %4488.y
        %4491 temp(0) * 1/int32 INSTA 
        %4492 void ST int32{15}, %4491
        %4493 1/int32 LD %4491
        %4494 temp(0) * 1/int32 INSTA 
        %4495 void ST int32{15}, %4494
        %4496 1/int32 LD %4494
        %4497 temp(0) * 1/int32 INSTA 
        %4498 void ST int32{0}, %4497
        %4499 1/int32 LD %4497
        %4500 temp(0) * 1/int32 INSTA 
        %4501 1/int32 intr.v_mov_dpp16 %4487, %4489, int32{274}, int32{1}, %4493, %4496, %4499 uniform_width pinned
        %4502 void ST %4501, %4500
        %4503 1/int32 LD %4500
        %4504 2/int32 LD %4308
        %4505 1/int32 SHUF %4504.y
        %4506 temp(0) * 1/int32 INSTA 
        %4507 1/int32 intr.v_or_b32 %4503, %4505 uniform_width
        %4508 void ST %4507, %4506
        %4509 1/int32 LD %4506
        %4510 2/int32 LD %4308
        %4511 2/int32 SHUF %4510.x-,  %4509.-x
        %4512 void ST %4511, %4308
        %4513 2/int32 LD %4308
        %4514 1/int32 SHUF %4513.y
        %4515 2/int32 LD %4308
        %4516 1/int32 SHUF %4515.y
        %4518 temp(0) * 1/int32 INSTA 
        %4519 void ST int32{15}, %4518
        %4520 1/int32 LD %4518
        %4521 temp(0) * 1/int32 INSTA 
        %4522 void ST int32{15}, %4521
        %4523 1/int32 LD %4521
        %4524 temp(0) * 1/int32 INSTA 
        %4525 void ST int32{0}, %4524
        %4526 1/int32 LD %4524
        %4527 temp(0) * 1/int32 INSTA 
        %4528 1/int32 intr.v_mov_dpp16 %4514, %4516, int32{276}, int32{1}, %4520, %4523, %4526 uniform_width pinned
        %4529 void ST %4528, %4527
        %4530 1/int32 LD %4527
        %4531 2/int32 LD %4308
        %4532 1/int32 SHUF %4531.y
        %4533 temp(0) * 1/int32 INSTA 
        %4534 1/int32 intr.v_or_b32 %4530, %4532 uniform_width
        %4535 void ST %4534, %4533
        %4536 1/int32 LD %4533
        %4537 2/int32 LD %4308
        %4538 2/int32 SHUF %4537.x-,  %4536.-x
        %4539 void ST %4538, %4308
        %4540 2/int32 LD %4308
        %4541 1/int32 SHUF %4540.y
        %4542 2/int32 LD %4308
        %4543 1/int32 SHUF %4542.y
        %4545 temp(0) * 1/int32 INSTA 
        %4546 void ST int32{15}, %4545
        %4547 1/int32 LD %4545
        %4548 temp(0) * 1/int32 INSTA 
        %4549 void ST int32{15}, %4548
        %4550 1/int32 LD %4548
        %4551 temp(0) * 1/int32 INSTA 
        %4552 void ST int32{0}, %4551
        %4553 1/int32 LD %4551
        %4554 temp(0) * 1/int32 INSTA 
        %4555 1/int32 intr.v_mov_dpp16 %4541, %4543, int32{280}, int32{1}, %4547, %4550, %4553 uniform_width pinned
        %4556 void ST %4555, %4554
        %4557 1/int32 LD %4554
        %4558 2/int32 LD %4308
        %4559 1/int32 SHUF %4558.y
        %4560 temp(0) * 1/int32 INSTA 
        %4561 1/int32 intr.v_or_b32 %4557, %4559 uniform_width
        %4562 void ST %4561, %4560
        %4563 1/int32 LD %4560
        %4564 2/int32 LD %4308
        %4565 2/int32 SHUF %4564.x-,  %4563.-x
        %4566 void ST %4565, %4308
        %4567 2/int32 LD %4308
        %4568 1/int32 SHUF %4567.y
        %4569 2/int32 LD %4308
        %4570 1/int32 SHUF %4569.y
        %4571 2/int32 LD %4308
        %4572 1/int32 SHUF %4571.y
        %4575 temp(0) * 1/int32 INSTA 
        %4576 void ST int32{0}, %4575
        %4577 1/int32 LD %4575
        %4578 temp(0) * 1/int32 INSTA 
        %4579 1/int32 intr.v_permlanex16_b32 %4570, %4572, int32{-1}, int32{-1}, int32{1}, %4577 uniform_width pinned
        %4580 void ST %4579, %4578
        %4581 1/int32 LD %4578
        %4582 temp(0) * 1/int32 INSTA 
        %4583 1/int32 intr.v_or_b32 %4568, %4581 uniform_width
        %4584 void ST %4583, %4582
        %4585 1/int32 LD %4582
        %4586 2/int32 LD %4308
        %4587 2/int32 SHUF %4586.x-,  %4585.-x
        %4588 void ST %4587, %4308
        %4589 2/int32 LD %4308
        %4590 1/int32 SHUF %4589.y
        %4591 temp(0) * 1/int32 INSTA 
        %4592 1/int32 intr.v_readlane_b32 %4590, int32{31} uniform_width pinned
        %4593 void ST %4592, %4591
        %4594 2/int32 LD %4308
        %4595 1/int32 SHUF %4594.y
        %4596 temp(0) * 1/int32 INSTA 
        %4597 1/int32 intr.v_readlane_b32 %4595, int32{63} uniform_width pinned
        %4598 void ST %4597, %4596
        %4599 1/int32 LD %4591
        %4600 1/int32 LD %4596
        %4601 1/int32 OR %4599, %4600
        %4602 2/int32 LD %4308
        %4603 2/int32 SHUF %4602.x-,  %4601.-x
        %4604 void ST %4603, %4308
        %4606 2/int32 LD %4308
        %4607 1/int64 CONV_reinterp %4606
        %4608 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4223
        %4609 generic(0) * 1/int32 GETELEMPTR %4608, int32{0}, int32{3}
        %4610 1/int32 LD %4609
        %4611 1/int64 CONV %4610
        %4612 1/int64 LSHR %4607, %4611
        %4613 1/int64 AND int64{1}, %4612
        %4614 1/int32 CONV %4613
        %4615 void ST %4614, %4228
        %4262 void BR 
        --> block:4252

      block:4252 - if-then
        <-- block:4259, block:4261
        %4253 void BR 
        --> block:4730

      block:4730
        <-- block:4250, block:4252
        %4731 void BR 
        --> block:4218

      block:4218 - exit
        <-- block:4730
        --> 


  func:void ReindexPrimitives(Ngg::NggCtx&, bool, bool, uint)
    arguments:
      %4765 in    arg: generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} - 'ctx'
      %4768 in    arg: 1/int32 - 'activeVert'
      %4771 in    arg: 1/int32 - 'visiblePrim'
      %4774 in    arg: 1/int32 - 'dstVertexAddr'

    dwarf:
      ReindexPrimitives(862 - 862)

    body:
      block:4762 - entry
        <-- 
        --> block:4794

      block:4794 - if-predicate
        <-- block:4762
        %4766 temp(0) * generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} INSTA 
        %4767 void ST %4765, %4766
        %4769 temp(0) * 1/int32 INSTA 
        %4770 void ST %4768, %4769
        %4772 temp(0) * 1/int32 INSTA 
        %4773 void ST %4771, %4772
        %4775 temp(0) * 1/int32 INSTA 
        %4776 void ST %4774, %4775
        %4777 temp(0) * 1/int32 'options': INSTA 
        %4778 temp(0) * 1/int32 INSTA 
        %4779 1/int32 intr.get_ngg_options 
        %4780 void ST int32{545}, %4778
        %4781 1/int32 LD %4778
        %4782 void ST %4781, %4777
        %4783 temp(0) * 1/int32 'isSingleWave': INSTA 
        %4784 1/int32 LD %4777
        %4785 1/int32 AND %4784, int32{1}
        %4786 1/int32 CMOV.ne (int32{0}, %4785) int32{1}, int32{0}
        %4787 void ST %4786, %4783
        %4788 1/int32 LD %4783
        %4789 1/int1 CMP.ne %4788, int32{0}
        %4796 void BRC %4789
        --> block:4807, block:5026

      block:5026 - if-predicate
        <-- block:4794
        %5022 1/int32 LD %4769
        %5023 1/int1 CMP.ne %5022, int32{0}
        %5028 void BRC %5023
        --> block:5024, block:5041

      block:5024 - if-then
        <-- block:5026
        %5029 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5030 generic(0) * 1/int32 GETELEMPTR %5029, int32{0}, int32{3}
        %5031 1/int32 LD %5030
        %5032 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %5031
        %5033 1/int32 LD %4775
        %5034 void ST %5033, %5032
        %5025 void BR 
        --> block:5041

      block:5041 - if-predicate
        <-- block:5024, block:5026
        %5035 1/int32 LD %4783
        %5036 void CALL 'void __ldsBarrier(bool)', byval %5035
        %5037 1/int32 LD %4772
        %5038 1/int1 CMP.ne %5037, int32{0}
        %5043 void BRC %5038
        --> block:5039, block:4790

      block:5039 - if-then
        <-- block:5041
        %5044 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5045 generic(0) * 1/int32[6] GETELEMPTR %5044, int32{0}, int32{9}
        %5046 generic(0) * 1/int32 GETELEMPTR %5045, int32{0}, int32{0}
        %5047 1/int32 LD %5046
        %5048 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %5047
        %5049 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5050 generic(0) * 1/int32[6] GETELEMPTR %5049, int32{0}, int32{9}
        %5051 generic(0) * 1/int32 GETELEMPTR %5050, int32{0}, int32{0}
        %5052 1/int32 LD %5048
        %5053 void ST %5052, %5051
        %5054 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5055 generic(0) * 1/int32[6] GETELEMPTR %5054, int32{0}, int32{9}
        %5056 generic(0) * 1/int32 GETELEMPTR %5055, int32{0}, int32{1}
        %5057 1/int32 LD %5056
        %5058 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %5057
        %5059 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5060 generic(0) * 1/int32[6] GETELEMPTR %5059, int32{0}, int32{9}
        %5061 generic(0) * 1/int32 GETELEMPTR %5060, int32{0}, int32{1}
        %5062 1/int32 LD %5058
        %5063 void ST %5062, %5061
        %5064 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5065 generic(0) * 1/int32[6] GETELEMPTR %5064, int32{0}, int32{9}
        %5066 generic(0) * 1/int32 GETELEMPTR %5065, int32{0}, int32{2}
        %5067 1/int32 LD %5066
        %5068 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %5067
        %5069 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5070 generic(0) * 1/int32[6] GETELEMPTR %5069, int32{0}, int32{9}
        %5071 generic(0) * 1/int32 GETELEMPTR %5070, int32{0}, int32{2}
        %5072 1/int32 LD %5068
        %5073 void ST %5072, %5071
        %5040 void BR 
        --> block:4790

      block:4790 - if-else
        <-- block:5039, block:5041
        %5074 1/int32 LD %4783
        %5075 void CALL 'void __ldsBarrier(bool)', byval %5074
        %4791 void BR 
        --> block:4763

      block:4807 - if-predicate
        <-- block:4794
        %4797 temp(0) * 1/int32 INSTA 
        %4798 1/int32 intr.GET_WAVEMODE 
        %4799 void ST %4798, %4797
        %4800 1/int32 LD %4797
        %4801 1/int32 CMOV.eq (%4800, int32{1}) int32{1}, int32{0}
        %4802 1/int1 CMP.ne %4801, int32{0}
        %4809 void BRC %4802
        --> block:4805, block:4803

      block:4803 - if-else
        <-- block:4807
        %4923 temp(0) * 1/int32 'b': INSTA 
        %4924 1/int32 LD %4769
        %4925 void CALL 'uint ballot(int)', byval %4924, byref %4923
        %4926 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_94) {1/int32} 'getCompactIndex32': INSTA 
        %4927 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_94) {1/int32} INSTA 
        %4928 temp(0) * 1/int32 GETELEMPTR %4927, int32{0}, int32{0}
        %4929 1/int32 LD %4923
        %4930 void ST %4929, %4928
        %4931 temp(0) * 1/int32 GETELEMPTR %4927, int32{0}, int32{0}
        %4932 temp(0) * 1/int32 GETELEMPTR %4926, int32{0}, int32{0}
        %4933 1/int32 LD %4931
        %4934 void ST %4933, %4932
        %4935 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4936 generic(0) * 1/int32[6] GETELEMPTR %4935, int32{0}, int32{9}
        %4937 generic(0) * 1/int32 GETELEMPTR %4936, int32{0}, int32{0}
        %4938 1/int32 LD %4937
        %4939 temp(0) * 1/int32 INSTA 
        %4994 void CALL 'uint @lambda_94::operator()(uint) const', byval %4938, byref %4939, byref %4926
        %4995 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4996 generic(0) * 1/int32[6] GETELEMPTR %4995, int32{0}, int32{9}
        %4997 generic(0) * 1/int32 GETELEMPTR %4996, int32{0}, int32{0}
        %4998 1/int32 LD %4939
        %4999 void ST %4998, %4997
        %5000 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5001 generic(0) * 1/int32[6] GETELEMPTR %5000, int32{0}, int32{9}
        %5002 generic(0) * 1/int32 GETELEMPTR %5001, int32{0}, int32{1}
        %5003 1/int32 LD %5002
        %5004 temp(0) * 1/int32 INSTA 
        %5005 void CALL 'uint @lambda_94::operator()(uint) const', byval %5003, byref %5004, byref %4926
        %5006 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5007 generic(0) * 1/int32[6] GETELEMPTR %5006, int32{0}, int32{9}
        %5008 generic(0) * 1/int32 GETELEMPTR %5007, int32{0}, int32{1}
        %5009 1/int32 LD %5004
        %5010 void ST %5009, %5008
        %5011 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5012 generic(0) * 1/int32[6] GETELEMPTR %5011, int32{0}, int32{9}
        %5013 generic(0) * 1/int32 GETELEMPTR %5012, int32{0}, int32{2}
        %5014 1/int32 LD %5013
        %5015 temp(0) * 1/int32 INSTA 
        %5016 void CALL 'uint @lambda_94::operator()(uint) const', byval %5014, byref %5015, byref %4926
        %5017 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %5018 generic(0) * 1/int32[6] GETELEMPTR %5017, int32{0}, int32{9}
        %5019 generic(0) * 1/int32 GETELEMPTR %5018, int32{0}, int32{2}
        %5020 1/int32 LD %5015
        %5021 void ST %5020, %5019
        %4804 void BR 
        --> block:4792

      block:4805 - if-then
        <-- block:4807
        %4810 temp(0) * 1/int64 'b': INSTA 
        %4811 1/int32 LD %4769
        %4812 void CALL 'ulong ballot(int)', byval %4811, byref %4810
        %4813 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_93) {1/int64} 'getCompactIndex64': INSTA 
        %4814 temp(0) * struct (Ngg::ReindexPrimitives::@lambda_93) {1/int64} INSTA 
        %4815 temp(0) * 1/int64 GETELEMPTR %4814, int32{0}, int32{0}
        %4816 1/int64 LD %4810
        %4817 void ST %4816, %4815
        %4818 temp(0) * 1/int64 GETELEMPTR %4814, int32{0}, int32{0}
        %4819 temp(0) * 1/int64 GETELEMPTR %4813, int32{0}, int32{0}
        %4820 1/int64 LD %4818
        %4821 void ST %4820, %4819
        %4822 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4823 generic(0) * 1/int32[6] GETELEMPTR %4822, int32{0}, int32{9}
        %4824 generic(0) * 1/int32 GETELEMPTR %4823, int32{0}, int32{0}
        %4825 1/int32 LD %4824
        %4826 temp(0) * 1/int32 INSTA 
        %4895 void CALL 'uint @lambda_93::operator()(uint) const', byval %4825, byref %4826, byref %4813
        %4896 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4897 generic(0) * 1/int32[6] GETELEMPTR %4896, int32{0}, int32{9}
        %4898 generic(0) * 1/int32 GETELEMPTR %4897, int32{0}, int32{0}
        %4899 1/int32 LD %4826
        %4900 void ST %4899, %4898
        %4901 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4902 generic(0) * 1/int32[6] GETELEMPTR %4901, int32{0}, int32{9}
        %4903 generic(0) * 1/int32 GETELEMPTR %4902, int32{0}, int32{1}
        %4904 1/int32 LD %4903
        %4905 temp(0) * 1/int32 INSTA 
        %4906 void CALL 'uint @lambda_93::operator()(uint) const', byval %4904, byref %4905, byref %4813
        %4907 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4908 generic(0) * 1/int32[6] GETELEMPTR %4907, int32{0}, int32{9}
        %4909 generic(0) * 1/int32 GETELEMPTR %4908, int32{0}, int32{1}
        %4910 1/int32 LD %4905
        %4911 void ST %4910, %4909
        %4912 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4913 generic(0) * 1/int32[6] GETELEMPTR %4912, int32{0}, int32{9}
        %4914 generic(0) * 1/int32 GETELEMPTR %4913, int32{0}, int32{2}
        %4915 1/int32 LD %4914
        %4916 temp(0) * 1/int32 INSTA 
        %4917 void CALL 'uint @lambda_93::operator()(uint) const', byval %4915, byref %4916, byref %4813
        %4918 generic(0) * struct (Ngg::NggCtx) {1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32, 1/int32[6], 1/int32, 1/int32, 1/int32} LD %4766
        %4919 generic(0) * 1/int32[6] GETELEMPTR %4918, int32{0}, int32{9}
        %4920 generic(0) * 1/int32 GETELEMPTR %4919, int32{0}, int32{2}
        %4921 1/int32 LD %4916
        %4922 void ST %4921, %4920
        %4806 void BR 
        --> block:4792

      block:4792 - if-then
        <-- block:4803, block:4805
        %4793 void BR 
        --> block:4763

      block:4763
        <-- block:4790, block:4792
        %4764 void BR 
        --> block:5076

      block:5076 - return-block
        <-- block:4763
        %5077 void BR 
        --> block:4761

      block:4761 - exit
        <-- block:5076
        --> 


  func:uint @lambda_93::operator()(uint) const
    arguments:
      %4832 in    arg: 1/int32 - 'index'
      %4835 out   arg: temp(0) * 1/int32 - 'operator()'
      %4836 inout arg: temp(0) * struct (Ngg::ReindexPrimitives::@lambda_93) {1/int64} - 'this'

    dwarf:
      operator()(870 - 870)

    body:
      block:4829 - entry
        <-- 
        --> block:4893

      block:4893
        <-- block:4829
        %4833 temp(0) * 1/int32 INSTA 
        %4834 void ST %4832, %4833
        %4837 temp(0) * 1/int64 'm': INSTA 
        %4839 1/int32 LD %4833
        %4840 1/int64 CONV %4839
        %4841 1/int64 SHL int64{1}, %4840
        %4844 1/int64 ADD %4841, int64{-1}
        %4845 void ST %4844, %4837
        %4846 temp(0) * 1/int64 GETELEMPTR %4836, int32{0}, int32{0}
        %4847 1/int64 LD %4837
        %4848 1/int64 LD %4846
        %4849 1/int64 AND %4847, %4848
        %4892 void CALL 'uint popcnt(ulong)', byval %4849, byref %4835
        %4894 void BR 
        --> block:4828

      block:4828 - exit
        <-- block:4893
        --> 


  func:uint popcnt(ulong)
    arguments:
      %4855 in    arg: 1/int64 - 'v'
      %4858 out   arg: temp(0) * 1/int32 - 'popcnt'

    dwarf:
      popcnt(872 - 872)

    body:
      block:4852 - entry
        <-- 
        --> block:4890

      block:4890
        <-- block:4852
        %4856 temp(0) * 1/int64 INSTA 
        %4857 void ST %4855, %4856
        %4859 temp(0) * 2/int32 'p': INSTA 
        %4860 1/int64 LD %4856
        %4861 2/int32 CONV_reinterp %4860
        %4862 void ST %4861, %4859
        %4863 1/int64 LD %4856
        %4864 temp(0) * struct (--anonymous--) {} INSTA 
        %4865 struct (--anonymous--) {} intr.__uniformity %4863
        %4866 void ST %4865, %4864
        %4867 1/int64 LD %4856
        %4868 temp(0) * 1/int32 INSTA 
        %4869 1/int32 intr.s_bcnt1_i32_b64 %4867 uniform_width
        %4870 void ST %4869, %4868
        %4871 1/int32 LD %4868
        %4872 2/int32 LD %4859
        %4873 1/int32 SHUF %4872.x
        %4874 2/int32 LD %4859
        %4875 1/int32 SHUF %4874.y
        %4876 temp(0) * 1/int32 INSTA 
        %4877 1/int32 intr.v_bcnt_u32_b32 %4875, int32{0} uniform_width
        %4878 void ST %4877, %4876
        %4879 1/int32 LD %4876
        %4880 temp(0) * 1/int32 INSTA 
        %4881 1/int32 intr.v_bcnt_u32_b32 %4873, %4879 uniform_width
        %4882 void ST %4881, %4880
        %4883 1/int32 LD %4880
        %4884 temp(0) * 1/int32 INSTA 
        %4885 struct (--anonymous--) {} LD %4864
        %4886 1/int32 intr.__scalar_select %4885, %4871, %4883
        %4887 void ST %4886, %4884
        %4888 1/int32 LD %4884
        %4889 void ST %4888, %4858
        %4891 void BR 
        --> block:4851

      block:4851 - exit
        <-- block:4890
        --> 


  func:uint @lambda_94::operator()(uint) const
    arguments:
      %4945 in    arg: 1/int32 - 'index'
      %4948 out   arg: temp(0) * 1/int32 - 'operator()'
      %4949 inout arg: temp(0) * struct (Ngg::ReindexPrimitives::@lambda_94) {1/int32} - 'this'

    dwarf:
      operator()(878 - 878)

    body:
      block:4942 - entry
        <-- 
        --> block:4992

      block:4992
        <-- block:4942
        %4946 temp(0) * 1/int32 INSTA 
        %4947 void ST %4945, %4946
        %4950 temp(0) * 1/int32 'm': INSTA 
        %4951 1/int32 LD %4946
        %4952 1/int32 SHL int32{1}, %4951
        %4954 1/int32 ADD %4952, int32{-1}
        %4955 void ST %4954, %4950
        %4956 temp(0) * 1/int32 GETELEMPTR %4949, int32{0}, int32{0}
        %4957 1/int32 LD %4950
        %4958 1/int32 LD %4956
        %4959 1/int32 AND %4957, %4958
        %4991 void CALL 'uint popcnt(uint)', byval %4959, byref %4948
        %4993 void BR 
        --> block:4941

      block:4941 - exit
        <-- block:4992
        --> 


  func:uint popcnt(uint)
    arguments:
      %4965 in    arg: 1/int32 - 'v'
      %4968 out   arg: temp(0) * 1/int32 - 'popcnt'

    dwarf:
      popcnt(880 - 880)

    body:
      block:4962 - entry
        <-- 
        --> block:4989

      block:4989
        <-- block:4962
        %4966 temp(0) * 1/int32 INSTA 
        %4967 void ST %4965, %4966
        %4969 1/int32 LD %4966
        %4970 temp(0) * struct (--anonymous--) {} INSTA 
        %4971 struct (--anonymous--) {} intr.__uniformity %4969
        %4972 void ST %4971, %4970
        %4973 1/int32 LD %4966
        %4974 temp(0) * 1/int32 INSTA 
        %4975 1/int32 intr.s_bcnt1_i32_b32 %4973 uniform_width
        %4976 void ST %4975, %4974
        %4977 1/int32 LD %4974
        %4978 1/int32 LD %4966
        %4979 temp(0) * 1/int32 INSTA 
        %4980 1/int32 intr.v_bcnt_u32_b32 %4978, int32{0} uniform_width
        %4981 void ST %4980, %4979
        %4982 1/int32 LD %4979
        %4983 temp(0) * 1/int32 INSTA 
        %4984 struct (--anonymous--) {} LD %4970
        %4985 1/int32 intr.__scalar_select %4984, %4977, %4982
        %4986 void ST %4985, %4983
        %4987 1/int32 LD %4983
        %4988 void ST %4987, %4968
        %4990 void BR 
        --> block:4961

      block:4961 - exit
        <-- block:4989
        --> 


  func:uint make_index_for_export(uint, uint, uint, uint)
    arguments:
      %5112 in    arg: 1/int32 - 'vtx0'
      %5115 in    arg: 1/int32 - 'vtx1'
      %5118 in    arg: 1/int32 - 'vtx2'
      %5121 in    arg: 1/int32 - 'kill'
      %5124 out   arg: temp(0) * 1/int32 - 'make_index_for_export'

    dwarf:
      make_index_for_export(886 - 886)

    body:
      block:5109 - entry
        <-- 
        --> block:5133

      block:5133 - if-predicate
        <-- block:5109
        %5113 temp(0) * 1/int32 INSTA 
        %5114 void ST %5112, %5113
        %5116 temp(0) * 1/int32 INSTA 
        %5117 void ST %5115, %5116
        %5119 temp(0) * 1/int32 INSTA 
        %5120 void ST %5118, %5119
        %5122 temp(0) * 1/int32 INSTA 
        %5123 void ST %5121, %5122
        %5125 temp(0) * 1/int32 INSTA 
        %5126 void CALL 'bool IsGen5()', byref %5125
        %5127 1/int32 LD %5125
        %5128 1/int1 CMP.ne %5127, int32{0}
        %5135 void BRC %5128
        --> block:5147, block:5160

      block:5160
        <-- block:5133
        %5149 1/int32 LD %5116
        %5150 1/int32 SHL %5149, int32{10}
        %5151 1/int32 LD %5113
        %5152 1/int32 OR %5151, %5150
        %5153 1/int32 LD %5119
        %5154 1/int32 SHL %5153, int32{20}
        %5155 1/int32 OR %5152, %5154
        %5156 1/int32 LD %5122
        %5157 1/int32 SHL %5156, int32{31}
        %5158 1/int32 OR %5155, %5157
        %5159 void ST %5158, %5124
        %5161 void BR 
        --> block:5108

      block:5147
        <-- block:5133
        %5136 1/int32 LD %5116
        %5137 1/int32 SHL %5136, int32{9}
        %5138 1/int32 LD %5113
        %5139 1/int32 OR %5138, %5137
        %5140 1/int32 LD %5119
        %5141 1/int32 SHL %5140, int32{18}
        %5142 1/int32 OR %5139, %5141
        %5143 1/int32 LD %5122
        %5144 1/int32 SHL %5143, int32{31}
        %5145 1/int32 OR %5142, %5144
        %5146 void ST %5145, %5124
        %5148 void BR 
        --> block:5108

      block:5108 - exit
        <-- block:5147, block:5160
        --> 


  func:void PerformCompaction(Ngg::NggVsConfig const&, uint, bool, uint, uint, Ngg::NggVsOutput&, bool, uint, uint, uint&, uint&)
    arguments:
      %5183 in    arg: generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'
      %5186 in    arg: 1/int32 - 'group_tid'
      %5189 in    arg: 1/int32 - 'srcVertexMask'
      %5192 in    arg: 1/int32 - 'dstVertexAddr'
      %5195 in    arg: 1/int32 - 'numVertex'
      %5198 in    arg: generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} - 'vsOutput'
      %5201 in    arg: 1/int32 - 'visiblePrim'
      %5204 in    arg: 1/int32 - 'dstPrimAddr'
      %5207 in    arg: 1/int32 - 'numPrims'
      %5210 in    arg: generic(0) * 1/int32 - 'primForExport'
      %5213 in    arg: generic(0) * 1/int32 - 'primIdForExport'

    dwarf:
      PerformCompaction(892 - 892)

    body:
      block:5180 - entry
        <-- 
        --> block:5249

      block:5249 - if-predicate
        <-- block:5180
        %5184 temp(0) * generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} INSTA 
        %5185 void ST %5183, %5184
        %5187 temp(0) * 1/int32 INSTA 
        %5188 void ST %5186, %5187
        %5190 temp(0) * 1/int32 INSTA 
        %5191 void ST %5189, %5190
        %5193 temp(0) * 1/int32 INSTA 
        %5194 void ST %5192, %5193
        %5196 temp(0) * 1/int32 INSTA 
        %5197 void ST %5195, %5196
        %5199 temp(0) * generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} INSTA 
        %5200 void ST %5198, %5199
        %5202 temp(0) * 1/int32 INSTA 
        %5203 void ST %5201, %5202
        %5205 temp(0) * 1/int32 INSTA 
        %5206 void ST %5204, %5205
        %5208 temp(0) * 1/int32 INSTA 
        %5209 void ST %5207, %5208
        %5211 temp(0) * generic(0) * 1/int32 INSTA 
        %5212 void ST %5210, %5211
        %5214 temp(0) * generic(0) * 1/int32 INSTA 
        %5215 void ST %5213, %5214
        %5216 temp(0) * 1/int32 'options': INSTA 
        %5217 temp(0) * 1/int32 INSTA 
        %5218 1/int32 intr.get_ngg_options 
        %5219 void ST int32{545}, %5217
        %5220 1/int32 LD %5217
        %5221 void ST %5220, %5216
        %5222 temp(0) * 1/int32 'isSingleWave': INSTA 
        %5223 1/int32 LD %5216
        %5224 1/int32 AND %5223, int32{1}
        %5225 1/int32 CMOV.ne (int32{0}, %5224) int32{1}, int32{0}
        %5226 void ST %5225, %5222
        %5227 temp(0) * 1/int32 'enablePrimId': INSTA 
        %5228 1/int32 LD %5216
        %5229 1/int32 AND %5228, int32{64}
        %5230 1/int32 CMOV.ne (int32{0}, %5229) int32{1}, int32{0}
        %5231 void ST %5230, %5227
        %5232 temp(0) * 1/int32 'enableKillPrim': INSTA 
        %5233 1/int32 LD %5216
        %5234 1/int32 AND %5233, int32{16}
        %5235 1/int32 CMOV.ne (int32{0}, %5234) int32{1}, int32{0}
        %5236 void ST %5235, %5232
        %5237 temp(0) * 1/int32 INSTA 
        %5238 1/int32 intr.GET_WAVEMODE 
        %5239 void ST %5238, %5237
        %5240 1/int32 LD %5237
        %5241 1/int32 CMOV.eq (%5240, int32{0}) int32{1}, int32{0}
        %5242 1/int32 LD %5222
        %5243 1/int32 AND %5242, %5241
        %5244 1/int1 CMP.ne %5243, int32{0}
        %5251 void BRC %5244
        --> block:5261, block:5568

      block:5568 - if-predicate
        <-- block:5249
        %5559 1/int32 LD %5222
        %5560 1/int32 LD %5190
        %5561 temp(0) * 1/int32 INSTA 
        %5562 1/int32 intr.FORCE_FLATTEN_IF %5559, %5560
        %5563 void ST %5562, %5561
        %5564 1/int32 LD %5561
        %5565 1/int1 CMP.ne %5564, int32{0}
        %5570 void BRC %5565
        --> block:5571, block:5654

      block:5571 - for-init
        <-- block:5568
        %5580 temp(0) * 1/int32 'p': INSTA 
        %5581 void ST int32{0}, %5580
        %5572 void BR 
        --> block:5573

      block:5573 - for-condition[unroll:full(0)]
        <-- block:5571, block:5577
        %5582 1/int32 LD %5580
        %5583 1/int32 CMOV.slt (%5582, int32{5}) int32{1}, int32{0}
        %5584 1/int1 CMP.ne %5583, int32{0}
        %5579 void BRC %5584
        --> block:5597, block:5610

      block:5610 - for-init
        <-- block:5573
        %5619 temp(0) * 1/int32 'p': INSTA 
        %5620 void ST int32{0}, %5619
        %5611 void BR 
        --> block:5612

      block:5612 - for-condition[unroll:full(0)]
        <-- block:5610, block:5616
        %5621 1/int32 LD %5619
        %5622 1/int32 CMOV.slt (%5621, int32{32}) int32{1}, int32{0}
        %5623 1/int1 CMP.ne %5622, int32{0}
        %5618 void BRC %5623
        --> block:5636, block:5566

      block:5566 - if-then
        <-- block:5612
        %5567 void BR 
        --> block:5654

      block:5636 - if-predicate
        <-- block:5612
        %5627 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5184
        %5628 generic(0) * 1/int32[32] GETELEMPTR %5627, int32{0}, int32{2}
        %5629 1/int32 LD %5619
        %5630 generic(0) * 1/int32 GETELEMPTR %5628, int32{0}, %5629
        %5631 1/int32 LD %5630
        %5632 1/int32 CMOV.ne (int32{0}, %5631) int32{1}, int32{0}
        %5633 1/int1 CMP.ne %5632, int32{0}
        %5638 void BRC %5633
        --> block:5634, block:5614

      block:5634 - if-then
        <-- block:5636
        %5639 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5640 generic(0) * 4/int32[32] GETELEMPTR %5639, int32{0}, int32{1}
        %5641 1/int32 LD %5619
        %5642 generic(0) * 4/int32 GETELEMPTR %5640, int32{0}, %5641
        %5643 1/int32 LD %5619
        %5644 lds(0) * 4/int32[256] GETELEMPTR %308, int32{0}, %5643
        %5645 1/int32 LD %5193
        %5646 lds(0) * 4/int32 GETELEMPTR %5644, int32{0}, %5645
        %5647 4/int32 LD %5642
        %5648 void ST %5647, %5646
        %5635 void BR 
        --> block:5614

      block:5614 - for-body
        <-- block:5634, block:5636
        %5615 void BR 
        --> block:5616

      block:5616 - for-incr
        <-- block:5614
        %5624 1/int32 LD %5619
        %5625 1/int32 ADD %5624, int32{1}
        %5626 void ST %5625, %5619
        %5617 void BR 
        --> block:5612

      block:5597 - if-predicate
        <-- block:5573
        %5588 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5184
        %5589 generic(0) * 1/int32[5] GETELEMPTR %5588, int32{0}, int32{1}
        %5590 1/int32 LD %5580
        %5591 generic(0) * 1/int32 GETELEMPTR %5589, int32{0}, %5590
        %5592 1/int32 LD %5591
        %5593 1/int32 CMOV.ne (int32{0}, %5592) int32{1}, int32{0}
        %5594 1/int1 CMP.ne %5593, int32{0}
        %5599 void BRC %5594
        --> block:5595, block:5575

      block:5595 - if-then
        <-- block:5597
        %5600 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5601 generic(0) * 4/fp32[5] GETELEMPTR %5600, int32{0}, int32{0}
        %5602 1/int32 LD %5580
        %5603 generic(0) * 4/fp32 GETELEMPTR %5601, int32{0}, %5602
        %5604 1/int32 LD %5580
        %5605 lds(0) * 4/fp32[256] GETELEMPTR %307, int32{0}, %5604
        %5606 1/int32 LD %5193
        %5607 lds(0) * 4/fp32 GETELEMPTR %5605, int32{0}, %5606
        %5608 4/fp32 LD %5603
        %5609 void ST %5608, %5607
        %5596 void BR 
        --> block:5575

      block:5575 - for-body
        <-- block:5595, block:5597
        %5576 void BR 
        --> block:5577

      block:5577 - for-incr
        <-- block:5575
        %5585 1/int32 LD %5580
        %5586 1/int32 ADD %5585, int32{1}
        %5587 void ST %5586, %5580
        %5578 void BR 
        --> block:5573

      block:5654 - if-predicate
        <-- block:5566, block:5568
        %5649 1/int32 LD %5232
        %5650 1/int32 CMOV.eq (int32{0}, %5649) int32{1}, int32{0}
        %5651 1/int1 CMP.ne %5650, int32{0}
        %5656 void BRC %5651
        --> block:5666, block:5699

      block:5666 - if-predicate
        <-- block:5654
        %5657 1/int32 LD %5222
        %5658 1/int32 LD %5202
        %5659 temp(0) * 1/int32 INSTA 
        %5660 1/int32 intr.FORCE_FLATTEN_IF %5657, %5658
        %5661 void ST %5660, %5659
        %5662 1/int32 LD %5659
        %5663 1/int1 CMP.ne %5662, int32{0}
        %5668 void BRC %5663
        --> block:5678, block:5652

      block:5678 - if-predicate
        <-- block:5666
        %5669 generic(0) * 1/int32 LD %5211
        %5670 1/int32 LD %5205
        %5671 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %5670
        %5672 1/int32 LD %5669
        %5673 void ST %5672, %5671
        %5674 1/int32 LD %5227
        %5675 1/int1 CMP.ne %5674, int32{0}
        %5680 void BRC %5675
        --> block:5676, block:5664

      block:5676 - if-then
        <-- block:5678
        %5681 generic(0) * 1/int32 LD %5214
        %5682 1/int32 LD %5205
        %5683 lds(0) * 1/int32 GETELEMPTR %310, int32{0}, %5682
        %5684 1/int32 LD %5681
        %5685 void ST %5684, %5683
        %5677 void BR 
        --> block:5664

      block:5664 - if-then
        <-- block:5676, block:5678
        %5665 void BR 
        --> block:5652

      block:5652 - if-then
        <-- block:5664, block:5666
        %5653 void BR 
        --> block:5699

      block:5699 - if-predicate
        <-- block:5652, block:5654
        %5686 1/int32 LD %5222
        %5687 void CALL 'void __ldsBarrier(bool)', byval %5686
        %5688 1/int32 LD %5222
        %5689 1/int32 LD %5187
        %5690 1/int32 LD %5196
        %5691 1/int32 CMOV.ult (%5689, %5690) int32{1}, int32{0}
        %5692 temp(0) * 1/int32 INSTA 
        %5693 1/int32 intr.FORCE_FLATTEN_IF %5688, %5691
        %5694 void ST %5693, %5692
        %5695 1/int32 LD %5692
        %5696 1/int1 CMP.ne %5695, int32{0}
        %5701 void BRC %5696
        --> block:5702, block:5785

      block:5702 - for-init
        <-- block:5699
        %5711 temp(0) * 1/int32 'p': INSTA 
        %5712 void ST int32{0}, %5711
        %5703 void BR 
        --> block:5704

      block:5704 - for-condition[unroll:full(0)]
        <-- block:5702, block:5708
        %5713 1/int32 LD %5711
        %5714 1/int32 CMOV.slt (%5713, int32{5}) int32{1}, int32{0}
        %5715 1/int1 CMP.ne %5714, int32{0}
        %5710 void BRC %5715
        --> block:5728, block:5741

      block:5741 - for-init
        <-- block:5704
        %5750 temp(0) * 1/int32 'p': INSTA 
        %5751 void ST int32{0}, %5750
        %5742 void BR 
        --> block:5743

      block:5743 - for-condition[unroll:full(0)]
        <-- block:5741, block:5747
        %5752 1/int32 LD %5750
        %5753 1/int32 CMOV.slt (%5752, int32{32}) int32{1}, int32{0}
        %5754 1/int1 CMP.ne %5753, int32{0}
        %5749 void BRC %5754
        --> block:5767, block:5697

      block:5697 - if-then
        <-- block:5743
        %5698 void BR 
        --> block:5785

      block:5767 - if-predicate
        <-- block:5743
        %5758 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5184
        %5759 generic(0) * 1/int32[32] GETELEMPTR %5758, int32{0}, int32{2}
        %5760 1/int32 LD %5750
        %5761 generic(0) * 1/int32 GETELEMPTR %5759, int32{0}, %5760
        %5762 1/int32 LD %5761
        %5763 1/int32 CMOV.ne (int32{0}, %5762) int32{1}, int32{0}
        %5764 1/int1 CMP.ne %5763, int32{0}
        %5769 void BRC %5764
        --> block:5765, block:5745

      block:5765 - if-then
        <-- block:5767
        %5770 1/int32 LD %5750
        %5771 lds(0) * 4/int32[256] GETELEMPTR %308, int32{0}, %5770
        %5772 1/int32 LD %5187
        %5773 lds(0) * 4/int32 GETELEMPTR %5771, int32{0}, %5772
        %5774 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5775 generic(0) * 4/int32[32] GETELEMPTR %5774, int32{0}, int32{1}
        %5776 1/int32 LD %5750
        %5777 generic(0) * 4/int32 GETELEMPTR %5775, int32{0}, %5776
        %5778 4/int32 LD %5773
        %5779 void ST %5778, %5777
        %5766 void BR 
        --> block:5745

      block:5745 - for-body
        <-- block:5765, block:5767
        %5746 void BR 
        --> block:5747

      block:5747 - for-incr
        <-- block:5745
        %5755 1/int32 LD %5750
        %5756 1/int32 ADD %5755, int32{1}
        %5757 void ST %5756, %5750
        %5748 void BR 
        --> block:5743

      block:5728 - if-predicate
        <-- block:5704
        %5719 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5184
        %5720 generic(0) * 1/int32[5] GETELEMPTR %5719, int32{0}, int32{1}
        %5721 1/int32 LD %5711
        %5722 generic(0) * 1/int32 GETELEMPTR %5720, int32{0}, %5721
        %5723 1/int32 LD %5722
        %5724 1/int32 CMOV.ne (int32{0}, %5723) int32{1}, int32{0}
        %5725 1/int1 CMP.ne %5724, int32{0}
        %5730 void BRC %5725
        --> block:5726, block:5706

      block:5726 - if-then
        <-- block:5728
        %5731 1/int32 LD %5711
        %5732 lds(0) * 4/fp32[256] GETELEMPTR %307, int32{0}, %5731
        %5733 1/int32 LD %5187
        %5734 lds(0) * 4/fp32 GETELEMPTR %5732, int32{0}, %5733
        %5735 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5736 generic(0) * 4/fp32[5] GETELEMPTR %5735, int32{0}, int32{0}
        %5737 1/int32 LD %5711
        %5738 generic(0) * 4/fp32 GETELEMPTR %5736, int32{0}, %5737
        %5739 4/fp32 LD %5734
        %5740 void ST %5739, %5738
        %5727 void BR 
        --> block:5706

      block:5706 - for-body
        <-- block:5726, block:5728
        %5707 void BR 
        --> block:5708

      block:5708 - for-incr
        <-- block:5706
        %5716 1/int32 LD %5711
        %5717 1/int32 ADD %5716, int32{1}
        %5718 void ST %5717, %5711
        %5709 void BR 
        --> block:5704

      block:5785 - if-predicate
        <-- block:5697, block:5699
        %5780 1/int32 LD %5232
        %5781 1/int32 CMOV.eq (int32{0}, %5780) int32{1}, int32{0}
        %5782 1/int1 CMP.ne %5781, int32{0}
        %5787 void BRC %5782
        --> block:5799, block:5245

      block:5799 - if-predicate
        <-- block:5785
        %5788 1/int32 LD %5222
        %5789 1/int32 LD %5187
        %5790 1/int32 LD %5208
        %5791 1/int32 CMOV.ult (%5789, %5790) int32{1}, int32{0}
        %5792 temp(0) * 1/int32 INSTA 
        %5793 1/int32 intr.FORCE_FLATTEN_IF %5788, %5791
        %5794 void ST %5793, %5792
        %5795 1/int32 LD %5792
        %5796 1/int1 CMP.ne %5795, int32{0}
        %5801 void BRC %5796
        --> block:5811, block:5783

      block:5811 - if-predicate
        <-- block:5799
        %5802 1/int32 LD %5187
        %5803 lds(0) * 1/int32 GETELEMPTR %309, int32{0}, %5802
        %5804 generic(0) * 1/int32 LD %5211
        %5805 1/int32 LD %5803
        %5806 void ST %5805, %5804
        %5807 1/int32 LD %5227
        %5808 1/int1 CMP.ne %5807, int32{0}
        %5813 void BRC %5808
        --> block:5809, block:5797

      block:5809 - if-then
        <-- block:5811
        %5814 1/int32 LD %5187
        %5815 lds(0) * 1/int32 GETELEMPTR %310, int32{0}, %5814
        %5816 generic(0) * 1/int32 LD %5214
        %5817 1/int32 LD %5815
        %5818 void ST %5817, %5816
        %5810 void BR 
        --> block:5797

      block:5797 - if-then
        <-- block:5809, block:5811
        %5798 void BR 
        --> block:5783

      block:5783 - if-then
        <-- block:5797, block:5799
        %5784 void BR 
        --> block:5245

      block:5245 - if-else
        <-- block:5783, block:5785
        %5246 void BR 
        --> block:5181

      block:5261 - if-predicate
        <-- block:5249
        %5252 temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} 'dstPermute': INSTA 
        %5253 temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} INSTA 
        %5254 1/int32 LD %5190
        %5255 temp(0) * 1/int32 INSTA 
        %5256 1/int1 CMP.ne %5254, int32{0}
        %5263 void BRC %5256
        --> block:5259, block:5257

      block:5257 - if-else
        <-- block:5261
        %5267 void ST int32{-1}, %5255
        %5258 void BR 
        --> block:5270

      block:5259 - if-then
        <-- block:5261
        %5264 1/int32 LD %5193
        %5265 void ST %5264, %5255
        %5260 void BR 
        --> block:5270

      block:5270 - for-init
        <-- block:5257, block:5259
        %5268 1/int32 LD %5255
        %5269 void ST %5268, %5193
        %5279 temp(0) * 1/int32 'p': INSTA 
        %5280 void ST int32{0}, %5279
        %5271 void BR 
        --> block:5272

      block:5272 - for-condition[unroll:full(0)]
        <-- block:5270, block:5276
        %5281 1/int32 LD %5279
        %5282 1/int32 CMOV.slt (%5281, int32{5}) int32{1}, int32{0}
        %5283 1/int1 CMP.ne %5282, int32{0}
        %5278 void BRC %5283
        --> block:5296, block:5392

      block:5392 - for-init
        <-- block:5272
        %5401 temp(0) * 1/int32 'p': INSTA 
        %5402 void ST int32{0}, %5401
        %5393 void BR 
        --> block:5394

      block:5394 - for-condition[unroll:full(0)]
        <-- block:5392, block:5398
        %5403 1/int32 LD %5401
        %5404 1/int32 CMOV.slt (%5403, int32{32}) int32{1}, int32{0}
        %5405 1/int1 CMP.ne %5404, int32{0}
        %5400 void BRC %5405
        --> block:5418, block:5517

      block:5517 - if-predicate
        <-- block:5394
        %5512 1/int32 LD %5232
        %5513 1/int32 CMOV.eq (int32{0}, %5512) int32{1}, int32{0}
        %5514 1/int1 CMP.ne %5513, int32{0}
        %5519 void BRC %5514
        --> block:5527, block:5247

      block:5527 - if-predicate
        <-- block:5517
        %5520 1/int32 LD %5202
        %5521 temp(0) * 1/int32 INSTA 
        %5522 1/int1 CMP.ne %5520, int32{0}
        %5529 void BRC %5522
        --> block:5525, block:5523

      block:5523 - if-else
        <-- block:5527
        %5533 void ST int32{-1}, %5521
        %5524 void BR 
        --> block:5548

      block:5525 - if-then
        <-- block:5527
        %5530 1/int32 LD %5205
        %5531 void ST %5530, %5521
        %5526 void BR 
        --> block:5548

      block:5548 - if-predicate
        <-- block:5523, block:5525
        %5534 1/int32 LD %5521
        %5535 void ST %5534, %5205
        %5536 1/int32 LD %5205
        %5537 generic(0) * 1/int32 LD %5211
        %5538 1/int32 LD %5537
        %5539 temp(0) * 1/int32 INSTA 
        %5540 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5536, byval %5538, byref %5539, byref %5252
        %5541 generic(0) * 1/int32 LD %5211
        %5542 1/int32 LD %5539
        %5543 void ST %5542, %5541
        %5544 1/int32 LD %5227
        %5545 1/int1 CMP.ne %5544, int32{0}
        %5550 void BRC %5545
        --> block:5546, block:5515

      block:5546 - if-then
        <-- block:5548
        %5551 1/int32 LD %5205
        %5552 generic(0) * 1/int32 LD %5214
        %5553 1/int32 LD %5552
        %5554 temp(0) * 1/int32 INSTA 
        %5555 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5551, byval %5553, byref %5554, byref %5252
        %5556 generic(0) * 1/int32 LD %5214
        %5557 1/int32 LD %5554
        %5558 void ST %5557, %5556
        %5547 void BR 
        --> block:5515

      block:5515 - if-then
        <-- block:5546, block:5548
        %5516 void BR 
        --> block:5247

      block:5247 - if-then
        <-- block:5515, block:5517
        %5248 void BR 
        --> block:5181

      block:5418 - if-predicate
        <-- block:5394
        %5409 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5184
        %5410 generic(0) * 1/int32[32] GETELEMPTR %5409, int32{0}, int32{2}
        %5411 1/int32 LD %5401
        %5412 generic(0) * 1/int32 GETELEMPTR %5410, int32{0}, %5411
        %5413 1/int32 LD %5412
        %5414 1/int32 CMOV.ne (int32{0}, %5413) int32{1}, int32{0}
        %5415 1/int1 CMP.ne %5414, int32{0}
        %5420 void BRC %5415
        --> block:5416, block:5396

      block:5416 - if-then
        <-- block:5418
        %5421 1/int32 LD %5193
        %5422 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5423 generic(0) * 4/int32[32] GETELEMPTR %5422, int32{0}, int32{1}
        %5424 1/int32 LD %5401
        %5425 generic(0) * 4/int32 GETELEMPTR %5423, int32{0}, %5424
        %5426 4/int32 LD %5425
        %5427 1/int32 SHUF %5426.x
        %5428 temp(0) * 1/int32 INSTA 
        %5452 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5421, byval %5427, byref %5428, byref %5252
        %5453 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5454 generic(0) * 4/int32[32] GETELEMPTR %5453, int32{0}, int32{1}
        %5455 1/int32 LD %5401
        %5456 generic(0) * 4/int32 GETELEMPTR %5454, int32{0}, %5455
        %5457 1/int32 LD %5428
        %5458 4/int32 LD %5456
        %5459 4/int32 SHUF %5457.x---,  %5458.-yzw
        %5460 void ST %5459, %5456
        %5461 1/int32 LD %5193
        %5462 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5463 generic(0) * 4/int32[32] GETELEMPTR %5462, int32{0}, int32{1}
        %5464 1/int32 LD %5401
        %5465 generic(0) * 4/int32 GETELEMPTR %5463, int32{0}, %5464
        %5466 4/int32 LD %5465
        %5467 1/int32 SHUF %5466.y
        %5468 temp(0) * 1/int32 INSTA 
        %5469 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5461, byval %5467, byref %5468, byref %5252
        %5470 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5471 generic(0) * 4/int32[32] GETELEMPTR %5470, int32{0}, int32{1}
        %5472 1/int32 LD %5401
        %5473 generic(0) * 4/int32 GETELEMPTR %5471, int32{0}, %5472
        %5474 1/int32 LD %5468
        %5475 4/int32 LD %5473
        %5476 4/int32 SHUF %5475.x-zw,  %5474.-x--
        %5477 void ST %5476, %5473
        %5478 1/int32 LD %5193
        %5479 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5480 generic(0) * 4/int32[32] GETELEMPTR %5479, int32{0}, int32{1}
        %5481 1/int32 LD %5401
        %5482 generic(0) * 4/int32 GETELEMPTR %5480, int32{0}, %5481
        %5483 4/int32 LD %5482
        %5484 1/int32 SHUF %5483.z
        %5485 temp(0) * 1/int32 INSTA 
        %5486 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5478, byval %5484, byref %5485, byref %5252
        %5487 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5488 generic(0) * 4/int32[32] GETELEMPTR %5487, int32{0}, int32{1}
        %5489 1/int32 LD %5401
        %5490 generic(0) * 4/int32 GETELEMPTR %5488, int32{0}, %5489
        %5491 1/int32 LD %5485
        %5492 4/int32 LD %5490
        %5493 4/int32 SHUF %5492.xy-w,  %5491.--x-
        %5494 void ST %5493, %5490
        %5495 1/int32 LD %5193
        %5496 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5497 generic(0) * 4/int32[32] GETELEMPTR %5496, int32{0}, int32{1}
        %5498 1/int32 LD %5401
        %5499 generic(0) * 4/int32 GETELEMPTR %5497, int32{0}, %5498
        %5500 4/int32 LD %5499
        %5501 1/int32 SHUF %5500.w
        %5502 temp(0) * 1/int32 INSTA 
        %5503 void CALL 'uint @lambda_92::operator()(uint, uint) const', byval %5495, byval %5501, byref %5502, byref %5252
        %5504 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5505 generic(0) * 4/int32[32] GETELEMPTR %5504, int32{0}, int32{1}
        %5506 1/int32 LD %5401
        %5507 generic(0) * 4/int32 GETELEMPTR %5505, int32{0}, %5506
        %5508 1/int32 LD %5502
        %5509 4/int32 LD %5507
        %5510 4/int32 SHUF %5509.xyz-,  %5508.---x
        %5511 void ST %5510, %5507
        %5417 void BR 
        --> block:5396

      block:5396 - for-body
        <-- block:5416, block:5418
        %5397 void BR 
        --> block:5398

      block:5398 - for-incr
        <-- block:5396
        %5406 1/int32 LD %5401
        %5407 1/int32 ADD %5406, int32{1}
        %5408 void ST %5407, %5401
        %5399 void BR 
        --> block:5394

      block:5296 - if-predicate
        <-- block:5272
        %5287 generic(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} LD %5184
        %5288 generic(0) * 1/int32[5] GETELEMPTR %5287, int32{0}, int32{1}
        %5289 1/int32 LD %5279
        %5290 generic(0) * 1/int32 GETELEMPTR %5288, int32{0}, %5289
        %5291 1/int32 LD %5290
        %5292 1/int32 CMOV.ne (int32{0}, %5291) int32{1}, int32{0}
        %5293 1/int1 CMP.ne %5292, int32{0}
        %5298 void BRC %5293
        --> block:5294, block:5274

      block:5294 - if-then
        <-- block:5296
        %5299 1/int32 LD %5193
        %5300 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5301 generic(0) * 4/fp32[5] GETELEMPTR %5300, int32{0}, int32{0}
        %5302 1/int32 LD %5279
        %5303 generic(0) * 4/fp32 GETELEMPTR %5301, int32{0}, %5302
        %5304 4/fp32 LD %5303
        %5305 1/fp32 SHUF %5304.x
        %5306 temp(0) * 1/fp32 INSTA 
        %5332 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5299, byval %5305, byref %5306, byref %5252
        %5333 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5334 generic(0) * 4/fp32[5] GETELEMPTR %5333, int32{0}, int32{0}
        %5335 1/int32 LD %5279
        %5336 generic(0) * 4/fp32 GETELEMPTR %5334, int32{0}, %5335
        %5337 1/fp32 LD %5306
        %5338 4/fp32 LD %5336
        %5339 4/fp32 SHUF %5337.x---,  %5338.-yzw
        %5340 void ST %5339, %5336
        %5341 1/int32 LD %5193
        %5342 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5343 generic(0) * 4/fp32[5] GETELEMPTR %5342, int32{0}, int32{0}
        %5344 1/int32 LD %5279
        %5345 generic(0) * 4/fp32 GETELEMPTR %5343, int32{0}, %5344
        %5346 4/fp32 LD %5345
        %5347 1/fp32 SHUF %5346.y
        %5348 temp(0) * 1/fp32 INSTA 
        %5349 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5341, byval %5347, byref %5348, byref %5252
        %5350 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5351 generic(0) * 4/fp32[5] GETELEMPTR %5350, int32{0}, int32{0}
        %5352 1/int32 LD %5279
        %5353 generic(0) * 4/fp32 GETELEMPTR %5351, int32{0}, %5352
        %5354 1/fp32 LD %5348
        %5355 4/fp32 LD %5353
        %5356 4/fp32 SHUF %5355.x-zw,  %5354.-x--
        %5357 void ST %5356, %5353
        %5358 1/int32 LD %5193
        %5359 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5360 generic(0) * 4/fp32[5] GETELEMPTR %5359, int32{0}, int32{0}
        %5361 1/int32 LD %5279
        %5362 generic(0) * 4/fp32 GETELEMPTR %5360, int32{0}, %5361
        %5363 4/fp32 LD %5362
        %5364 1/fp32 SHUF %5363.z
        %5365 temp(0) * 1/fp32 INSTA 
        %5366 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5358, byval %5364, byref %5365, byref %5252
        %5367 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5368 generic(0) * 4/fp32[5] GETELEMPTR %5367, int32{0}, int32{0}
        %5369 1/int32 LD %5279
        %5370 generic(0) * 4/fp32 GETELEMPTR %5368, int32{0}, %5369
        %5371 1/fp32 LD %5365
        %5372 4/fp32 LD %5370
        %5373 4/fp32 SHUF %5372.xy-w,  %5371.--x-
        %5374 void ST %5373, %5370
        %5375 1/int32 LD %5193
        %5376 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5377 generic(0) * 4/fp32[5] GETELEMPTR %5376, int32{0}, int32{0}
        %5378 1/int32 LD %5279
        %5379 generic(0) * 4/fp32 GETELEMPTR %5377, int32{0}, %5378
        %5380 4/fp32 LD %5379
        %5381 1/fp32 SHUF %5380.w
        %5382 temp(0) * 1/fp32 INSTA 
        %5383 void CALL 'float @lambda_92::operator()(uint, float) const', byval %5375, byval %5381, byref %5382, byref %5252
        %5384 generic(0) * struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} LD %5199
        %5385 generic(0) * 4/fp32[5] GETELEMPTR %5384, int32{0}, int32{0}
        %5386 1/int32 LD %5279
        %5387 generic(0) * 4/fp32 GETELEMPTR %5385, int32{0}, %5386
        %5388 1/fp32 LD %5382
        %5389 4/fp32 LD %5387
        %5390 4/fp32 SHUF %5389.xyz-,  %5388.---x
        %5391 void ST %5390, %5387
        %5295 void BR 
        --> block:5274

      block:5274 - for-body
        <-- block:5294, block:5296
        %5275 void BR 
        --> block:5276

      block:5276 - for-incr
        <-- block:5274
        %5284 1/int32 LD %5279
        %5285 1/int32 ADD %5284, int32{1}
        %5286 void ST %5285, %5279
        %5277 void BR 
        --> block:5272

      block:5181
        <-- block:5245, block:5247
        %5182 void BR 
        --> block:5819

      block:5819 - return-block
        <-- block:5181
        %5820 void BR 
        --> block:5179

      block:5179 - exit
        <-- block:5819
        --> 


  func:float @lambda_92::operator()(uint, float) const
    arguments:
      %5312 in    arg: 1/int32 - 'dstAddr'
      %5315 in    arg: 1/fp32 - 'value'
      %5318 out   arg: temp(0) * 1/fp32 - 'operator()'
      %5319 inout arg: temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} - 'this'

    dwarf:
      operator()(901 - 901)

    body:
      block:5309 - entry
        <-- 
        --> block:5330

      block:5330
        <-- block:5309
        %5313 temp(0) * 1/int32 INSTA 
        %5314 void ST %5312, %5313
        %5316 temp(0) * 1/fp32 INSTA 
        %5317 void ST %5315, %5316
        %5320 1/int32 LD %5313
        %5321 1/int32 MUL %5320, int32{4}
        %5322 1/fp32 LD %5316
        %5323 1/int32 CONV_reinterp %5322
        %5324 temp(0) * 1/int32 INSTA 
        %5325 1/int32 intr.ds_permute_b32 %5321, %5323, int32{0} pinned
        %5326 void ST %5325, %5324
        %5327 1/int32 LD %5324
        %5328 1/fp32 CONV_reinterp %5327
        %5329 void ST %5328, %5318
        %5331 void BR 
        --> block:5308

      block:5308 - exit
        <-- block:5330
        --> 


  func:uint @lambda_92::operator()(uint, uint) const
    arguments:
      %5434 in    arg: 1/int32 - 'dstAddr'
      %5437 in    arg: 1/int32 - 'value'
      %5440 out   arg: temp(0) * 1/int32 - 'operator()'
      %5441 inout arg: temp(0) * struct (Ngg::PerformCompaction::@lambda_92) {} - 'this'

    dwarf:
      operator()(908 - 908)

    body:
      block:5431 - entry
        <-- 
        --> block:5450

      block:5450
        <-- block:5431
        %5435 temp(0) * 1/int32 INSTA 
        %5436 void ST %5434, %5435
        %5438 temp(0) * 1/int32 INSTA 
        %5439 void ST %5437, %5438
        %5442 1/int32 LD %5435
        %5443 1/int32 MUL %5442, int32{4}
        %5444 1/int32 LD %5438
        %5445 temp(0) * 1/int32 INSTA 
        %5446 1/int32 intr.ds_permute_b32 %5443, %5444, int32{0} pinned
        %5447 void ST %5446, %5445
        %5448 1/int32 LD %5445
        %5449 void ST %5448, %5440
        %5451 void BR 
        --> block:5430

      block:5430 - exit
        <-- block:5450
        --> 


--------------------------------------------------------------------------------

>> pass 10/815: validate graph
    validate graph (0045C2BE)
>> pass 11/815: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 12/815: validate graph
    validate graph (0045C2BE)
>> pass 13/815: constant propagation
    constant propagation (5CBB3303)
>> pass 14/815: validate graph
    validate graph (0045C2BE)
>> pass 15/815: cost analysis
    cost analysis (716789B8)
>> pass 16/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 17/815: validate graph
    validate graph (0045C2BE)
>> pass 18/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 19/815: validate graph
    validate graph (0045C2BE)
>> pass 20/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 21/815: validate graph
    validate graph (0045C2BE)
>> pass 22/815: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 23/815: isolate function
    isolate function (2FD72558)
>> pass 24/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 25/815: validate graph
    validate graph (0045C2BE)
>> pass 26/815: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 27/815: trivial alias analysis
    trivial alias analysis (359D1A97)
>> pass 28/815: inline function calls
    inline function calls (0A71E457)
>> pass 29/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 30/815: validate graph
    validate graph (0045C2BE)
>> pass 31/815: assign fastmath flags
    assign fastmath flags (BAADFB36)
>> pass 32/815: validate graph
    validate graph (0045C2BE)
>> pass 33/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 34/815: validate graph
    validate graph (0045C2BE)
>> pass 35/815: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 36/815: validate graph
    validate graph (0045C2BE)
>> pass 37/815: optimize unions
    optimize unions (C7BDF63C)
>> pass 38/815: validate graph
    validate graph (0045C2BE)
>> pass 39/815: constant propagation
    constant propagation (5CBB3303)
>> pass 40/815: validate graph
    validate graph (0045C2BE)
>> pass 41/815: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 42/815: validate graph
    validate graph (0045C2BE)
>> pass 43/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 44/815: validate graph
    validate graph (0045C2BE)
>> pass 45/815: fast convert to SSA
    fast convert to SSA (83D76976)
>> pass 46/815: validate graph
    validate graph (0045C2BE)
>> pass 47/815: loop analysis
    loop analysis (598E85BD)
>> pass 48/815: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 49/815: mark GET_WAVEMODE
    mark GET_WAVEMODE (3283A7BF)
>> pass 50/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 51/815: validate graph
    validate graph (0045C2BE)
>> pass 52/815: constant propagation
    constant propagation (5CBB3303)
>> pass 53/815: validate graph
    validate graph (0045C2BE)
>> pass 54/815: R10 legalize entry args
    R10 legalize entry args (A3F30344)
>> pass 55/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 56/815: validate graph
    validate graph (0045C2BE)
>> pass 57/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 58/815: validate graph
    validate graph (0045C2BE)
>> pass 59/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 60/815: validate graph
    validate graph (0045C2BE)
>> pass 61/815: legalize sub-routines
    legalize sub-routines (97462243)
>> pass 62/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 63/815: validate graph
    validate graph (0045C2BE)
>> pass 64/815: sparse conditional constant propagation
    sparse conditional constant propagation (41B5CAD4)
>> pass 65/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 66/815: validate graph
    validate graph (0045C2BE)
>> pass 67/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 68/815: validate graph
    validate graph (0045C2BE)
>> pass 69/815: merge getelemptr
    merge getelemptr (D655006F)
>> pass 70/815: validate graph
    validate graph (0045C2BE)
>> pass 71/815: call graph analysis
    call graph analysis (9E72A4B4)
>> pass 72/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 73/815: remove dead code
    remove dead code (B7E6F507)
>> pass 74/815: validate graph
    validate graph (0045C2BE)
>> pass 75/815: loop analysis
    loop analysis (598E85BD)
>> pass 76/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 77/815: validate graph
    validate graph (0045C2BE)
>> pass 78/815: constant propagation
    constant propagation (5CBB3303)
>> pass 79/815: validate graph
    validate graph (0045C2BE)
>> pass 80/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 81/815: validate graph
    validate graph (0045C2BE)
>> pass 82/815: legalize constant writes
    legalize constant writes (D629C4D9)
>> pass 83/815: validate graph
    validate graph (0045C2BE)
>> pass 84/815: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 85/815: validate graph
    validate graph (0045C2BE)
>> pass 86/815: remove dead code
    remove dead code (B7E6F507)
>> pass 87/815: validate graph
    validate graph (0045C2BE)
>> pass 88/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default
    %230 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %327 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %328 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %329 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %330 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %331 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %332 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %333 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %334 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %335 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %336 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %337 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %338 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %230[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]
    cubemapTexture(96 - 96) -- %327[0:+32]
    brdfLUT(97 - 97) -- %328[0:+32]
    albedoTexture(98 - 98) -- %329[0:+32]
    normalTexture(99 - 99) -- %330[0:+32]
    roughnessTexture(100 - 100) -- %331[0:+32]
    emissiveTexture(101 - 101) -- %332[0:+32]
    shadowmapTexture0(102 - 102) -- %333[0:+32]
    shadowmapTexture1(103 - 103) -- %334[0:+32]
    shadowmapTexture2(104 - 104) -- %335[0:+32]
    shadowmapTexture3(105 - 105) -- %336[0:+32]
    samplerWrapLinear(107 - 107) -- %337[0:+16]
    samplerShadowCompare(109 - 109) -- %338[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %229 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %232 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %230[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %6574 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %230, int32{0}, int32{0}
        %342 1/int32 LD %321
        %7047 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6574
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %7047
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %381 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{0}
        %382 3/fp32 LD %381
        %6784 4/fp32 SHUF %382.xyz-,  fp32{1.0}.---x
        %7062 4/fp32 SHUF %366.x---,  %370.-x--,  %374.--x-,  %378.---x
        %7063 1/fp32 DOT4 fast %7062, %6784
        %7072 4/fp32 SHUF %366.y---,  %370.-y--,  %374.--y-,  %378.---y
        %7073 1/fp32 DOT4 fast %7072, %6784
        %7082 4/fp32 SHUF %366.z---,  %370.-z--,  %374.--z-,  %378.---z
        %7083 1/fp32 DOT4 fast %7082, %6784
        %7092 4/fp32 SHUF %366.w---,  %370.-w--,  %374.--w-,  %378.---w
        %7093 1/fp32 DOT4 fast %7092, %6784
        %7094 4/fp32 SHUF %7063.x---,  %7073.-x--,  %7083.--x-,  %7093.---x
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %7106 4/fp32 SHUF %7099.x---,  %7101.-x--,  %7103.--x-,  %7105.---x
        %7107 1/fp32 DOT4 fast %7106, %7094
        %7116 4/fp32 SHUF %7099.y---,  %7101.-y--,  %7103.--y-,  %7105.---y
        %7117 1/fp32 DOT4 fast %7116, %7094
        %7126 4/fp32 SHUF %7099.z---,  %7101.-z--,  %7103.--z-,  %7105.---z
        %7127 1/fp32 DOT4 fast %7126, %7094
        %7136 4/fp32 SHUF %7099.w---,  %7101.-w--,  %7103.--w-,  %7105.---w
        %7137 1/fp32 DOT4 fast %7136, %7094
        %7138 4/fp32 SHUF %7107.x---,  %7117.-x--,  %7127.--x-,  %7137.---x
        %541 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{1}
        %542 3/fp32 LD %541
        %7148 3/fp32 SHUF %366.x--,  %370.-x-,  %374.--x
        %7149 1/fp32 DOT3 fast %7148, %542
        %7156 3/fp32 SHUF %366.y--,  %370.-y-,  %374.--y
        %7157 1/fp32 DOT3 fast %7156, %542
        %7164 3/fp32 SHUF %366.z--,  %370.-z-,  %374.--z
        %7165 1/fp32 DOT3 fast %7164, %542
        %7166 3/fp32 SHUF %7149.x--,  %7157.-x-,  %7165.--x
        %587 3/fp32 NRM fast %7166
        %590 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{2}
        %591 3/fp32 LD %590
        %7176 3/fp32 SHUF %366.x--,  %370.-x-,  %374.--x
        %7177 1/fp32 DOT3 fast %7176, %591
        %7184 3/fp32 SHUF %366.y--,  %370.-y-,  %374.--y
        %7185 1/fp32 DOT3 fast %7184, %591
        %7192 3/fp32 SHUF %366.z--,  %370.-z-,  %374.--z
        %7193 1/fp32 DOT3 fast %7192, %591
        %7194 3/fp32 SHUF %7177.x--,  %7185.-x-,  %7193.--x
        %595 3/fp32 NRM fast %7194
        %7198 3/fp32 SHUF %542.yzx
        %7199 3/fp32 SHUF %591.zxy
        %7200 3/fp32 MUL fast %7198, %7199
        %7201 3/fp32 SHUF %542.zxy
        %7202 3/fp32 SHUF %591.yzx
        %7203 3/fp32 MUL fast %7201, %7202
        %7204 3/fp32 NEG fast %7203
        %7205 3/fp32 ADD fast %7200, %7204
        %634 temp(0) * 2/fp32 GETELEMPTR %229, int32{0}, int32{3}
        %636 2/fp32 LD %634
        %29982 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{0}
        %29984 void ST %7138, %29982
        %29986 temp(0) * 2/fp32 GETELEMPTR %232, int32{0}, int32{1}
        %29988 void ST %636, %29986
        %29990 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{2}
        %29992 void ST %587, %29990
        %29994 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{3}
        %29996 void ST %595, %29994
        %29998 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{4}
        %30000 void ST %7205, %29998
        %30002 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{5}
        %30004 void ST %7094, %30002
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %7299 1/int32 AND %7298, int32{255}
        %7302 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7303 1/int32 AND %7302, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7434 1/int32 SHL %7299, int32{12}
        %7435 1/int32 OR %7434, %7303
        %7436 void intr.s_sendmsg %7435, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %7299
        %7440 1/int32 ADD int32{64}, %7439
        %7441 1/int64 CONV %7440
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %7444 1/int32 CMOV.ne (%7443, int32{0}) int32{1}, int32{0}
        %1475 1/int1 CMP.ne %7444, int32{0}
        %1480 void BRC %1475[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %7303
        %7459 1/int32 ADD int32{64}, %7458
        %7460 1/int64 CONV %7459
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %7463 1/int32 CMOV.ne (%7462, int32{0}) int32{1}, int32{0}
        %1577 1/int1 CMP.ne %7463, int32{0}
        %1582 void BRC %1577[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %28213 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28214 1/int1 CMP.ne %28213, int32{0}
        %28215 void BRC %28214
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %28220 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28221 1/int1 CMP.ne %28220, int32{0}
        %28222 void BRC %28221
        --> block:28253, block:28225

      block:28225 - if-predicate
        <-- block:28216
        %28229 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28230 1/int1 CMP.ne %28229, int32{0}
        %28231 void BRC %28230
        --> block:28253, block:28232

      block:28232 - if-predicate
        <-- block:28225
        %28236 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28237 1/int1 CMP.ne %28236, int32{0}
        %28238 void BRC %28237
        --> block:28223, block:28253

      block:28223 - dummy-edge
        <-- block:28232
        %28224 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216, block:28225, block:28232, block:28223
        %28254 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28268 1/int32 CMOV.ne (int32{0}, %27913) int32{1}, int32{0}
        %28269 1/int1 CMP.ne %28268, int32{0}
        %28270 void BRC %28269
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %28276 1/int32 AND %27913, int32{-2097153}
        %28280 1/int32 CMOV.eq (int32{0}, %28254) int32{1}, int32{0}
        %28281 1/int32 CMOV.ne (%28280, int32{0}) int32{2097152}, int32{0}
        %28282 1/int32 OR %28276, %28281
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %28282, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %28314 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28315 1/int1 CMP.ne %28314, int32{0}
        %28316 void BRC %28315
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %28318 1/int32 AND %27917, int32{-2097153}
        %28322 1/int32 CMOV.eq (int32{1}, %28254) int32{1}, int32{0}
        %28323 1/int32 CMOV.ne (%28322, int32{0}) int32{2097152}, int32{0}
        %28324 1/int32 OR %28318, %28323
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %28324, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %28356 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28357 1/int1 CMP.ne %28356, int32{0}
        %28358 void BRC %28357
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %28360 1/int32 AND %27921, int32{-2097153}
        %28364 1/int32 CMOV.eq (int32{2}, %28254) int32{1}, int32{0}
        %28365 1/int32 CMOV.ne (%28364, int32{0}) int32{2097152}, int32{0}
        %28366 1/int32 OR %28360, %28365
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %28366, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %28398 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28399 1/int1 CMP.ne %28398, int32{0}
        %28400 void BRC %28399
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %28402 1/int32 AND %27925, int32{-2097153}
        %28406 1/int32 CMOV.eq (int32{3}, %28254) int32{1}, int32{0}
        %28407 1/int32 CMOV.ne (%28406, int32{0}) int32{2097152}, int32{0}
        %28408 1/int32 OR %28402, %28407
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %28408, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28440 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28441 1/int1 CMP.ne %28440, int32{0}
        %28442 void BRC %28441
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %28444 1/int32 AND %27929, int32{-2097153}
        %28448 1/int32 CMOV.eq (int32{4}, %28254) int32{1}, int32{0}
        %28449 1/int32 CMOV.ne (%28448, int32{0}) int32{2097152}, int32{0}
        %28450 1/int32 OR %28444, %28449
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %28450, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %28250 1/int32 CMOV.ne (int32{0}, %27933) int32{1}, int32{0}
        %28251 1/int1 CMP.ne %28250, int32{0}
        %28252 void BRC %28251
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %28534 1/int32 CMOV.ne (int32{0}, %27937) int32{1}, int32{0}
        %28535 1/int1 CMP.ne %28534, int32{0}
        %28536 void BRC %28535
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %28569 1/int32 CMOV.ne (int32{0}, %27941) int32{1}, int32{0}
        %28570 1/int1 CMP.ne %28569, int32{0}
        %28571 void BRC %28570
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %28604 1/int32 CMOV.ne (int32{0}, %27945) int32{1}, int32{0}
        %28605 1/int1 CMP.ne %28604, int32{0}
        %28606 void BRC %28605
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %28639 1/int32 CMOV.ne (int32{0}, %27949) int32{1}, int32{0}
        %28640 1/int1 CMP.ne %28639, int32{0}
        %28641 void BRC %28640
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %28674 1/int32 CMOV.ne (int32{0}, %27953) int32{1}, int32{0}
        %28675 1/int1 CMP.ne %28674, int32{0}
        %28676 void BRC %28675
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %28709 1/int32 CMOV.ne (int32{0}, %27957) int32{1}, int32{0}
        %28710 1/int1 CMP.ne %28709, int32{0}
        %28711 void BRC %28710
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %28744 1/int32 CMOV.ne (int32{0}, %27961) int32{1}, int32{0}
        %28745 1/int1 CMP.ne %28744, int32{0}
        %28746 void BRC %28745
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %28779 1/int32 CMOV.ne (int32{0}, %27965) int32{1}, int32{0}
        %28780 1/int1 CMP.ne %28779, int32{0}
        %28781 void BRC %28780
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %28814 1/int32 CMOV.ne (int32{0}, %27969) int32{1}, int32{0}
        %28815 1/int1 CMP.ne %28814, int32{0}
        %28816 void BRC %28815
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %28849 1/int32 CMOV.ne (int32{0}, %27973) int32{1}, int32{0}
        %28850 1/int1 CMP.ne %28849, int32{0}
        %28851 void BRC %28850
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %28884 1/int32 CMOV.ne (int32{0}, %27977) int32{1}, int32{0}
        %28885 1/int1 CMP.ne %28884, int32{0}
        %28886 void BRC %28885
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %28919 1/int32 CMOV.ne (int32{0}, %27981) int32{1}, int32{0}
        %28920 1/int1 CMP.ne %28919, int32{0}
        %28921 void BRC %28920
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %28954 1/int32 CMOV.ne (int32{0}, %27985) int32{1}, int32{0}
        %28955 1/int1 CMP.ne %28954, int32{0}
        %28956 void BRC %28955
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %28989 1/int32 CMOV.ne (int32{0}, %27989) int32{1}, int32{0}
        %28990 1/int1 CMP.ne %28989, int32{0}
        %28991 void BRC %28990
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %29024 1/int32 CMOV.ne (int32{0}, %27993) int32{1}, int32{0}
        %29025 1/int1 CMP.ne %29024, int32{0}
        %29026 void BRC %29025
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %29059 1/int32 CMOV.ne (int32{0}, %27997) int32{1}, int32{0}
        %29060 1/int1 CMP.ne %29059, int32{0}
        %29061 void BRC %29060
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %29094 1/int32 CMOV.ne (int32{0}, %28001) int32{1}, int32{0}
        %29095 1/int1 CMP.ne %29094, int32{0}
        %29096 void BRC %29095
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %29129 1/int32 CMOV.ne (int32{0}, %28005) int32{1}, int32{0}
        %29130 1/int1 CMP.ne %29129, int32{0}
        %29131 void BRC %29130
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %29164 1/int32 CMOV.ne (int32{0}, %28009) int32{1}, int32{0}
        %29165 1/int1 CMP.ne %29164, int32{0}
        %29166 void BRC %29165
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %29199 1/int32 CMOV.ne (int32{0}, %28013) int32{1}, int32{0}
        %29200 1/int1 CMP.ne %29199, int32{0}
        %29201 void BRC %29200
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %29234 1/int32 CMOV.ne (int32{0}, %28017) int32{1}, int32{0}
        %29235 1/int1 CMP.ne %29234, int32{0}
        %29236 void BRC %29235
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %29269 1/int32 CMOV.ne (int32{0}, %28021) int32{1}, int32{0}
        %29270 1/int1 CMP.ne %29269, int32{0}
        %29271 void BRC %29270
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %29304 1/int32 CMOV.ne (int32{0}, %28025) int32{1}, int32{0}
        %29305 1/int1 CMP.ne %29304, int32{0}
        %29306 void BRC %29305
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %29339 1/int32 CMOV.ne (int32{0}, %28029) int32{1}, int32{0}
        %29340 1/int1 CMP.ne %29339, int32{0}
        %29341 void BRC %29340
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %29374 1/int32 CMOV.ne (int32{0}, %28033) int32{1}, int32{0}
        %29375 1/int1 CMP.ne %29374, int32{0}
        %29376 void BRC %29375
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %29409 1/int32 CMOV.ne (int32{0}, %28037) int32{1}, int32{0}
        %29410 1/int1 CMP.ne %29409, int32{0}
        %29411 void BRC %29410
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %29444 1/int32 CMOV.ne (int32{0}, %28041) int32{1}, int32{0}
        %29445 1/int1 CMP.ne %29444, int32{0}
        %29446 void BRC %29445
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %29479 1/int32 CMOV.ne (int32{0}, %28045) int32{1}, int32{0}
        %29480 1/int1 CMP.ne %29479, int32{0}
        %29481 void BRC %29480
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %29514 1/int32 CMOV.ne (int32{0}, %28049) int32{1}, int32{0}
        %29515 1/int1 CMP.ne %29514, int32{0}
        %29516 void BRC %29515
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %29549 1/int32 CMOV.ne (int32{0}, %28053) int32{1}, int32{0}
        %29550 1/int1 CMP.ne %29549, int32{0}
        %29551 void BRC %29550
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %29584 1/int32 CMOV.ne (int32{0}, %28057) int32{1}, int32{0}
        %29585 1/int1 CMP.ne %29584, int32{0}
        %29586 void BRC %29585
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 89/815: validate graph
    validate graph (0045C2BE)
>> pass 90/815: constant propagation
    constant propagation (5CBB3303)
>> pass 91/815: validate graph
    validate graph (0045C2BE)
>> pass 92/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 93/815: validate graph
    validate graph (0045C2BE)
>> pass 94/815: legalize ptr_from_texture instructions
    legalize ptr_from_texture instructions (F97DC9E0)
>> pass 95/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 96/815: validate graph
    validate graph (0045C2BE)
>> pass 97/815: apply cubemap WAR
    apply cubemap WAR (5F879B97)
>> pass 98/815: validate graph
    validate graph (0045C2BE)
>> pass 99/815: constant propagation
    constant propagation (5CBB3303)
>> pass 100/815: validate graph
    validate graph (0045C2BE)
>> pass 101/815: create uniform default values
    create uniform default values (43C6F162)
>> pass 102/815: validate graph
    validate graph (0045C2BE)
>> pass 103/815: suspend-resume
    suspend-resume (3714C203)
>> pass 104/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 105/815: validate graph
    validate graph (0045C2BE)
>> pass 106/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default
    %230 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %327 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %328 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %329 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %330 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %331 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %332 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %333 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %334 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %335 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %336 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %337 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %338 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %230[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]
    cubemapTexture(96 - 96) -- %327[0:+32]
    brdfLUT(97 - 97) -- %328[0:+32]
    albedoTexture(98 - 98) -- %329[0:+32]
    normalTexture(99 - 99) -- %330[0:+32]
    roughnessTexture(100 - 100) -- %331[0:+32]
    emissiveTexture(101 - 101) -- %332[0:+32]
    shadowmapTexture0(102 - 102) -- %333[0:+32]
    shadowmapTexture1(103 - 103) -- %334[0:+32]
    shadowmapTexture2(104 - 104) -- %335[0:+32]
    shadowmapTexture3(105 - 105) -- %336[0:+32]
    samplerWrapLinear(107 - 107) -- %337[0:+16]
    samplerShadowCompare(109 - 109) -- %338[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %229 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %232 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %230[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %6574 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %230, int32{0}, int32{0}
        %342 1/int32 LD %321
        %7047 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6574
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %7047
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %381 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{0}
        %382 3/fp32 LD %381
        %6784 4/fp32 SHUF %382.xyz-,  fp32{1.0}.---x
        %7062 4/fp32 SHUF %366.x---,  %370.-x--,  %374.--x-,  %378.---x
        %7063 1/fp32 DOT4 fast %7062, %6784
        %7072 4/fp32 SHUF %366.y---,  %370.-y--,  %374.--y-,  %378.---y
        %7073 1/fp32 DOT4 fast %7072, %6784
        %7082 4/fp32 SHUF %366.z---,  %370.-z--,  %374.--z-,  %378.---z
        %7083 1/fp32 DOT4 fast %7082, %6784
        %7092 4/fp32 SHUF %366.w---,  %370.-w--,  %374.--w-,  %378.---w
        %7093 1/fp32 DOT4 fast %7092, %6784
        %7094 4/fp32 SHUF %7063.x---,  %7073.-x--,  %7083.--x-,  %7093.---x
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %7106 4/fp32 SHUF %7099.x---,  %7101.-x--,  %7103.--x-,  %7105.---x
        %7107 1/fp32 DOT4 fast %7106, %7094
        %7116 4/fp32 SHUF %7099.y---,  %7101.-y--,  %7103.--y-,  %7105.---y
        %7117 1/fp32 DOT4 fast %7116, %7094
        %7126 4/fp32 SHUF %7099.z---,  %7101.-z--,  %7103.--z-,  %7105.---z
        %7127 1/fp32 DOT4 fast %7126, %7094
        %7136 4/fp32 SHUF %7099.w---,  %7101.-w--,  %7103.--w-,  %7105.---w
        %7137 1/fp32 DOT4 fast %7136, %7094
        %7138 4/fp32 SHUF %7107.x---,  %7117.-x--,  %7127.--x-,  %7137.---x
        %541 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{1}
        %542 3/fp32 LD %541
        %7148 3/fp32 SHUF %366.x--,  %370.-x-,  %374.--x
        %7149 1/fp32 DOT3 fast %7148, %542
        %7156 3/fp32 SHUF %366.y--,  %370.-y-,  %374.--y
        %7157 1/fp32 DOT3 fast %7156, %542
        %7164 3/fp32 SHUF %366.z--,  %370.-z-,  %374.--z
        %7165 1/fp32 DOT3 fast %7164, %542
        %7166 3/fp32 SHUF %7149.x--,  %7157.-x-,  %7165.--x
        %587 3/fp32 NRM fast %7166
        %590 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{2}
        %591 3/fp32 LD %590
        %7176 3/fp32 SHUF %366.x--,  %370.-x-,  %374.--x
        %7177 1/fp32 DOT3 fast %7176, %591
        %7184 3/fp32 SHUF %366.y--,  %370.-y-,  %374.--y
        %7185 1/fp32 DOT3 fast %7184, %591
        %7192 3/fp32 SHUF %366.z--,  %370.-z-,  %374.--z
        %7193 1/fp32 DOT3 fast %7192, %591
        %7194 3/fp32 SHUF %7177.x--,  %7185.-x-,  %7193.--x
        %595 3/fp32 NRM fast %7194
        %7198 3/fp32 SHUF %542.yzx
        %7199 3/fp32 SHUF %591.zxy
        %7200 3/fp32 MUL fast %7198, %7199
        %7201 3/fp32 SHUF %542.zxy
        %7202 3/fp32 SHUF %591.yzx
        %7203 3/fp32 MUL fast %7201, %7202
        %7204 3/fp32 NEG fast %7203
        %7205 3/fp32 ADD fast %7200, %7204
        %634 temp(0) * 2/fp32 GETELEMPTR %229, int32{0}, int32{3}
        %636 2/fp32 LD %634
        %29982 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{0}
        %29984 void ST %7138, %29982
        %29986 temp(0) * 2/fp32 GETELEMPTR %232, int32{0}, int32{1}
        %29988 void ST %636, %29986
        %29990 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{2}
        %29992 void ST %587, %29990
        %29994 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{3}
        %29996 void ST %595, %29994
        %29998 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{4}
        %30000 void ST %7205, %29998
        %30002 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{5}
        %30004 void ST %7094, %30002
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %7299 1/int32 AND %7298, int32{255}
        %7302 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7303 1/int32 AND %7302, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7434 1/int32 SHL %7299, int32{12}
        %7435 1/int32 OR %7434, %7303
        %7436 void intr.s_sendmsg %7435, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %7299
        %7440 1/int32 ADD int32{64}, %7439
        %7441 1/int64 CONV %7440
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %7444 1/int32 CMOV.ne (%7443, int32{0}) int32{1}, int32{0}
        %1475 1/int1 CMP.ne %7444, int32{0}
        %1480 void BRC %1475[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %7303
        %7459 1/int32 ADD int32{64}, %7458
        %7460 1/int64 CONV %7459
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %7463 1/int32 CMOV.ne (%7462, int32{0}) int32{1}, int32{0}
        %1577 1/int1 CMP.ne %7463, int32{0}
        %1582 void BRC %1577[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %28213 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28214 1/int1 CMP.ne %28213, int32{0}
        %28215 void BRC %28214
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %28220 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28221 1/int1 CMP.ne %28220, int32{0}
        %28222 void BRC %28221
        --> block:28253, block:28225

      block:28225 - if-predicate
        <-- block:28216
        %28229 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28230 1/int1 CMP.ne %28229, int32{0}
        %28231 void BRC %28230
        --> block:28253, block:28232

      block:28232 - if-predicate
        <-- block:28225
        %28236 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28237 1/int1 CMP.ne %28236, int32{0}
        %28238 void BRC %28237
        --> block:28223, block:28253

      block:28223 - dummy-edge
        <-- block:28232
        %28224 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216, block:28225, block:28232, block:28223
        %28254 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28268 1/int32 CMOV.ne (int32{0}, %27913) int32{1}, int32{0}
        %28269 1/int1 CMP.ne %28268, int32{0}
        %28270 void BRC %28269
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %28276 1/int32 AND %27913, int32{-2097153}
        %28280 1/int32 CMOV.eq (int32{0}, %28254) int32{1}, int32{0}
        %28281 1/int32 CMOV.ne (%28280, int32{0}) int32{2097152}, int32{0}
        %28282 1/int32 OR %28276, %28281
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %28282, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %28314 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28315 1/int1 CMP.ne %28314, int32{0}
        %28316 void BRC %28315
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %28318 1/int32 AND %27917, int32{-2097153}
        %28322 1/int32 CMOV.eq (int32{1}, %28254) int32{1}, int32{0}
        %28323 1/int32 CMOV.ne (%28322, int32{0}) int32{2097152}, int32{0}
        %28324 1/int32 OR %28318, %28323
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %28324, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %28356 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28357 1/int1 CMP.ne %28356, int32{0}
        %28358 void BRC %28357
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %28360 1/int32 AND %27921, int32{-2097153}
        %28364 1/int32 CMOV.eq (int32{2}, %28254) int32{1}, int32{0}
        %28365 1/int32 CMOV.ne (%28364, int32{0}) int32{2097152}, int32{0}
        %28366 1/int32 OR %28360, %28365
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %28366, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %28398 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28399 1/int1 CMP.ne %28398, int32{0}
        %28400 void BRC %28399
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %28402 1/int32 AND %27925, int32{-2097153}
        %28406 1/int32 CMOV.eq (int32{3}, %28254) int32{1}, int32{0}
        %28407 1/int32 CMOV.ne (%28406, int32{0}) int32{2097152}, int32{0}
        %28408 1/int32 OR %28402, %28407
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %28408, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28440 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28441 1/int1 CMP.ne %28440, int32{0}
        %28442 void BRC %28441
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %28444 1/int32 AND %27929, int32{-2097153}
        %28448 1/int32 CMOV.eq (int32{4}, %28254) int32{1}, int32{0}
        %28449 1/int32 CMOV.ne (%28448, int32{0}) int32{2097152}, int32{0}
        %28450 1/int32 OR %28444, %28449
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %28450, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %28250 1/int32 CMOV.ne (int32{0}, %27933) int32{1}, int32{0}
        %28251 1/int1 CMP.ne %28250, int32{0}
        %28252 void BRC %28251
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %28534 1/int32 CMOV.ne (int32{0}, %27937) int32{1}, int32{0}
        %28535 1/int1 CMP.ne %28534, int32{0}
        %28536 void BRC %28535
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %28569 1/int32 CMOV.ne (int32{0}, %27941) int32{1}, int32{0}
        %28570 1/int1 CMP.ne %28569, int32{0}
        %28571 void BRC %28570
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %28604 1/int32 CMOV.ne (int32{0}, %27945) int32{1}, int32{0}
        %28605 1/int1 CMP.ne %28604, int32{0}
        %28606 void BRC %28605
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %28639 1/int32 CMOV.ne (int32{0}, %27949) int32{1}, int32{0}
        %28640 1/int1 CMP.ne %28639, int32{0}
        %28641 void BRC %28640
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %28674 1/int32 CMOV.ne (int32{0}, %27953) int32{1}, int32{0}
        %28675 1/int1 CMP.ne %28674, int32{0}
        %28676 void BRC %28675
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %28709 1/int32 CMOV.ne (int32{0}, %27957) int32{1}, int32{0}
        %28710 1/int1 CMP.ne %28709, int32{0}
        %28711 void BRC %28710
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %28744 1/int32 CMOV.ne (int32{0}, %27961) int32{1}, int32{0}
        %28745 1/int1 CMP.ne %28744, int32{0}
        %28746 void BRC %28745
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %28779 1/int32 CMOV.ne (int32{0}, %27965) int32{1}, int32{0}
        %28780 1/int1 CMP.ne %28779, int32{0}
        %28781 void BRC %28780
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %28814 1/int32 CMOV.ne (int32{0}, %27969) int32{1}, int32{0}
        %28815 1/int1 CMP.ne %28814, int32{0}
        %28816 void BRC %28815
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %28849 1/int32 CMOV.ne (int32{0}, %27973) int32{1}, int32{0}
        %28850 1/int1 CMP.ne %28849, int32{0}
        %28851 void BRC %28850
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %28884 1/int32 CMOV.ne (int32{0}, %27977) int32{1}, int32{0}
        %28885 1/int1 CMP.ne %28884, int32{0}
        %28886 void BRC %28885
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %28919 1/int32 CMOV.ne (int32{0}, %27981) int32{1}, int32{0}
        %28920 1/int1 CMP.ne %28919, int32{0}
        %28921 void BRC %28920
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %28954 1/int32 CMOV.ne (int32{0}, %27985) int32{1}, int32{0}
        %28955 1/int1 CMP.ne %28954, int32{0}
        %28956 void BRC %28955
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %28989 1/int32 CMOV.ne (int32{0}, %27989) int32{1}, int32{0}
        %28990 1/int1 CMP.ne %28989, int32{0}
        %28991 void BRC %28990
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %29024 1/int32 CMOV.ne (int32{0}, %27993) int32{1}, int32{0}
        %29025 1/int1 CMP.ne %29024, int32{0}
        %29026 void BRC %29025
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %29059 1/int32 CMOV.ne (int32{0}, %27997) int32{1}, int32{0}
        %29060 1/int1 CMP.ne %29059, int32{0}
        %29061 void BRC %29060
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %29094 1/int32 CMOV.ne (int32{0}, %28001) int32{1}, int32{0}
        %29095 1/int1 CMP.ne %29094, int32{0}
        %29096 void BRC %29095
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %29129 1/int32 CMOV.ne (int32{0}, %28005) int32{1}, int32{0}
        %29130 1/int1 CMP.ne %29129, int32{0}
        %29131 void BRC %29130
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %29164 1/int32 CMOV.ne (int32{0}, %28009) int32{1}, int32{0}
        %29165 1/int1 CMP.ne %29164, int32{0}
        %29166 void BRC %29165
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %29199 1/int32 CMOV.ne (int32{0}, %28013) int32{1}, int32{0}
        %29200 1/int1 CMP.ne %29199, int32{0}
        %29201 void BRC %29200
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %29234 1/int32 CMOV.ne (int32{0}, %28017) int32{1}, int32{0}
        %29235 1/int1 CMP.ne %29234, int32{0}
        %29236 void BRC %29235
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %29269 1/int32 CMOV.ne (int32{0}, %28021) int32{1}, int32{0}
        %29270 1/int1 CMP.ne %29269, int32{0}
        %29271 void BRC %29270
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %29304 1/int32 CMOV.ne (int32{0}, %28025) int32{1}, int32{0}
        %29305 1/int1 CMP.ne %29304, int32{0}
        %29306 void BRC %29305
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %29339 1/int32 CMOV.ne (int32{0}, %28029) int32{1}, int32{0}
        %29340 1/int1 CMP.ne %29339, int32{0}
        %29341 void BRC %29340
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %29374 1/int32 CMOV.ne (int32{0}, %28033) int32{1}, int32{0}
        %29375 1/int1 CMP.ne %29374, int32{0}
        %29376 void BRC %29375
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %29409 1/int32 CMOV.ne (int32{0}, %28037) int32{1}, int32{0}
        %29410 1/int1 CMP.ne %29409, int32{0}
        %29411 void BRC %29410
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %29444 1/int32 CMOV.ne (int32{0}, %28041) int32{1}, int32{0}
        %29445 1/int1 CMP.ne %29444, int32{0}
        %29446 void BRC %29445
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %29479 1/int32 CMOV.ne (int32{0}, %28045) int32{1}, int32{0}
        %29480 1/int1 CMP.ne %29479, int32{0}
        %29481 void BRC %29480
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %29514 1/int32 CMOV.ne (int32{0}, %28049) int32{1}, int32{0}
        %29515 1/int1 CMP.ne %29514, int32{0}
        %29516 void BRC %29515
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %29549 1/int32 CMOV.ne (int32{0}, %28053) int32{1}, int32{0}
        %29550 1/int1 CMP.ne %29549, int32{0}
        %29551 void BRC %29550
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %29584 1/int32 CMOV.ne (int32{0}, %28057) int32{1}, int32{0}
        %29585 1/int1 CMP.ne %29584, int32{0}
        %29586 void BRC %29585
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 107/815: validate graph
    validate graph (0045C2BE)
>> pass 108/815: lower compute special registers
    lower compute special registers (404775D5)
>> pass 109/815: validate graph
    validate graph (0045C2BE)
>> pass 110/815: validate pipeline
    validate pipeline (D7B54D79)
>> pass 111/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 112/815: validate graph
    validate graph (0045C2BE)
>> pass 113/815: lower barriers
    lower barriers (2A24A206)
>> pass 114/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 115/815: validate graph
    validate graph (0045C2BE)
>> pass 116/815: loop analysis
    loop analysis (598E85BD)
>> pass 117/815: validate loops
    validate loops (363FE0BB)
>> pass 118/815: validate graph
    validate graph (0045C2BE)
>> pass 119/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 120/815: validate graph
    validate graph (0045C2BE)
>> pass 121/815: inline sub-routines
    inline sub-routines (BD52C9CC)
>> pass 122/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 123/815: validate graph
    validate graph (0045C2BE)
>> pass 124/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 125/815: validate graph
    validate graph (0045C2BE)
>> pass 126/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 127/815: validate graph
    validate graph (0045C2BE)
>> pass 128/815: loop analysis
    loop analysis (598E85BD)
>> pass 129/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 130/815: validate graph
    validate graph (0045C2BE)
>> pass 131/815: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 132/815: validate graph
    validate graph (0045C2BE)
>> pass 133/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 134/815: validate graph
    validate graph (0045C2BE)
>> pass 135/815: optimize vector ops instructions
    optimize vector ops instructions (35FD52A5)
>> pass 136/815: validate graph
    validate graph (0045C2BE)
>> pass 137/815: lower normalize
    lower normalize (21A2B966)
>> pass 138/815: validate graph
    validate graph (0045C2BE)
>> pass 139/815: legalize coefficient dynamic access
    legalize coefficient dynamic access (12C7DDB2)
>> pass 140/815: validate graph
    validate graph (0045C2BE)
>> pass 141/815: lower dot products
    lower dot products (69B832F8)
>> pass 142/815: validate graph
    validate graph (0045C2BE)
>> pass 143/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 144/815: remove dead code
    remove dead code (B7E6F507)
>> pass 145/815: validate graph
    validate graph (0045C2BE)
>> pass 146/815: r10scalarizer
    r10scalarizer (81A236D1)
>> pass 147/815: validate graph
    validate graph (0045C2BE)
>> pass 148/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 149/815: validate graph
    validate graph (0045C2BE)
>> pass 150/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 151/815: remove dead code
    remove dead code (B7E6F507)
>> pass 152/815: validate graph
    validate graph (0045C2BE)
>> pass 153/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %156 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
      'cubemapTexture' - texObj:t0_dead
    %157 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
      'brdfLUT' - texObj:t1_dead
    %158 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
      'albedoTexture' - texObj:t2_dead
    %159 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
      'normalTexture' - texObj:t3_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
      'roughnessTexture' - texObj:t4_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
      'emissiveTexture' - texObj:t5_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
      'shadowmapTexture0' - texObj:t6_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
      'shadowmapTexture1' - texObj:t7_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
      'shadowmapTexture2' - texObj:t8_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
      'shadowmapTexture3' - texObj:t9_dead
    %166 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
      'samplerWrapLinear' - smpUnit:0_dead
    %167 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
      'samplerShadowCompare' - smpUnit:1_dead

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 154/815: validate graph
    validate graph (0045C2BE)
>> pass 155/815: lower FDiv/FMod instructions
    lower FDiv/FMod instructions (8A3C3571)
>> pass 156/815: validate graph
    validate graph (0045C2BE)
>> pass 157/815: loop analysis
    loop analysis (598E85BD)
>> pass 158/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 159/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 160/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 161/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 162/815: lower uniformity
    lower uniformity (69E21F86)
>> pass 163/815: validate graph
    validate graph (0045C2BE)
>> pass 164/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 165/815: validate graph
    validate graph (0045C2BE)
>> pass 166/815: merge getelemptr
    merge getelemptr (D655006F)
>> pass 167/815: validate graph
    validate graph (0045C2BE)
>> pass 168/815: remove dead code
    remove dead code (B7E6F507)
>> pass 169/815: validate graph
    validate graph (0045C2BE)
>> pass 170/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 171/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 172/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 173/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 174/815: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 175/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 176/815: validate graph
    validate graph (0045C2BE)
>> pass 177/815: loop analysis
    loop analysis (598E85BD)
>> pass 178/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 179/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 180/815: validate graph
    validate graph (0045C2BE)
>> pass 181/815: optimize array copies
    optimize array copies (32902F2C)
>> pass 182/815: validate graph
    validate graph (0045C2BE)
>> pass 183/815: optimize memcopy
    optimize memcopy (2E886C25)
>> pass 184/815: validate graph
    validate graph (0045C2BE)
>> pass 185/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %156 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
      'cubemapTexture' - texObj:t0_dead
    %157 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
      'brdfLUT' - texObj:t1_dead
    %158 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
      'albedoTexture' - texObj:t2_dead
    %159 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
      'normalTexture' - texObj:t3_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
      'roughnessTexture' - texObj:t4_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
      'emissiveTexture' - texObj:t5_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
      'shadowmapTexture0' - texObj:t6_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
      'shadowmapTexture1' - texObj:t7_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
      'shadowmapTexture2' - texObj:t8_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
      'shadowmapTexture3' - texObj:t9_dead
    %166 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
      'samplerWrapLinear' - smpUnit:0_dead
    %167 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
      'samplerShadowCompare' - smpUnit:1_dead

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 186/815: validate graph
    validate graph (0045C2BE)
>> pass 187/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 188/815: validate graph
    validate graph (0045C2BE)
>> pass 189/815: lower srt
    lower srt (09AD683D)
>> pass 190/815: validate graph
    validate graph (0045C2BE)
>> pass 191/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 192/815: remove dead code
    remove dead code (B7E6F507)
>> pass 193/815: validate graph
    validate graph (0045C2BE)
>> pass 194/815: loop analysis
    loop analysis (598E85BD)
>> pass 195/815: structural analysis
    structural analysis (A71DE301)
>> pass 196/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 197/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 198/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 199/815: validate graph
    validate graph (0045C2BE)
>> pass 200/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 201/815: validate graph
    validate graph (0045C2BE)
>> pass 202/815: break critical edges
    break critical edges (D716EAB4)
>> pass 203/815: validate graph
    validate graph (0045C2BE)
>> pass 204/815: loop analysis
    loop analysis (598E85BD)
>> pass 205/815: normalize loops
    normalize loops (1918C45F)
>> pass 206/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 207/815: validate graph
    validate graph (0045C2BE)
>> pass 208/815: loop analysis
    loop analysis (598E85BD)
>> pass 209/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 210/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 211/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 212/815: unswitch loops
    unswitch loops (503811B6)
>> pass 213/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 214/815: validate graph
    validate graph (0045C2BE)
>> pass 215/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 216/815: validate graph
    validate graph (0045C2BE)
>> pass 217/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 218/815: remove dead code
    remove dead code (B7E6F507)
>> pass 219/815: validate graph
    validate graph (0045C2BE)
>> pass 220/815: loop analysis
    loop analysis (598E85BD)
>> pass 221/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 222/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 223/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 224/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 225/815: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 226/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 227/815: validate graph
    validate graph (0045C2BE)
>> pass 228/815: loop analysis
    loop analysis (598E85BD)
>> pass 229/815: unwind loops
    unwind loops (CE7F8B5B)
>> pass 230/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 231/815: validate graph
    validate graph (0045C2BE)
>> pass 232/815: loop analysis
    loop analysis (598E85BD)
>> pass 233/815: rotate loops
    rotate loops (B076855B)
>> pass 234/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 235/815: validate graph
    validate graph (0045C2BE)
>> pass 236/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 237/815: validate graph
    validate graph (0045C2BE)
>> pass 238/815: loop analysis
    loop analysis (598E85BD)
>> pass 239/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 240/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 241/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 242/815: optimize kcacheable structured buffer loads
    optimize kcacheable structured buffer loads (C2B823B3)
>> pass 243/815: validate graph
    validate graph (0045C2BE)
>> pass 244/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 245/815: remove dead code
    remove dead code (B7E6F507)
>> pass 246/815: validate graph
    validate graph (0045C2BE)
>> pass 247/815: legalize entry args
    legalize entry args (F207B1C1)
>> pass 248/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 249/815: validate graph
    validate graph (0045C2BE)
>> pass 250/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 251/815: validate graph
    validate graph (0045C2BE)
>> pass 252/815: loop analysis
    loop analysis (598E85BD)
>> pass 253/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 254/815: validate graph
    validate graph (0045C2BE)
>> pass 255/815: cross stage vs/ps entry argument scalarization
    cross stage vs/ps entry argument scalarization (F174A251)
>> pass 111/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 112/815: validate graph
    validate graph (0045C2BE)
>> pass 113/815: lower barriers
    lower barriers (2A24A206)
>> pass 114/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 115/815: validate graph
    validate graph (0045C2BE)
>> pass 116/815: loop analysis
    loop analysis (598E85BD)
>> pass 117/815: validate loops
    validate loops (363FE0BB)
>> pass 118/815: validate graph
    validate graph (0045C2BE)
>> pass 119/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 120/815: validate graph
    validate graph (0045C2BE)
>> pass 121/815: inline sub-routines
    inline sub-routines (BD52C9CC)
>> pass 122/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 123/815: validate graph
    validate graph (0045C2BE)
>> pass 124/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 125/815: validate graph
    validate graph (0045C2BE)
>> pass 126/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 127/815: validate graph
    validate graph (0045C2BE)
>> pass 128/815: loop analysis
    loop analysis (598E85BD)
>> pass 129/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 130/815: validate graph
    validate graph (0045C2BE)
>> pass 131/815: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 132/815: validate graph
    validate graph (0045C2BE)
>> pass 133/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 134/815: validate graph
    validate graph (0045C2BE)
>> pass 135/815: optimize vector ops instructions
    optimize vector ops instructions (35FD52A5)
>> pass 136/815: validate graph
    validate graph (0045C2BE)
>> pass 137/815: lower normalize
    lower normalize (21A2B966)
>> pass 138/815: validate graph
    validate graph (0045C2BE)
>> pass 139/815: legalize coefficient dynamic access
    legalize coefficient dynamic access (12C7DDB2)
>> pass 140/815: validate graph
    validate graph (0045C2BE)
>> pass 141/815: lower dot products
    lower dot products (69B832F8)
>> pass 142/815: validate graph
    validate graph (0045C2BE)
>> pass 143/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 144/815: remove dead code
    remove dead code (B7E6F507)
>> pass 145/815: validate graph
    validate graph (0045C2BE)
>> pass 146/815: r10scalarizer
    r10scalarizer (81A236D1)
>> pass 147/815: validate graph
    validate graph (0045C2BE)
>> pass 148/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 149/815: validate graph
    validate graph (0045C2BE)
>> pass 150/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 151/815: remove dead code
    remove dead code (B7E6F507)
>> pass 152/815: validate graph
    validate graph (0045C2BE)
>> pass 153/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default
    %230 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %327 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %328 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %329 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %330 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %331 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %332 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %333 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %334 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %335 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %336 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %337 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %338 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %230[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]
    cubemapTexture(96 - 96) -- %327[0:+32]
    brdfLUT(97 - 97) -- %328[0:+32]
    albedoTexture(98 - 98) -- %329[0:+32]
    normalTexture(99 - 99) -- %330[0:+32]
    roughnessTexture(100 - 100) -- %331[0:+32]
    emissiveTexture(101 - 101) -- %332[0:+32]
    shadowmapTexture0(102 - 102) -- %333[0:+32]
    shadowmapTexture1(103 - 103) -- %334[0:+32]
    shadowmapTexture2(104 - 104) -- %335[0:+32]
    shadowmapTexture3(105 - 105) -- %336[0:+32]
    samplerWrapLinear(107 - 107) -- %337[0:+16]
    samplerShadowCompare(109 - 109) -- %338[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %229 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %232 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %230[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %6574 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %230, int32{0}, int32{0}
        %342 1/int32 LD %321
        %7047 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6574
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %7047
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %381 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{0}
        %382 3/fp32 LD %381
        %30189 1/fp32 MUL %366, %382
        %30452 1/fp32 SHUF %382.y
        %30192 1/fp32 MUL %370, %30452
        %30193 1/fp32 ADD %30189, %30192
        %30453 1/fp32 SHUF %382.z
        %30196 1/fp32 MUL %374, %30453
        %30197 1/fp32 ADD %30193, %30196
        %30200 1/fp32 MUL %378, fp32{1.0}
        %30201 1/fp32 ADD %30197, %30200
        %30454 1/fp32 SHUF %366.y
        %30204 1/fp32 MUL %30454, %382
        %30455 1/fp32 SHUF %370.y
        %30456 1/fp32 SHUF %382.y
        %30207 1/fp32 MUL %30455, %30456
        %30208 1/fp32 ADD %30204, %30207
        %30457 1/fp32 SHUF %374.y
        %30458 1/fp32 SHUF %382.z
        %30211 1/fp32 MUL %30457, %30458
        %30212 1/fp32 ADD %30208, %30211
        %30459 1/fp32 SHUF %378.y
        %30215 1/fp32 MUL %30459, fp32{1.0}
        %30216 1/fp32 ADD %30212, %30215
        %30460 1/fp32 SHUF %366.z
        %30219 1/fp32 MUL %30460, %382
        %30461 1/fp32 SHUF %370.z
        %30462 1/fp32 SHUF %382.y
        %30222 1/fp32 MUL %30461, %30462
        %30223 1/fp32 ADD %30219, %30222
        %30463 1/fp32 SHUF %374.z
        %30464 1/fp32 SHUF %382.z
        %30226 1/fp32 MUL %30463, %30464
        %30227 1/fp32 ADD %30223, %30226
        %30465 1/fp32 SHUF %378.z
        %30230 1/fp32 MUL %30465, fp32{1.0}
        %30231 1/fp32 ADD %30227, %30230
        %30466 1/fp32 SHUF %366.w
        %30234 1/fp32 MUL %30466, %382
        %30467 1/fp32 SHUF %370.w
        %30468 1/fp32 SHUF %382.y
        %30237 1/fp32 MUL %30467, %30468
        %30238 1/fp32 ADD %30234, %30237
        %30469 1/fp32 SHUF %374.w
        %30470 1/fp32 SHUF %382.z
        %30241 1/fp32 MUL %30469, %30470
        %30242 1/fp32 ADD %30238, %30241
        %30471 1/fp32 SHUF %378.w
        %30245 1/fp32 MUL %30471, fp32{1.0}
        %30246 1/fp32 ADD %30242, %30245
        %7094 4/fp32 SHUF %30201.x---,  %30216.-x--,  %30231.--x-,  %30246.---x
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30249 1/fp32 MUL %7099, %30201
        %30252 1/fp32 MUL %7101, %30216
        %30253 1/fp32 ADD %30249, %30252
        %30256 1/fp32 MUL %7103, %30231
        %30257 1/fp32 ADD %30253, %30256
        %30260 1/fp32 MUL %7105, %30246
        %30261 1/fp32 ADD %30257, %30260
        %30472 1/fp32 SHUF %7099.y
        %30264 1/fp32 MUL %30472, %30201
        %30473 1/fp32 SHUF %7101.y
        %30267 1/fp32 MUL %30473, %30216
        %30268 1/fp32 ADD %30264, %30267
        %30474 1/fp32 SHUF %7103.y
        %30271 1/fp32 MUL %30474, %30231
        %30272 1/fp32 ADD %30268, %30271
        %30475 1/fp32 SHUF %7105.y
        %30275 1/fp32 MUL %30475, %30246
        %30276 1/fp32 ADD %30272, %30275
        %30476 1/fp32 SHUF %7099.z
        %30279 1/fp32 MUL %30476, %30201
        %30477 1/fp32 SHUF %7101.z
        %30282 1/fp32 MUL %30477, %30216
        %30283 1/fp32 ADD %30279, %30282
        %30478 1/fp32 SHUF %7103.z
        %30286 1/fp32 MUL %30478, %30231
        %30287 1/fp32 ADD %30283, %30286
        %30479 1/fp32 SHUF %7105.z
        %30290 1/fp32 MUL %30479, %30246
        %30291 1/fp32 ADD %30287, %30290
        %30480 1/fp32 SHUF %7099.w
        %30294 1/fp32 MUL %30480, %30201
        %30481 1/fp32 SHUF %7101.w
        %30297 1/fp32 MUL %30481, %30216
        %30298 1/fp32 ADD %30294, %30297
        %30482 1/fp32 SHUF %7103.w
        %30301 1/fp32 MUL %30482, %30231
        %30302 1/fp32 ADD %30298, %30301
        %30483 1/fp32 SHUF %7105.w
        %30305 1/fp32 MUL %30483, %30246
        %30306 1/fp32 ADD %30302, %30305
        %7138 4/fp32 SHUF %30261.x---,  %30276.-x--,  %30291.--x-,  %30306.---x
        %541 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{1}
        %542 3/fp32 LD %541
        %30309 1/fp32 MUL %366, %542
        %30311 1/fp32 SHUF %542.y
        %30312 1/fp32 MUL %370, %30311
        %30313 1/fp32 ADD %30309, %30312
        %30315 1/fp32 SHUF %542.z
        %30316 1/fp32 MUL %374, %30315
        %30317 1/fp32 ADD %30313, %30316
        %30484 1/fp32 SHUF %366.y
        %30320 1/fp32 MUL %30484, %542
        %30485 1/fp32 SHUF %370.y
        %30322 1/fp32 SHUF %542.y
        %30323 1/fp32 MUL %30485, %30322
        %30324 1/fp32 ADD %30320, %30323
        %30486 1/fp32 SHUF %374.y
        %30326 1/fp32 SHUF %542.z
        %30327 1/fp32 MUL %30486, %30326
        %30328 1/fp32 ADD %30324, %30327
        %30487 1/fp32 SHUF %366.z
        %30331 1/fp32 MUL %30487, %542
        %30488 1/fp32 SHUF %370.z
        %30333 1/fp32 SHUF %542.y
        %30334 1/fp32 MUL %30488, %30333
        %30335 1/fp32 ADD %30331, %30334
        %30489 1/fp32 SHUF %374.z
        %30337 1/fp32 SHUF %542.z
        %30338 1/fp32 MUL %30489, %30337
        %30339 1/fp32 ADD %30335, %30338
        %30342 1/fp32 MUL %30317, %30317
        %30345 1/fp32 MUL %30328, %30328
        %30346 1/fp32 ADD %30342, %30345
        %30349 1/fp32 MUL %30339, %30339
        %30350 1/fp32 ADD %30346, %30349
        %30184 1/fp32 RSQ %30350
        %30395 1/fp32 MUL %30317, %30184
        %30398 1/fp32 MUL %30328, %30184
        %30401 1/fp32 MUL %30339, %30184
        %30404 3/fp32 SHUF %30395.x--,  %30398.-x-,  %30401.--x
        %590 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{2}
        %591 3/fp32 LD %590
        %30353 1/fp32 MUL %366, %591
        %30355 1/fp32 SHUF %591.y
        %30356 1/fp32 MUL %370, %30355
        %30357 1/fp32 ADD %30353, %30356
        %30359 1/fp32 SHUF %591.z
        %30360 1/fp32 MUL %374, %30359
        %30361 1/fp32 ADD %30357, %30360
        %30490 1/fp32 SHUF %366.y
        %30364 1/fp32 MUL %30490, %591
        %30491 1/fp32 SHUF %370.y
        %30366 1/fp32 SHUF %591.y
        %30367 1/fp32 MUL %30491, %30366
        %30368 1/fp32 ADD %30364, %30367
        %30492 1/fp32 SHUF %374.y
        %30370 1/fp32 SHUF %591.z
        %30371 1/fp32 MUL %30492, %30370
        %30372 1/fp32 ADD %30368, %30371
        %30493 1/fp32 SHUF %366.z
        %30375 1/fp32 MUL %30493, %591
        %30494 1/fp32 SHUF %370.z
        %30377 1/fp32 SHUF %591.y
        %30378 1/fp32 MUL %30494, %30377
        %30379 1/fp32 ADD %30375, %30378
        %30495 1/fp32 SHUF %374.z
        %30381 1/fp32 SHUF %591.z
        %30382 1/fp32 MUL %30495, %30381
        %30383 1/fp32 ADD %30379, %30382
        %30386 1/fp32 MUL %30361, %30361
        %30389 1/fp32 MUL %30372, %30372
        %30390 1/fp32 ADD %30386, %30389
        %30393 1/fp32 MUL %30383, %30383
        %30394 1/fp32 ADD %30390, %30393
        %30180 1/fp32 RSQ %30394
        %30405 1/fp32 MUL %30361, %30180
        %30408 1/fp32 MUL %30372, %30180
        %30411 1/fp32 MUL %30383, %30180
        %30414 3/fp32 SHUF %30405.x--,  %30408.-x-,  %30411.--x
        %30496 1/fp32 SHUF %542.y
        %30497 1/fp32 SHUF %591.z
        %30415 1/fp32 MUL fast %30496, %30497
        %30498 1/fp32 SHUF %542.z
        %30418 1/fp32 MUL fast %30498, %591
        %30499 1/fp32 SHUF %591.y
        %30421 1/fp32 MUL fast %542, %30499
        %30500 1/fp32 SHUF %542.z
        %30501 1/fp32 SHUF %591.y
        %30425 1/fp32 MUL fast %30500, %30501
        %30502 1/fp32 SHUF %591.z
        %30428 1/fp32 MUL fast %542, %30502
        %30503 1/fp32 SHUF %542.y
        %30431 1/fp32 MUL fast %30503, %591
        %30435 1/fp32 NEG fast %30425
        %30437 1/fp32 NEG fast %30428
        %30439 1/fp32 NEG fast %30431
        %30442 1/fp32 ADD fast %30415, %30435
        %30445 1/fp32 ADD fast %30418, %30437
        %30448 1/fp32 ADD fast %30421, %30439
        %30451 3/fp32 SHUF %30442.x--,  %30445.-x-,  %30448.--x
        %634 temp(0) * 2/fp32 GETELEMPTR %229, int32{0}, int32{3}
        %636 2/fp32 LD %634
        %29982 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{0}
        %29984 void ST %7138, %29982
        %29986 temp(0) * 2/fp32 GETELEMPTR %232, int32{0}, int32{1}
        %29988 void ST %636, %29986
        %29990 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{2}
        %29992 void ST %30404, %29990
        %29994 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{3}
        %29996 void ST %30414, %29994
        %29998 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{4}
        %30000 void ST %30451, %29998
        %30002 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{5}
        %30004 void ST %7094, %30002
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %7299 1/int32 AND %7298, int32{255}
        %7302 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7303 1/int32 AND %7302, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7434 1/int32 SHL %7299, int32{12}
        %7435 1/int32 OR %7434, %7303
        %7436 void intr.s_sendmsg %7435, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %7299
        %7440 1/int32 ADD int32{64}, %7439
        %7441 1/int64 CONV %7440
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %7444 1/int32 CMOV.ne (%7443, int32{0}) int32{1}, int32{0}
        %1475 1/int1 CMP.ne %7444, int32{0}
        %1480 void BRC %1475[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %7303
        %7459 1/int32 ADD int32{64}, %7458
        %7460 1/int64 CONV %7459
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %7463 1/int32 CMOV.ne (%7462, int32{0}) int32{1}, int32{0}
        %1577 1/int1 CMP.ne %7463, int32{0}
        %1582 void BRC %1577[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %28213 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28214 1/int1 CMP.ne %28213, int32{0}
        %28215 void BRC %28214
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %28220 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28221 1/int1 CMP.ne %28220, int32{0}
        %28222 void BRC %28221
        --> block:28253, block:28225

      block:28225 - if-predicate
        <-- block:28216
        %28229 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28230 1/int1 CMP.ne %28229, int32{0}
        %28231 void BRC %28230
        --> block:28253, block:28232

      block:28232 - if-predicate
        <-- block:28225
        %28236 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28237 1/int1 CMP.ne %28236, int32{0}
        %28238 void BRC %28237
        --> block:28223, block:28253

      block:28223 - dummy-edge
        <-- block:28232
        %28224 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216, block:28225, block:28232, block:28223
        %28254 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28268 1/int32 CMOV.ne (int32{0}, %27913) int32{1}, int32{0}
        %28269 1/int1 CMP.ne %28268, int32{0}
        %28270 void BRC %28269
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %28276 1/int32 AND %27913, int32{-2097153}
        %28280 1/int32 CMOV.eq (int32{0}, %28254) int32{1}, int32{0}
        %28281 1/int32 CMOV.ne (%28280, int32{0}) int32{2097152}, int32{0}
        %28282 1/int32 OR %28276, %28281
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %28282, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %28314 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28315 1/int1 CMP.ne %28314, int32{0}
        %28316 void BRC %28315
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %28318 1/int32 AND %27917, int32{-2097153}
        %28322 1/int32 CMOV.eq (int32{1}, %28254) int32{1}, int32{0}
        %28323 1/int32 CMOV.ne (%28322, int32{0}) int32{2097152}, int32{0}
        %28324 1/int32 OR %28318, %28323
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %28324, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %28356 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28357 1/int1 CMP.ne %28356, int32{0}
        %28358 void BRC %28357
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %28360 1/int32 AND %27921, int32{-2097153}
        %28364 1/int32 CMOV.eq (int32{2}, %28254) int32{1}, int32{0}
        %28365 1/int32 CMOV.ne (%28364, int32{0}) int32{2097152}, int32{0}
        %28366 1/int32 OR %28360, %28365
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %28366, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %28398 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28399 1/int1 CMP.ne %28398, int32{0}
        %28400 void BRC %28399
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %28402 1/int32 AND %27925, int32{-2097153}
        %28406 1/int32 CMOV.eq (int32{3}, %28254) int32{1}, int32{0}
        %28407 1/int32 CMOV.ne (%28406, int32{0}) int32{2097152}, int32{0}
        %28408 1/int32 OR %28402, %28407
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %28408, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28440 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28441 1/int1 CMP.ne %28440, int32{0}
        %28442 void BRC %28441
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %28444 1/int32 AND %27929, int32{-2097153}
        %28448 1/int32 CMOV.eq (int32{4}, %28254) int32{1}, int32{0}
        %28449 1/int32 CMOV.ne (%28448, int32{0}) int32{2097152}, int32{0}
        %28450 1/int32 OR %28444, %28449
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %28450, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %28250 1/int32 CMOV.ne (int32{0}, %27933) int32{1}, int32{0}
        %28251 1/int1 CMP.ne %28250, int32{0}
        %28252 void BRC %28251
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %28534 1/int32 CMOV.ne (int32{0}, %27937) int32{1}, int32{0}
        %28535 1/int1 CMP.ne %28534, int32{0}
        %28536 void BRC %28535
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %28569 1/int32 CMOV.ne (int32{0}, %27941) int32{1}, int32{0}
        %28570 1/int1 CMP.ne %28569, int32{0}
        %28571 void BRC %28570
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %28604 1/int32 CMOV.ne (int32{0}, %27945) int32{1}, int32{0}
        %28605 1/int1 CMP.ne %28604, int32{0}
        %28606 void BRC %28605
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %28639 1/int32 CMOV.ne (int32{0}, %27949) int32{1}, int32{0}
        %28640 1/int1 CMP.ne %28639, int32{0}
        %28641 void BRC %28640
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %28674 1/int32 CMOV.ne (int32{0}, %27953) int32{1}, int32{0}
        %28675 1/int1 CMP.ne %28674, int32{0}
        %28676 void BRC %28675
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %28709 1/int32 CMOV.ne (int32{0}, %27957) int32{1}, int32{0}
        %28710 1/int1 CMP.ne %28709, int32{0}
        %28711 void BRC %28710
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %28744 1/int32 CMOV.ne (int32{0}, %27961) int32{1}, int32{0}
        %28745 1/int1 CMP.ne %28744, int32{0}
        %28746 void BRC %28745
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %28779 1/int32 CMOV.ne (int32{0}, %27965) int32{1}, int32{0}
        %28780 1/int1 CMP.ne %28779, int32{0}
        %28781 void BRC %28780
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %28814 1/int32 CMOV.ne (int32{0}, %27969) int32{1}, int32{0}
        %28815 1/int1 CMP.ne %28814, int32{0}
        %28816 void BRC %28815
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %28849 1/int32 CMOV.ne (int32{0}, %27973) int32{1}, int32{0}
        %28850 1/int1 CMP.ne %28849, int32{0}
        %28851 void BRC %28850
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %28884 1/int32 CMOV.ne (int32{0}, %27977) int32{1}, int32{0}
        %28885 1/int1 CMP.ne %28884, int32{0}
        %28886 void BRC %28885
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %28919 1/int32 CMOV.ne (int32{0}, %27981) int32{1}, int32{0}
        %28920 1/int1 CMP.ne %28919, int32{0}
        %28921 void BRC %28920
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %28954 1/int32 CMOV.ne (int32{0}, %27985) int32{1}, int32{0}
        %28955 1/int1 CMP.ne %28954, int32{0}
        %28956 void BRC %28955
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %28989 1/int32 CMOV.ne (int32{0}, %27989) int32{1}, int32{0}
        %28990 1/int1 CMP.ne %28989, int32{0}
        %28991 void BRC %28990
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %29024 1/int32 CMOV.ne (int32{0}, %27993) int32{1}, int32{0}
        %29025 1/int1 CMP.ne %29024, int32{0}
        %29026 void BRC %29025
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %29059 1/int32 CMOV.ne (int32{0}, %27997) int32{1}, int32{0}
        %29060 1/int1 CMP.ne %29059, int32{0}
        %29061 void BRC %29060
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %29094 1/int32 CMOV.ne (int32{0}, %28001) int32{1}, int32{0}
        %29095 1/int1 CMP.ne %29094, int32{0}
        %29096 void BRC %29095
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %29129 1/int32 CMOV.ne (int32{0}, %28005) int32{1}, int32{0}
        %29130 1/int1 CMP.ne %29129, int32{0}
        %29131 void BRC %29130
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %29164 1/int32 CMOV.ne (int32{0}, %28009) int32{1}, int32{0}
        %29165 1/int1 CMP.ne %29164, int32{0}
        %29166 void BRC %29165
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %29199 1/int32 CMOV.ne (int32{0}, %28013) int32{1}, int32{0}
        %29200 1/int1 CMP.ne %29199, int32{0}
        %29201 void BRC %29200
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %29234 1/int32 CMOV.ne (int32{0}, %28017) int32{1}, int32{0}
        %29235 1/int1 CMP.ne %29234, int32{0}
        %29236 void BRC %29235
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %29269 1/int32 CMOV.ne (int32{0}, %28021) int32{1}, int32{0}
        %29270 1/int1 CMP.ne %29269, int32{0}
        %29271 void BRC %29270
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %29304 1/int32 CMOV.ne (int32{0}, %28025) int32{1}, int32{0}
        %29305 1/int1 CMP.ne %29304, int32{0}
        %29306 void BRC %29305
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %29339 1/int32 CMOV.ne (int32{0}, %28029) int32{1}, int32{0}
        %29340 1/int1 CMP.ne %29339, int32{0}
        %29341 void BRC %29340
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %29374 1/int32 CMOV.ne (int32{0}, %28033) int32{1}, int32{0}
        %29375 1/int1 CMP.ne %29374, int32{0}
        %29376 void BRC %29375
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %29409 1/int32 CMOV.ne (int32{0}, %28037) int32{1}, int32{0}
        %29410 1/int1 CMP.ne %29409, int32{0}
        %29411 void BRC %29410
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %29444 1/int32 CMOV.ne (int32{0}, %28041) int32{1}, int32{0}
        %29445 1/int1 CMP.ne %29444, int32{0}
        %29446 void BRC %29445
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %29479 1/int32 CMOV.ne (int32{0}, %28045) int32{1}, int32{0}
        %29480 1/int1 CMP.ne %29479, int32{0}
        %29481 void BRC %29480
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %29514 1/int32 CMOV.ne (int32{0}, %28049) int32{1}, int32{0}
        %29515 1/int1 CMP.ne %29514, int32{0}
        %29516 void BRC %29515
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %29549 1/int32 CMOV.ne (int32{0}, %28053) int32{1}, int32{0}
        %29550 1/int1 CMP.ne %29549, int32{0}
        %29551 void BRC %29550
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %29584 1/int32 CMOV.ne (int32{0}, %28057) int32{1}, int32{0}
        %29585 1/int1 CMP.ne %29584, int32{0}
        %29586 void BRC %29585
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 154/815: validate graph
    validate graph (0045C2BE)
>> pass 155/815: lower FDiv/FMod instructions
    lower FDiv/FMod instructions (8A3C3571)
>> pass 156/815: validate graph
    validate graph (0045C2BE)
>> pass 157/815: loop analysis
    loop analysis (598E85BD)
>> pass 158/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 159/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 160/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 161/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 162/815: lower uniformity
    lower uniformity (69E21F86)
>> pass 163/815: validate graph
    validate graph (0045C2BE)
>> pass 164/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 165/815: validate graph
    validate graph (0045C2BE)
>> pass 166/815: merge getelemptr
    merge getelemptr (D655006F)
>> pass 167/815: validate graph
    validate graph (0045C2BE)
>> pass 168/815: remove dead code
    remove dead code (B7E6F507)
>> pass 169/815: validate graph
    validate graph (0045C2BE)
>> pass 170/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 171/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 172/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 173/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 174/815: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 175/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 176/815: validate graph
    validate graph (0045C2BE)
>> pass 177/815: loop analysis
    loop analysis (598E85BD)
>> pass 178/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 179/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 180/815: validate graph
    validate graph (0045C2BE)
>> pass 181/815: optimize array copies
    optimize array copies (32902F2C)
>> pass 182/815: validate graph
    validate graph (0045C2BE)
>> pass 183/815: optimize memcopy
    optimize memcopy (2E886C25)
>> pass 184/815: validate graph
    validate graph (0045C2BE)
>> pass 185/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default
    %230 const: roconstant(0) * struct (ShaderResourceTable) {structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major, roshared(0) * struct (MaterialSRT) {structured buffer (read only) cache flags: 0x000000000 1/int32, structured buffer (read only) cache flags: 0x000000000 struct (MaterialProperties) {4/fp32, 4/fp32}, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32, structured buffer (read only) cache flags: 0x000000000 int texture object 2D 32bit template type 4/fp32}} - 'srt' [0,&srt(51),0,24]
      'srt.m_worldMatrix' - SRT:0 - local
      'srt.m_material' - SRT:4 - local
    %327 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %328 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %329 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %330 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %331 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %332 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %333 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %334 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %335 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %336 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %337 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %338 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    main(2 - 2)
      srt(51 - 51) -- %230[0:+24]
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]
    cubemapTexture(96 - 96) -- %327[0:+32]
    brdfLUT(97 - 97) -- %328[0:+32]
    albedoTexture(98 - 98) -- %329[0:+32]
    normalTexture(99 - 99) -- %330[0:+32]
    roughnessTexture(100 - 100) -- %331[0:+32]
    emissiveTexture(101 - 101) -- %332[0:+32]
    shadowmapTexture0(102 - 102) -- %333[0:+32]
    shadowmapTexture1(103 - 103) -- %334[0:+32]
    shadowmapTexture2(104 - 104) -- %335[0:+32]
    shadowmapTexture3(105 - 105) -- %336[0:+32]
    samplerWrapLinear(107 - 107) -- %337[0:+16]
    samplerShadowCompare(109 - 109) -- %338[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %229 in    arg: temp(0) * struct (VS_INPUT) {3/fp32, 3/fp32, 3/fp32, 2/fp32} - 'input'
        'input.position' - implicit0
        'input.normal' - implicit0
        'input.tangent' - texcoord0
        'input.uv' - texcoord1
      %232 out   arg: temp(0) * struct (VS_OUTPUT) {4/fp32, 2/fp32, 3/fp32, 3/fp32, 3/fp32, 4/fp32} - 'main'
        'main.position' - position 0 (signed)
        'main.uv' - texcoord 0 (signed)
        'main.normal' - texcoord 1 (signed)
        'main.tangent' - texcoord 2 (signed)
        'main.bitangent' - texcoord 3 (signed)
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %230[0:+24]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %6574 roconstant(0) * structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major GETELEMPTR %230, int32{0}, int32{0}
        %342 1/int32 LD %321
        %7047 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major LD %6574
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %7047
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %381 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{0}
        %382 3/fp32 LD %381
        %30189 1/fp32 MUL %366, %382
        %30452 1/fp32 SHUF %382.y
        %30192 1/fp32 MUL %370, %30452
        %30193 1/fp32 ADD %30189, %30192
        %30453 1/fp32 SHUF %382.z
        %30196 1/fp32 MUL %374, %30453
        %30197 1/fp32 ADD %30193, %30196
        %30200 1/fp32 MUL %378, fp32{1.0}
        %30201 1/fp32 ADD %30197, %30200
        %30454 1/fp32 SHUF %366.y
        %30204 1/fp32 MUL %30454, %382
        %30455 1/fp32 SHUF %370.y
        %30456 1/fp32 SHUF %382.y
        %30207 1/fp32 MUL %30455, %30452
        %30208 1/fp32 ADD %30204, %30207
        %30457 1/fp32 SHUF %374.y
        %30458 1/fp32 SHUF %382.z
        %30211 1/fp32 MUL %30457, %30453
        %30212 1/fp32 ADD %30208, %30211
        %30459 1/fp32 SHUF %378.y
        %30215 1/fp32 MUL %30459, fp32{1.0}
        %30216 1/fp32 ADD %30212, %30215
        %30460 1/fp32 SHUF %366.z
        %30219 1/fp32 MUL %30460, %382
        %30461 1/fp32 SHUF %370.z
        %30462 1/fp32 SHUF %382.y
        %30222 1/fp32 MUL %30461, %30452
        %30223 1/fp32 ADD %30219, %30222
        %30463 1/fp32 SHUF %374.z
        %30464 1/fp32 SHUF %382.z
        %30226 1/fp32 MUL %30463, %30453
        %30227 1/fp32 ADD %30223, %30226
        %30465 1/fp32 SHUF %378.z
        %30230 1/fp32 MUL %30465, fp32{1.0}
        %30231 1/fp32 ADD %30227, %30230
        %30466 1/fp32 SHUF %366.w
        %30234 1/fp32 MUL %30466, %382
        %30467 1/fp32 SHUF %370.w
        %30468 1/fp32 SHUF %382.y
        %30237 1/fp32 MUL %30467, %30452
        %30238 1/fp32 ADD %30234, %30237
        %30469 1/fp32 SHUF %374.w
        %30470 1/fp32 SHUF %382.z
        %30241 1/fp32 MUL %30469, %30453
        %30242 1/fp32 ADD %30238, %30241
        %30471 1/fp32 SHUF %378.w
        %30245 1/fp32 MUL %30471, fp32{1.0}
        %30246 1/fp32 ADD %30242, %30245
        %7094 4/fp32 SHUF %30201.x---,  %30216.-x--,  %30231.--x-,  %30246.---x
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30249 1/fp32 MUL %7099, %30201
        %30252 1/fp32 MUL %7101, %30216
        %30253 1/fp32 ADD %30249, %30252
        %30256 1/fp32 MUL %7103, %30231
        %30257 1/fp32 ADD %30253, %30256
        %30260 1/fp32 MUL %7105, %30246
        %30261 1/fp32 ADD %30257, %30260
        %30472 1/fp32 SHUF %7099.y
        %30264 1/fp32 MUL %30472, %30201
        %30473 1/fp32 SHUF %7101.y
        %30267 1/fp32 MUL %30473, %30216
        %30268 1/fp32 ADD %30264, %30267
        %30474 1/fp32 SHUF %7103.y
        %30271 1/fp32 MUL %30474, %30231
        %30272 1/fp32 ADD %30268, %30271
        %30475 1/fp32 SHUF %7105.y
        %30275 1/fp32 MUL %30475, %30246
        %30276 1/fp32 ADD %30272, %30275
        %30476 1/fp32 SHUF %7099.z
        %30279 1/fp32 MUL %30476, %30201
        %30477 1/fp32 SHUF %7101.z
        %30282 1/fp32 MUL %30477, %30216
        %30283 1/fp32 ADD %30279, %30282
        %30478 1/fp32 SHUF %7103.z
        %30286 1/fp32 MUL %30478, %30231
        %30287 1/fp32 ADD %30283, %30286
        %30479 1/fp32 SHUF %7105.z
        %30290 1/fp32 MUL %30479, %30246
        %30291 1/fp32 ADD %30287, %30290
        %30480 1/fp32 SHUF %7099.w
        %30294 1/fp32 MUL %30480, %30201
        %30481 1/fp32 SHUF %7101.w
        %30297 1/fp32 MUL %30481, %30216
        %30298 1/fp32 ADD %30294, %30297
        %30482 1/fp32 SHUF %7103.w
        %30301 1/fp32 MUL %30482, %30231
        %30302 1/fp32 ADD %30298, %30301
        %30483 1/fp32 SHUF %7105.w
        %30305 1/fp32 MUL %30483, %30246
        %30306 1/fp32 ADD %30302, %30305
        %7138 4/fp32 SHUF %30261.x---,  %30276.-x--,  %30291.--x-,  %30306.---x
        %541 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{1}
        %542 3/fp32 LD %541
        %30309 1/fp32 MUL %366, %542
        %30311 1/fp32 SHUF %542.y
        %30312 1/fp32 MUL %370, %30311
        %30313 1/fp32 ADD %30309, %30312
        %30315 1/fp32 SHUF %542.z
        %30316 1/fp32 MUL %374, %30315
        %30317 1/fp32 ADD %30313, %30316
        %30484 1/fp32 SHUF %366.y
        %30320 1/fp32 MUL %30454, %542
        %30485 1/fp32 SHUF %370.y
        %30322 1/fp32 SHUF %542.y
        %30323 1/fp32 MUL %30455, %30311
        %30324 1/fp32 ADD %30320, %30323
        %30486 1/fp32 SHUF %374.y
        %30326 1/fp32 SHUF %542.z
        %30327 1/fp32 MUL %30457, %30315
        %30328 1/fp32 ADD %30324, %30327
        %30487 1/fp32 SHUF %366.z
        %30331 1/fp32 MUL %30460, %542
        %30488 1/fp32 SHUF %370.z
        %30333 1/fp32 SHUF %542.y
        %30334 1/fp32 MUL %30461, %30311
        %30335 1/fp32 ADD %30331, %30334
        %30489 1/fp32 SHUF %374.z
        %30337 1/fp32 SHUF %542.z
        %30338 1/fp32 MUL %30463, %30315
        %30339 1/fp32 ADD %30335, %30338
        %30342 1/fp32 MUL %30317, %30317
        %30345 1/fp32 MUL %30328, %30328
        %30346 1/fp32 ADD %30342, %30345
        %30349 1/fp32 MUL %30339, %30339
        %30350 1/fp32 ADD %30346, %30349
        %30184 1/fp32 RSQ %30350
        %30395 1/fp32 MUL %30317, %30184
        %30398 1/fp32 MUL %30328, %30184
        %30401 1/fp32 MUL %30339, %30184
        %30404 3/fp32 SHUF %30395.x--,  %30398.-x-,  %30401.--x
        %590 temp(0) * 3/fp32 GETELEMPTR %229, int32{0}, int32{2}
        %591 3/fp32 LD %590
        %30353 1/fp32 MUL %366, %591
        %30355 1/fp32 SHUF %591.y
        %30356 1/fp32 MUL %370, %30355
        %30357 1/fp32 ADD %30353, %30356
        %30359 1/fp32 SHUF %591.z
        %30360 1/fp32 MUL %374, %30359
        %30361 1/fp32 ADD %30357, %30360
        %30490 1/fp32 SHUF %366.y
        %30364 1/fp32 MUL %30454, %591
        %30491 1/fp32 SHUF %370.y
        %30366 1/fp32 SHUF %591.y
        %30367 1/fp32 MUL %30455, %30355
        %30368 1/fp32 ADD %30364, %30367
        %30492 1/fp32 SHUF %374.y
        %30370 1/fp32 SHUF %591.z
        %30371 1/fp32 MUL %30457, %30359
        %30372 1/fp32 ADD %30368, %30371
        %30493 1/fp32 SHUF %366.z
        %30375 1/fp32 MUL %30460, %591
        %30494 1/fp32 SHUF %370.z
        %30377 1/fp32 SHUF %591.y
        %30378 1/fp32 MUL %30461, %30355
        %30379 1/fp32 ADD %30375, %30378
        %30495 1/fp32 SHUF %374.z
        %30381 1/fp32 SHUF %591.z
        %30382 1/fp32 MUL %30463, %30359
        %30383 1/fp32 ADD %30379, %30382
        %30386 1/fp32 MUL %30361, %30361
        %30389 1/fp32 MUL %30372, %30372
        %30390 1/fp32 ADD %30386, %30389
        %30393 1/fp32 MUL %30383, %30383
        %30394 1/fp32 ADD %30390, %30393
        %30180 1/fp32 RSQ %30394
        %30405 1/fp32 MUL %30361, %30180
        %30408 1/fp32 MUL %30372, %30180
        %30411 1/fp32 MUL %30383, %30180
        %30414 3/fp32 SHUF %30405.x--,  %30408.-x-,  %30411.--x
        %30496 1/fp32 SHUF %542.y
        %30497 1/fp32 SHUF %591.z
        %30415 1/fp32 MUL fast %30311, %30359
        %30498 1/fp32 SHUF %542.z
        %30418 1/fp32 MUL fast %30315, %591
        %30499 1/fp32 SHUF %591.y
        %30421 1/fp32 MUL fast %542, %30355
        %30500 1/fp32 SHUF %542.z
        %30501 1/fp32 SHUF %591.y
        %30425 1/fp32 MUL fast %30315, %30355
        %30502 1/fp32 SHUF %591.z
        %30428 1/fp32 MUL fast %542, %30359
        %30503 1/fp32 SHUF %542.y
        %30431 1/fp32 MUL fast %30311, %591
        %30435 1/fp32 NEG fast %30425
        %30437 1/fp32 NEG fast %30428
        %30439 1/fp32 NEG fast %30431
        %30442 1/fp32 ADD fast %30415, %30435
        %30445 1/fp32 ADD fast %30418, %30437
        %30448 1/fp32 ADD fast %30421, %30439
        %30451 3/fp32 SHUF %30442.x--,  %30445.-x-,  %30448.--x
        %634 temp(0) * 2/fp32 GETELEMPTR %229, int32{0}, int32{3}
        %636 2/fp32 LD %634
        %29982 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{0}
        %29984 void ST %7138, %29982
        %29986 temp(0) * 2/fp32 GETELEMPTR %232, int32{0}, int32{1}
        %29988 void ST %636, %29986
        %29990 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{2}
        %29992 void ST %30404, %29990
        %29994 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{3}
        %29996 void ST %30414, %29994
        %29998 temp(0) * 3/fp32 GETELEMPTR %232, int32{0}, int32{4}
        %30000 void ST %30451, %29998
        %30002 temp(0) * 4/fp32 GETELEMPTR %232, int32{0}, int32{5}
        %30004 void ST %7094, %30002
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %7299 1/int32 AND %7298, int32{255}
        %7302 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7303 1/int32 AND %7297, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7434 1/int32 SHL %7299, int32{12}
        %7435 1/int32 OR %7434, %7303
        %7436 void intr.s_sendmsg %7435, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %7299
        %7440 1/int32 ADD int32{64}, %7439
        %7441 1/int64 CONV %7440
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %7444 1/int32 CMOV.ne (%7443, int32{0}) int32{1}, int32{0}
        %1475 1/int1 CMP.ne %7444, int32{0}
        %1480 void BRC %1475[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %7303
        %7459 1/int32 ADD int32{64}, %7458
        %7460 1/int64 CONV %7459
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %7463 1/int32 CMOV.ne (%7462, int32{0}) int32{1}, int32{0}
        %1577 1/int1 CMP.ne %7463, int32{0}
        %1582 void BRC %1577[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %28213 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28214 1/int1 CMP.ne %28213, int32{0}
        %28215 void BRC %28214
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %28220 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28221 1/int1 CMP.ne %28220, int32{0}
        %28222 void BRC %28221
        --> block:28253, block:28225

      block:28225 - if-predicate
        <-- block:28216
        %28229 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28230 1/int1 CMP.ne %28229, int32{0}
        %28231 void BRC %28230
        --> block:28253, block:28232

      block:28232 - if-predicate
        <-- block:28225
        %28236 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28237 1/int1 CMP.ne %28236, int32{0}
        %28238 void BRC %28237
        --> block:28223, block:28253

      block:28223 - dummy-edge
        <-- block:28232
        %28224 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216, block:28225, block:28232, block:28223
        %28254 1/int32 PHI int32{4}, int32{3}, int32{2}, int32{0}, int32{1}
        %28268 1/int32 CMOV.ne (int32{0}, %27913) int32{1}, int32{0}
        %28269 1/int1 CMP.ne %28268, int32{0}
        %28270 void BRC %28269
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %28276 1/int32 AND %27913, int32{-2097153}
        %28280 1/int32 CMOV.eq (int32{0}, %28254) int32{1}, int32{0}
        %28281 1/int32 CMOV.ne (%28280, int32{0}) int32{2097152}, int32{0}
        %28282 1/int32 OR %28276, %28281
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %28282, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %28314 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28315 1/int1 CMP.ne %28314, int32{0}
        %28316 void BRC %28315
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %28318 1/int32 AND %27917, int32{-2097153}
        %28322 1/int32 CMOV.eq (int32{1}, %28254) int32{1}, int32{0}
        %28323 1/int32 CMOV.ne (%28322, int32{0}) int32{2097152}, int32{0}
        %28324 1/int32 OR %28318, %28323
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %28324, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %28356 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28357 1/int1 CMP.ne %28356, int32{0}
        %28358 void BRC %28357
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %28360 1/int32 AND %27921, int32{-2097153}
        %28364 1/int32 CMOV.eq (int32{2}, %28254) int32{1}, int32{0}
        %28365 1/int32 CMOV.ne (%28364, int32{0}) int32{2097152}, int32{0}
        %28366 1/int32 OR %28360, %28365
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %28366, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %28398 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28399 1/int1 CMP.ne %28398, int32{0}
        %28400 void BRC %28399
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %28402 1/int32 AND %27925, int32{-2097153}
        %28406 1/int32 CMOV.eq (int32{3}, %28254) int32{1}, int32{0}
        %28407 1/int32 CMOV.ne (%28406, int32{0}) int32{2097152}, int32{0}
        %28408 1/int32 OR %28402, %28407
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %28408, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28440 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28441 1/int1 CMP.ne %28213, int32{0}
        %28442 void BRC %28214
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %28444 1/int32 AND %27929, int32{-2097153}
        %28448 1/int32 CMOV.eq (int32{4}, %28254) int32{1}, int32{0}
        %28449 1/int32 CMOV.ne (%28448, int32{0}) int32{2097152}, int32{0}
        %28450 1/int32 OR %28444, %28449
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %28450, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %28250 1/int32 CMOV.ne (int32{0}, %27933) int32{1}, int32{0}
        %28251 1/int1 CMP.ne %28250, int32{0}
        %28252 void BRC %28251
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %28534 1/int32 CMOV.ne (int32{0}, %27937) int32{1}, int32{0}
        %28535 1/int1 CMP.ne %28534, int32{0}
        %28536 void BRC %28535
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %28569 1/int32 CMOV.ne (int32{0}, %27941) int32{1}, int32{0}
        %28570 1/int1 CMP.ne %28569, int32{0}
        %28571 void BRC %28570
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %28604 1/int32 CMOV.ne (int32{0}, %27945) int32{1}, int32{0}
        %28605 1/int1 CMP.ne %28604, int32{0}
        %28606 void BRC %28605
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %28639 1/int32 CMOV.ne (int32{0}, %27949) int32{1}, int32{0}
        %28640 1/int1 CMP.ne %28639, int32{0}
        %28641 void BRC %28640
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %28674 1/int32 CMOV.ne (int32{0}, %27953) int32{1}, int32{0}
        %28675 1/int1 CMP.ne %28674, int32{0}
        %28676 void BRC %28675
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %28709 1/int32 CMOV.ne (int32{0}, %27957) int32{1}, int32{0}
        %28710 1/int1 CMP.ne %28709, int32{0}
        %28711 void BRC %28710
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %28744 1/int32 CMOV.ne (int32{0}, %27961) int32{1}, int32{0}
        %28745 1/int1 CMP.ne %28744, int32{0}
        %28746 void BRC %28745
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %28779 1/int32 CMOV.ne (int32{0}, %27965) int32{1}, int32{0}
        %28780 1/int1 CMP.ne %28779, int32{0}
        %28781 void BRC %28780
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %28814 1/int32 CMOV.ne (int32{0}, %27969) int32{1}, int32{0}
        %28815 1/int1 CMP.ne %28814, int32{0}
        %28816 void BRC %28815
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %28849 1/int32 CMOV.ne (int32{0}, %27973) int32{1}, int32{0}
        %28850 1/int1 CMP.ne %28849, int32{0}
        %28851 void BRC %28850
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %28884 1/int32 CMOV.ne (int32{0}, %27977) int32{1}, int32{0}
        %28885 1/int1 CMP.ne %28884, int32{0}
        %28886 void BRC %28885
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %28919 1/int32 CMOV.ne (int32{0}, %27981) int32{1}, int32{0}
        %28920 1/int1 CMP.ne %28919, int32{0}
        %28921 void BRC %28920
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %28954 1/int32 CMOV.ne (int32{0}, %27985) int32{1}, int32{0}
        %28955 1/int1 CMP.ne %28954, int32{0}
        %28956 void BRC %28955
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %28989 1/int32 CMOV.ne (int32{0}, %27989) int32{1}, int32{0}
        %28990 1/int1 CMP.ne %28989, int32{0}
        %28991 void BRC %28990
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %29024 1/int32 CMOV.ne (int32{0}, %27993) int32{1}, int32{0}
        %29025 1/int1 CMP.ne %29024, int32{0}
        %29026 void BRC %29025
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %29059 1/int32 CMOV.ne (int32{0}, %27997) int32{1}, int32{0}
        %29060 1/int1 CMP.ne %29059, int32{0}
        %29061 void BRC %29060
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %29094 1/int32 CMOV.ne (int32{0}, %28001) int32{1}, int32{0}
        %29095 1/int1 CMP.ne %29094, int32{0}
        %29096 void BRC %29095
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %29129 1/int32 CMOV.ne (int32{0}, %28005) int32{1}, int32{0}
        %29130 1/int1 CMP.ne %29129, int32{0}
        %29131 void BRC %29130
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %29164 1/int32 CMOV.ne (int32{0}, %28009) int32{1}, int32{0}
        %29165 1/int1 CMP.ne %29164, int32{0}
        %29166 void BRC %29165
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %29199 1/int32 CMOV.ne (int32{0}, %28013) int32{1}, int32{0}
        %29200 1/int1 CMP.ne %29199, int32{0}
        %29201 void BRC %29200
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %29234 1/int32 CMOV.ne (int32{0}, %28017) int32{1}, int32{0}
        %29235 1/int1 CMP.ne %29234, int32{0}
        %29236 void BRC %29235
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %29269 1/int32 CMOV.ne (int32{0}, %28021) int32{1}, int32{0}
        %29270 1/int1 CMP.ne %29269, int32{0}
        %29271 void BRC %29270
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %29304 1/int32 CMOV.ne (int32{0}, %28025) int32{1}, int32{0}
        %29305 1/int1 CMP.ne %29304, int32{0}
        %29306 void BRC %29305
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %29339 1/int32 CMOV.ne (int32{0}, %28029) int32{1}, int32{0}
        %29340 1/int1 CMP.ne %29339, int32{0}
        %29341 void BRC %29340
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %29374 1/int32 CMOV.ne (int32{0}, %28033) int32{1}, int32{0}
        %29375 1/int1 CMP.ne %29374, int32{0}
        %29376 void BRC %29375
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %29409 1/int32 CMOV.ne (int32{0}, %28037) int32{1}, int32{0}
        %29410 1/int1 CMP.ne %29409, int32{0}
        %29411 void BRC %29410
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %29444 1/int32 CMOV.ne (int32{0}, %28041) int32{1}, int32{0}
        %29445 1/int1 CMP.ne %29444, int32{0}
        %29446 void BRC %29445
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %29479 1/int32 CMOV.ne (int32{0}, %28045) int32{1}, int32{0}
        %29480 1/int1 CMP.ne %29479, int32{0}
        %29481 void BRC %29480
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %29514 1/int32 CMOV.ne (int32{0}, %28049) int32{1}, int32{0}
        %29515 1/int1 CMP.ne %29514, int32{0}
        %29516 void BRC %29515
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %29549 1/int32 CMOV.ne (int32{0}, %28053) int32{1}, int32{0}
        %29550 1/int1 CMP.ne %29549, int32{0}
        %29551 void BRC %29550
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %29584 1/int32 CMOV.ne (int32{0}, %28057) int32{1}, int32{0}
        %29585 1/int1 CMP.ne %29584, int32{0}
        %29586 void BRC %29585
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 186/815: validate graph
    validate graph (0045C2BE)
>> pass 187/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 188/815: validate graph
    validate graph (0045C2BE)
>> pass 189/815: lower srt
    lower srt (09AD683D)
>> pass 190/815: validate graph
    validate graph (0045C2BE)
>> pass 191/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 192/815: remove dead code
    remove dead code (B7E6F507)
>> pass 193/815: validate graph
    validate graph (0045C2BE)
>> pass 194/815: loop analysis
    loop analysis (598E85BD)
>> pass 195/815: structural analysis
    structural analysis (A71DE301)
>> pass 196/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 197/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 198/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 199/815: validate graph
    validate graph (0045C2BE)
>> pass 200/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 201/815: validate graph
    validate graph (0045C2BE)
>> pass 202/815: break critical edges
    break critical edges (D716EAB4)
>> pass 203/815: validate graph
    validate graph (0045C2BE)
>> pass 204/815: loop analysis
    loop analysis (598E85BD)
>> pass 205/815: normalize loops
    normalize loops (1918C45F)
>> pass 206/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 207/815: validate graph
    validate graph (0045C2BE)
>> pass 208/815: loop analysis
    loop analysis (598E85BD)
>> pass 209/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 210/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 211/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 212/815: unswitch loops
    unswitch loops (503811B6)
>> pass 213/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 214/815: validate graph
    validate graph (0045C2BE)
>> pass 215/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 216/815: validate graph
    validate graph (0045C2BE)
>> pass 217/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 218/815: remove dead code
    remove dead code (B7E6F507)
>> pass 219/815: validate graph
    validate graph (0045C2BE)
>> pass 220/815: loop analysis
    loop analysis (598E85BD)
>> pass 221/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 222/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 223/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 224/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 225/815: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 226/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 227/815: validate graph
    validate graph (0045C2BE)
>> pass 228/815: loop analysis
    loop analysis (598E85BD)
>> pass 229/815: unwind loops
    unwind loops (CE7F8B5B)
>> pass 230/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 231/815: validate graph
    validate graph (0045C2BE)
>> pass 232/815: loop analysis
    loop analysis (598E85BD)
>> pass 233/815: rotate loops
    rotate loops (B076855B)
>> pass 234/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 235/815: validate graph
    validate graph (0045C2BE)
>> pass 236/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 237/815: validate graph
    validate graph (0045C2BE)
>> pass 238/815: loop analysis
    loop analysis (598E85BD)
>> pass 239/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 240/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 241/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 242/815: optimize kcacheable structured buffer loads
    optimize kcacheable structured buffer loads (C2B823B3)
>> pass 243/815: validate graph
    validate graph (0045C2BE)
>> pass 244/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 245/815: remove dead code
    remove dead code (B7E6F507)
>> pass 246/815: validate graph
    validate graph (0045C2BE)
>> pass 247/815: legalize entry args
    legalize entry args (F207B1C1)
>> pass 248/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 249/815: validate graph
    validate graph (0045C2BE)
>> pass 250/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 251/815: validate graph
    validate graph (0045C2BE)
>> pass 252/815: loop analysis
    loop analysis (598E85BD)
>> pass 253/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 254/815: validate graph
    validate graph (0045C2BE)
>> pass 255/815: cross stage vs/ps entry argument scalarization
    cross stage vs/ps entry argument scalarization (F174A251)
>> pass 256/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 257/815: validate graph
    validate graph (0045C2BE)
>> pass 258/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 259/815: validate graph
    validate graph (0045C2BE)
>> pass 260/815: loop analysis
    loop analysis (598E85BD)
>> pass 261/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 262/815: validate graph
    validate graph (0045C2BE)
>> pass 263/815: constant propagation
    constant propagation (5CBB3303)
>> pass 264/815: validate graph
    validate graph (0045C2BE)
>> pass 265/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 266/815: validate graph
    validate graph (0045C2BE)
>> pass 267/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 268/815: remove dead code
    remove dead code (B7E6F507)
>> pass 269/815: validate graph
    validate graph (0045C2BE)
>> pass 270/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default
    %156 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
      'cubemapTexture' - texObj:t0_dead
    %157 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
      'brdfLUT' - texObj:t1_dead
    %158 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
      'albedoTexture' - texObj:t2_dead
    %159 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
      'normalTexture' - texObj:t3_dead
    %160 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
      'roughnessTexture' - texObj:t4_dead
    %161 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
      'emissiveTexture' - texObj:t5_dead
    %162 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
      'shadowmapTexture0' - texObj:t6_dead
    %163 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
      'shadowmapTexture1' - texObj:t7_dead
    %164 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
      'shadowmapTexture2' - texObj:t8_dead
    %165 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
      'shadowmapTexture3' - texObj:t9_dead
    %166 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
      'samplerWrapLinear' - smpUnit:0_dead
    %167 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
      'samplerShadowCompare' - smpUnit:1_dead

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 271/815: validate graph
    validate graph (0045C2BE)
>> pass 272/815: break critical edges
    break critical edges (D716EAB4)
>> pass 273/815: validate graph
    validate graph (0045C2BE)
>> pass 274/815: loop analysis
    loop analysis (598E85BD)
>> pass 275/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 276/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 277/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 278/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 279/815: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 280/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 281/815: validate graph
    validate graph (0045C2BE)
>> pass 282/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 283/815: validate graph
    validate graph (0045C2BE)
>> pass 284/815: cross stage vs/ps optimization
    cross stage vs/ps optimization (057C8348)
>> pass 256/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 257/815: validate graph
    validate graph (0045C2BE)
>> pass 258/815: split aggregate into scalars
    split aggregate into scalars (02935789)
>> pass 259/815: validate graph
    validate graph (0045C2BE)
>> pass 260/815: loop analysis
    loop analysis (598E85BD)
>> pass 261/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 262/815: validate graph
    validate graph (0045C2BE)
>> pass 263/815: constant propagation
    constant propagation (5CBB3303)
>> pass 264/815: validate graph
    validate graph (0045C2BE)
>> pass 265/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 266/815: validate graph
    validate graph (0045C2BE)
>> pass 267/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 268/815: remove dead code
    remove dead code (B7E6F507)
>> pass 269/815: validate graph
    validate graph (0045C2BE)
>> pass 270/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default
    %327 const: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
      'cubemapTexture' - texObj:t0_dead
    %328 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
      'brdfLUT' - texObj:t1_dead
    %329 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
      'albedoTexture' - texObj:t2_dead
    %330 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
      'normalTexture' - texObj:t3_dead
    %331 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
      'roughnessTexture' - texObj:t4_dead
    %332 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
      'emissiveTexture' - texObj:t5_dead
    %333 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
      'shadowmapTexture0' - texObj:t6_dead
    %334 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
      'shadowmapTexture1' - texObj:t7_dead
    %335 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
      'shadowmapTexture2' - texObj:t8_dead
    %336 const: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
      'shadowmapTexture3' - texObj:t9_dead
    %337 const: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
      'samplerWrapLinear' - smpUnit:0_dead
    %338 const: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
      'samplerShadowCompare' - smpUnit:1_dead

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]
    cubemapTexture(96 - 96) -- %327[0:+32]
    brdfLUT(97 - 97) -- %328[0:+32]
    albedoTexture(98 - 98) -- %329[0:+32]
    normalTexture(99 - 99) -- %330[0:+32]
    roughnessTexture(100 - 100) -- %331[0:+32]
    emissiveTexture(101 - 101) -- %332[0:+32]
    shadowmapTexture0(102 - 102) -- %333[0:+32]
    shadowmapTexture1(103 - 103) -- %334[0:+32]
    shadowmapTexture2(104 - 104) -- %335[0:+32]
    shadowmapTexture3(105 - 105) -- %336[0:+32]
    samplerWrapLinear(107 - 107) -- %337[0:+16]
    samplerShadowCompare(109 - 109) -- %338[0:+16]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %30611 in    arg: temp(0) * 3/fp32 - 'input.position'
        'input.position' - implicit0
      %30615 in    arg: temp(0) * 3/fp32 - 'input.normal'
        'input.normal' - implicit0
      %30619 in    arg: temp(0) * 3/fp32 - 'input.tangent'
        'input.tangent' - texcoord0
      %30623 in    arg: temp(0) * 2/fp32 - 'input.uv'
        'input.uv' - texcoord1
      %30628 out   arg: temp(0) * 4/fp32 - 'main.position'
        'main.position' - position 0 (signed)
      %30663 out   arg: temp(0) * 1/fp32 - 'main.uv'
        'main.uv' - texcoord 0 (signed)
      %30664 out   arg: temp(0) * 1/fp32 - 'main.uv'
        'main.uv' - texcoord 0 (signed)
      %30671 out   arg: temp(0) * 1/fp32 - 'main.normal'
        'main.normal' - texcoord 1 (signed)
      %30672 out   arg: temp(0) * 1/fp32 - 'main.normal'
        'main.normal' - texcoord 1 (signed)
      %30673 out   arg: temp(0) * 1/fp32 - 'main.normal'
        'main.normal' - texcoord 1 (signed)
      %30682 out   arg: temp(0) * 1/fp32 - 'main.tangent'
        'main.tangent' - texcoord 2 (signed)
      %30683 out   arg: temp(0) * 1/fp32 - 'main.tangent'
        'main.tangent' - texcoord 2 (signed)
      %30684 out   arg: temp(0) * 1/fp32 - 'main.tangent'
        'main.tangent' - texcoord 2 (signed)
      %30693 out   arg: temp(0) * 1/fp32 - 'main.bitangent'
        'main.bitangent' - texcoord 3 (signed)
      %30694 out   arg: temp(0) * 1/fp32 - 'main.bitangent'
        'main.bitangent' - texcoord 3 (signed)
      %30695 out   arg: temp(0) * 1/fp32 - 'main.bitangent'
        'main.bitangent' - texcoord 3 (signed)
      %30704 out   arg: temp(0) * 1/fp32 - 'main.worldPos'
        'main.worldPos' - texcoord 4 (signed)
      %30705 out   arg: temp(0) * 1/fp32 - 'main.worldPos'
        'main.worldPos' - texcoord 4 (signed)
      %30706 out   arg: temp(0) * 1/fp32 - 'main.worldPos'
        'main.worldPos' - texcoord 4 (signed)
      %30707 out   arg: temp(0) * 1/fp32 - 'main.worldPos'
        'main.worldPos' - texcoord 4 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %30624 2/fp32 LD %30623
        %30620 3/fp32 LD %30619
        %30616 3/fp32 LD %30615
        %30612 3/fp32 LD %30611
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16]
        %342 1/int32 LD %321
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30506
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %30189 1/fp32 MUL %366, %30612
        %30452 1/fp32 SHUF %30612.y
        %30192 1/fp32 MUL %370, %30452
        %30193 1/fp32 ADD %30189, %30192
        %30453 1/fp32 SHUF %30612.z
        %30196 1/fp32 MUL %374, %30453
        %30197 1/fp32 ADD %30193, %30196
        %30200 1/fp32 MUL %378, fp32{1.0}
        %30201 1/fp32 ADD %30197, %30200
        %30454 1/fp32 SHUF %366.y
        %30204 1/fp32 MUL %30454, %30612
        %30455 1/fp32 SHUF %370.y
        %30207 1/fp32 MUL %30455, %30452
        %30208 1/fp32 ADD %30204, %30207
        %30457 1/fp32 SHUF %374.y
        %30211 1/fp32 MUL %30457, %30453
        %30212 1/fp32 ADD %30208, %30211
        %30459 1/fp32 SHUF %378.y
        %30215 1/fp32 MUL %30459, fp32{1.0}
        %30216 1/fp32 ADD %30212, %30215
        %30460 1/fp32 SHUF %366.z
        %30219 1/fp32 MUL %30460, %30612
        %30461 1/fp32 SHUF %370.z
        %30222 1/fp32 MUL %30461, %30452
        %30223 1/fp32 ADD %30219, %30222
        %30463 1/fp32 SHUF %374.z
        %30226 1/fp32 MUL %30463, %30453
        %30227 1/fp32 ADD %30223, %30226
        %30465 1/fp32 SHUF %378.z
        %30230 1/fp32 MUL %30465, fp32{1.0}
        %30231 1/fp32 ADD %30227, %30230
        %30466 1/fp32 SHUF %366.w
        %30234 1/fp32 MUL %30466, %30612
        %30467 1/fp32 SHUF %370.w
        %30237 1/fp32 MUL %30467, %30452
        %30238 1/fp32 ADD %30234, %30237
        %30469 1/fp32 SHUF %374.w
        %30241 1/fp32 MUL %30469, %30453
        %30242 1/fp32 ADD %30238, %30241
        %30471 1/fp32 SHUF %378.w
        %30245 1/fp32 MUL %30471, fp32{1.0}
        %30246 1/fp32 ADD %30242, %30245
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30249 1/fp32 MUL %7099, %30201
        %30252 1/fp32 MUL %7101, %30216
        %30253 1/fp32 ADD %30249, %30252
        %30256 1/fp32 MUL %7103, %30231
        %30257 1/fp32 ADD %30253, %30256
        %30260 1/fp32 MUL %7105, %30246
        %30261 1/fp32 ADD %30257, %30260
        %30472 1/fp32 SHUF %7099.y
        %30264 1/fp32 MUL %30472, %30201
        %30473 1/fp32 SHUF %7101.y
        %30267 1/fp32 MUL %30473, %30216
        %30268 1/fp32 ADD %30264, %30267
        %30474 1/fp32 SHUF %7103.y
        %30271 1/fp32 MUL %30474, %30231
        %30272 1/fp32 ADD %30268, %30271
        %30475 1/fp32 SHUF %7105.y
        %30275 1/fp32 MUL %30475, %30246
        %30276 1/fp32 ADD %30272, %30275
        %30476 1/fp32 SHUF %7099.z
        %30279 1/fp32 MUL %30476, %30201
        %30477 1/fp32 SHUF %7101.z
        %30282 1/fp32 MUL %30477, %30216
        %30283 1/fp32 ADD %30279, %30282
        %30478 1/fp32 SHUF %7103.z
        %30286 1/fp32 MUL %30478, %30231
        %30287 1/fp32 ADD %30283, %30286
        %30479 1/fp32 SHUF %7105.z
        %30290 1/fp32 MUL %30479, %30246
        %30291 1/fp32 ADD %30287, %30290
        %30480 1/fp32 SHUF %7099.w
        %30294 1/fp32 MUL %30480, %30201
        %30481 1/fp32 SHUF %7101.w
        %30297 1/fp32 MUL %30481, %30216
        %30298 1/fp32 ADD %30294, %30297
        %30482 1/fp32 SHUF %7103.w
        %30301 1/fp32 MUL %30482, %30231
        %30302 1/fp32 ADD %30298, %30301
        %30483 1/fp32 SHUF %7105.w
        %30305 1/fp32 MUL %30483, %30246
        %30306 1/fp32 ADD %30302, %30305
        %7138 4/fp32 SHUF %30261.x---,  %30276.-x--,  %30291.--x-,  %30306.---x
        %30309 1/fp32 MUL %366, %30616
        %30311 1/fp32 SHUF %30616.y
        %30312 1/fp32 MUL %370, %30311
        %30313 1/fp32 ADD %30309, %30312
        %30315 1/fp32 SHUF %30616.z
        %30316 1/fp32 MUL %374, %30315
        %30317 1/fp32 ADD %30313, %30316
        %30320 1/fp32 MUL %30454, %30616
        %30323 1/fp32 MUL %30455, %30311
        %30324 1/fp32 ADD %30320, %30323
        %30327 1/fp32 MUL %30457, %30315
        %30328 1/fp32 ADD %30324, %30327
        %30331 1/fp32 MUL %30460, %30616
        %30334 1/fp32 MUL %30461, %30311
        %30335 1/fp32 ADD %30331, %30334
        %30338 1/fp32 MUL %30463, %30315
        %30339 1/fp32 ADD %30335, %30338
        %30342 1/fp32 MUL %30317, %30317
        %30345 1/fp32 MUL %30328, %30328
        %30346 1/fp32 ADD %30342, %30345
        %30349 1/fp32 MUL %30339, %30339
        %30350 1/fp32 ADD %30346, %30349
        %30184 1/fp32 RSQ %30350
        %30395 1/fp32 MUL %30317, %30184
        %30398 1/fp32 MUL %30328, %30184
        %30401 1/fp32 MUL %30339, %30184
        %30353 1/fp32 MUL %366, %30620
        %30355 1/fp32 SHUF %30620.y
        %30356 1/fp32 MUL %370, %30355
        %30357 1/fp32 ADD %30353, %30356
        %30359 1/fp32 SHUF %30620.z
        %30360 1/fp32 MUL %374, %30359
        %30361 1/fp32 ADD %30357, %30360
        %30364 1/fp32 MUL %30454, %30620
        %30367 1/fp32 MUL %30455, %30355
        %30368 1/fp32 ADD %30364, %30367
        %30371 1/fp32 MUL %30457, %30359
        %30372 1/fp32 ADD %30368, %30371
        %30375 1/fp32 MUL %30460, %30620
        %30378 1/fp32 MUL %30461, %30355
        %30379 1/fp32 ADD %30375, %30378
        %30382 1/fp32 MUL %30463, %30359
        %30383 1/fp32 ADD %30379, %30382
        %30386 1/fp32 MUL %30361, %30361
        %30389 1/fp32 MUL %30372, %30372
        %30390 1/fp32 ADD %30386, %30389
        %30393 1/fp32 MUL %30383, %30383
        %30394 1/fp32 ADD %30390, %30393
        %30180 1/fp32 RSQ %30394
        %30405 1/fp32 MUL %30361, %30180
        %30408 1/fp32 MUL %30372, %30180
        %30411 1/fp32 MUL %30383, %30180
        %30415 1/fp32 MUL fast %30311, %30359
        %30418 1/fp32 MUL fast %30315, %30620
        %30421 1/fp32 MUL fast %30616, %30355
        %30425 1/fp32 MUL fast %30315, %30355
        %30428 1/fp32 MUL fast %30616, %30359
        %30431 1/fp32 MUL fast %30311, %30620
        %30435 1/fp32 NEG fast %30425
        %30437 1/fp32 NEG fast %30428
        %30439 1/fp32 NEG fast %30431
        %30442 1/fp32 ADD fast %30415, %30435
        %30445 1/fp32 ADD fast %30418, %30437
        %30448 1/fp32 ADD fast %30421, %30439
        %30631 void ST %7138, %30628
        %30668 void ST %30624, %30663
        %30669 1/fp32 SHUF %30624.y
        %30670 void ST %30669, %30664
        %30677 void ST %30395, %30671
        %30679 void ST %30398, %30672
        %30681 void ST %30401, %30673
        %30688 void ST %30405, %30682
        %30690 void ST %30408, %30683
        %30692 void ST %30411, %30684
        %30699 void ST %30442, %30693
        %30701 void ST %30445, %30694
        %30703 void ST %30448, %30695
        %30711 void ST %30201, %30704
        %30713 void ST %30216, %30705
        %30715 void ST %30231, %30706
        %30717 void ST %30246, %30707
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %7299 1/int32 AND %7298, int32{255}
        %7303 1/int32 AND %7297, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %7434 1/int32 SHL %7299, int32{12}
        %7435 1/int32 OR %7434, %7303
        %7436 void intr.s_sendmsg %7435, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %7299
        %7440 1/int32 ADD int32{64}, %7439
        %7441 1/int64 CONV %7440
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %7444 1/int32 CMOV.ne (%7443, int32{0}) int32{1}, int32{0}
        %1475 1/int1 CMP.ne %7444, int32{0}
        %1480 void BRC %1475[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %7303
        %7459 1/int32 ADD int32{64}, %7458
        %7460 1/int64 CONV %7459
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %7463 1/int32 CMOV.ne (%7462, int32{0}) int32{1}, int32{0}
        %1577 1/int1 CMP.ne %7463, int32{0}
        %1582 void BRC %1577[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %28213 1/int32 CMOV.ne (int32{0}, %27929) int32{1}, int32{0}
        %28214 1/int1 CMP.ne %28213, int32{0}
        %28215 void BRC %28214
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %28220 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28229 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28236 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %30601 1/int32 CMOV.ne (%28229, int32{0}) int32{1}, int32{0}
        %30602 1/int32 CMOV.ne (%28220, int32{0}) int32{1}, int32{0}
        %30603 1/int32 OR %30601, %30602
        %30605 1/int32 CMOV.ne (%28220, int32{0}) int32{3}, int32{2}
        %30598 1/int32 CMOV.ne (%28236, int32{0}) int32{1}, int32{0}
        %30607 1/int32 CMOV.ne (%30603, int32{0}) %30605, %30598
        %30609 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216
        %30608 1/int32 PHI int32{4}, %30607
        %28268 1/int32 CMOV.ne (int32{0}, %27913) int32{1}, int32{0}
        %28269 1/int1 CMP.ne %28268, int32{0}
        %28270 void BRC %28269
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %28276 1/int32 AND %27913, int32{-2097153}
        %28280 1/int32 CMOV.eq (int32{0}, %30608) int32{1}, int32{0}
        %28281 1/int32 CMOV.ne (%28280, int32{0}) int32{2097152}, int32{0}
        %28282 1/int32 OR %28276, %28281
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %28282, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %28314 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %28315 1/int1 CMP.ne %28314, int32{0}
        %28316 void BRC %28315
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %28318 1/int32 AND %27917, int32{-2097153}
        %28322 1/int32 CMOV.eq (int32{1}, %30608) int32{1}, int32{0}
        %28323 1/int32 CMOV.ne (%28322, int32{0}) int32{2097152}, int32{0}
        %28324 1/int32 OR %28318, %28323
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %28324, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %28356 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %28357 1/int1 CMP.ne %28356, int32{0}
        %28358 void BRC %28357
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %28360 1/int32 AND %27921, int32{-2097153}
        %28364 1/int32 CMOV.eq (int32{2}, %30608) int32{1}, int32{0}
        %28365 1/int32 CMOV.ne (%28364, int32{0}) int32{2097152}, int32{0}
        %28366 1/int32 OR %28360, %28365
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %28366, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %28398 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %28399 1/int1 CMP.ne %28398, int32{0}
        %28400 void BRC %28399
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %28402 1/int32 AND %27925, int32{-2097153}
        %28406 1/int32 CMOV.eq (int32{3}, %30608) int32{1}, int32{0}
        %28407 1/int32 CMOV.ne (%28406, int32{0}) int32{2097152}, int32{0}
        %28408 1/int32 OR %28402, %28407
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %28408, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28442 void BRC %28214
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %28444 1/int32 AND %27929, int32{-2097153}
        %28448 1/int32 CMOV.eq (int32{4}, %30608) int32{1}, int32{0}
        %28449 1/int32 CMOV.ne (%28448, int32{0}) int32{2097152}, int32{0}
        %28450 1/int32 OR %28444, %28449
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %28450, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %28250 1/int32 CMOV.ne (int32{0}, %27933) int32{1}, int32{0}
        %28251 1/int1 CMP.ne %28250, int32{0}
        %28252 void BRC %28251
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %28534 1/int32 CMOV.ne (int32{0}, %27937) int32{1}, int32{0}
        %28535 1/int1 CMP.ne %28534, int32{0}
        %28536 void BRC %28535
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %28569 1/int32 CMOV.ne (int32{0}, %27941) int32{1}, int32{0}
        %28570 1/int1 CMP.ne %28569, int32{0}
        %28571 void BRC %28570
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %28604 1/int32 CMOV.ne (int32{0}, %27945) int32{1}, int32{0}
        %28605 1/int1 CMP.ne %28604, int32{0}
        %28606 void BRC %28605
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %28639 1/int32 CMOV.ne (int32{0}, %27949) int32{1}, int32{0}
        %28640 1/int1 CMP.ne %28639, int32{0}
        %28641 void BRC %28640
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %28674 1/int32 CMOV.ne (int32{0}, %27953) int32{1}, int32{0}
        %28675 1/int1 CMP.ne %28674, int32{0}
        %28676 void BRC %28675
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %28709 1/int32 CMOV.ne (int32{0}, %27957) int32{1}, int32{0}
        %28710 1/int1 CMP.ne %28709, int32{0}
        %28711 void BRC %28710
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %28744 1/int32 CMOV.ne (int32{0}, %27961) int32{1}, int32{0}
        %28745 1/int1 CMP.ne %28744, int32{0}
        %28746 void BRC %28745
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %28779 1/int32 CMOV.ne (int32{0}, %27965) int32{1}, int32{0}
        %28780 1/int1 CMP.ne %28779, int32{0}
        %28781 void BRC %28780
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %28814 1/int32 CMOV.ne (int32{0}, %27969) int32{1}, int32{0}
        %28815 1/int1 CMP.ne %28814, int32{0}
        %28816 void BRC %28815
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %28849 1/int32 CMOV.ne (int32{0}, %27973) int32{1}, int32{0}
        %28850 1/int1 CMP.ne %28849, int32{0}
        %28851 void BRC %28850
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %28884 1/int32 CMOV.ne (int32{0}, %27977) int32{1}, int32{0}
        %28885 1/int1 CMP.ne %28884, int32{0}
        %28886 void BRC %28885
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %28919 1/int32 CMOV.ne (int32{0}, %27981) int32{1}, int32{0}
        %28920 1/int1 CMP.ne %28919, int32{0}
        %28921 void BRC %28920
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %28954 1/int32 CMOV.ne (int32{0}, %27985) int32{1}, int32{0}
        %28955 1/int1 CMP.ne %28954, int32{0}
        %28956 void BRC %28955
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %28989 1/int32 CMOV.ne (int32{0}, %27989) int32{1}, int32{0}
        %28990 1/int1 CMP.ne %28989, int32{0}
        %28991 void BRC %28990
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %29024 1/int32 CMOV.ne (int32{0}, %27993) int32{1}, int32{0}
        %29025 1/int1 CMP.ne %29024, int32{0}
        %29026 void BRC %29025
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %29059 1/int32 CMOV.ne (int32{0}, %27997) int32{1}, int32{0}
        %29060 1/int1 CMP.ne %29059, int32{0}
        %29061 void BRC %29060
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %29094 1/int32 CMOV.ne (int32{0}, %28001) int32{1}, int32{0}
        %29095 1/int1 CMP.ne %29094, int32{0}
        %29096 void BRC %29095
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %29129 1/int32 CMOV.ne (int32{0}, %28005) int32{1}, int32{0}
        %29130 1/int1 CMP.ne %29129, int32{0}
        %29131 void BRC %29130
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %29164 1/int32 CMOV.ne (int32{0}, %28009) int32{1}, int32{0}
        %29165 1/int1 CMP.ne %29164, int32{0}
        %29166 void BRC %29165
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %29199 1/int32 CMOV.ne (int32{0}, %28013) int32{1}, int32{0}
        %29200 1/int1 CMP.ne %29199, int32{0}
        %29201 void BRC %29200
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %29234 1/int32 CMOV.ne (int32{0}, %28017) int32{1}, int32{0}
        %29235 1/int1 CMP.ne %29234, int32{0}
        %29236 void BRC %29235
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %29269 1/int32 CMOV.ne (int32{0}, %28021) int32{1}, int32{0}
        %29270 1/int1 CMP.ne %29269, int32{0}
        %29271 void BRC %29270
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %29304 1/int32 CMOV.ne (int32{0}, %28025) int32{1}, int32{0}
        %29305 1/int1 CMP.ne %29304, int32{0}
        %29306 void BRC %29305
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %29339 1/int32 CMOV.ne (int32{0}, %28029) int32{1}, int32{0}
        %29340 1/int1 CMP.ne %29339, int32{0}
        %29341 void BRC %29340
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %29374 1/int32 CMOV.ne (int32{0}, %28033) int32{1}, int32{0}
        %29375 1/int1 CMP.ne %29374, int32{0}
        %29376 void BRC %29375
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %29409 1/int32 CMOV.ne (int32{0}, %28037) int32{1}, int32{0}
        %29410 1/int1 CMP.ne %29409, int32{0}
        %29411 void BRC %29410
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %29444 1/int32 CMOV.ne (int32{0}, %28041) int32{1}, int32{0}
        %29445 1/int1 CMP.ne %29444, int32{0}
        %29446 void BRC %29445
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %29479 1/int32 CMOV.ne (int32{0}, %28045) int32{1}, int32{0}
        %29480 1/int1 CMP.ne %29479, int32{0}
        %29481 void BRC %29480
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %29514 1/int32 CMOV.ne (int32{0}, %28049) int32{1}, int32{0}
        %29515 1/int1 CMP.ne %29514, int32{0}
        %29516 void BRC %29515
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %29549 1/int32 CMOV.ne (int32{0}, %28053) int32{1}, int32{0}
        %29550 1/int1 CMP.ne %29549, int32{0}
        %29551 void BRC %29550
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %29584 1/int32 CMOV.ne (int32{0}, %28057) int32{1}, int32{0}
        %29585 1/int1 CMP.ne %29584, int32{0}
        %29586 void BRC %29585
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 271/815: validate graph
    validate graph (0045C2BE)
>> pass 272/815: break critical edges
    break critical edges (D716EAB4)
>> pass 273/815: validate graph
    validate graph (0045C2BE)
>> pass 274/815: loop analysis
    loop analysis (598E85BD)
>> pass 275/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 276/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 277/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 278/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 279/815: loop invariant code motion
    loop invariant code motion (AC5136EA)
>> pass 280/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 281/815: validate graph
    validate graph (0045C2BE)
>> pass 282/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 283/815: validate graph
    validate graph (0045C2BE)
>> pass 284/815: cross stage vs/ps optimization
    cross stage vs/ps optimization (057C8348)
>> pass 285/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 286/815: validate graph
    validate graph (0045C2BE)
>> pass 287/815: lower pixel input bindings
    lower pixel input bindings (0CDB989A)
>> pass 288/815: validate graph
    validate graph (0045C2BE)
>> pass 289/815: legalize samplers
    legalize samplers (FE965585)
>> pass 290/815: validate graph
    validate graph (0045C2BE)
>> pass 291/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 292/815: validate graph
    validate graph (0045C2BE)
>> pass 293/815: loop analysis
    loop analysis (598E85BD)
>> pass 294/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 295/815: validate graph
    validate graph (0045C2BE)
>> pass 296/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 297/815: remove dead code
    remove dead code (B7E6F507)
>> pass 298/815: validate graph
    validate graph (0045C2BE)
>> pass 299/815: demote precision (fp32 -> fp16)
    demote precision (fp32 -> fp16) (061C0FF8)
>> pass 300/815: validate graph
    validate graph (0045C2BE)
>> pass 301/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 302/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 303/815: validate graph
    validate graph (0045C2BE)
>> pass 304/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 305/815: remove dead code
    remove dead code (B7E6F507)
>> pass 306/815: validate graph
    validate graph (0045C2BE)
>> pass 307/815: loop analysis
    loop analysis (598E85BD)
>> pass 308/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 309/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 310/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 311/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 312/815: simplify math expression trees
    simplify math expression trees (BB3441B4)
>> pass 313/815: validate graph
    validate graph (0045C2BE)
>> pass 314/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 315/815: validate graph
    validate graph (0045C2BE)
>> pass 316/815: break critical edges
    break critical edges (D716EAB4)
>> pass 317/815: validate graph
    validate graph (0045C2BE)
>> pass 318/815: loop analysis
    loop analysis (598E85BD)
>> pass 319/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 320/815: delete dead loops
    delete dead loops (72FEF67D)
>> pass 321/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 322/815: validate graph
    validate graph (0045C2BE)
>> pass 323/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 324/815: validate graph
    validate graph (0045C2BE)
>> pass 325/815: loop analysis
    loop analysis (598E85BD)
>> pass 326/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 327/815: validate graph
    validate graph (0045C2BE)
>> pass 328/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 329/815: validate graph
    validate graph (0045C2BE)
>> pass 330/815: loop analysis
    loop analysis (598E85BD)
>> pass 331/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 332/815: validate graph
    validate graph (0045C2BE)
>> pass 333/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 334/815: validate graph
    validate graph (0045C2BE)
>> pass 335/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 336/815: remove dead code
    remove dead code (B7E6F507)
>> pass 337/815: validate graph
    validate graph (0045C2BE)
>> pass 338/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 339/815: validate graph
    validate graph (0045C2BE)
>> pass 340/815: merge getelemptr
    merge getelemptr (D655006F)
>> pass 341/815: validate graph
    validate graph (0045C2BE)
>> pass 342/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 343/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 344/815: validate graph
    validate graph (0045C2BE)
>> pass 345/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 346/815: validate graph
    validate graph (0045C2BE)
>> pass 347/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 348/815: validate graph
    validate graph (0045C2BE)
>> pass 349/815: create literal buffer
    create literal buffer (2CA126FC)
>> pass 350/815: validate graph
    validate graph (0045C2BE)
>> pass 351/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 352/815: remove dead code
    remove dead code (B7E6F507)
>> pass 353/815: validate graph
    validate graph (0045C2BE)
>> pass 354/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 355/815: validate graph
    validate graph (0045C2BE)
>> pass 356/815: find undefined variable usage
    find undefined variable usage (74159286)
>> pass 357/815: validate graph
    validate graph (0045C2BE)
>> pass 358/815: r10scalarizer
    r10scalarizer (81A236D1)
>> pass 359/815: validate graph
    validate graph (0045C2BE)
>> pass 360/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 361/815: validate graph
    validate graph (0045C2BE)
>> pass 362/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 363/815: remove dead code
    remove dead code (B7E6F507)
>> pass 364/815: validate graph
    validate graph (0045C2BE)
>> pass 365/815: break critical edges
    break critical edges (D716EAB4)
>> pass 366/815: validate graph
    validate graph (0045C2BE)
>> pass 367/815: loop analysis
    loop analysis (598E85BD)
>> pass 368/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 369/815: scalar evolution analysis
    scalar evolution analysis (B93409FF)
>> pass 370/815: range analysis
    range analysis (11B7AAEB)
>> pass 371/815: range propagation
    range propagation (45F717C0)
>> pass 372/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 373/815: validate graph
    validate graph (0045C2BE)
>> pass 374/815: simplify for demanded bits
    simplify for demanded bits (C26737CA)
>> pass 375/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 376/815: validate graph
    validate graph (0045C2BE)
>> pass 377/815: constant propagation
    constant propagation (5CBB3303)
>> pass 378/815: validate graph
    validate graph (0045C2BE)
>> pass 379/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 380/815: validate graph
    validate graph (0045C2BE)
>> pass 381/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 382/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 383/815: validate graph
    validate graph (0045C2BE)
>> pass 384/815: loop analysis
    loop analysis (598E85BD)
>> pass 385/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 386/815: validate graph
    validate graph (0045C2BE)
>> pass 387/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 388/815: remove dead code
    remove dead code (B7E6F507)
>> pass 389/815: validate graph
    validate graph (0045C2BE)
>> pass 390/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 391/815: validate graph
    validate graph (0045C2BE)
>> pass 392/815: remove dead code
    remove dead code (B7E6F507)
>> pass 393/815: validate graph
    validate graph (0045C2BE)
>> pass 394/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 395/815: validate graph
    validate graph (0045C2BE)
>> pass 396/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      %9 out   arg: temp(0) * 4/fp32 - 'not_main'
        'not_main' - color0

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %219 void ST fp32{1.0, 0.0, 1.0, 1.0}, %9
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 397/815: validate graph
    validate graph (0045C2BE)
>> pass 398/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 399/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 400/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 401/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 402/815: integer division lowering
    integer division lowering (A47FC93A)
>> pass 403/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 404/815: validate graph
    validate graph (0045C2BE)
>> pass 405/815: loop analysis
    loop analysis (598E85BD)
>> pass 406/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 407/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 408/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 409/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 410/815: legalize values
    legalize values (3229DE24)
>> pass 411/815: validate graph
    validate graph (0045C2BE)
>> pass 412/815: automatic gradient adjust
    automatic gradient adjust (44B7C029)
>> pass 413/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 414/815: validate graph
    validate graph (0045C2BE)
>> pass 415/815: match uniforms
    match uniforms (E61EA005)
>> pass 416/815: validate graph
    validate graph (0045C2BE)
>> pass 417/815: ApplySrtSignature
    ApplySrtSignature (63836394)
>> pass 418/815: validate graph
    validate graph (0045C2BE)
>> pass 419/815: lower srt
    lower srt (09AD683D)
>> pass 420/815: validate graph
    validate graph (0045C2BE)
>> pass 421/815: loop analysis
    loop analysis (598E85BD)
>> pass 422/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 423/815: validate graph
    validate graph (0045C2BE)
>> pass 424/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 425/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 426/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 427/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 428/815: legalize diverging sharps
    legalize diverging sharps (DEA6F8ED)
>> pass 429/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 430/815: validate graph
    validate graph (0045C2BE)
>> pass 431/815: loop analysis
    loop analysis (598E85BD)
>> pass 432/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 433/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 434/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 435/815: lower primitive buffer access
    lower primitive buffer access (F17366F2)
>> pass 436/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 437/815: validate graph
    validate graph (0045C2BE)
>> pass 438/815: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 439/815: validate graph
    validate graph (0045C2BE)
>> pass 440/815: loop analysis
    loop analysis (598E85BD)
>> pass 441/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 442/815: validate graph
    validate graph (0045C2BE)
>> pass 443/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 444/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 445/815: validate graph
    validate graph (0045C2BE)
>> pass 446/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 447/815: remove dead code
    remove dead code (B7E6F507)
>> pass 448/815: validate graph
    validate graph (0045C2BE)
>> pass 449/815: constant propagation
    constant propagation (5CBB3303)
>> pass 450/815: validate graph
    validate graph (0045C2BE)
>> pass 451/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 452/815: validate graph
    validate graph (0045C2BE)
>> pass 453/815: lower export shader output
    lower export shader output (B2400657)
>> pass 454/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 455/815: validate graph
    validate graph (0045C2BE)
>> pass 456/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 457/815: remove dead code
    remove dead code (B7E6F507)
>> pass 458/815: validate graph
    validate graph (0045C2BE)
>> pass 459/815: lower sin/cos to r10 normalized sin/cos
    lower sin/cos to r10 normalized sin/cos (344A69D4)
>> pass 460/815: validate graph
    validate graph (0045C2BE)
>> pass 461/815: lower vertex input bindings
    lower vertex input bindings (AF053778)
>> pass 462/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 463/815: validate graph
    validate graph (0045C2BE)
>> pass 464/815: loop analysis
    loop analysis (598E85BD)
>> pass 465/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 466/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 467/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 468/815: lower switch
    lower switch (D1384996)
>> pass 469/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 470/815: validate graph
    validate graph (0045C2BE)
>> pass 471/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 472/815: validate graph
    validate graph (0045C2BE)
>> pass 473/815: build program properties
    build program properties (B69B900E)
>> pass 474/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 475/815: validate graph
    validate graph (0045C2BE)
>> pass 476/815: create export intrinsics
    create export intrinsics (FBA3CDD7)
>> pass 477/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 478/815: validate graph
    validate graph (0045C2BE)
>> pass 479/815: R10LowerNggVs
    R10LowerNggVs (24512580)
>> pass 480/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 481/815: validate graph
    validate graph (0045C2BE)
>> pass 482/815: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 483/815: validate graph
    validate graph (0045C2BE)
>> pass 484/815: loop analysis
    loop analysis (598E85BD)
>> pass 485/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 486/815: validate graph
    validate graph (0045C2BE)
>> pass 487/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 488/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 489/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 490/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 491/815: lower uniformity
    lower uniformity (69E21F86)
>> pass 492/815: validate graph
    validate graph (0045C2BE)
>> pass 493/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 494/815: validate graph
    validate graph (0045C2BE)
>> pass 495/815: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 496/815: validate graph
    validate graph (0045C2BE)
>> pass 497/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 498/815: validate graph
    validate graph (0045C2BE)
>> pass 499/815: constant propagation
    constant propagation (5CBB3303)
>> pass 500/815: validate graph
    validate graph (0045C2BE)
>> pass 501/815: loop analysis
    loop analysis (598E85BD)
>> pass 502/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 503/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 504/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 505/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 506/815: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 507/815: legalize intrinsics
    legalize intrinsics (F8DFB406)
>> pass 508/815: validate graph
    validate graph (0045C2BE)
>> pass 509/815: optimize frontface binding
    optimize frontface binding (B8A15AF3)
>> pass 510/815: validate graph
    validate graph (0045C2BE)
>> pass 511/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 512/815: validate graph
    validate graph (0045C2BE)
>> pass 513/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 514/815: remove dead code
    remove dead code (B7E6F507)
>> pass 515/815: validate graph
    validate graph (0045C2BE)
>> pass 516/815: layout constant buffers
    layout constant buffers (2D3268D5)
>> pass 517/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 518/815: validate graph
    validate graph (0045C2BE)
>> pass 519/815: create input usage slot request
    create input usage slot request (720114FB)
>> pass 520/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 521/815: validate graph
    validate graph (0045C2BE)
>> pass 522/815: collect symbols
    collect symbols (4F1FA86C)
>> pass 523/815: validate graph
    validate graph (0045C2BE)
>> pass 524/815: symbol cleanup
    symbol cleanup (C8E4EFB3)
>> pass 525/815: validate graph
    validate graph (0045C2BE)
>> pass 526/815: lower buffer conversion
    lower buffer conversion (987C5DD4)
>> pass 527/815: validate graph
    validate graph (0045C2BE)
>> pass 528/815: legalize types
    legalize types (6424EDB9)
>> pass 529/815: validate graph
    validate graph (0045C2BE)
>> pass 530/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      none

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30819 void intr.EXPORT int32{15360}, int32{1006648320}, %30820 1/fp32 UNDEF, %30820 1/fp32 UNDEF, int32{2031616}, int32{0} mrt0 x y z w compr
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 531/815: validate graph
    validate graph (0045C2BE)
>> pass 532/815: loop analysis
    loop analysis (598E85BD)
>> pass 533/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 534/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 535/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 536/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 537/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 538/815: validate graph
    validate graph (0045C2BE)
>> pass 539/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 540/815: remove dead code
    remove dead code (B7E6F507)
>> pass 541/815: validate graph
    validate graph (0045C2BE)
>> pass 542/815: r10 optimize discard
    r10 optimize discard (FBBC97CD)
>> pass 543/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 544/815: validate graph
    validate graph (0045C2BE)
>> pass 545/815: loop analysis
    loop analysis (598E85BD)
>> pass 546/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 547/815: delete dead loops
    delete dead loops (72FEF67D)
>> pass 548/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 549/815: validate graph
    validate graph (0045C2BE)
>> pass 550/815: loop analysis
    loop analysis (598E85BD)
>> pass 551/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 552/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 553/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 554/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 555/815: schedule inter block
    schedule inter block (DB653091)
>> pass 556/815: validate graph
    validate graph (0045C2BE)
>> pass 557/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 558/815: validate graph
    validate graph (0045C2BE)
>> pass 559/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 560/815: remove dead code
    remove dead code (B7E6F507)
>> pass 561/815: validate graph
    validate graph (0045C2BE)
>> pass 562/815: loop analysis
    loop analysis (598E85BD)
>> pass 563/815: structural analysis
    structural analysis (A71DE301)
>> pass 564/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 565/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 566/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 567/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 568/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 569/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 570/815: validate graph
    validate graph (0045C2BE)
>> pass 571/815: loop analysis
    loop analysis (598E85BD)
>> pass 572/815: structural analysis
    structural analysis (A71DE301)
>> pass 573/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 574/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 575/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 576/815: validate graph
    validate graph (0045C2BE)
>> pass 577/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 578/815: validate graph
    validate graph (0045C2BE)
>> pass 579/815: loop analysis
    loop analysis (598E85BD)
>> pass 580/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 581/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 582/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 583/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 584/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 585/815: validate graph
    validate graph (0045C2BE)
>> pass 586/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 587/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 588/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 589/815: code sinking of texture instructions into conditional blocks
    code sinking of texture instructions into conditional blocks (18CCADBE)
>> pass 590/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 591/815: validate graph
    validate graph (0045C2BE)
>> pass 592/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 593/815: validate graph
    validate graph (0045C2BE)
>> pass 594/815: loop analysis
    loop analysis (598E85BD)
>> pass 595/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 596/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 597/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 598/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 599/815: global scheduler
    global scheduler (F83F59FC)
>> pass 600/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 601/815: validate graph
    validate graph (0045C2BE)
>> pass 602/815: break critical edges
    break critical edges (D716EAB4)
>> pass 603/815: validate graph
    validate graph (0045C2BE)
>> pass 604/815: loop analysis
    loop analysis (598E85BD)
>> pass 605/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 606/815: scalar evolution analysis
    scalar evolution analysis (B93409FF)
>> pass 607/815: range analysis
    range analysis (11B7AAEB)
>> pass 608/815: range propagation
    range propagation (45F717C0)
>> pass 609/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 610/815: validate graph
    validate graph (0045C2BE)
>> pass 611/815: constant propagation
    constant propagation (5CBB3303)
>> pass 612/815: validate graph
    validate graph (0045C2BE)
>> pass 613/815: sparse conditional constant propagation
    sparse conditional constant propagation (41B5CAD4)
>> pass 614/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 615/815: validate graph
    validate graph (0045C2BE)
>> pass 616/815: loop analysis
    loop analysis (598E85BD)
>> pass 617/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 618/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 619/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 620/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 621/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 622/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 623/815: validate graph
    validate graph (0045C2BE)
>> pass 624/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 625/815: validate graph
    validate graph (0045C2BE)
>> pass 626/815: loop analysis
    loop analysis (598E85BD)
>> pass 627/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 628/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 629/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 630/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 631/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 632/815: validate graph
    validate graph (0045C2BE)
>> pass 633/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      none

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30819 void intr.EXPORT int32{15360}, int32{1006648320}, %30820 1/fp32 UNDEF, %30820 1/fp32 UNDEF, int32{2031616}, int32{0} mrt0 x y z w compr
        %173 void BR 
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 634/815: validate graph
    validate graph (0045C2BE)
>> pass 635/815: duplicate_get_elem_ptr
    duplicate_get_elem_ptr (8FE69A7F)
>> pass 636/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 637/815: validate graph
    validate graph (0045C2BE)
>> pass 638/815: legalizegetelem
    legalizegetelem (DA65C66F)
>> pass 639/815: validate graph
    validate graph (0045C2BE)
>> pass 640/815: constant propagation
    constant propagation (5CBB3303)
>> pass 641/815: validate graph
    validate graph (0045C2BE)
>> pass 642/815: legalize dwarf
    legalize dwarf (092DC1C4)
>> pass 643/815: validate graph
    validate graph (0045C2BE)
>> pass 644/815: lower cue resources
    lower cue resources (C2BA3850)
>> pass 645/815: validate graph
    validate graph (0045C2BE)
>> pass 646/815: lower bindless
    lower bindless (201F9C06)
>> pass 647/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 648/815: validate graph
    validate graph (0045C2BE)
>> pass 649/815: lower ptr_from_texture instructions
    lower ptr_from_texture instructions (0DF5FB89)
>> pass 650/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 651/815: validate graph
    validate graph (0045C2BE)
>> pass 652/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 653/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 654/815: validate graph
    validate graph (0045C2BE)
>> pass 655/815: loop analysis
    loop analysis (598E85BD)
>> pass 656/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 657/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 658/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 659/815: optimize loads and stores before lowering
    optimize loads and stores before lowering (EDB916CA)
>> pass 660/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 661/815: validate graph
    validate graph (0045C2BE)
>> pass 662/815: loop analysis
    loop analysis (598E85BD)
>> pass 663/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 664/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 665/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 666/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 667/815: R10SmartRemat
    R10SmartRemat (F8932196)
>> pass 668/815: validate graph
    validate graph (0045C2BE)
>> pass 669/815: memory checker
    memory checker (C7B1F49E)
>> pass 670/815: validate graph
    validate graph (0045C2BE)
>> pass 671/815: lower loads and stores
    lower loads and stores (402CD2A4)
>> pass 672/815: validate graph
    validate graph (0045C2BE)
>> pass 673/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 674/815: remove dead code
    remove dead code (B7E6F507)
>> pass 675/815: validate graph
    validate graph (0045C2BE)
>> pass 676/815: lower address computation
    lower address computation (1B5C9873)
>> pass 677/815: validate graph
    validate graph (0045C2BE)
>> pass 678/815: constant propagation
    constant propagation (5CBB3303)
>> pass 679/815: validate graph
    validate graph (0045C2BE)
>> pass 680/815: loop analysis
    loop analysis (598E85BD)
>> pass 681/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 682/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 683/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 684/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 685/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 686/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 687/815: validate graph
    validate graph (0045C2BE)
>> pass 688/815: loop analysis
    loop analysis (598E85BD)
>> pass 689/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 690/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 691/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 692/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 693/815: r10 scalar scalarizer
    r10 scalar scalarizer (8BB09927)
>> pass 694/815: validate graph
    validate graph (0045C2BE)
>> pass 695/815: r10 optimize discard
    r10 optimize discard (FBBC97CD)
>> pass 696/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 697/815: validate graph
    validate graph (0045C2BE)
>> pass 698/815: loop analysis
    loop analysis (598E85BD)
>> pass 699/815: structural analysis
    structural analysis (A71DE301)
>> pass 700/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 701/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 702/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 703/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 704/815: SLP vectorizer
    SLP vectorizer (638CA5BB)
>> pass 705/815: validate graph
    validate graph (0045C2BE)
>> pass 706/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 707/815: remove dead code
    remove dead code (B7E6F507)
>> pass 708/815: validate graph
    validate graph (0045C2BE)
>> pass 709/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 710/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 711/815: validate graph
    validate graph (0045C2BE)
>> pass 712/815: loop analysis
    loop analysis (598E85BD)
>> pass 713/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 714/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 715/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 716/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 717/815: instruction selection
    instruction selection (AB000BA5)
>> pass 718/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 719/815: validate graph
    validate graph (0045C2BE)
>> pass 720/815: loop analysis
    loop analysis (598E85BD)
>> pass 721/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 722/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 723/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 724/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 725/815: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 726/815: legalize intrinsics
    legalize intrinsics (F8DFB406)
>> pass 727/815: validate graph
    validate graph (0045C2BE)
>> pass 728/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 729/815: validate graph
    validate graph (0045C2BE)
>> pass 730/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 731/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 732/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 733/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 734/815: legalize values
    legalize values (3229DE24)
>> pass 735/815: validate graph
    validate graph (0045C2BE)
>> pass 736/815: constant propagation
    constant propagation (5CBB3303)
>> pass 737/815: validate graph
    validate graph (0045C2BE)
>> pass 738/815: simplify for demanded bits
    simplify for demanded bits (C26737CA)
>> pass 739/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 740/815: validate graph
    validate graph (0045C2BE)
>> pass 741/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 742/815: remove dead code
    remove dead code (B7E6F507)
>> pass 743/815: validate graph
    validate graph (0045C2BE)
>> pass 744/815: loop analysis
    loop analysis (598E85BD)
>> pass 745/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 746/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 747/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 748/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 749/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 750/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 751/815: validate graph
    validate graph (0045C2BE)
>> pass 752/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      none

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30819 void intr.EXPORT int32{15360}, int32{1006648320}, %30820 1/fp32 UNDEF, %30820 1/fp32 UNDEF, int32{2031616}, int32{0}[Uniformity(Program)] mrt0 x y z w compr
        %173 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 753/815: validate graph
    validate graph (0045C2BE)
>> pass 754/815: loop analysis
    loop analysis (598E85BD)
>> pass 755/815: fix subvector PHIs
    fix subvector PHIs (C8DE249A)
>> pass 756/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 757/815: validate graph
    validate graph (0045C2BE)
>> pass 758/815: loop analysis
    loop analysis (598E85BD)
>> pass 759/815: r10subvector
    r10subvector (7E0E5361)
>> pass 760/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 761/815: validate graph
    validate graph (0045C2BE)
>> pass 762/815: loop analysis
    loop analysis (598E85BD)
>> pass 763/815: remove isolate
    remove isolate (792AD9CA)
>> pass 764/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 765/815: validate graph
    validate graph (0045C2BE)
>> pass 766/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      none

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30819 void intr.EXPORT int32{15360}, int32{1006648320}, %30820 1/fp32 UNDEF, %30820 1/fp32 UNDEF, int32{2031616}, int32{0}[Uniformity(Program)] mrt0 x y z w compr
        %173 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 767/815: validate graph
    validate graph (0045C2BE)
>> pass 768/815: loop analysis
    loop analysis (598E85BD)
>> pass 769/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 770/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 771/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 772/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 773/815: optimize addr64
    optimize addr64 (F865A4F6)
>> pass 774/815: validate graph
    validate graph (0045C2BE)
>> pass 775/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      none

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30819 void intr.EXPORT int32{15360}, int32{1006648320}, %30820 1/fp32 UNDEF, %30820 1/fp32 UNDEF, int32{2031616}, int32{0}[Uniformity(Program)] mrt0 x y z w compr
        %173 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 776/815: validate graph
    validate graph (0045C2BE)
>> pass 777/815: force loop nesting
    force loop nesting (04B28582)
>> pass 778/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 779/815: validate graph
    validate graph (0045C2BE)
>> pass 780/815: loop analysis
    loop analysis (598E85BD)
>> pass 781/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 782/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 783/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 784/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 785/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 786/815: validate graph
    validate graph (0045C2BE)
>> pass 787/815: validate steps
    validate steps (3749DDC0)
>> pass 788/815: validate graph
    validate graph (0045C2BE)
>> pass 789/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 790/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 791/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 792/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 793/815: interblockregisters
    interblockregisters (6886C745)
>> pass 794/815: validate graph
    validate graph (0045C2BE)
>> pass 795/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 796/815: remove dead code
    remove dead code (B7E6F507)
>> pass 797/815: validate graph
    validate graph (0045C2BE)
>> pass 798/815: removeredundantwritegprs
    removeredundantwritegprs (92D51232)
>> pass 799/815: validate graph
    validate graph (0045C2BE)
>> pass 800/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_ps_prospero
--------------------------------------------------------------------------------
  %1 constant buffer: default

  %141 constant buffer: 0 name: ViewConstants
    %142 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix'
    %143 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix'
    %144 const: roconstant(0) * 4/fp32 - 'm_viewPosition'
    %145 const: roconstant(0) * 4/fp32 - 'm_lightDirection'
    %146 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar'
    %147 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar'
    %148 const: roconstant(0) * 4/fp32 - 'm_time'

  %149 constant buffer: 2 name: DrawConstants
    %150 const: roconstant(0) * 1/int32 - 'm_entityIndex'
    %151 const: roconstant(0) * 1/int32 - 'm_lodIndex'
    %152 const: roconstant(0) * 1/int32 - 'm_debugOption'
    %153 const: roconstant(0) * 1/int32 - 'm_unused'

  %154 constant buffer: 5 name: ShadowConstants
    %155 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix'

  %30798 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture'
    'cubemapTexture' - texObj:t0_dead

  %30799 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT'
    'brdfLUT' - texObj:t1_dead

  %30800 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture'
    'albedoTexture' - texObj:t2_dead

  %30801 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture'
    'normalTexture' - texObj:t3_dead

  %30802 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture'
    'roughnessTexture' - texObj:t4_dead

  %30803 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture'
    'emissiveTexture' - texObj:t5_dead

  %30804 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0'
    'shadowmapTexture0' - texObj:t6_dead

  %30805 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1'
    'shadowmapTexture1' - texObj:t7_dead

  %30806 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2'
    'shadowmapTexture2' - texObj:t8_dead

  %30807 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3'
    'shadowmapTexture3' - texObj:t9_dead

  %30808 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear'
    'samplerWrapLinear' - smpUnit:0_dead

  %30809 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare'
    'samplerShadowCompare' - smpUnit:1_dead

--------------------------------------------------------------------------------
  func:float4 not_main()
    arguments:
      none

    body:
      block:4 - entry
        <-- 
        --> block:7

      block:7
        <-- block:4
        %30819 void intr.EXPORT int32{15360}, int32{1006648320}, fp32{0.0}, fp32{0.0}, int32{2031616}, int32{0}[Uniformity(Program)] mrt0 x y z w compr
        %173 void BR [Uniformity(Lane)]
        --> block:3

      block:3 - exit
        <-- block:7
        --> 


--------------------------------------------------------------------------------

>> pass 801/815: validate graph
    validate graph (0045C2BE)
>> pass 802/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 803/815: uninline sub-routines
    uninline sub-routines (7C5E3842)
>> pass 804/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 805/815: validate graph
    validate graph (0045C2BE)
>> pass 806/815: loop analysis
    loop analysis (598E85BD)
>> pass 807/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 808/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 809/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 810/815: structural analysis
    structural analysis (A71DE301)
>> pass 811/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 812/815: R10CompileHwCode
    R10CompileHwCode (4028FCBE)

Transform List (block7):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

--------------------------------------------------------------------------------
>> assembler pass 0/46: merge blocks

--------------------------------------------------------------------------------
>> assembler pass 1/46: fix sgpr alignment

--------------------------------------------------------------------------------
>> assembler pass 2/46: optimize nsa

--------------------------------------------------------------------------------
>> assembler pass 3/46: move coalescing using interference graph

--------------------------------------------------------------------------------
>> assembler pass 4/46: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 5/46: Remove unecessary v_readfirstlane_b32 + lds_direct instructions

--------------------------------------------------------------------------------
>> assembler pass 6/46: reschedule instructions in basic block before register allocation to decrease register pressure

--------------------------------------------------------------------------------
>> assembler pass 7/46: schedule latency: reschedule instructions to hide instruction latency

--------------------------------------------------------------------------------
>> assembler pass 8/46: schedule cache thrashing: reschedule instructions to increase cache hit on loads

--------------------------------------------------------------------------------
>> assembler pass 9/46: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 10/46: lower pseudo ops

--------------------------------------------------------------------------------
>> assembler pass 11/46: optimize range moves

--------------------------------------------------------------------------------
>> assembler pass 12/46: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 13/46: basic block optimization on asm

--------------------------------------------------------------------------------
>> assembler pass 14/46: copy propagation

--------------------------------------------------------------------------------
>> assembler pass 15/46: allocate vcc

--------------------------------------------------------------------------------
>> assembler pass 16/46: assign sub-registers

--------------------------------------------------------------------------------
>> assembler pass 17/46: opsel movs optimization

--------------------------------------------------------------------------------
>> assembler pass 18/46: dpp movs optimization

--------------------------------------------------------------------------------
>> assembler pass 19/46: vop pk vectorizer

--------------------------------------------------------------------------------
>> assembler pass 20/46: allocate sub-registers

--------------------------------------------------------------------------------
>> assembler pass 21/46: optimize sop/vop encoding

--------------------------------------------------------------------------------
>> assembler pass 22/46: legalize instructions

--------------------------------------------------------------------------------
>> assembler pass 23/46: legalize pops

--------------------------------------------------------------------------------
>> assembler pass 24/46: Remove unecessary v_readfirstlane_b32 + lds_direct instructions

--------------------------------------------------------------------------------
>> assembler pass 25/46: move coalescing using interference graph

--------------------------------------------------------------------------------
>> assembler pass 26/46: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 27/46: reschedule instructions in basic block before register allocation to improve latency hiding

--------------------------------------------------------------------------------
>> assembler pass 28/46: allocate vcc

--------------------------------------------------------------------------------
>> assembler pass 29/46: allocateregisters

--------------------------------------------------------------------------------
>> assembler pass 30/46: postralowerpseudoinst

--------------------------------------------------------------------------------
>> assembler pass 31/46: copy propagation

--------------------------------------------------------------------------------
>> assembler pass 32/46: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 33/46: loop invariant code motion

--------------------------------------------------------------------------------
>> assembler pass 34/46: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 35/46: optimize sop/vop encoding

--------------------------------------------------------------------------------
>> assembler pass 36/46: schedule cache thrashing: reschedule instructions to increase cache hit on loads

--------------------------------------------------------------------------------
>> assembler pass 37/46: expand summary

--------------------------------------------------------------------------------
>> assembler pass 38/46: insert_waits

--------------------------------------------------------------------------------
>> assembler pass 39/46: finalize exports

--------------------------------------------------------------------------------
>> assembler pass 40/46: insert manual dependencies

--------------------------------------------------------------------------------
>> assembler pass 41/46: remove vcc stalls with v_sad_u32

--------------------------------------------------------------------------------
>> assembler pass 42/46: validate hw instructions

--------------------------------------------------------------------------------
>> assembler pass 43/46: resolve labels

--------------------------------------------------------------------------------
>> assembler pass 44/46: calculate register count

--------------------------------------------------------------------------------
>> assembler pass 45/46: generate_vs_info
>> pass 813/815: validate graph
    validate graph (0045C2BE)
>> pass 814/815: r10 validate hw code
    r10 validate hw code (878340BD)
>> pass 815/815: validate graph
    validate graph (0045C2BE)
>> pass 285/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 286/815: validate graph
    validate graph (0045C2BE)
>> pass 287/815: lower pixel input bindings
    lower pixel input bindings (0CDB989A)
>> pass 288/815: validate graph
    validate graph (0045C2BE)
>> pass 289/815: legalize samplers
    legalize samplers (FE965585)
>> pass 290/815: validate graph
    validate graph (0045C2BE)
>> pass 291/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 292/815: validate graph
    validate graph (0045C2BE)
>> pass 293/815: loop analysis
    loop analysis (598E85BD)
>> pass 294/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 295/815: validate graph
    validate graph (0045C2BE)
>> pass 296/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 297/815: remove dead code
    remove dead code (B7E6F507)
>> pass 298/815: validate graph
    validate graph (0045C2BE)
>> pass 299/815: demote precision (fp32 -> fp16)
    demote precision (fp32 -> fp16) (061C0FF8)
>> pass 300/815: validate graph
    validate graph (0045C2BE)
>> pass 301/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 302/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 303/815: validate graph
    validate graph (0045C2BE)
>> pass 304/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 305/815: remove dead code
    remove dead code (B7E6F507)
>> pass 306/815: validate graph
    validate graph (0045C2BE)
>> pass 307/815: loop analysis
    loop analysis (598E85BD)
>> pass 308/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 309/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 310/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 311/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 312/815: simplify math expression trees
    simplify math expression trees (BB3441B4)
>> pass 313/815: validate graph
    validate graph (0045C2BE)
>> pass 314/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 315/815: validate graph
    validate graph (0045C2BE)
>> pass 316/815: break critical edges
    break critical edges (D716EAB4)
>> pass 317/815: validate graph
    validate graph (0045C2BE)
>> pass 318/815: loop analysis
    loop analysis (598E85BD)
>> pass 319/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 320/815: delete dead loops
    delete dead loops (72FEF67D)
>> pass 321/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 322/815: validate graph
    validate graph (0045C2BE)
>> pass 323/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 324/815: validate graph
    validate graph (0045C2BE)
>> pass 325/815: loop analysis
    loop analysis (598E85BD)
>> pass 326/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 327/815: validate graph
    validate graph (0045C2BE)
>> pass 328/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 329/815: validate graph
    validate graph (0045C2BE)
>> pass 330/815: loop analysis
    loop analysis (598E85BD)
>> pass 331/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 332/815: validate graph
    validate graph (0045C2BE)
>> pass 333/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 334/815: validate graph
    validate graph (0045C2BE)
>> pass 335/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 336/815: remove dead code
    remove dead code (B7E6F507)
>> pass 337/815: validate graph
    validate graph (0045C2BE)
>> pass 338/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %30611 in    arg: temp(0) * 3/fp32 - 'input.position'
        'input.position' - implicit0
      %30615 in    arg: temp(0) * 3/fp32 - 'input.normal'
        'input.normal' - implicit0_dead
      %30619 in    arg: temp(0) * 3/fp32 - 'input.tangent'
        'input.tangent' - texcoord0_dead
      %30623 in    arg: temp(0) * 2/fp32 - 'input.uv'
        'input.uv' - texcoord1_dead
      %30628 out   arg: temp(0) * 4/fp32 - 'main.position'
        'main.position' - position 0 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %30612 3/fp32 LD %30611
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16]
        %342 1/int32 LD %321
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30506
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %30924 1/fp32 MUL %366, %30612
        %30452 1/fp32 SHUF %30612.y
        %30925 1/fp32 MUL %370, %30452
        %30453 1/fp32 SHUF %30612.z
        %30926 1/fp32 MUL %374, %30453
        %30927 1/fp32 ADD %378, %30924
        %30928 1/fp32 ADD %30927, %30925
        %30929 1/fp32 ADD %30928, %30926
        %30454 1/fp32 SHUF %366.y
        %30930 1/fp32 MUL %30454, %30612
        %30455 1/fp32 SHUF %370.y
        %30931 1/fp32 MUL %30452, %30455
        %30457 1/fp32 SHUF %374.y
        %30932 1/fp32 MUL %30453, %30457
        %30459 1/fp32 SHUF %378.y
        %30933 1/fp32 ADD %30459, %30930
        %30934 1/fp32 ADD %30933, %30931
        %30935 1/fp32 ADD %30934, %30932
        %30460 1/fp32 SHUF %366.z
        %30936 1/fp32 MUL %30460, %30612
        %30461 1/fp32 SHUF %370.z
        %30937 1/fp32 MUL %30452, %30461
        %30463 1/fp32 SHUF %374.z
        %30938 1/fp32 MUL %30453, %30463
        %30465 1/fp32 SHUF %378.z
        %30939 1/fp32 ADD %30465, %30936
        %30940 1/fp32 ADD %30939, %30937
        %30941 1/fp32 ADD %30940, %30938
        %30466 1/fp32 SHUF %366.w
        %30942 1/fp32 MUL %30466, %30612
        %30467 1/fp32 SHUF %370.w
        %30943 1/fp32 MUL %30452, %30467
        %30469 1/fp32 SHUF %374.w
        %30944 1/fp32 MUL %30453, %30469
        %30471 1/fp32 SHUF %378.w
        %30945 1/fp32 ADD %30471, %30942
        %30946 1/fp32 ADD %30945, %30943
        %30947 1/fp32 ADD %30946, %30944
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30948 1/fp32 MUL %7099, %30929
        %30949 1/fp32 MUL %7101, %30935
        %30950 1/fp32 MUL %7103, %30941
        %30951 1/fp32 MUL %7105, %30947
        %30952 1/fp32 ADD %30948, %30949
        %30953 1/fp32 ADD %30952, %30950
        %30954 1/fp32 ADD %30953, %30951
        %30472 1/fp32 SHUF %7099.y
        %30955 1/fp32 MUL %30472, %30929
        %30473 1/fp32 SHUF %7101.y
        %30956 1/fp32 MUL %30473, %30935
        %30474 1/fp32 SHUF %7103.y
        %30957 1/fp32 MUL %30474, %30941
        %30475 1/fp32 SHUF %7105.y
        %30958 1/fp32 MUL %30475, %30947
        %30959 1/fp32 ADD %30955, %30956
        %30960 1/fp32 ADD %30959, %30957
        %30961 1/fp32 ADD %30960, %30958
        %30476 1/fp32 SHUF %7099.z
        %30962 1/fp32 MUL %30476, %30929
        %30477 1/fp32 SHUF %7101.z
        %30963 1/fp32 MUL %30477, %30935
        %30478 1/fp32 SHUF %7103.z
        %30964 1/fp32 MUL %30478, %30941
        %30479 1/fp32 SHUF %7105.z
        %30965 1/fp32 MUL %30479, %30947
        %30966 1/fp32 ADD %30962, %30963
        %30967 1/fp32 ADD %30966, %30964
        %30968 1/fp32 ADD %30967, %30965
        %30480 1/fp32 SHUF %7099.w
        %30969 1/fp32 MUL %30480, %30929
        %30481 1/fp32 SHUF %7101.w
        %30970 1/fp32 MUL %30481, %30935
        %30482 1/fp32 SHUF %7103.w
        %30971 1/fp32 MUL %30482, %30941
        %30483 1/fp32 SHUF %7105.w
        %30972 1/fp32 MUL %30483, %30947
        %30973 1/fp32 ADD %30969, %30970
        %30974 1/fp32 ADD %30973, %30971
        %30975 1/fp32 ADD %30974, %30972
        %7138 4/fp32 SHUF %30954.x---,  %30961.-x--,  %30968.--x-,  %30975.---x
        %30631 void ST %7138, %30628
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %30979 1/int32 AND %7298, int32{255}
        %30980 1/int32 AND %7297, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %30981 1/int32 MUL %30979, int32{4096}
        %30982 1/int32 OR %30980, %30981
        %7436 void intr.s_sendmsg %30982, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %30979
        %30983 1/int32 ADD %7439, int32{64}
        %7441 1/int64 CONV %30983
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %30858 1/int1 CMP.ne %7443, int32{0}
        %1480 void BRC %30858[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %30980
        %30984 1/int32 ADD %7458, int32{64}
        %7460 1/int64 CONV %30984
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %30860 1/int1 CMP.ne %7462, int32{0}
        %1582 void BRC %30860[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %30859 1/int1 CMP.ne int32{0}, %27929
        %28215 void BRC %30859
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %30863 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %30866 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %30985 1/int32 OR %30863, %30866
        %30869 1/int32 CMOV.ne (int32{0}, %27925) int32{3}, int32{2}
        %30872 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %30607 1/int32 CMOV.ne (%30985, int32{0}) %30869, %30872
        %30609 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216
        %30608 1/int32 PHI int32{4}, %30607
        %30873 1/int1 CMP.ne int32{0}, %27913
        %28270 void BRC %30873
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %30986 1/int32 AND int32{-2097153}, %27913
        %30877 1/int32 CMOV.eq (int32{0}, %30608) int32{2097152}, int32{0}
        %30987 1/int32 OR %30877, %30986
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %30987, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %30878 1/int1 CMP.ne int32{0}, %27917
        %28316 void BRC %30878
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %30988 1/int32 AND int32{-2097153}, %27917
        %30881 1/int32 CMOV.eq (int32{1}, %30608) int32{2097152}, int32{0}
        %30989 1/int32 OR %30881, %30988
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %30989, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %30882 1/int1 CMP.ne int32{0}, %27921
        %28358 void BRC %30882
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %30990 1/int32 AND int32{-2097153}, %27921
        %30885 1/int32 CMOV.eq (int32{2}, %30608) int32{2097152}, int32{0}
        %30991 1/int32 OR %30885, %30990
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %30991, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %30886 1/int1 CMP.ne int32{0}, %27925
        %28400 void BRC %30886
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %30992 1/int32 AND int32{-2097153}, %27925
        %30889 1/int32 CMOV.eq (int32{3}, %30608) int32{2097152}, int32{0}
        %30993 1/int32 OR %30889, %30992
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %30993, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28442 void BRC %30859
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %30994 1/int32 AND int32{-2097153}, %27929
        %30892 1/int32 CMOV.eq (int32{4}, %30608) int32{2097152}, int32{0}
        %30995 1/int32 OR %30892, %30994
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %30995, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %30874 1/int1 CMP.ne int32{0}, %27933
        %28252 void BRC %30874
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %30893 1/int1 CMP.ne int32{0}, %27937
        %28536 void BRC %30893
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %30894 1/int1 CMP.ne int32{0}, %27941
        %28571 void BRC %30894
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %30895 1/int1 CMP.ne int32{0}, %27945
        %28606 void BRC %30895
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %30896 1/int1 CMP.ne int32{0}, %27949
        %28641 void BRC %30896
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %30897 1/int1 CMP.ne int32{0}, %27953
        %28676 void BRC %30897
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %30898 1/int1 CMP.ne int32{0}, %27957
        %28711 void BRC %30898
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %30899 1/int1 CMP.ne int32{0}, %27961
        %28746 void BRC %30899
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %30900 1/int1 CMP.ne int32{0}, %27965
        %28781 void BRC %30900
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %30901 1/int1 CMP.ne int32{0}, %27969
        %28816 void BRC %30901
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %30902 1/int1 CMP.ne int32{0}, %27973
        %28851 void BRC %30902
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %30903 1/int1 CMP.ne int32{0}, %27977
        %28886 void BRC %30903
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %30904 1/int1 CMP.ne int32{0}, %27981
        %28921 void BRC %30904
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %30905 1/int1 CMP.ne int32{0}, %27985
        %28956 void BRC %30905
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %30906 1/int1 CMP.ne int32{0}, %27989
        %28991 void BRC %30906
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %30907 1/int1 CMP.ne int32{0}, %27993
        %29026 void BRC %30907
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %30908 1/int1 CMP.ne int32{0}, %27997
        %29061 void BRC %30908
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %30909 1/int1 CMP.ne int32{0}, %28001
        %29096 void BRC %30909
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %30910 1/int1 CMP.ne int32{0}, %28005
        %29131 void BRC %30910
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %30911 1/int1 CMP.ne int32{0}, %28009
        %29166 void BRC %30911
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %30912 1/int1 CMP.ne int32{0}, %28013
        %29201 void BRC %30912
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %30913 1/int1 CMP.ne int32{0}, %28017
        %29236 void BRC %30913
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %30914 1/int1 CMP.ne int32{0}, %28021
        %29271 void BRC %30914
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %30915 1/int1 CMP.ne int32{0}, %28025
        %29306 void BRC %30915
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %30916 1/int1 CMP.ne int32{0}, %28029
        %29341 void BRC %30916
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %30917 1/int1 CMP.ne int32{0}, %28033
        %29376 void BRC %30917
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %30918 1/int1 CMP.ne int32{0}, %28037
        %29411 void BRC %30918
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %30919 1/int1 CMP.ne int32{0}, %28041
        %29446 void BRC %30919
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %30920 1/int1 CMP.ne int32{0}, %28045
        %29481 void BRC %30920
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %30921 1/int1 CMP.ne int32{0}, %28049
        %29516 void BRC %30921
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %30922 1/int1 CMP.ne int32{0}, %28053
        %29551 void BRC %30922
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %30923 1/int1 CMP.ne int32{0}, %28057
        %29586 void BRC %30923
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 339/815: validate graph
    validate graph (0045C2BE)
>> pass 340/815: merge getelemptr
    merge getelemptr (D655006F)
>> pass 341/815: validate graph
    validate graph (0045C2BE)
>> pass 342/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 343/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 344/815: validate graph
    validate graph (0045C2BE)
>> pass 345/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 346/815: validate graph
    validate graph (0045C2BE)
>> pass 347/815: aggressive dead code elimination
    aggressive dead code elimination (8F0E4816)
>> pass 348/815: validate graph
    validate graph (0045C2BE)
>> pass 349/815: create literal buffer
    create literal buffer (2CA126FC)
>> pass 350/815: validate graph
    validate graph (0045C2BE)
>> pass 351/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 352/815: remove dead code
    remove dead code (B7E6F507)
>> pass 353/815: validate graph
    validate graph (0045C2BE)
>> pass 354/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %30611 in    arg: temp(0) * 3/fp32 - 'input.position'
        'input.position' - implicit0
      %30615 in    arg: temp(0) * 3/fp32 - 'input.normal'
        'input.normal' - implicit0_dead
      %30619 in    arg: temp(0) * 3/fp32 - 'input.tangent'
        'input.tangent' - texcoord0_dead
      %30623 in    arg: temp(0) * 2/fp32 - 'input.uv'
        'input.uv' - texcoord1_dead
      %30628 out   arg: temp(0) * 4/fp32 - 'main.position'
        'main.position' - position 0 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %30612 3/fp32 LD %30611
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16]
        %342 1/int32 LD %321
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30506
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %30924 1/fp32 MUL %366, %30612
        %30452 1/fp32 SHUF %30612.y
        %30925 1/fp32 MUL %370, %30452
        %30453 1/fp32 SHUF %30612.z
        %30926 1/fp32 MUL %374, %30453
        %30927 1/fp32 ADD %378, %30924
        %30928 1/fp32 ADD %30927, %30925
        %30929 1/fp32 ADD %30928, %30926
        %30454 1/fp32 SHUF %366.y
        %30930 1/fp32 MUL %30454, %30612
        %30455 1/fp32 SHUF %370.y
        %30931 1/fp32 MUL %30452, %30455
        %30457 1/fp32 SHUF %374.y
        %30932 1/fp32 MUL %30453, %30457
        %30459 1/fp32 SHUF %378.y
        %30933 1/fp32 ADD %30459, %30930
        %30934 1/fp32 ADD %30933, %30931
        %30935 1/fp32 ADD %30934, %30932
        %30460 1/fp32 SHUF %366.z
        %30936 1/fp32 MUL %30460, %30612
        %30461 1/fp32 SHUF %370.z
        %30937 1/fp32 MUL %30452, %30461
        %30463 1/fp32 SHUF %374.z
        %30938 1/fp32 MUL %30453, %30463
        %30465 1/fp32 SHUF %378.z
        %30939 1/fp32 ADD %30465, %30936
        %30940 1/fp32 ADD %30939, %30937
        %30941 1/fp32 ADD %30940, %30938
        %30466 1/fp32 SHUF %366.w
        %30942 1/fp32 MUL %30466, %30612
        %30467 1/fp32 SHUF %370.w
        %30943 1/fp32 MUL %30452, %30467
        %30469 1/fp32 SHUF %374.w
        %30944 1/fp32 MUL %30453, %30469
        %30471 1/fp32 SHUF %378.w
        %30945 1/fp32 ADD %30471, %30942
        %30946 1/fp32 ADD %30945, %30943
        %30947 1/fp32 ADD %30946, %30944
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30948 1/fp32 MUL %7099, %30929
        %30949 1/fp32 MUL %7101, %30935
        %30950 1/fp32 MUL %7103, %30941
        %30951 1/fp32 MUL %7105, %30947
        %30952 1/fp32 ADD %30948, %30949
        %30953 1/fp32 ADD %30952, %30950
        %30954 1/fp32 ADD %30953, %30951
        %30472 1/fp32 SHUF %7099.y
        %30955 1/fp32 MUL %30472, %30929
        %30473 1/fp32 SHUF %7101.y
        %30956 1/fp32 MUL %30473, %30935
        %30474 1/fp32 SHUF %7103.y
        %30957 1/fp32 MUL %30474, %30941
        %30475 1/fp32 SHUF %7105.y
        %30958 1/fp32 MUL %30475, %30947
        %30959 1/fp32 ADD %30955, %30956
        %30960 1/fp32 ADD %30959, %30957
        %30961 1/fp32 ADD %30960, %30958
        %30476 1/fp32 SHUF %7099.z
        %30962 1/fp32 MUL %30476, %30929
        %30477 1/fp32 SHUF %7101.z
        %30963 1/fp32 MUL %30477, %30935
        %30478 1/fp32 SHUF %7103.z
        %30964 1/fp32 MUL %30478, %30941
        %30479 1/fp32 SHUF %7105.z
        %30965 1/fp32 MUL %30479, %30947
        %30966 1/fp32 ADD %30962, %30963
        %30967 1/fp32 ADD %30966, %30964
        %30968 1/fp32 ADD %30967, %30965
        %30480 1/fp32 SHUF %7099.w
        %30969 1/fp32 MUL %30480, %30929
        %30481 1/fp32 SHUF %7101.w
        %30970 1/fp32 MUL %30481, %30935
        %30482 1/fp32 SHUF %7103.w
        %30971 1/fp32 MUL %30482, %30941
        %30483 1/fp32 SHUF %7105.w
        %30972 1/fp32 MUL %30483, %30947
        %30973 1/fp32 ADD %30969, %30970
        %30974 1/fp32 ADD %30973, %30971
        %30975 1/fp32 ADD %30974, %30972
        %7138 4/fp32 SHUF %30954.x---,  %30961.-x--,  %30968.--x-,  %30975.---x
        %30631 void ST %7138, %30628
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %30979 1/int32 AND %7298, int32{255}
        %30980 1/int32 AND %7297, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %31076 1/int32 SHL %30979, int32{12}
        %30982 1/int32 OR %30980, %31076
        %7436 void intr.s_sendmsg %30982, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %30979
        %30983 1/int32 ADD %7439, int32{64}
        %7441 1/int64 CONV %30983
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %30858 1/int1 CMP.ne %7443, int32{0}
        %1480 void BRC %30858[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %30980
        %30984 1/int32 ADD %7458, int32{64}
        %7460 1/int64 CONV %30984
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %30860 1/int1 CMP.ne %7462, int32{0}
        %1582 void BRC %30860[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %30859 1/int1 CMP.ne int32{0}, %27929
        %28215 void BRC %30859
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %30863 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %30866 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %30985 1/int32 OR %30863, %30866
        %30869 1/int32 CMOV.ne (int32{0}, %27925) int32{3}, int32{2}
        %30872 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %30607 1/int32 CMOV.ne (%30985, int32{0}) %30869, %30872
        %30609 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216
        %30608 1/int32 PHI int32{4}, %30607
        %30873 1/int1 CMP.ne int32{0}, %27913
        %28270 void BRC %30873
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %30986 1/int32 AND int32{-2097153}, %27913
        %30877 1/int32 CMOV.eq (int32{0}, %30608) int32{2097152}, int32{0}
        %30987 1/int32 OR %30877, %30986
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %30987, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %30878 1/int1 CMP.ne int32{0}, %27917
        %28316 void BRC %30878
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %30988 1/int32 AND int32{-2097153}, %27917
        %30881 1/int32 CMOV.eq (int32{1}, %30608) int32{2097152}, int32{0}
        %30989 1/int32 OR %30881, %30988
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %30989, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %30882 1/int1 CMP.ne int32{0}, %27921
        %28358 void BRC %30882
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %30990 1/int32 AND int32{-2097153}, %27921
        %30885 1/int32 CMOV.eq (int32{2}, %30608) int32{2097152}, int32{0}
        %30991 1/int32 OR %30885, %30990
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %30991, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %30886 1/int1 CMP.ne int32{0}, %27925
        %28400 void BRC %30886
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %30992 1/int32 AND int32{-2097153}, %27925
        %30889 1/int32 CMOV.eq (int32{3}, %30608) int32{2097152}, int32{0}
        %30993 1/int32 OR %30889, %30992
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %30993, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28442 void BRC %30859
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %30994 1/int32 AND int32{-2097153}, %27929
        %30892 1/int32 CMOV.eq (int32{4}, %30608) int32{2097152}, int32{0}
        %30995 1/int32 OR %30892, %30994
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %30995, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %30874 1/int1 CMP.ne int32{0}, %27933
        %28252 void BRC %30874
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %30893 1/int1 CMP.ne int32{0}, %27937
        %28536 void BRC %30893
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %30894 1/int1 CMP.ne int32{0}, %27941
        %28571 void BRC %30894
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %30895 1/int1 CMP.ne int32{0}, %27945
        %28606 void BRC %30895
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %30896 1/int1 CMP.ne int32{0}, %27949
        %28641 void BRC %30896
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %30897 1/int1 CMP.ne int32{0}, %27953
        %28676 void BRC %30897
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %30898 1/int1 CMP.ne int32{0}, %27957
        %28711 void BRC %30898
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %30899 1/int1 CMP.ne int32{0}, %27961
        %28746 void BRC %30899
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %30900 1/int1 CMP.ne int32{0}, %27965
        %28781 void BRC %30900
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %30901 1/int1 CMP.ne int32{0}, %27969
        %28816 void BRC %30901
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %30902 1/int1 CMP.ne int32{0}, %27973
        %28851 void BRC %30902
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %30903 1/int1 CMP.ne int32{0}, %27977
        %28886 void BRC %30903
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %30904 1/int1 CMP.ne int32{0}, %27981
        %28921 void BRC %30904
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %30905 1/int1 CMP.ne int32{0}, %27985
        %28956 void BRC %30905
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %30906 1/int1 CMP.ne int32{0}, %27989
        %28991 void BRC %30906
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %30907 1/int1 CMP.ne int32{0}, %27993
        %29026 void BRC %30907
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %30908 1/int1 CMP.ne int32{0}, %27997
        %29061 void BRC %30908
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %30909 1/int1 CMP.ne int32{0}, %28001
        %29096 void BRC %30909
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %30910 1/int1 CMP.ne int32{0}, %28005
        %29131 void BRC %30910
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %30911 1/int1 CMP.ne int32{0}, %28009
        %29166 void BRC %30911
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %30912 1/int1 CMP.ne int32{0}, %28013
        %29201 void BRC %30912
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %30913 1/int1 CMP.ne int32{0}, %28017
        %29236 void BRC %30913
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %30914 1/int1 CMP.ne int32{0}, %28021
        %29271 void BRC %30914
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %30915 1/int1 CMP.ne int32{0}, %28025
        %29306 void BRC %30915
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %30916 1/int1 CMP.ne int32{0}, %28029
        %29341 void BRC %30916
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %30917 1/int1 CMP.ne int32{0}, %28033
        %29376 void BRC %30917
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %30918 1/int1 CMP.ne int32{0}, %28037
        %29411 void BRC %30918
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %30919 1/int1 CMP.ne int32{0}, %28041
        %29446 void BRC %30919
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %30920 1/int1 CMP.ne int32{0}, %28045
        %29481 void BRC %30920
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %30921 1/int1 CMP.ne int32{0}, %28049
        %29516 void BRC %30921
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %30922 1/int1 CMP.ne int32{0}, %28053
        %29551 void BRC %30922
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %30923 1/int1 CMP.ne int32{0}, %28057
        %29586 void BRC %30923
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 355/815: validate graph
    validate graph (0045C2BE)
>> pass 356/815: find undefined variable usage
    find undefined variable usage (74159286)
>> pass 357/815: validate graph
    validate graph (0045C2BE)
>> pass 358/815: r10scalarizer
    r10scalarizer (81A236D1)
>> pass 359/815: validate graph
    validate graph (0045C2BE)
>> pass 360/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 361/815: validate graph
    validate graph (0045C2BE)
>> pass 362/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 363/815: remove dead code
    remove dead code (B7E6F507)
>> pass 364/815: validate graph
    validate graph (0045C2BE)
>> pass 365/815: break critical edges
    break critical edges (D716EAB4)
>> pass 366/815: validate graph
    validate graph (0045C2BE)
>> pass 367/815: loop analysis
    loop analysis (598E85BD)
>> pass 368/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 369/815: scalar evolution analysis
    scalar evolution analysis (B93409FF)
>> pass 370/815: range analysis
    range analysis (11B7AAEB)
>> pass 371/815: range propagation
    range propagation (45F717C0)
>> pass 372/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 373/815: validate graph
    validate graph (0045C2BE)
>> pass 374/815: simplify for demanded bits
    simplify for demanded bits (C26737CA)
>> pass 375/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 376/815: validate graph
    validate graph (0045C2BE)
>> pass 377/815: constant propagation
    constant propagation (5CBB3303)
>> pass 378/815: validate graph
    validate graph (0045C2BE)
>> pass 379/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 380/815: validate graph
    validate graph (0045C2BE)
>> pass 381/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 382/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 383/815: validate graph
    validate graph (0045C2BE)
>> pass 384/815: loop analysis
    loop analysis (598E85BD)
>> pass 385/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 386/815: validate graph
    validate graph (0045C2BE)
>> pass 387/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 388/815: remove dead code
    remove dead code (B7E6F507)
>> pass 389/815: validate graph
    validate graph (0045C2BE)
>> pass 390/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 391/815: validate graph
    validate graph (0045C2BE)
>> pass 392/815: remove dead code
    remove dead code (B7E6F507)
>> pass 393/815: validate graph
    validate graph (0045C2BE)
>> pass 394/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %30611 in    arg: temp(0) * 3/fp32 - 'input.position'
        'input.position' - implicit0
      %30615 in    arg: temp(0) * 3/fp32 - 'input.normal'
        'input.normal' - implicit0_dead
      %30619 in    arg: temp(0) * 3/fp32 - 'input.tangent'
        'input.tangent' - texcoord0_dead
      %30623 in    arg: temp(0) * 2/fp32 - 'input.uv'
        'input.uv' - texcoord1_dead
      %30628 out   arg: temp(0) * 4/fp32 - 'main.position'
        'main.position' - position 0 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %30612 3/fp32 LD %30611
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16]
        %342 1/int32 LD %321
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30506
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %30924 1/fp32 MUL %366, %30612
        %30452 1/fp32 SHUF %30612.y
        %30925 1/fp32 MUL %370, %30452
        %30453 1/fp32 SHUF %30612.z
        %30926 1/fp32 MUL %374, %30453
        %30927 1/fp32 ADD %378, %30924
        %30928 1/fp32 ADD %30927, %30925
        %30929 1/fp32 ADD %30928, %30926
        %30454 1/fp32 SHUF %366.y
        %30930 1/fp32 MUL %30454, %30612
        %30455 1/fp32 SHUF %370.y
        %30931 1/fp32 MUL %30452, %30455
        %30457 1/fp32 SHUF %374.y
        %30932 1/fp32 MUL %30453, %30457
        %30459 1/fp32 SHUF %378.y
        %30933 1/fp32 ADD %30459, %30930
        %30934 1/fp32 ADD %30933, %30931
        %30935 1/fp32 ADD %30934, %30932
        %30460 1/fp32 SHUF %366.z
        %30936 1/fp32 MUL %30460, %30612
        %30461 1/fp32 SHUF %370.z
        %30937 1/fp32 MUL %30452, %30461
        %30463 1/fp32 SHUF %374.z
        %30938 1/fp32 MUL %30453, %30463
        %30465 1/fp32 SHUF %378.z
        %30939 1/fp32 ADD %30465, %30936
        %30940 1/fp32 ADD %30939, %30937
        %30941 1/fp32 ADD %30940, %30938
        %30466 1/fp32 SHUF %366.w
        %30942 1/fp32 MUL %30466, %30612
        %30467 1/fp32 SHUF %370.w
        %30943 1/fp32 MUL %30452, %30467
        %30469 1/fp32 SHUF %374.w
        %30944 1/fp32 MUL %30453, %30469
        %30471 1/fp32 SHUF %378.w
        %30945 1/fp32 ADD %30471, %30942
        %30946 1/fp32 ADD %30945, %30943
        %30947 1/fp32 ADD %30946, %30944
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30948 1/fp32 MUL %7099, %30929
        %30949 1/fp32 MUL %7101, %30935
        %30950 1/fp32 MUL %7103, %30941
        %30951 1/fp32 MUL %7105, %30947
        %30952 1/fp32 ADD %30948, %30949
        %30953 1/fp32 ADD %30952, %30950
        %30954 1/fp32 ADD %30953, %30951
        %30472 1/fp32 SHUF %7099.y
        %30955 1/fp32 MUL %30472, %30929
        %30473 1/fp32 SHUF %7101.y
        %30956 1/fp32 MUL %30473, %30935
        %30474 1/fp32 SHUF %7103.y
        %30957 1/fp32 MUL %30474, %30941
        %30475 1/fp32 SHUF %7105.y
        %30958 1/fp32 MUL %30475, %30947
        %30959 1/fp32 ADD %30955, %30956
        %30960 1/fp32 ADD %30959, %30957
        %30961 1/fp32 ADD %30960, %30958
        %30476 1/fp32 SHUF %7099.z
        %30962 1/fp32 MUL %30476, %30929
        %30477 1/fp32 SHUF %7101.z
        %30963 1/fp32 MUL %30477, %30935
        %30478 1/fp32 SHUF %7103.z
        %30964 1/fp32 MUL %30478, %30941
        %30479 1/fp32 SHUF %7105.z
        %30965 1/fp32 MUL %30479, %30947
        %30966 1/fp32 ADD %30962, %30963
        %30967 1/fp32 ADD %30966, %30964
        %30968 1/fp32 ADD %30967, %30965
        %30480 1/fp32 SHUF %7099.w
        %30969 1/fp32 MUL %30480, %30929
        %30481 1/fp32 SHUF %7101.w
        %30970 1/fp32 MUL %30481, %30935
        %30482 1/fp32 SHUF %7103.w
        %30971 1/fp32 MUL %30482, %30941
        %30483 1/fp32 SHUF %7105.w
        %30972 1/fp32 MUL %30483, %30947
        %30973 1/fp32 ADD %30969, %30970
        %30974 1/fp32 ADD %30973, %30971
        %30975 1/fp32 ADD %30974, %30972
        %7138 4/fp32 SHUF %30954.x---,  %30961.-x--,  %30968.--x-,  %30975.---x
        %30631 void ST %7138, %30628
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %30979 1/int32 AND %7298, int32{255}
        %30980 1/int32 AND %7297, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %31076 1/int32 SHL %30979, int32{12}
        %30982 1/int32 OR %30980, %31076
        %7436 void intr.s_sendmsg %30982, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %30979
        %30983 1/int32 ADD nsw %7439, int32{64}
        %7441 1/int64 CONV %30983
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %30858 1/int1 CMP.ne %7443, int32{0}
        %1480 void BRC %30858[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %30980
        %30984 1/int32 ADD nsw %7458, int32{64}
        %7460 1/int64 CONV %30984
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %30860 1/int1 CMP.ne %7462, int32{0}
        %1582 void BRC %30860[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %30859 1/int1 CMP.ne int32{0}, %27929
        %28215 void BRC %30859
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %30863 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %30866 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %30985 1/int32 OR %30863, %30866
        %30869 1/int32 CMOV.ne (int32{0}, %27925) int32{3}, int32{2}
        %30872 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %30607 1/int32 CMOV.ne (%30985, int32{0}) %30869, %30872
        %30609 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216
        %30608 1/int32 PHI int32{4}, %30607
        %30873 1/int1 CMP.ne int32{0}, %27913
        %28270 void BRC %30873
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %30986 1/int32 AND int32{-2097153}, %27913
        %30877 1/int32 CMOV.eq (int32{0}, %30608) int32{2097152}, int32{0}
        %30987 1/int32 OR %30877, %30986
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %30987, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %30878 1/int1 CMP.ne int32{0}, %27917
        %28316 void BRC %30878
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %30988 1/int32 AND int32{-2097153}, %27917
        %30881 1/int32 CMOV.eq (int32{1}, %30608) int32{2097152}, int32{0}
        %30989 1/int32 OR %30881, %30988
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %30989, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %30882 1/int1 CMP.ne int32{0}, %27921
        %28358 void BRC %30882
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %30990 1/int32 AND int32{-2097153}, %27921
        %30885 1/int32 CMOV.eq (int32{2}, %30608) int32{2097152}, int32{0}
        %30991 1/int32 OR %30885, %30990
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %30991, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %30886 1/int1 CMP.ne int32{0}, %27925
        %28400 void BRC %30886
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %30992 1/int32 AND int32{-2097153}, %27925
        %30889 1/int32 CMOV.eq (int32{3}, %30608) int32{2097152}, int32{0}
        %30993 1/int32 OR %30889, %30992
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %30993, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28442 void BRC %30859
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %30994 1/int32 AND int32{-2097153}, %27929
        %30892 1/int32 CMOV.eq (int32{4}, %30608) int32{2097152}, int32{0}
        %30995 1/int32 OR %30892, %30994
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %30995, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %30874 1/int1 CMP.ne int32{0}, %27933
        %28252 void BRC %30874
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %30893 1/int1 CMP.ne int32{0}, %27937
        %28536 void BRC %30893
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %30894 1/int1 CMP.ne int32{0}, %27941
        %28571 void BRC %30894
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %30895 1/int1 CMP.ne int32{0}, %27945
        %28606 void BRC %30895
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %30896 1/int1 CMP.ne int32{0}, %27949
        %28641 void BRC %30896
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %30897 1/int1 CMP.ne int32{0}, %27953
        %28676 void BRC %30897
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %30898 1/int1 CMP.ne int32{0}, %27957
        %28711 void BRC %30898
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %30899 1/int1 CMP.ne int32{0}, %27961
        %28746 void BRC %30899
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %30900 1/int1 CMP.ne int32{0}, %27965
        %28781 void BRC %30900
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %30901 1/int1 CMP.ne int32{0}, %27969
        %28816 void BRC %30901
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %30902 1/int1 CMP.ne int32{0}, %27973
        %28851 void BRC %30902
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %30903 1/int1 CMP.ne int32{0}, %27977
        %28886 void BRC %30903
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %30904 1/int1 CMP.ne int32{0}, %27981
        %28921 void BRC %30904
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %30905 1/int1 CMP.ne int32{0}, %27985
        %28956 void BRC %30905
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %30906 1/int1 CMP.ne int32{0}, %27989
        %28991 void BRC %30906
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %30907 1/int1 CMP.ne int32{0}, %27993
        %29026 void BRC %30907
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %30908 1/int1 CMP.ne int32{0}, %27997
        %29061 void BRC %30908
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %30909 1/int1 CMP.ne int32{0}, %28001
        %29096 void BRC %30909
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %30910 1/int1 CMP.ne int32{0}, %28005
        %29131 void BRC %30910
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %30911 1/int1 CMP.ne int32{0}, %28009
        %29166 void BRC %30911
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %30912 1/int1 CMP.ne int32{0}, %28013
        %29201 void BRC %30912
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %30913 1/int1 CMP.ne int32{0}, %28017
        %29236 void BRC %30913
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %30914 1/int1 CMP.ne int32{0}, %28021
        %29271 void BRC %30914
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %30915 1/int1 CMP.ne int32{0}, %28025
        %29306 void BRC %30915
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %30916 1/int1 CMP.ne int32{0}, %28029
        %29341 void BRC %30916
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %30917 1/int1 CMP.ne int32{0}, %28033
        %29376 void BRC %30917
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %30918 1/int1 CMP.ne int32{0}, %28037
        %29411 void BRC %30918
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %30919 1/int1 CMP.ne int32{0}, %28041
        %29446 void BRC %30919
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %30920 1/int1 CMP.ne int32{0}, %28045
        %29481 void BRC %30920
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %30921 1/int1 CMP.ne int32{0}, %28049
        %29516 void BRC %30921
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %30922 1/int1 CMP.ne int32{0}, %28053
        %29551 void BRC %30922
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %30923 1/int1 CMP.ne int32{0}, %28057
        %29586 void BRC %30923
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 395/815: validate graph
    validate graph (0045C2BE)
>> pass 396/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_vs_vs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      %30611 in    arg: temp(0) * 3/fp32 - 'input.position'
        'input.position' - implicit0
      %30615 in    arg: temp(0) * 3/fp32 - 'input.normal'
        'input.normal' - implicit0_dead
      %30619 in    arg: temp(0) * 3/fp32 - 'input.tangent'
        'input.tangent' - texcoord0_dead
      %30623 in    arg: temp(0) * 2/fp32 - 'input.uv'
        'input.uv' - texcoord1_dead
      %30628 out   arg: temp(0) * 4/fp32 - 'main.position'
        'main.position' - position 0 (signed)

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:227

      block:227
        <-- block:224
        %30612 3/fp32 LD %30611
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16]
        %342 1/int32 LD %321
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30506
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %30924 1/fp32 MUL %366, %30612
        %30452 1/fp32 SHUF %30612.y
        %30925 1/fp32 MUL %370, %30452
        %30453 1/fp32 SHUF %30612.z
        %30926 1/fp32 MUL %374, %30453
        %30927 1/fp32 ADD %378, %30924
        %30928 1/fp32 ADD %30927, %30925
        %30929 1/fp32 ADD %30928, %30926
        %30454 1/fp32 SHUF %366.y
        %30930 1/fp32 MUL %30454, %30612
        %30455 1/fp32 SHUF %370.y
        %30931 1/fp32 MUL %30452, %30455
        %30457 1/fp32 SHUF %374.y
        %30932 1/fp32 MUL %30453, %30457
        %30459 1/fp32 SHUF %378.y
        %30933 1/fp32 ADD %30459, %30930
        %30934 1/fp32 ADD %30933, %30931
        %30935 1/fp32 ADD %30934, %30932
        %30460 1/fp32 SHUF %366.z
        %30936 1/fp32 MUL %30460, %30612
        %30461 1/fp32 SHUF %370.z
        %30937 1/fp32 MUL %30452, %30461
        %30463 1/fp32 SHUF %374.z
        %30938 1/fp32 MUL %30453, %30463
        %30465 1/fp32 SHUF %378.z
        %30939 1/fp32 ADD %30465, %30936
        %30940 1/fp32 ADD %30939, %30937
        %30941 1/fp32 ADD %30940, %30938
        %30466 1/fp32 SHUF %366.w
        %30942 1/fp32 MUL %30466, %30612
        %30467 1/fp32 SHUF %370.w
        %30943 1/fp32 MUL %30452, %30467
        %30469 1/fp32 SHUF %374.w
        %30944 1/fp32 MUL %30453, %30469
        %30471 1/fp32 SHUF %378.w
        %30945 1/fp32 ADD %30471, %30942
        %30946 1/fp32 ADD %30945, %30943
        %30947 1/fp32 ADD %30946, %30944
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30948 1/fp32 MUL %7099, %30929
        %30949 1/fp32 MUL %7101, %30935
        %30950 1/fp32 MUL %7103, %30941
        %30951 1/fp32 MUL %7105, %30947
        %30952 1/fp32 ADD %30948, %30949
        %30953 1/fp32 ADD %30952, %30950
        %30954 1/fp32 ADD %30953, %30951
        %30472 1/fp32 SHUF %7099.y
        %30955 1/fp32 MUL %30472, %30929
        %30473 1/fp32 SHUF %7101.y
        %30956 1/fp32 MUL %30473, %30935
        %30474 1/fp32 SHUF %7103.y
        %30957 1/fp32 MUL %30474, %30941
        %30475 1/fp32 SHUF %7105.y
        %30958 1/fp32 MUL %30475, %30947
        %30959 1/fp32 ADD %30955, %30956
        %30960 1/fp32 ADD %30959, %30957
        %30961 1/fp32 ADD %30960, %30958
        %30476 1/fp32 SHUF %7099.z
        %30962 1/fp32 MUL %30476, %30929
        %30477 1/fp32 SHUF %7101.z
        %30963 1/fp32 MUL %30477, %30935
        %30478 1/fp32 SHUF %7103.z
        %30964 1/fp32 MUL %30478, %30941
        %30479 1/fp32 SHUF %7105.z
        %30965 1/fp32 MUL %30479, %30947
        %30966 1/fp32 ADD %30962, %30963
        %30967 1/fp32 ADD %30966, %30964
        %30968 1/fp32 ADD %30967, %30965
        %30480 1/fp32 SHUF %7099.w
        %30969 1/fp32 MUL %30480, %30929
        %30481 1/fp32 SHUF %7101.w
        %30970 1/fp32 MUL %30481, %30935
        %30482 1/fp32 SHUF %7103.w
        %30971 1/fp32 MUL %30482, %30941
        %30483 1/fp32 SHUF %7105.w
        %30972 1/fp32 MUL %30483, %30947
        %30973 1/fp32 ADD %30969, %30970
        %30974 1/fp32 ADD %30973, %30971
        %30975 1/fp32 ADD %30974, %30972
        %7138 4/fp32 SHUF %30954.x---,  %30961.-x--,  %30968.--x-,  %30975.---x
        %30631 void ST %7138, %30628
        %639 void BR 
        --> block:223

      block:223 - exit
        <-- block:227
        --> 


  func:void @ngg_vs(Ngg::NggVsConfig)
    arguments:
      %641 in    arg: temp(0) * struct (Ngg::NggVsConfig) {1/int32, 1/int32[5], 1/int32[32]} - 'cfg'

    dwarf:
      @ngg_vs(124 - 124)

    body:
      block:643 - entry
        <-- 
        --> block:1195

      block:1195 - if-predicate
        <-- block:643
        %7297 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %7298 1/int32 LSHR %7297, int32{8}
        %30979 1/int32 AND %7298, int32{255}
        %30980 1/int32 AND %7297, int32{255}
        %7330 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %7333 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %7336 1/int32 intr.READSPECIALVECTORREG int32{13} 'v_instance1'
        %7339 1/int32 intr.READSPECIALVECTORREG int32{14} 'v_instance2'
        %1218 void intr.OUTPUT_ERROR int32{1}, "inconsistent passthrough setup" has_side_effects pinned
        %1296 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %31076 1/int32 SHL %30979, int32{12}
        %30982 1/int32 OR %30980, %31076
        %7436 void intr.s_sendmsg %30982, int32{9} has_side_effects dependent_on_side_effects
        %7439 1/int32 NEG %30979
        %30983 1/int32 ADD nsw %7439, int32{64}
        %7441 1/int64 CONV %30983
        %7442 1/int64 LSHR int64{-1}, %7441
        %7443 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7442 uniform_width
        %30858 1/int1 CMP.ne %7443, int32{0}
        %1480 void BRC %30858[flatten:force][switch:default]
        --> block:7447, block:1580

      block:7447
        <-- block:1195
        %7455 void intr.EXPORT %1296, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %7456 void BR 
        --> block:1580

      block:1580 - if-predicate
        <-- block:7447, block:1195
        %7458 1/int32 NEG %30980
        %30984 1/int32 ADD nsw %7458, int32{64}
        %7460 1/int64 CONV %30984
        %7461 1/int64 LSHR int64{-1}, %7460
        %7462 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %7461 uniform_width
        %30860 1/int1 CMP.ne %7462, int32{0}
        %1582 void BRC %30860[flatten:force][switch:default]
        --> block:1578, block:642

      block:1578 - if-then
        <-- block:1580
        %1593 struct (Ngg::NggVsOutput) {4/fp32[5], 4/int32[32]} intr.ngg_position_phase %7330, %7333, %7336, %7339 has_side_effects pinned
        %29608 4/fp32[5] GETELEM %1593, int32{0}
        %29614 4/fp32 GETELEM %29608, int32{0}
        %29617 4/fp32 GETELEM %29608, int32{1}
        %29620 4/fp32 GETELEM %29608, int32{2}
        %29623 4/fp32 GETELEM %29608, int32{3}
        %29626 4/fp32 GETELEM %29608, int32{4}
        %29611 4/int32[32] GETELEM %1593, int32{1}
        %29629 4/int32 GETELEM %29611, int32{0}
        %29632 4/int32 GETELEM %29611, int32{1}
        %29635 4/int32 GETELEM %29611, int32{2}
        %29638 4/int32 GETELEM %29611, int32{3}
        %29641 4/int32 GETELEM %29611, int32{4}
        %29644 4/int32 GETELEM %29611, int32{5}
        %29647 4/int32 GETELEM %29611, int32{6}
        %29650 4/int32 GETELEM %29611, int32{7}
        %29653 4/int32 GETELEM %29611, int32{8}
        %29656 4/int32 GETELEM %29611, int32{9}
        %29659 4/int32 GETELEM %29611, int32{10}
        %29662 4/int32 GETELEM %29611, int32{11}
        %29665 4/int32 GETELEM %29611, int32{12}
        %29668 4/int32 GETELEM %29611, int32{13}
        %29671 4/int32 GETELEM %29611, int32{14}
        %29674 4/int32 GETELEM %29611, int32{15}
        %29677 4/int32 GETELEM %29611, int32{16}
        %29680 4/int32 GETELEM %29611, int32{17}
        %29683 4/int32 GETELEM %29611, int32{18}
        %29686 4/int32 GETELEM %29611, int32{19}
        %29689 4/int32 GETELEM %29611, int32{20}
        %29692 4/int32 GETELEM %29611, int32{21}
        %29695 4/int32 GETELEM %29611, int32{22}
        %29698 4/int32 GETELEM %29611, int32{23}
        %29701 4/int32 GETELEM %29611, int32{24}
        %29704 4/int32 GETELEM %29611, int32{25}
        %29707 4/int32 GETELEM %29611, int32{26}
        %29710 4/int32 GETELEM %29611, int32{27}
        %29713 4/int32 GETELEM %29611, int32{28}
        %29716 4/int32 GETELEM %29611, int32{29}
        %29719 4/int32 GETELEM %29611, int32{30}
        %29722 4/int32 GETELEM %29611, int32{31}
        %27911 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{0}
        %27913 1/int32 LD %27911
        %27915 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{1}
        %27917 1/int32 LD %27915
        %27919 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{2}
        %27921 1/int32 LD %27919
        %27923 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{3}
        %27925 1/int32 LD %27923
        %27927 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{1}, int32{4}
        %27929 1/int32 LD %27927
        %27931 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{0}
        %27933 1/int32 LD %27931
        %27935 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{1}
        %27937 1/int32 LD %27935
        %27939 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{2}
        %27941 1/int32 LD %27939
        %27943 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{3}
        %27945 1/int32 LD %27943
        %27947 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{4}
        %27949 1/int32 LD %27947
        %27951 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{5}
        %27953 1/int32 LD %27951
        %27955 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{6}
        %27957 1/int32 LD %27955
        %27959 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{7}
        %27961 1/int32 LD %27959
        %27963 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{8}
        %27965 1/int32 LD %27963
        %27967 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{9}
        %27969 1/int32 LD %27967
        %27971 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{10}
        %27973 1/int32 LD %27971
        %27975 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{11}
        %27977 1/int32 LD %27975
        %27979 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{12}
        %27981 1/int32 LD %27979
        %27983 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{13}
        %27985 1/int32 LD %27983
        %27987 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{14}
        %27989 1/int32 LD %27987
        %27991 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{15}
        %27993 1/int32 LD %27991
        %27995 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{16}
        %27997 1/int32 LD %27995
        %27999 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{17}
        %28001 1/int32 LD %27999
        %28003 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{18}
        %28005 1/int32 LD %28003
        %28007 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{19}
        %28009 1/int32 LD %28007
        %28011 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{20}
        %28013 1/int32 LD %28011
        %28015 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{21}
        %28017 1/int32 LD %28015
        %28019 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{22}
        %28021 1/int32 LD %28019
        %28023 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{23}
        %28025 1/int32 LD %28023
        %28027 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{24}
        %28029 1/int32 LD %28027
        %28031 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{25}
        %28033 1/int32 LD %28031
        %28035 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{26}
        %28037 1/int32 LD %28035
        %28039 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{27}
        %28041 1/int32 LD %28039
        %28043 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{28}
        %28045 1/int32 LD %28043
        %28047 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{29}
        %28049 1/int32 LD %28047
        %28051 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{30}
        %28053 1/int32 LD %28051
        %28055 temp(0) * 1/int32 GETELEMPTR %641, int32{0}, int32{2}, int32{31}
        %28057 1/int32 LD %28055
        %30859 1/int1 CMP.ne int32{0}, %27929
        %28215 void BRC %30859
        --> block:28253, block:28216

      block:28216 - if-predicate
        <-- block:1578
        %30863 1/int32 CMOV.ne (int32{0}, %27921) int32{1}, int32{0}
        %30866 1/int32 CMOV.ne (int32{0}, %27925) int32{1}, int32{0}
        %30985 1/int32 OR %30863, %30866
        %30869 1/int32 CMOV.ne (int32{0}, %27925) int32{3}, int32{2}
        %30872 1/int32 CMOV.ne (int32{0}, %27917) int32{1}, int32{0}
        %30607 1/int32 CMOV.ne (%30985, int32{0}) %30869, %30872
        %30609 void BR 
        --> block:28253

      block:28253 - if-predicate
        <-- block:1578, block:28216
        %30608 1/int32 PHI int32{4}, %30607
        %30873 1/int1 CMP.ne int32{0}, %27913
        %28270 void BRC %30873
        --> block:28275, block:28308

      block:28275 - if-predicate
        <-- block:28253
        %30986 1/int32 AND int32{-2097153}, %27913
        %30877 1/int32 CMOV.eq (int32{0}, %30608) int32{2097152}, int32{0}
        %30987 1/int32 OR %30877, %30986
        %28293 1/fp32 SHUF %29614.y
        %28299 1/fp32 SHUF %29614.z
        %28305 1/fp32 SHUF %29614.w
        %28306 void intr.EXPORT %29614, %28293, %28299, %28305, %30987, int32{0}
        %28307 void BR 
        --> block:28308

      block:28308 - if-predicate
        <-- block:28253, block:28275
        %30878 1/int1 CMP.ne int32{0}, %27917
        %28316 void BRC %30878
        --> block:28317, block:28350

      block:28317 - if-predicate
        <-- block:28308
        %30988 1/int32 AND int32{-2097153}, %27917
        %30881 1/int32 CMOV.eq (int32{1}, %30608) int32{2097152}, int32{0}
        %30989 1/int32 OR %30881, %30988
        %28335 1/fp32 SHUF %29617.y
        %28341 1/fp32 SHUF %29617.z
        %28347 1/fp32 SHUF %29617.w
        %28348 void intr.EXPORT %29617, %28335, %28341, %28347, %30989, int32{0}
        %28349 void BR 
        --> block:28350

      block:28350 - if-predicate
        <-- block:28308, block:28317
        %30882 1/int1 CMP.ne int32{0}, %27921
        %28358 void BRC %30882
        --> block:28359, block:28392

      block:28359 - if-predicate
        <-- block:28350
        %30990 1/int32 AND int32{-2097153}, %27921
        %30885 1/int32 CMOV.eq (int32{2}, %30608) int32{2097152}, int32{0}
        %30991 1/int32 OR %30885, %30990
        %28377 1/fp32 SHUF %29620.y
        %28383 1/fp32 SHUF %29620.z
        %28389 1/fp32 SHUF %29620.w
        %28390 void intr.EXPORT %29620, %28377, %28383, %28389, %30991, int32{0}
        %28391 void BR 
        --> block:28392

      block:28392 - if-predicate
        <-- block:28350, block:28359
        %30886 1/int1 CMP.ne int32{0}, %27925
        %28400 void BRC %30886
        --> block:28401, block:28434

      block:28401 - if-predicate
        <-- block:28392
        %30992 1/int32 AND int32{-2097153}, %27925
        %30889 1/int32 CMOV.eq (int32{3}, %30608) int32{2097152}, int32{0}
        %30993 1/int32 OR %30889, %30992
        %28419 1/fp32 SHUF %29623.y
        %28425 1/fp32 SHUF %29623.z
        %28431 1/fp32 SHUF %29623.w
        %28432 void intr.EXPORT %29623, %28419, %28425, %28431, %30993, int32{0}
        %28433 void BR 
        --> block:28434

      block:28434 - if-predicate
        <-- block:28392, block:28401
        %28442 void BRC %30859
        --> block:28443, block:28271

      block:28443 - if-predicate
        <-- block:28434
        %30994 1/int32 AND int32{-2097153}, %27929
        %30892 1/int32 CMOV.eq (int32{4}, %30608) int32{2097152}, int32{0}
        %30995 1/int32 OR %30892, %30994
        %28461 1/fp32 SHUF %29626.y
        %28467 1/fp32 SHUF %29626.z
        %28473 1/fp32 SHUF %29626.w
        %28474 void intr.EXPORT %29626, %28461, %28467, %28473, %30995, int32{0}
        %28475 void BR 
        --> block:28271

      block:28271
        <-- block:28434, block:28443
        %30874 1/int1 CMP.ne int32{0}, %27933
        %28252 void BRC %30874
        --> block:28476, block:28528

      block:28476 - if-then
        <-- block:28271
        %28487 1/int32 SHUF %29629.y
        %28493 1/int32 SHUF %29629.z
        %28499 1/int32 SHUF %29629.w
        %28500 void intr.EXPORT %29629, %28487, %28493, %28499, %27933, int32{0}
        %28501 void BR 
        --> block:28528

      block:28528 - if-predicate
        <-- block:28476, block:28271
        %30893 1/int1 CMP.ne int32{0}, %27937
        %28536 void BRC %30893
        --> block:28502, block:28563

      block:28502 - if-then
        <-- block:28528
        %28513 1/int32 SHUF %29632.y
        %28519 1/int32 SHUF %29632.z
        %28525 1/int32 SHUF %29632.w
        %28526 void intr.EXPORT %29632, %28513, %28519, %28525, %27937, int32{0}
        %28527 void BR 
        --> block:28563

      block:28563 - if-predicate
        <-- block:28502, block:28528
        %30894 1/int1 CMP.ne int32{0}, %27941
        %28571 void BRC %30894
        --> block:28537, block:28598

      block:28537 - if-then
        <-- block:28563
        %28548 1/int32 SHUF %29635.y
        %28554 1/int32 SHUF %29635.z
        %28560 1/int32 SHUF %29635.w
        %28561 void intr.EXPORT %29635, %28548, %28554, %28560, %27941, int32{0}
        %28562 void BR 
        --> block:28598

      block:28598 - if-predicate
        <-- block:28537, block:28563
        %30895 1/int1 CMP.ne int32{0}, %27945
        %28606 void BRC %30895
        --> block:28572, block:28633

      block:28572 - if-then
        <-- block:28598
        %28583 1/int32 SHUF %29638.y
        %28589 1/int32 SHUF %29638.z
        %28595 1/int32 SHUF %29638.w
        %28596 void intr.EXPORT %29638, %28583, %28589, %28595, %27945, int32{0}
        %28597 void BR 
        --> block:28633

      block:28633 - if-predicate
        <-- block:28572, block:28598
        %30896 1/int1 CMP.ne int32{0}, %27949
        %28641 void BRC %30896
        --> block:28607, block:28668

      block:28607 - if-then
        <-- block:28633
        %28618 1/int32 SHUF %29641.y
        %28624 1/int32 SHUF %29641.z
        %28630 1/int32 SHUF %29641.w
        %28631 void intr.EXPORT %29641, %28618, %28624, %28630, %27949, int32{0}
        %28632 void BR 
        --> block:28668

      block:28668 - if-predicate
        <-- block:28607, block:28633
        %30897 1/int1 CMP.ne int32{0}, %27953
        %28676 void BRC %30897
        --> block:28642, block:28703

      block:28642 - if-then
        <-- block:28668
        %28653 1/int32 SHUF %29644.y
        %28659 1/int32 SHUF %29644.z
        %28665 1/int32 SHUF %29644.w
        %28666 void intr.EXPORT %29644, %28653, %28659, %28665, %27953, int32{0}
        %28667 void BR 
        --> block:28703

      block:28703 - if-predicate
        <-- block:28642, block:28668
        %30898 1/int1 CMP.ne int32{0}, %27957
        %28711 void BRC %30898
        --> block:28677, block:28738

      block:28677 - if-then
        <-- block:28703
        %28688 1/int32 SHUF %29647.y
        %28694 1/int32 SHUF %29647.z
        %28700 1/int32 SHUF %29647.w
        %28701 void intr.EXPORT %29647, %28688, %28694, %28700, %27957, int32{0}
        %28702 void BR 
        --> block:28738

      block:28738 - if-predicate
        <-- block:28677, block:28703
        %30899 1/int1 CMP.ne int32{0}, %27961
        %28746 void BRC %30899
        --> block:28712, block:28773

      block:28712 - if-then
        <-- block:28738
        %28723 1/int32 SHUF %29650.y
        %28729 1/int32 SHUF %29650.z
        %28735 1/int32 SHUF %29650.w
        %28736 void intr.EXPORT %29650, %28723, %28729, %28735, %27961, int32{0}
        %28737 void BR 
        --> block:28773

      block:28773 - if-predicate
        <-- block:28712, block:28738
        %30900 1/int1 CMP.ne int32{0}, %27965
        %28781 void BRC %30900
        --> block:28747, block:28808

      block:28747 - if-then
        <-- block:28773
        %28758 1/int32 SHUF %29653.y
        %28764 1/int32 SHUF %29653.z
        %28770 1/int32 SHUF %29653.w
        %28771 void intr.EXPORT %29653, %28758, %28764, %28770, %27965, int32{0}
        %28772 void BR 
        --> block:28808

      block:28808 - if-predicate
        <-- block:28747, block:28773
        %30901 1/int1 CMP.ne int32{0}, %27969
        %28816 void BRC %30901
        --> block:28782, block:28843

      block:28782 - if-then
        <-- block:28808
        %28793 1/int32 SHUF %29656.y
        %28799 1/int32 SHUF %29656.z
        %28805 1/int32 SHUF %29656.w
        %28806 void intr.EXPORT %29656, %28793, %28799, %28805, %27969, int32{0}
        %28807 void BR 
        --> block:28843

      block:28843 - if-predicate
        <-- block:28782, block:28808
        %30902 1/int1 CMP.ne int32{0}, %27973
        %28851 void BRC %30902
        --> block:28817, block:28878

      block:28817 - if-then
        <-- block:28843
        %28828 1/int32 SHUF %29659.y
        %28834 1/int32 SHUF %29659.z
        %28840 1/int32 SHUF %29659.w
        %28841 void intr.EXPORT %29659, %28828, %28834, %28840, %27973, int32{0}
        %28842 void BR 
        --> block:28878

      block:28878 - if-predicate
        <-- block:28817, block:28843
        %30903 1/int1 CMP.ne int32{0}, %27977
        %28886 void BRC %30903
        --> block:28852, block:28913

      block:28852 - if-then
        <-- block:28878
        %28863 1/int32 SHUF %29662.y
        %28869 1/int32 SHUF %29662.z
        %28875 1/int32 SHUF %29662.w
        %28876 void intr.EXPORT %29662, %28863, %28869, %28875, %27977, int32{0}
        %28877 void BR 
        --> block:28913

      block:28913 - if-predicate
        <-- block:28852, block:28878
        %30904 1/int1 CMP.ne int32{0}, %27981
        %28921 void BRC %30904
        --> block:28887, block:28948

      block:28887 - if-then
        <-- block:28913
        %28898 1/int32 SHUF %29665.y
        %28904 1/int32 SHUF %29665.z
        %28910 1/int32 SHUF %29665.w
        %28911 void intr.EXPORT %29665, %28898, %28904, %28910, %27981, int32{0}
        %28912 void BR 
        --> block:28948

      block:28948 - if-predicate
        <-- block:28887, block:28913
        %30905 1/int1 CMP.ne int32{0}, %27985
        %28956 void BRC %30905
        --> block:28922, block:28983

      block:28922 - if-then
        <-- block:28948
        %28933 1/int32 SHUF %29668.y
        %28939 1/int32 SHUF %29668.z
        %28945 1/int32 SHUF %29668.w
        %28946 void intr.EXPORT %29668, %28933, %28939, %28945, %27985, int32{0}
        %28947 void BR 
        --> block:28983

      block:28983 - if-predicate
        <-- block:28922, block:28948
        %30906 1/int1 CMP.ne int32{0}, %27989
        %28991 void BRC %30906
        --> block:28957, block:29018

      block:28957 - if-then
        <-- block:28983
        %28968 1/int32 SHUF %29671.y
        %28974 1/int32 SHUF %29671.z
        %28980 1/int32 SHUF %29671.w
        %28981 void intr.EXPORT %29671, %28968, %28974, %28980, %27989, int32{0}
        %28982 void BR 
        --> block:29018

      block:29018 - if-predicate
        <-- block:28957, block:28983
        %30907 1/int1 CMP.ne int32{0}, %27993
        %29026 void BRC %30907
        --> block:28992, block:29053

      block:28992 - if-then
        <-- block:29018
        %29003 1/int32 SHUF %29674.y
        %29009 1/int32 SHUF %29674.z
        %29015 1/int32 SHUF %29674.w
        %29016 void intr.EXPORT %29674, %29003, %29009, %29015, %27993, int32{0}
        %29017 void BR 
        --> block:29053

      block:29053 - if-predicate
        <-- block:28992, block:29018
        %30908 1/int1 CMP.ne int32{0}, %27997
        %29061 void BRC %30908
        --> block:29027, block:29088

      block:29027 - if-then
        <-- block:29053
        %29038 1/int32 SHUF %29677.y
        %29044 1/int32 SHUF %29677.z
        %29050 1/int32 SHUF %29677.w
        %29051 void intr.EXPORT %29677, %29038, %29044, %29050, %27997, int32{0}
        %29052 void BR 
        --> block:29088

      block:29088 - if-predicate
        <-- block:29027, block:29053
        %30909 1/int1 CMP.ne int32{0}, %28001
        %29096 void BRC %30909
        --> block:29062, block:29123

      block:29062 - if-then
        <-- block:29088
        %29073 1/int32 SHUF %29680.y
        %29079 1/int32 SHUF %29680.z
        %29085 1/int32 SHUF %29680.w
        %29086 void intr.EXPORT %29680, %29073, %29079, %29085, %28001, int32{0}
        %29087 void BR 
        --> block:29123

      block:29123 - if-predicate
        <-- block:29062, block:29088
        %30910 1/int1 CMP.ne int32{0}, %28005
        %29131 void BRC %30910
        --> block:29097, block:29158

      block:29097 - if-then
        <-- block:29123
        %29108 1/int32 SHUF %29683.y
        %29114 1/int32 SHUF %29683.z
        %29120 1/int32 SHUF %29683.w
        %29121 void intr.EXPORT %29683, %29108, %29114, %29120, %28005, int32{0}
        %29122 void BR 
        --> block:29158

      block:29158 - if-predicate
        <-- block:29097, block:29123
        %30911 1/int1 CMP.ne int32{0}, %28009
        %29166 void BRC %30911
        --> block:29132, block:29193

      block:29132 - if-then
        <-- block:29158
        %29143 1/int32 SHUF %29686.y
        %29149 1/int32 SHUF %29686.z
        %29155 1/int32 SHUF %29686.w
        %29156 void intr.EXPORT %29686, %29143, %29149, %29155, %28009, int32{0}
        %29157 void BR 
        --> block:29193

      block:29193 - if-predicate
        <-- block:29132, block:29158
        %30912 1/int1 CMP.ne int32{0}, %28013
        %29201 void BRC %30912
        --> block:29167, block:29228

      block:29167 - if-then
        <-- block:29193
        %29178 1/int32 SHUF %29689.y
        %29184 1/int32 SHUF %29689.z
        %29190 1/int32 SHUF %29689.w
        %29191 void intr.EXPORT %29689, %29178, %29184, %29190, %28013, int32{0}
        %29192 void BR 
        --> block:29228

      block:29228 - if-predicate
        <-- block:29167, block:29193
        %30913 1/int1 CMP.ne int32{0}, %28017
        %29236 void BRC %30913
        --> block:29202, block:29263

      block:29202 - if-then
        <-- block:29228
        %29213 1/int32 SHUF %29692.y
        %29219 1/int32 SHUF %29692.z
        %29225 1/int32 SHUF %29692.w
        %29226 void intr.EXPORT %29692, %29213, %29219, %29225, %28017, int32{0}
        %29227 void BR 
        --> block:29263

      block:29263 - if-predicate
        <-- block:29202, block:29228
        %30914 1/int1 CMP.ne int32{0}, %28021
        %29271 void BRC %30914
        --> block:29237, block:29298

      block:29237 - if-then
        <-- block:29263
        %29248 1/int32 SHUF %29695.y
        %29254 1/int32 SHUF %29695.z
        %29260 1/int32 SHUF %29695.w
        %29261 void intr.EXPORT %29695, %29248, %29254, %29260, %28021, int32{0}
        %29262 void BR 
        --> block:29298

      block:29298 - if-predicate
        <-- block:29237, block:29263
        %30915 1/int1 CMP.ne int32{0}, %28025
        %29306 void BRC %30915
        --> block:29272, block:29333

      block:29272 - if-then
        <-- block:29298
        %29283 1/int32 SHUF %29698.y
        %29289 1/int32 SHUF %29698.z
        %29295 1/int32 SHUF %29698.w
        %29296 void intr.EXPORT %29698, %29283, %29289, %29295, %28025, int32{0}
        %29297 void BR 
        --> block:29333

      block:29333 - if-predicate
        <-- block:29272, block:29298
        %30916 1/int1 CMP.ne int32{0}, %28029
        %29341 void BRC %30916
        --> block:29307, block:29368

      block:29307 - if-then
        <-- block:29333
        %29318 1/int32 SHUF %29701.y
        %29324 1/int32 SHUF %29701.z
        %29330 1/int32 SHUF %29701.w
        %29331 void intr.EXPORT %29701, %29318, %29324, %29330, %28029, int32{0}
        %29332 void BR 
        --> block:29368

      block:29368 - if-predicate
        <-- block:29307, block:29333
        %30917 1/int1 CMP.ne int32{0}, %28033
        %29376 void BRC %30917
        --> block:29342, block:29403

      block:29342 - if-then
        <-- block:29368
        %29353 1/int32 SHUF %29704.y
        %29359 1/int32 SHUF %29704.z
        %29365 1/int32 SHUF %29704.w
        %29366 void intr.EXPORT %29704, %29353, %29359, %29365, %28033, int32{0}
        %29367 void BR 
        --> block:29403

      block:29403 - if-predicate
        <-- block:29342, block:29368
        %30918 1/int1 CMP.ne int32{0}, %28037
        %29411 void BRC %30918
        --> block:29377, block:29438

      block:29377 - if-then
        <-- block:29403
        %29388 1/int32 SHUF %29707.y
        %29394 1/int32 SHUF %29707.z
        %29400 1/int32 SHUF %29707.w
        %29401 void intr.EXPORT %29707, %29388, %29394, %29400, %28037, int32{0}
        %29402 void BR 
        --> block:29438

      block:29438 - if-predicate
        <-- block:29377, block:29403
        %30919 1/int1 CMP.ne int32{0}, %28041
        %29446 void BRC %30919
        --> block:29412, block:29473

      block:29412 - if-then
        <-- block:29438
        %29423 1/int32 SHUF %29710.y
        %29429 1/int32 SHUF %29710.z
        %29435 1/int32 SHUF %29710.w
        %29436 void intr.EXPORT %29710, %29423, %29429, %29435, %28041, int32{0}
        %29437 void BR 
        --> block:29473

      block:29473 - if-predicate
        <-- block:29412, block:29438
        %30920 1/int1 CMP.ne int32{0}, %28045
        %29481 void BRC %30920
        --> block:29447, block:29508

      block:29447 - if-then
        <-- block:29473
        %29458 1/int32 SHUF %29713.y
        %29464 1/int32 SHUF %29713.z
        %29470 1/int32 SHUF %29713.w
        %29471 void intr.EXPORT %29713, %29458, %29464, %29470, %28045, int32{0}
        %29472 void BR 
        --> block:29508

      block:29508 - if-predicate
        <-- block:29447, block:29473
        %30921 1/int1 CMP.ne int32{0}, %28049
        %29516 void BRC %30921
        --> block:29482, block:29543

      block:29482 - if-then
        <-- block:29508
        %29493 1/int32 SHUF %29716.y
        %29499 1/int32 SHUF %29716.z
        %29505 1/int32 SHUF %29716.w
        %29506 void intr.EXPORT %29716, %29493, %29499, %29505, %28049, int32{0}
        %29507 void BR 
        --> block:29543

      block:29543 - if-predicate
        <-- block:29482, block:29508
        %30922 1/int1 CMP.ne int32{0}, %28053
        %29551 void BRC %30922
        --> block:29517, block:29578

      block:29517 - if-then
        <-- block:29543
        %29528 1/int32 SHUF %29719.y
        %29534 1/int32 SHUF %29719.z
        %29540 1/int32 SHUF %29719.w
        %29541 void intr.EXPORT %29719, %29528, %29534, %29540, %28053, int32{0}
        %29542 void BR 
        --> block:29578

      block:29578 - if-predicate
        <-- block:29517, block:29543
        %30923 1/int1 CMP.ne int32{0}, %28057
        %29586 void BRC %30923
        --> block:29552, block:642

      block:29552 - if-then
        <-- block:29578
        %29563 1/int32 SHUF %29722.y
        %29569 1/int32 SHUF %29722.z
        %29575 1/int32 SHUF %29722.w
        %29576 void intr.EXPORT %29722, %29563, %29569, %29575, %28057, int32{0}
        %29577 void BR 
        --> block:642

      block:642 - exit
        <-- block:1580, block:29552, block:29578
        --> 


--------------------------------------------------------------------------------

>> pass 397/815: validate graph
    validate graph (0045C2BE)
>> pass 398/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 399/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 400/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 401/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 402/815: integer division lowering
    integer division lowering (A47FC93A)
>> pass 403/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 404/815: validate graph
    validate graph (0045C2BE)
>> pass 405/815: loop analysis
    loop analysis (598E85BD)
>> pass 406/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 407/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 408/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 409/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 410/815: legalize values
    legalize values (3229DE24)
>> pass 411/815: validate graph
    validate graph (0045C2BE)
>> pass 412/815: automatic gradient adjust
    automatic gradient adjust (44B7C029)
>> pass 413/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 414/815: validate graph
    validate graph (0045C2BE)
>> pass 415/815: match uniforms
    match uniforms (E61EA005)
>> pass 416/815: validate graph
    validate graph (0045C2BE)
>> pass 417/815: ApplySrtSignature
    ApplySrtSignature (63836394)
>> pass 418/815: validate graph
    validate graph (0045C2BE)
>> pass 419/815: lower srt
    lower srt (09AD683D)
>> pass 420/815: validate graph
    validate graph (0045C2BE)
>> pass 421/815: loop analysis
    loop analysis (598E85BD)
>> pass 422/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 423/815: validate graph
    validate graph (0045C2BE)
>> pass 424/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 425/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 426/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 427/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 428/815: legalize diverging sharps
    legalize diverging sharps (DEA6F8ED)
>> pass 429/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 430/815: validate graph
    validate graph (0045C2BE)
>> pass 431/815: loop analysis
    loop analysis (598E85BD)
>> pass 432/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 433/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 434/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 435/815: lower primitive buffer access
    lower primitive buffer access (F17366F2)
>> pass 436/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 437/815: validate graph
    validate graph (0045C2BE)
>> pass 438/815: remove inselem/getelem pairs
    remove inselem/getelem pairs (2EA2F303)
>> pass 439/815: validate graph
    validate graph (0045C2BE)
>> pass 440/815: loop analysis
    loop analysis (598E85BD)
>> pass 441/815: remove redundancy
    remove redundancy (1AC4449D)
>> pass 442/815: validate graph
    validate graph (0045C2BE)
>> pass 443/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 444/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 445/815: validate graph
    validate graph (0045C2BE)
>> pass 446/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 447/815: remove dead code
    remove dead code (B7E6F507)
>> pass 448/815: validate graph
    validate graph (0045C2BE)
>> pass 449/815: constant propagation
    constant propagation (5CBB3303)
>> pass 450/815: validate graph
    validate graph (0045C2BE)
>> pass 451/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 452/815: validate graph
    validate graph (0045C2BE)
>> pass 453/815: lower export shader output
    lower export shader output (B2400657)
>> pass 454/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 455/815: validate graph
    validate graph (0045C2BE)
>> pass 456/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 457/815: remove dead code
    remove dead code (B7E6F507)
>> pass 458/815: validate graph
    validate graph (0045C2BE)
>> pass 459/815: lower sin/cos to r10 normalized sin/cos
    lower sin/cos to r10 normalized sin/cos (344A69D4)
>> pass 460/815: validate graph
    validate graph (0045C2BE)
>> pass 461/815: lower vertex input bindings
    lower vertex input bindings (AF053778)
>> pass 462/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 463/815: validate graph
    validate graph (0045C2BE)
>> pass 464/815: loop analysis
    loop analysis (598E85BD)
>> pass 465/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 466/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 467/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 468/815: lower switch
    lower switch (D1384996)
>> pass 469/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 470/815: validate graph
    validate graph (0045C2BE)
>> pass 471/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 472/815: validate graph
    validate graph (0045C2BE)
>> pass 473/815: build program properties
    build program properties (B69B900E)
>> pass 474/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 475/815: validate graph
    validate graph (0045C2BE)
>> pass 476/815: create export intrinsics
    create export intrinsics (FBA3CDD7)
>> pass 477/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 478/815: validate graph
    validate graph (0045C2BE)
>> pass 479/815: R10LowerNggVs
    R10LowerNggVs (24512580)
>> pass 480/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 481/815: validate graph
    validate graph (0045C2BE)
>> pass 482/815: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 483/815: validate graph
    validate graph (0045C2BE)
>> pass 484/815: loop analysis
    loop analysis (598E85BD)
>> pass 485/815: convert to SSA
    convert to SSA (C60B7C93)
>> pass 486/815: validate graph
    validate graph (0045C2BE)
>> pass 487/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 488/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 489/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 490/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 491/815: lower uniformity
    lower uniformity (69E21F86)
>> pass 492/815: validate graph
    validate graph (0045C2BE)
>> pass 493/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 494/815: validate graph
    validate graph (0045C2BE)
>> pass 495/815: convert complex load/store
    convert complex load/store (B75EFA44)
>> pass 496/815: validate graph
    validate graph (0045C2BE)
>> pass 497/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 498/815: validate graph
    validate graph (0045C2BE)
>> pass 499/815: constant propagation
    constant propagation (5CBB3303)
>> pass 500/815: validate graph
    validate graph (0045C2BE)
>> pass 501/815: loop analysis
    loop analysis (598E85BD)
>> pass 502/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 503/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 504/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 505/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 506/815: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 507/815: legalize intrinsics
    legalize intrinsics (F8DFB406)
>> pass 508/815: validate graph
    validate graph (0045C2BE)
>> pass 509/815: optimize frontface binding
    optimize frontface binding (B8A15AF3)
>> pass 510/815: validate graph
    validate graph (0045C2BE)
>> pass 511/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 512/815: validate graph
    validate graph (0045C2BE)
>> pass 513/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 514/815: remove dead code
    remove dead code (B7E6F507)
>> pass 515/815: validate graph
    validate graph (0045C2BE)
>> pass 516/815: layout constant buffers
    layout constant buffers (2D3268D5)
>> pass 517/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 518/815: validate graph
    validate graph (0045C2BE)
>> pass 519/815: create input usage slot request
    create input usage slot request (720114FB)
>> pass 520/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 521/815: validate graph
    validate graph (0045C2BE)
>> pass 522/815: collect symbols
    collect symbols (4F1FA86C)
>> pass 523/815: validate graph
    validate graph (0045C2BE)
>> pass 524/815: symbol cleanup
    symbol cleanup (C8E4EFB3)
>> pass 525/815: validate graph
    validate graph (0045C2BE)
>> pass 526/815: lower buffer conversion
    lower buffer conversion (987C5DD4)
>> pass 527/815: validate graph
    validate graph (0045C2BE)
>> pass 528/815: legalize types
    legalize types (6424EDB9)
>> pass 529/815: validate graph
    validate graph (0045C2BE)
>> pass 530/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:31213

      block:31213 - ngg-main
        <-- block:224
        %31295 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %31296 1/int32 LSHR %31295, int32{8}
        %31297 1/int32 AND %31296, int32{255}
        %31298 1/int32 AND %31295, int32{255}
        %31299 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %31300 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %31304 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %31305 1/int32 SHL %31297, int32{12}
        %31306 1/int32 OR %31298, %31305
        %31307 void intr.s_sendmsg %31306, int32{9} has_side_effects dependent_on_side_effects
        %31308 1/int32 NEG %31297
        %31309 1/int32 ADD nsw %31308, int32{64}
        %31310 1/int64 CONV %31309
        %31311 1/int64 LSHR int64{-1}, %31310
        %31312 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31311 uniform_width
        %31313 1/int1 CMP.ne %31312, int32{0}
        %31314 void BRC %31313[flatten:force][switch:default]
        --> block:31440, block:31432

      block:31440
        <-- block:31213
        %31441 void intr.EXPORT %31304, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %31442 void BR 
        --> block:31432

      block:31432 - if-predicate
        <-- block:31440, block:31213
        %31433 1/int32 NEG %31298
        %31434 1/int32 ADD nsw %31433, int32{64}
        %31435 1/int64 CONV %31434
        %31436 1/int64 LSHR int64{-1}, %31435
        %31437 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31436 uniform_width
        %31438 1/int1 CMP.ne %31437, int32{0}
        %31439 void BRC %31438[flatten:force][switch:default]
        --> block:31805, block:223

      block:31805
        <-- block:31432
        %31158 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %31159 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %31160 roshared(0) * 4/int32[32] CONV_reinterp %31159
        %31161 roshared(0) * 1/int32[32] CONV_reinterp %31158
        %31162 roshared(0) * 1/int32 GETELEMPTR %31161, int32{0}, int32{0}
        %31163 1/int32 LD %31162
        %31164 1/int32 AND %31163, int32{31}
        %31167 1/int32 LSHR %31163, int32{5}
        %31168 1/int32 AND %31167, int32{3}
        %31169 1/int32 LSHR %31163, int32{7}
        %31170 1/int32 AND %31169, int32{127}
        %31171 1/int32 LSHR %31163, int32{14}
        %31172 1/int32 AND %31171, int32{4095}
        %31173 1/int32 LSHR %31163, int32{26}
        %31174 1/int32 AND %31173, int32{1}
        %31177 1/int32 CMOV.eq (%31174, int32{0}) %31299, %31300
        %31178 roshared(0) * 4/int32 GETELEMPTR %31160, int32{0}, %31164
        %31179 4/int32 LD %31178
        %31181 1/int32 intr.s_lshl4_add_u32 %31168, int32{786432}
        %31183 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31181
        %31184 1/int32 CONV %31183
        %31185 1/int32 SHUF %31179.w
        %31187 1/int32 AND %31185, int32{-524288}
        %31188 1/int32 SHL %31170, int32{12}
        %31189 1/int32 OR %31187, %31188
        %31190 1/int32 OR %31189, %31184
        %31191 1/int32 CMOV.eq (%31170, int32{0}) %31185, %31190
        %31192 4/int32 SHUF %31179.xyz-,  %31191.---x
        %31194 3/fp32 intr.buffer_load_format_xyz %31177, %31192, %31172, int64{36029896530591744}
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16]
        %342 1/int32 LD %321
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30506
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %30924 1/fp32 MUL %366, %31194
        %30452 1/fp32 SHUF %31194.y
        %30925 1/fp32 MUL %370, %30452
        %30453 1/fp32 SHUF %31194.z
        %30926 1/fp32 MUL %374, %30453
        %30927 1/fp32 ADD %378, %30924
        %30928 1/fp32 ADD %30927, %30925
        %30929 1/fp32 ADD %30928, %30926
        %30454 1/fp32 SHUF %366.y
        %30930 1/fp32 MUL %30454, %31194
        %30455 1/fp32 SHUF %370.y
        %30931 1/fp32 MUL %30452, %30455
        %30457 1/fp32 SHUF %374.y
        %30932 1/fp32 MUL %30453, %30457
        %30459 1/fp32 SHUF %378.y
        %30933 1/fp32 ADD %30459, %30930
        %30934 1/fp32 ADD %30933, %30931
        %30935 1/fp32 ADD %30934, %30932
        %30460 1/fp32 SHUF %366.z
        %30936 1/fp32 MUL %30460, %31194
        %30461 1/fp32 SHUF %370.z
        %30937 1/fp32 MUL %30452, %30461
        %30463 1/fp32 SHUF %374.z
        %30938 1/fp32 MUL %30453, %30463
        %30465 1/fp32 SHUF %378.z
        %30939 1/fp32 ADD %30465, %30936
        %30940 1/fp32 ADD %30939, %30937
        %30941 1/fp32 ADD %30940, %30938
        %30466 1/fp32 SHUF %366.w
        %30942 1/fp32 MUL %30466, %31194
        %30467 1/fp32 SHUF %370.w
        %30943 1/fp32 MUL %30452, %30467
        %30469 1/fp32 SHUF %374.w
        %30944 1/fp32 MUL %30453, %30469
        %30471 1/fp32 SHUF %378.w
        %30945 1/fp32 ADD %30471, %30942
        %30946 1/fp32 ADD %30945, %30943
        %30947 1/fp32 ADD %30946, %30944
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30948 1/fp32 MUL %7099, %30929
        %30949 1/fp32 MUL %7101, %30935
        %30950 1/fp32 MUL %7103, %30941
        %30951 1/fp32 MUL %7105, %30947
        %30952 1/fp32 ADD %30948, %30949
        %30953 1/fp32 ADD %30952, %30950
        %30954 1/fp32 ADD %30953, %30951
        %30472 1/fp32 SHUF %7099.y
        %30955 1/fp32 MUL %30472, %30929
        %30473 1/fp32 SHUF %7101.y
        %30956 1/fp32 MUL %30473, %30935
        %30474 1/fp32 SHUF %7103.y
        %30957 1/fp32 MUL %30474, %30941
        %30475 1/fp32 SHUF %7105.y
        %30958 1/fp32 MUL %30475, %30947
        %30959 1/fp32 ADD %30955, %30956
        %30960 1/fp32 ADD %30959, %30957
        %30961 1/fp32 ADD %30960, %30958
        %30476 1/fp32 SHUF %7099.z
        %30962 1/fp32 MUL %30476, %30929
        %30477 1/fp32 SHUF %7101.z
        %30963 1/fp32 MUL %30477, %30935
        %30478 1/fp32 SHUF %7103.z
        %30964 1/fp32 MUL %30478, %30941
        %30479 1/fp32 SHUF %7105.z
        %30965 1/fp32 MUL %30479, %30947
        %30966 1/fp32 ADD %30962, %30963
        %30967 1/fp32 ADD %30966, %30964
        %30968 1/fp32 ADD %30967, %30965
        %30480 1/fp32 SHUF %7099.w
        %30969 1/fp32 MUL %30480, %30929
        %30481 1/fp32 SHUF %7101.w
        %30970 1/fp32 MUL %30481, %30935
        %30482 1/fp32 SHUF %7103.w
        %30971 1/fp32 MUL %30482, %30941
        %30483 1/fp32 SHUF %7105.w
        %30972 1/fp32 MUL %30483, %30947
        %30973 1/fp32 ADD %30969, %30970
        %30974 1/fp32 ADD %30973, %30971
        %30975 1/fp32 ADD %30974, %30972
        %7138 1/fp32 SHUF %30954.x
        %31465 void intr.EXPORT %7138, %30961, %30968, %30975, int32{3080204}, int32{0} pos0 x y z w done
        %31931 void BR 
        --> block:223

      block:223 - exit
        <-- block:31432, block:31805
        --> 


--------------------------------------------------------------------------------

>> pass 531/815: validate graph
    validate graph (0045C2BE)
>> pass 532/815: loop analysis
    loop analysis (598E85BD)
>> pass 533/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 534/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 535/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 536/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 537/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 538/815: validate graph
    validate graph (0045C2BE)
>> pass 539/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 540/815: remove dead code
    remove dead code (B7E6F507)
>> pass 541/815: validate graph
    validate graph (0045C2BE)
>> pass 542/815: r10 optimize discard
    r10 optimize discard (FBBC97CD)
>> pass 543/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 544/815: validate graph
    validate graph (0045C2BE)
>> pass 545/815: loop analysis
    loop analysis (598E85BD)
>> pass 546/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 547/815: delete dead loops
    delete dead loops (72FEF67D)
>> pass 548/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 549/815: validate graph
    validate graph (0045C2BE)
>> pass 550/815: loop analysis
    loop analysis (598E85BD)
>> pass 551/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 552/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 553/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 554/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 555/815: schedule inter block
    schedule inter block (DB653091)
>> pass 556/815: validate graph
    validate graph (0045C2BE)
>> pass 557/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 558/815: validate graph
    validate graph (0045C2BE)
>> pass 559/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 560/815: remove dead code
    remove dead code (B7E6F507)
>> pass 561/815: validate graph
    validate graph (0045C2BE)
>> pass 562/815: loop analysis
    loop analysis (598E85BD)
>> pass 563/815: structural analysis
    structural analysis (A71DE301)
>> pass 564/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 565/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 566/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 567/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 568/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 569/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 570/815: validate graph
    validate graph (0045C2BE)
>> pass 571/815: loop analysis
    loop analysis (598E85BD)
>> pass 572/815: structural analysis
    structural analysis (A71DE301)
>> pass 573/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 574/815: propagate conditionality
    propagate conditionality (310FDAFB)
>> pass 575/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 576/815: validate graph
    validate graph (0045C2BE)
>> pass 577/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 578/815: validate graph
    validate graph (0045C2BE)
>> pass 579/815: loop analysis
    loop analysis (598E85BD)
>> pass 580/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 581/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 582/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 583/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 584/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 585/815: validate graph
    validate graph (0045C2BE)
>> pass 586/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 587/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 588/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 589/815: code sinking of texture instructions into conditional blocks
    code sinking of texture instructions into conditional blocks (18CCADBE)
>> pass 590/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 591/815: validate graph
    validate graph (0045C2BE)
>> pass 592/815: remove redundant stores
    remove redundant stores (21EF9D9E)
>> pass 593/815: validate graph
    validate graph (0045C2BE)
>> pass 594/815: loop analysis
    loop analysis (598E85BD)
>> pass 595/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 596/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 597/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 598/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 599/815: global scheduler
    global scheduler (F83F59FC)
>> pass 600/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 601/815: validate graph
    validate graph (0045C2BE)
>> pass 602/815: break critical edges
    break critical edges (D716EAB4)
>> pass 603/815: validate graph
    validate graph (0045C2BE)
>> pass 604/815: loop analysis
    loop analysis (598E85BD)
>> pass 605/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 606/815: scalar evolution analysis
    scalar evolution analysis (B93409FF)
>> pass 607/815: range analysis
    range analysis (11B7AAEB)
>> pass 608/815: range propagation
    range propagation (45F717C0)
>> pass 609/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 610/815: validate graph
    validate graph (0045C2BE)
>> pass 611/815: constant propagation
    constant propagation (5CBB3303)
>> pass 612/815: validate graph
    validate graph (0045C2BE)
>> pass 613/815: sparse conditional constant propagation
    sparse conditional constant propagation (41B5CAD4)
>> pass 614/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 615/815: validate graph
    validate graph (0045C2BE)
>> pass 616/815: loop analysis
    loop analysis (598E85BD)
>> pass 617/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 618/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 619/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 620/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 621/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 622/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 623/815: validate graph
    validate graph (0045C2BE)
>> pass 624/815: simplify control flow graph
    simplify control flow graph (3A57465C)
>> pass 625/815: validate graph
    validate graph (0045C2BE)
>> pass 626/815: loop analysis
    loop analysis (598E85BD)
>> pass 627/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 628/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 629/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 630/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 631/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 632/815: validate graph
    validate graph (0045C2BE)
>> pass 633/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:32136

      block:32136
        <-- block:224
        %31295 1/int32 intr.READSPECIALSCALARREG int32{80} 's_gs_state'
        %31296 1/int32 LSHR %31295, int32{8}
        %31297 1/int32 AND %31296, int32{255}
        %31298 1/int32 AND %31295, int32{255}
        %31305 1/int32 SHL %31297, int32{12}
        %31306 1/int32 OR %31298, %31305
        %31307 void intr.s_sendmsg %31306, int32{9} has_side_effects dependent_on_side_effects
        %31308 1/int32 NEG %31297
        %31309 1/int32 ADD nsw %31308, int32{64}
        %31310 1/int64 CONV %31309
        %31311 1/int64 LSHR int64{-1}, %31310
        %31312 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31311 uniform_width
        %31313 1/int1 CMP.ne %31312, int32{0}
        %31314 void BRC %31313[flatten:force][switch:default]
        --> block:31440, block:32138

      block:31440
        <-- block:32136
        %31304 1/int32 intr.READSPECIALVECTORREG int32{83} 'v_vtx0_vtx1_offset'
        %31441 void intr.EXPORT %31304, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0} prim x done
        %31442 void BR 
        --> block:32138

      block:32138
        <-- block:31440, block:32136
        %31433 1/int32 NEG %31298
        %31434 1/int32 ADD nsw %31433, int32{64}
        %31435 1/int64 CONV %31434
        %31436 1/int64 LSHR int64{-1}, %31435
        %31437 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %31436 uniform_width
        %31438 1/int1 CMP.ne %31437, int32{0}
        %31439 void BRC %31438[flatten:force][switch:default]
        --> block:31805, block:223

      block:31805
        <-- block:32138
        %31299 1/int32 intr.READSPECIALVECTORREG int32{12} 'v_index'
        %31300 1/int32 intr.READSPECIALVECTORREG int32{15} 'v_instance0'
        %31158 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}
        %31159 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}
        %31160 roshared(0) * 4/int32[32] CONV_reinterp %31159
        %31161 roshared(0) * 1/int32[32] CONV_reinterp %31158
        %31162 roshared(0) * 1/int32 GETELEMPTR %31161, int32{0}, int32{0}
        %31163 1/int32 LD %31162
        %31164 1/int32 AND %31163, int32{31}
        %31167 1/int32 LSHR %31163, int32{5}
        %31168 1/int32 AND %31167, int32{3}
        %31169 1/int32 LSHR %31163, int32{7}
        %31170 1/int32 AND %31169, int32{127}
        %31171 1/int32 LSHR %31163, int32{14}
        %31172 1/int32 AND %31171, int32{4095}
        %31173 1/int32 LSHR %31163, int32{26}
        %31174 1/int32 AND %31173, int32{1}
        %31968 1/int64 intr.v_cmp_eq_u32 %31174, int32{0}
        %31969 1/int32 intr.v_cndmask_b32 %31300, %31299, %31968
        %31178 roshared(0) * 4/int32 GETELEMPTR %31160, int32{0}, %31164
        %31179 4/int32 LD %31178
        %31181 1/int32 intr.s_lshl4_add_u32 %31168, int32{786432}
        %31183 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31181
        %31184 1/int32 CONV %31183
        %31185 1/int32 SHUF %31179.w
        %31187 1/int32 AND %31185, int32{-524288}
        %31188 1/int32 SHL %31170, int32{12}
        %31189 1/int32 OR %31187, %31188
        %31190 1/int32 OR %31189, %31184
        %31970 1/int32 intr.s_cmov_scalar %31170, int32{0}, %31185, %31190, int32{0}
        %31192 4/int32 SHUF %31179.xyz-,  %31970.---x
        %31194 3/fp32 intr.buffer_load_format_xyz %31969, %31192, %31172, int64{36029896530591744}
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16]
        %342 1/int32 LD %321
        %7048 robuffer(0) * 4/fp32[4]:column_major[] intr.PTR_FROM_BUFOBJ %30506
        %7049 robuffer(0) * 4/fp32[4]:column_major GETELEMPTR %7048, int32{0}, %342
        %29600 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{0}
        %366 4/fp32 LD %29600
        %29602 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{1}
        %370 4/fp32 LD %29602
        %29604 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{2}
        %374 4/fp32 LD %29604
        %29606 robuffer(0) * 4/fp32 GETELEMPTR %7049, int32{0}, int32{3}
        %378 4/fp32 LD %29606
        %30924 1/fp32 MUL %366, %31194
        %30452 1/fp32 SHUF %31194.y
        %30925 1/fp32 MUL %370, %30452
        %30453 1/fp32 SHUF %31194.z
        %30926 1/fp32 MUL %374, %30453
        %30927 1/fp32 ADD %378, %30924
        %30928 1/fp32 ADD %30927, %30925
        %30929 1/fp32 ADD %30928, %30926
        %30454 1/fp32 SHUF %366.y
        %30930 1/fp32 MUL %30454, %31194
        %30455 1/fp32 SHUF %370.y
        %30931 1/fp32 MUL %30452, %30455
        %30457 1/fp32 SHUF %374.y
        %30932 1/fp32 MUL %30453, %30457
        %30459 1/fp32 SHUF %378.y
        %30933 1/fp32 ADD %30459, %30930
        %30934 1/fp32 ADD %30933, %30931
        %30935 1/fp32 ADD %30934, %30932
        %30460 1/fp32 SHUF %366.z
        %30936 1/fp32 MUL %30460, %31194
        %30461 1/fp32 SHUF %370.z
        %30937 1/fp32 MUL %30452, %30461
        %30463 1/fp32 SHUF %374.z
        %30938 1/fp32 MUL %30453, %30463
        %30465 1/fp32 SHUF %378.z
        %30939 1/fp32 ADD %30465, %30936
        %30940 1/fp32 ADD %30939, %30937
        %30941 1/fp32 ADD %30940, %30938
        %30466 1/fp32 SHUF %366.w
        %30942 1/fp32 MUL %30466, %31194
        %30467 1/fp32 SHUF %370.w
        %30943 1/fp32 MUL %30452, %30467
        %30469 1/fp32 SHUF %374.w
        %30944 1/fp32 MUL %30453, %30469
        %30471 1/fp32 SHUF %378.w
        %30945 1/fp32 ADD %30471, %30942
        %30946 1/fp32 ADD %30945, %30943
        %30947 1/fp32 ADD %30946, %30944
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16]
        %30948 1/fp32 MUL %7099, %30929
        %30949 1/fp32 MUL %7101, %30935
        %30950 1/fp32 MUL %7103, %30941
        %30951 1/fp32 MUL %7105, %30947
        %30952 1/fp32 ADD %30948, %30949
        %30953 1/fp32 ADD %30952, %30950
        %30954 1/fp32 ADD %30953, %30951
        %30472 1/fp32 SHUF %7099.y
        %30955 1/fp32 MUL %30472, %30929
        %30473 1/fp32 SHUF %7101.y
        %30956 1/fp32 MUL %30473, %30935
        %30474 1/fp32 SHUF %7103.y
        %30957 1/fp32 MUL %30474, %30941
        %30475 1/fp32 SHUF %7105.y
        %30958 1/fp32 MUL %30475, %30947
        %30959 1/fp32 ADD %30955, %30956
        %30960 1/fp32 ADD %30959, %30957
        %30961 1/fp32 ADD %30960, %30958
        %30476 1/fp32 SHUF %7099.z
        %30962 1/fp32 MUL %30476, %30929
        %30477 1/fp32 SHUF %7101.z
        %30963 1/fp32 MUL %30477, %30935
        %30478 1/fp32 SHUF %7103.z
        %30964 1/fp32 MUL %30478, %30941
        %30479 1/fp32 SHUF %7105.z
        %30965 1/fp32 MUL %30479, %30947
        %30966 1/fp32 ADD %30962, %30963
        %30967 1/fp32 ADD %30966, %30964
        %30968 1/fp32 ADD %30967, %30965
        %30480 1/fp32 SHUF %7099.w
        %30969 1/fp32 MUL %30480, %30929
        %30481 1/fp32 SHUF %7101.w
        %30970 1/fp32 MUL %30481, %30935
        %30482 1/fp32 SHUF %7103.w
        %30971 1/fp32 MUL %30482, %30941
        %30483 1/fp32 SHUF %7105.w
        %30972 1/fp32 MUL %30483, %30947
        %30973 1/fp32 ADD %30969, %30970
        %30974 1/fp32 ADD %30973, %30971
        %30975 1/fp32 ADD %30974, %30972
        %31465 void intr.EXPORT %30954, %30961, %30968, %30975, int32{3080204}, int32{0} pos0 x y z w done
        %31931 void BR 
        --> block:223

      block:223 - exit
        <-- block:32138, block:31805
        --> 


--------------------------------------------------------------------------------

>> pass 634/815: validate graph
    validate graph (0045C2BE)
>> pass 635/815: duplicate_get_elem_ptr
    duplicate_get_elem_ptr (8FE69A7F)
>> pass 636/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 637/815: validate graph
    validate graph (0045C2BE)
>> pass 638/815: legalizegetelem
    legalizegetelem (DA65C66F)
>> pass 639/815: validate graph
    validate graph (0045C2BE)
>> pass 640/815: constant propagation
    constant propagation (5CBB3303)
>> pass 641/815: validate graph
    validate graph (0045C2BE)
>> pass 642/815: legalize dwarf
    legalize dwarf (092DC1C4)
>> pass 643/815: validate graph
    validate graph (0045C2BE)
>> pass 644/815: lower cue resources
    lower cue resources (C2BA3850)
>> pass 645/815: validate graph
    validate graph (0045C2BE)
>> pass 646/815: lower bindless
    lower bindless (201F9C06)
>> pass 647/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 648/815: validate graph
    validate graph (0045C2BE)
>> pass 649/815: lower ptr_from_texture instructions
    lower ptr_from_texture instructions (0DF5FB89)
>> pass 650/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 651/815: validate graph
    validate graph (0045C2BE)
>> pass 652/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 653/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 654/815: validate graph
    validate graph (0045C2BE)
>> pass 655/815: loop analysis
    loop analysis (598E85BD)
>> pass 656/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 657/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 658/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 659/815: optimize loads and stores before lowering
    optimize loads and stores before lowering (EDB916CA)
>> pass 660/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 661/815: validate graph
    validate graph (0045C2BE)
>> pass 662/815: loop analysis
    loop analysis (598E85BD)
>> pass 663/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 664/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 665/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 666/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 667/815: R10SmartRemat
    R10SmartRemat (F8932196)
>> pass 668/815: validate graph
    validate graph (0045C2BE)
>> pass 669/815: memory checker
    memory checker (C7B1F49E)
>> pass 670/815: validate graph
    validate graph (0045C2BE)
>> pass 671/815: lower loads and stores
    lower loads and stores (402CD2A4)
>> pass 672/815: validate graph
    validate graph (0045C2BE)
>> pass 673/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 674/815: remove dead code
    remove dead code (B7E6F507)
>> pass 675/815: validate graph
    validate graph (0045C2BE)
>> pass 676/815: lower address computation
    lower address computation (1B5C9873)
>> pass 677/815: validate graph
    validate graph (0045C2BE)
>> pass 678/815: constant propagation
    constant propagation (5CBB3303)
>> pass 679/815: validate graph
    validate graph (0045C2BE)
>> pass 680/815: loop analysis
    loop analysis (598E85BD)
>> pass 681/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 682/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 683/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 684/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 685/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 686/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 687/815: validate graph
    validate graph (0045C2BE)
>> pass 688/815: loop analysis
    loop analysis (598E85BD)
>> pass 689/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 690/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 691/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 692/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 693/815: r10 scalar scalarizer
    r10 scalar scalarizer (8BB09927)
>> pass 694/815: validate graph
    validate graph (0045C2BE)
>> pass 695/815: r10 optimize discard
    r10 optimize discard (FBBC97CD)
>> pass 696/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 697/815: validate graph
    validate graph (0045C2BE)
>> pass 698/815: loop analysis
    loop analysis (598E85BD)
>> pass 699/815: structural analysis
    structural analysis (A71DE301)
>> pass 700/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 701/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 702/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 703/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 704/815: SLP vectorizer
    SLP vectorizer (638CA5BB)
>> pass 705/815: validate graph
    validate graph (0045C2BE)
>> pass 706/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 707/815: remove dead code
    remove dead code (B7E6F507)
>> pass 708/815: validate graph
    validate graph (0045C2BE)
>> pass 709/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 710/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 711/815: validate graph
    validate graph (0045C2BE)
>> pass 712/815: loop analysis
    loop analysis (598E85BD)
>> pass 713/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 714/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 715/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 716/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 717/815: instruction selection
    instruction selection (AB000BA5)
>> pass 718/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 719/815: validate graph
    validate graph (0045C2BE)
>> pass 720/815: loop analysis
    loop analysis (598E85BD)
>> pass 721/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 722/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 723/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 724/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 725/815: r10wavemodeanalysis
    r10wavemodeanalysis (D6EB96FF)
>> pass 726/815: legalize intrinsics
    legalize intrinsics (F8DFB406)
>> pass 727/815: validate graph
    validate graph (0045C2BE)
>> pass 728/815: coalesce shuffle combine
    coalesce shuffle combine (30B4084A)
>> pass 729/815: validate graph
    validate graph (0045C2BE)
>> pass 730/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 731/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 732/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 733/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 734/815: legalize values
    legalize values (3229DE24)
>> pass 735/815: validate graph
    validate graph (0045C2BE)
>> pass 736/815: constant propagation
    constant propagation (5CBB3303)
>> pass 737/815: validate graph
    validate graph (0045C2BE)
>> pass 738/815: simplify for demanded bits
    simplify for demanded bits (C26737CA)
>> pass 739/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 740/815: validate graph
    validate graph (0045C2BE)
>> pass 741/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 742/815: remove dead code
    remove dead code (B7E6F507)
>> pass 743/815: validate graph
    validate graph (0045C2BE)
>> pass 744/815: loop analysis
    loop analysis (598E85BD)
>> pass 745/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 746/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 747/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 748/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 749/815: optimize common patterns
    optimize common patterns (0DECC4EF)
>> pass 750/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 751/815: validate graph
    validate graph (0045C2BE)
>> pass 752/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:32136

      block:32136
        <-- block:224
        %31295 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31296 1/int32 LSHR %31295, int32{8}[Uniformity(Program)]
        %31297 1/int32 AND %31296, int32{255}[Uniformity(Program)]
        %31298 1/int32 AND %31295, int32{255}[Uniformity(Program)]
        %31305 1/int32 SHL %31297, int32{12}[Uniformity(Program)]
        %31306 1/int32 OR %31298, %31305[Uniformity(Program)]
        %31307 void intr.s_sendmsg %31306, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32235 1/int32 intr.s_sub_i32 int32{64}, %31297[Uniformity(Program)]
        %32238 1/int64 intr.s_lshr_b64 int64{-1}, %32235[Uniformity(Program)]
        %31312 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32238[Uniformity(Lane)] uniform_width
        %31313 1/int1 CMP.ne %31312, int32{0}[Uniformity(Lane)]
        %31314 void BRC %31313[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31440, block:32138

      block:31440
        <-- block:32136
        %31304 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31441 void intr.EXPORT %31304, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31442 void BR [Uniformity(Lane)]
        --> block:32138

      block:32138
        <-- block:31440, block:32136
        %32236 1/int32 intr.s_sub_i32 int32{64}, %31298[Uniformity(Program)]
        %32240 1/int64 intr.s_lshr_b64 int64{-1}, %32236[Uniformity(Program)]
        %31437 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32240[Uniformity(Lane)] uniform_width
        %31438 1/int1 CMP.ne %31437, int32{0}[Uniformity(Lane)]
        %31439 void BRC %31438[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31805, block:223

      block:31805
        <-- block:32138
        %31299 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31300 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %31158 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31159 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32224 1/int64 CONV_reinterp %31159[Uniformity(Program)]
        %32225 1/int64 CONV_reinterp %31158[Uniformity(Program)]
        %32145 1/int32 intr.s_load_dword %32225, int32{0}, int32{0}[Uniformity(Program)]
        %31167 1/int32 LSHR %32145, int32{5}[Uniformity(Program)]
        %31168 1/int32 AND %31167, int32{3}[Uniformity(Program)]
        %31169 1/int32 LSHR %32145, int32{7}[Uniformity(Program)]
        %31170 1/int32 AND %31169, int32{127}[Uniformity(Program)]
        %31171 1/int32 LSHR %32145, int32{14}[Uniformity(Program)]
        %31172 1/int32 AND %31171, int32{4095}[Uniformity(Program)]
        %31173 1/int32 LSHR %32145, int32{26}[Uniformity(Program)]
        %31174 1/int32 AND %31173, int32{1}[Uniformity(Program)]
        %31968 1/int64 intr.v_cmp_eq_u32 %31174, int32{0}[Uniformity(Program)]
        %31969 1/int32 intr.v_cndmask_b32 %31300, %31299, %31968[Uniformity(Lane)]
        %32231 1/int32 SHL %32145, int32{4}[Uniformity(Program)]
        %32234 1/int32 AND %32231, int32{496}[Uniformity(Program)]
        %32147 4/int32 intr.s_load_dwordx4 %32224, %32234, int32{0}[Uniformity(Program)]
        %31181 1/int32 intr.s_lshl4_add_u32 %31168, int32{786432}[Uniformity(Program)]
        %31183 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31181[Uniformity(Program)]
        %31184 1/int32 CONV %31183[Uniformity(Program)]
        %31185 1/int32 SHUF %32147.w[Uniformity(Program)]
        %31187 1/int32 AND %31185, int32{-524288}[Uniformity(Program)]
        %31188 1/int32 SHL %31170, int32{12}[Uniformity(Program)]
        %31189 1/int32 OR %31187, %31188[Uniformity(Program)]
        %31190 1/int32 OR %31189, %31184[Uniformity(Program)]
        %31970 1/int32 intr.s_cmov_scalar %31170, int32{0}, %31185, %31190, int32{0}[Uniformity(Program)]
        %31192 4/int32 SHUF %32147.xyz-,  %31970.---x[Uniformity(Program)]
        %31194 3/fp32 intr.buffer_load_format_xyz %31969, %31192, %31172, int64{36029896530591744}[Uniformity(Lane)]
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16][Uniformity(Program)]
        %342 1/int32 LD %321[Uniformity(Program)]
        %32153 4/int32 intr.GET_VSHARP %30506[Uniformity(Program)]
        %32227 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32161 4/int32 intr.s_buffer_load_dwordx4 %32153, %32227, int32{0}[Uniformity(Program)]
        %32167 4/fp32 CONV_reinterp %32161[Uniformity(Program)]
        %32228 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32174 1/int32 ADD int32{16}, %32228[Uniformity(Program)]
        %32175 4/int32 intr.s_buffer_load_dwordx4 %32153, %32174, int32{0}[Uniformity(Program)]
        %32181 4/fp32 CONV_reinterp %32175[Uniformity(Program)]
        %32229 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32188 1/int32 ADD int32{32}, %32229[Uniformity(Program)]
        %32189 4/int32 intr.s_buffer_load_dwordx4 %32153, %32188, int32{0}[Uniformity(Program)]
        %32195 4/fp32 CONV_reinterp %32189[Uniformity(Program)]
        %32230 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32202 1/int32 ADD int32{48}, %32230[Uniformity(Program)]
        %32203 4/int32 intr.s_buffer_load_dwordx4 %32153, %32202, int32{0}[Uniformity(Program)]
        %32209 4/fp32 CONV_reinterp %32203[Uniformity(Program)]
        %30924 1/fp32 MUL %32167, %31194[Uniformity(Lane)]
        %30452 1/fp32 SHUF %31194.y[Uniformity(Lane)]
        %30925 1/fp32 MUL %32181, %30452[Uniformity(Lane)]
        %30453 1/fp32 SHUF %31194.z[Uniformity(Lane)]
        %30926 1/fp32 MUL %32195, %30453[Uniformity(Lane)]
        %30927 1/fp32 ADD %32209, %30924[Uniformity(Lane)]
        %30928 1/fp32 ADD %30927, %30925[Uniformity(Lane)]
        %30929 1/fp32 ADD %30928, %30926[Uniformity(Lane)]
        %30454 1/fp32 SHUF %32167.y[Uniformity(Program)]
        %30930 1/fp32 MUL %30454, %31194[Uniformity(Lane)]
        %30455 1/fp32 SHUF %32181.y[Uniformity(Program)]
        %30931 1/fp32 MUL %30452, %30455[Uniformity(Lane)]
        %30457 1/fp32 SHUF %32195.y[Uniformity(Program)]
        %30932 1/fp32 MUL %30453, %30457[Uniformity(Lane)]
        %30459 1/fp32 SHUF %32209.y[Uniformity(Program)]
        %30933 1/fp32 ADD %30459, %30930[Uniformity(Lane)]
        %30934 1/fp32 ADD %30933, %30931[Uniformity(Lane)]
        %30935 1/fp32 ADD %30934, %30932[Uniformity(Lane)]
        %30460 1/fp32 SHUF %32167.z[Uniformity(Program)]
        %30936 1/fp32 MUL %30460, %31194[Uniformity(Lane)]
        %30461 1/fp32 SHUF %32181.z[Uniformity(Program)]
        %30937 1/fp32 MUL %30452, %30461[Uniformity(Lane)]
        %30463 1/fp32 SHUF %32195.z[Uniformity(Program)]
        %30938 1/fp32 MUL %30453, %30463[Uniformity(Lane)]
        %30465 1/fp32 SHUF %32209.z[Uniformity(Program)]
        %30939 1/fp32 ADD %30465, %30936[Uniformity(Lane)]
        %30940 1/fp32 ADD %30939, %30937[Uniformity(Lane)]
        %30941 1/fp32 ADD %30940, %30938[Uniformity(Lane)]
        %30466 1/fp32 SHUF %32167.w[Uniformity(Program)]
        %30942 1/fp32 MUL %30466, %31194[Uniformity(Lane)]
        %30467 1/fp32 SHUF %32181.w[Uniformity(Program)]
        %30943 1/fp32 MUL %30452, %30467[Uniformity(Lane)]
        %30469 1/fp32 SHUF %32195.w[Uniformity(Program)]
        %30944 1/fp32 MUL %30453, %30469[Uniformity(Lane)]
        %30471 1/fp32 SHUF %32209.w[Uniformity(Program)]
        %30945 1/fp32 ADD %30471, %30942[Uniformity(Lane)]
        %30946 1/fp32 ADD %30945, %30943[Uniformity(Lane)]
        %30947 1/fp32 ADD %30946, %30944[Uniformity(Lane)]
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}[Uniformity(Program)]
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}[Uniformity(Program)]
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}[Uniformity(Program)]
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}[Uniformity(Program)]
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30948 1/fp32 MUL %7099, %30929[Uniformity(Lane)]
        %30949 1/fp32 MUL %7101, %30935[Uniformity(Lane)]
        %30950 1/fp32 MUL %7103, %30941[Uniformity(Lane)]
        %30951 1/fp32 MUL %7105, %30947[Uniformity(Lane)]
        %30952 1/fp32 ADD %30948, %30949[Uniformity(Lane)]
        %30953 1/fp32 ADD %30952, %30950[Uniformity(Lane)]
        %30954 1/fp32 ADD %30953, %30951[Uniformity(Lane)]
        %30472 1/fp32 SHUF %7099.y[Uniformity(Program)]
        %30955 1/fp32 MUL %30472, %30929[Uniformity(Lane)]
        %30473 1/fp32 SHUF %7101.y[Uniformity(Program)]
        %30956 1/fp32 MUL %30473, %30935[Uniformity(Lane)]
        %30474 1/fp32 SHUF %7103.y[Uniformity(Program)]
        %30957 1/fp32 MUL %30474, %30941[Uniformity(Lane)]
        %30475 1/fp32 SHUF %7105.y[Uniformity(Program)]
        %30958 1/fp32 MUL %30475, %30947[Uniformity(Lane)]
        %30959 1/fp32 ADD %30955, %30956[Uniformity(Lane)]
        %30960 1/fp32 ADD %30959, %30957[Uniformity(Lane)]
        %30961 1/fp32 ADD %30960, %30958[Uniformity(Lane)]
        %30476 1/fp32 SHUF %7099.z[Uniformity(Program)]
        %30962 1/fp32 MUL %30476, %30929[Uniformity(Lane)]
        %30477 1/fp32 SHUF %7101.z[Uniformity(Program)]
        %30963 1/fp32 MUL %30477, %30935[Uniformity(Lane)]
        %30478 1/fp32 SHUF %7103.z[Uniformity(Program)]
        %30964 1/fp32 MUL %30478, %30941[Uniformity(Lane)]
        %30479 1/fp32 SHUF %7105.z[Uniformity(Program)]
        %30965 1/fp32 MUL %30479, %30947[Uniformity(Lane)]
        %30966 1/fp32 ADD %30962, %30963[Uniformity(Lane)]
        %30967 1/fp32 ADD %30966, %30964[Uniformity(Lane)]
        %30968 1/fp32 ADD %30967, %30965[Uniformity(Lane)]
        %30480 1/fp32 SHUF %7099.w[Uniformity(Program)]
        %30969 1/fp32 MUL %30480, %30929[Uniformity(Lane)]
        %30481 1/fp32 SHUF %7101.w[Uniformity(Program)]
        %30970 1/fp32 MUL %30481, %30935[Uniformity(Lane)]
        %30482 1/fp32 SHUF %7103.w[Uniformity(Program)]
        %30971 1/fp32 MUL %30482, %30941[Uniformity(Lane)]
        %30483 1/fp32 SHUF %7105.w[Uniformity(Program)]
        %30972 1/fp32 MUL %30483, %30947[Uniformity(Lane)]
        %30973 1/fp32 ADD %30969, %30970[Uniformity(Lane)]
        %30974 1/fp32 ADD %30973, %30971[Uniformity(Lane)]
        %30975 1/fp32 ADD %30974, %30972[Uniformity(Lane)]
        %31465 void intr.EXPORT %30954, %30961, %30968, %30975, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31931 void BR [Uniformity(Lane)]
        --> block:223

      block:223 - exit
        <-- block:32138, block:31805
        --> 


--------------------------------------------------------------------------------

>> pass 753/815: validate graph
    validate graph (0045C2BE)
>> pass 754/815: loop analysis
    loop analysis (598E85BD)
>> pass 755/815: fix subvector PHIs
    fix subvector PHIs (C8DE249A)
>> pass 756/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 757/815: validate graph
    validate graph (0045C2BE)
>> pass 758/815: loop analysis
    loop analysis (598E85BD)
>> pass 759/815: r10subvector
    r10subvector (7E0E5361)
>> pass 760/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 761/815: validate graph
    validate graph (0045C2BE)
>> pass 762/815: loop analysis
    loop analysis (598E85BD)
>> pass 763/815: remove isolate
    remove isolate (792AD9CA)
>> pass 764/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 765/815: validate graph
    validate graph (0045C2BE)
>> pass 766/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:32136

      block:32136
        <-- block:224
        %31295 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31296 1/int32 LSHR %31295, int32{8}[Uniformity(Program)]
        %31297 1/int32 AND %31296, int32{255}[Uniformity(Program)]
        %31298 1/int32 AND %31295, int32{255}[Uniformity(Program)]
        %31305 1/int32 SHL %31297, int32{12}[Uniformity(Program)]
        %31306 1/int32 OR %31298, %31305[Uniformity(Program)]
        %31307 void intr.s_sendmsg %31306, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32235 1/int32 intr.s_sub_i32 int32{64}, %31297[Uniformity(Program)]
        %32238 1/int64 intr.s_lshr_b64 int64{-1}, %32235[Uniformity(Program)]
        %31312 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32238[Uniformity(Lane)] uniform_width
        %31313 1/int1 CMP.ne %31312, int32{0}[Uniformity(Lane)]
        %31314 void BRC %31313[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31440, block:32138

      block:31440
        <-- block:32136
        %31304 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31441 void intr.EXPORT %31304, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31442 void BR [Uniformity(Lane)]
        --> block:32138

      block:32138
        <-- block:31440, block:32136
        %32236 1/int32 intr.s_sub_i32 int32{64}, %31298[Uniformity(Program)]
        %32240 1/int64 intr.s_lshr_b64 int64{-1}, %32236[Uniformity(Program)]
        %31437 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32240[Uniformity(Lane)] uniform_width
        %31438 1/int1 CMP.ne %31437, int32{0}[Uniformity(Lane)]
        %31439 void BRC %31438[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31805, block:223

      block:31805
        <-- block:32138
        %31299 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31300 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %31158 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31159 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32224 1/int64 CONV_reinterp %31159[Uniformity(Program)]
        %32225 1/int64 CONV_reinterp %31158[Uniformity(Program)]
        %32145 1/int32 intr.s_load_dword %32225, int32{0}, int32{0}[Uniformity(Program)]
        %31167 1/int32 LSHR %32145, int32{5}[Uniformity(Program)]
        %31168 1/int32 AND %31167, int32{3}[Uniformity(Program)]
        %31169 1/int32 LSHR %32145, int32{7}[Uniformity(Program)]
        %31170 1/int32 AND %31169, int32{127}[Uniformity(Program)]
        %31171 1/int32 LSHR %32145, int32{14}[Uniformity(Program)]
        %31172 1/int32 AND %31171, int32{4095}[Uniformity(Program)]
        %31173 1/int32 LSHR %32145, int32{26}[Uniformity(Program)]
        %31174 1/int32 AND %31173, int32{1}[Uniformity(Program)]
        %31968 1/int64 intr.v_cmp_eq_u32 %31174, int32{0}[Uniformity(Program)]
        %31969 1/int32 intr.v_cndmask_b32 %31300, %31299, %31968[Uniformity(Lane)]
        %32231 1/int32 SHL %32145, int32{4}[Uniformity(Program)]
        %32234 1/int32 AND %32231, int32{496}[Uniformity(Program)]
        %32147 4/int32 intr.s_load_dwordx4 %32224, %32234, int32{0}[Uniformity(Program)]
        %31181 1/int32 intr.s_lshl4_add_u32 %31168, int32{786432}[Uniformity(Program)]
        %31183 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31181[Uniformity(Program)]
        %31184 1/int32 CONV %31183[Uniformity(Program)]
        %31185 1/int32 SHUF %32147.w[Uniformity(Program)]
        %31187 1/int32 AND %31185, int32{-524288}[Uniformity(Program)]
        %31188 1/int32 SHL %31170, int32{12}[Uniformity(Program)]
        %31189 1/int32 OR %31187, %31188[Uniformity(Program)]
        %31190 1/int32 OR %31189, %31184[Uniformity(Program)]
        %31970 1/int32 intr.s_cmov_scalar %31170, int32{0}, %31185, %31190, int32{0}[Uniformity(Program)]
        %31192 4/int32 SHUF %32147.xyz-,  %31970.---x[Uniformity(Program)]
        %31194 3/fp32 intr.buffer_load_format_xyz %31969, %31192, %31172, int64{36029896530591744}[Uniformity(Lane)]
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16][Uniformity(Program)]
        %342 1/int32 LD %321[Uniformity(Program)]
        %32153 4/int32 intr.GET_VSHARP %30506[Uniformity(Program)]
        %32227 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32161 4/int32 intr.s_buffer_load_dwordx4 %32153, %32227, int32{0}[Uniformity(Program)]
        %32167 4/fp32 CONV_reinterp %32161[Uniformity(Program)]
        %32228 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32174 1/int32 ADD int32{16}, %32228[Uniformity(Program)]
        %32175 4/int32 intr.s_buffer_load_dwordx4 %32153, %32174, int32{0}[Uniformity(Program)]
        %32181 4/fp32 CONV_reinterp %32175[Uniformity(Program)]
        %32229 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32188 1/int32 ADD int32{32}, %32229[Uniformity(Program)]
        %32189 4/int32 intr.s_buffer_load_dwordx4 %32153, %32188, int32{0}[Uniformity(Program)]
        %32195 4/fp32 CONV_reinterp %32189[Uniformity(Program)]
        %32230 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32202 1/int32 ADD int32{48}, %32230[Uniformity(Program)]
        %32203 4/int32 intr.s_buffer_load_dwordx4 %32153, %32202, int32{0}[Uniformity(Program)]
        %32209 4/fp32 CONV_reinterp %32203[Uniformity(Program)]
        %30924 1/fp32 MUL %32167, %31194[Uniformity(Lane)]
        %30452 1/fp32 SHUF %31194.y[Uniformity(Lane)]
        %30925 1/fp32 MUL %32181, %30452[Uniformity(Lane)]
        %30453 1/fp32 SHUF %31194.z[Uniformity(Lane)]
        %30926 1/fp32 MUL %32195, %30453[Uniformity(Lane)]
        %30927 1/fp32 ADD %32209, %30924[Uniformity(Lane)]
        %30928 1/fp32 ADD %30927, %30925[Uniformity(Lane)]
        %30929 1/fp32 ADD %30928, %30926[Uniformity(Lane)]
        %30454 1/fp32 SHUF %32167.y[Uniformity(Program)]
        %30930 1/fp32 MUL %30454, %31194[Uniformity(Lane)]
        %30455 1/fp32 SHUF %32181.y[Uniformity(Program)]
        %30931 1/fp32 MUL %30452, %30455[Uniformity(Lane)]
        %30457 1/fp32 SHUF %32195.y[Uniformity(Program)]
        %30932 1/fp32 MUL %30453, %30457[Uniformity(Lane)]
        %30459 1/fp32 SHUF %32209.y[Uniformity(Program)]
        %30933 1/fp32 ADD %30459, %30930[Uniformity(Lane)]
        %30934 1/fp32 ADD %30933, %30931[Uniformity(Lane)]
        %30935 1/fp32 ADD %30934, %30932[Uniformity(Lane)]
        %30460 1/fp32 SHUF %32167.z[Uniformity(Program)]
        %30936 1/fp32 MUL %30460, %31194[Uniformity(Lane)]
        %30461 1/fp32 SHUF %32181.z[Uniformity(Program)]
        %30937 1/fp32 MUL %30452, %30461[Uniformity(Lane)]
        %30463 1/fp32 SHUF %32195.z[Uniformity(Program)]
        %30938 1/fp32 MUL %30453, %30463[Uniformity(Lane)]
        %30465 1/fp32 SHUF %32209.z[Uniformity(Program)]
        %30939 1/fp32 ADD %30465, %30936[Uniformity(Lane)]
        %30940 1/fp32 ADD %30939, %30937[Uniformity(Lane)]
        %30941 1/fp32 ADD %30940, %30938[Uniformity(Lane)]
        %30466 1/fp32 SHUF %32167.w[Uniformity(Program)]
        %30942 1/fp32 MUL %30466, %31194[Uniformity(Lane)]
        %30467 1/fp32 SHUF %32181.w[Uniformity(Program)]
        %30943 1/fp32 MUL %30452, %30467[Uniformity(Lane)]
        %30469 1/fp32 SHUF %32195.w[Uniformity(Program)]
        %30944 1/fp32 MUL %30453, %30469[Uniformity(Lane)]
        %30471 1/fp32 SHUF %32209.w[Uniformity(Program)]
        %30945 1/fp32 ADD %30471, %30942[Uniformity(Lane)]
        %30946 1/fp32 ADD %30945, %30943[Uniformity(Lane)]
        %30947 1/fp32 ADD %30946, %30944[Uniformity(Lane)]
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}[Uniformity(Program)]
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}[Uniformity(Program)]
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}[Uniformity(Program)]
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}[Uniformity(Program)]
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30948 1/fp32 MUL %7099, %30929[Uniformity(Lane)]
        %30949 1/fp32 MUL %7101, %30935[Uniformity(Lane)]
        %30950 1/fp32 MUL %7103, %30941[Uniformity(Lane)]
        %30951 1/fp32 MUL %7105, %30947[Uniformity(Lane)]
        %30952 1/fp32 ADD %30948, %30949[Uniformity(Lane)]
        %30953 1/fp32 ADD %30952, %30950[Uniformity(Lane)]
        %30954 1/fp32 ADD %30953, %30951[Uniformity(Lane)]
        %30472 1/fp32 SHUF %7099.y[Uniformity(Program)]
        %30955 1/fp32 MUL %30472, %30929[Uniformity(Lane)]
        %30473 1/fp32 SHUF %7101.y[Uniformity(Program)]
        %30956 1/fp32 MUL %30473, %30935[Uniformity(Lane)]
        %30474 1/fp32 SHUF %7103.y[Uniformity(Program)]
        %30957 1/fp32 MUL %30474, %30941[Uniformity(Lane)]
        %30475 1/fp32 SHUF %7105.y[Uniformity(Program)]
        %30958 1/fp32 MUL %30475, %30947[Uniformity(Lane)]
        %30959 1/fp32 ADD %30955, %30956[Uniformity(Lane)]
        %30960 1/fp32 ADD %30959, %30957[Uniformity(Lane)]
        %30961 1/fp32 ADD %30960, %30958[Uniformity(Lane)]
        %30476 1/fp32 SHUF %7099.z[Uniformity(Program)]
        %30962 1/fp32 MUL %30476, %30929[Uniformity(Lane)]
        %30477 1/fp32 SHUF %7101.z[Uniformity(Program)]
        %30963 1/fp32 MUL %30477, %30935[Uniformity(Lane)]
        %30478 1/fp32 SHUF %7103.z[Uniformity(Program)]
        %30964 1/fp32 MUL %30478, %30941[Uniformity(Lane)]
        %30479 1/fp32 SHUF %7105.z[Uniformity(Program)]
        %30965 1/fp32 MUL %30479, %30947[Uniformity(Lane)]
        %30966 1/fp32 ADD %30962, %30963[Uniformity(Lane)]
        %30967 1/fp32 ADD %30966, %30964[Uniformity(Lane)]
        %30968 1/fp32 ADD %30967, %30965[Uniformity(Lane)]
        %30480 1/fp32 SHUF %7099.w[Uniformity(Program)]
        %30969 1/fp32 MUL %30480, %30929[Uniformity(Lane)]
        %30481 1/fp32 SHUF %7101.w[Uniformity(Program)]
        %30970 1/fp32 MUL %30481, %30935[Uniformity(Lane)]
        %30482 1/fp32 SHUF %7103.w[Uniformity(Program)]
        %30971 1/fp32 MUL %30482, %30941[Uniformity(Lane)]
        %30483 1/fp32 SHUF %7105.w[Uniformity(Program)]
        %30972 1/fp32 MUL %30483, %30947[Uniformity(Lane)]
        %30973 1/fp32 ADD %30969, %30970[Uniformity(Lane)]
        %30974 1/fp32 ADD %30973, %30971[Uniformity(Lane)]
        %30975 1/fp32 ADD %30974, %30972[Uniformity(Lane)]
        %31465 void intr.EXPORT %30954, %30961, %30968, %30975, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31931 void BR [Uniformity(Lane)]
        --> block:223

      block:223 - exit
        <-- block:32138, block:31805
        --> 


--------------------------------------------------------------------------------

>> pass 767/815: validate graph
    validate graph (0045C2BE)
>> pass 768/815: loop analysis
    loop analysis (598E85BD)
>> pass 769/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 770/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 771/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 772/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 773/815: optimize addr64
    optimize addr64 (F865A4F6)
>> pass 774/815: validate graph
    validate graph (0045C2BE)
>> pass 775/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:32136

      block:32136
        <-- block:224
        %31295 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31296 1/int32 LSHR %31295, int32{8}[Uniformity(Program)]
        %31297 1/int32 AND %31296, int32{255}[Uniformity(Program)]
        %31298 1/int32 AND %31295, int32{255}[Uniformity(Program)]
        %31305 1/int32 SHL %31297, int32{12}[Uniformity(Program)]
        %31306 1/int32 OR %31298, %31305[Uniformity(Program)]
        %31307 void intr.s_sendmsg %31306, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32235 1/int32 intr.s_sub_i32 int32{64}, %31297[Uniformity(Program)]
        %32238 1/int64 intr.s_lshr_b64 int64{-1}, %32235[Uniformity(Program)]
        %31312 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32238[Uniformity(Lane)] uniform_width
        %31313 1/int1 CMP.ne %31312, int32{0}[Uniformity(Lane)]
        %31314 void BRC %31313[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31440, block:32138

      block:31440
        <-- block:32136
        %31304 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31441 void intr.EXPORT %31304, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31442 void BR [Uniformity(Lane)]
        --> block:32138

      block:32138
        <-- block:31440, block:32136
        %32236 1/int32 intr.s_sub_i32 int32{64}, %31298[Uniformity(Program)]
        %32240 1/int64 intr.s_lshr_b64 int64{-1}, %32236[Uniformity(Program)]
        %31437 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32240[Uniformity(Lane)] uniform_width
        %31438 1/int1 CMP.ne %31437, int32{0}[Uniformity(Lane)]
        %31439 void BRC %31438[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31805, block:223

      block:31805
        <-- block:32138
        %31299 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31300 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %31158 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31159 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32224 1/int64 CONV_reinterp %31159[Uniformity(Program)]
        %32225 1/int64 CONV_reinterp %31158[Uniformity(Program)]
        %32145 1/int32 intr.s_load_dword %32225, int32{0}, int32{0}[Uniformity(Program)]
        %31167 1/int32 LSHR %32145, int32{5}[Uniformity(Program)]
        %31168 1/int32 AND %31167, int32{3}[Uniformity(Program)]
        %31169 1/int32 LSHR %32145, int32{7}[Uniformity(Program)]
        %31170 1/int32 AND %31169, int32{127}[Uniformity(Program)]
        %31171 1/int32 LSHR %32145, int32{14}[Uniformity(Program)]
        %31172 1/int32 AND %31171, int32{4095}[Uniformity(Program)]
        %31173 1/int32 LSHR %32145, int32{26}[Uniformity(Program)]
        %31174 1/int32 AND %31173, int32{1}[Uniformity(Program)]
        %31968 1/int64 intr.v_cmp_eq_u32 %31174, int32{0}[Uniformity(Program)]
        %31969 1/int32 intr.v_cndmask_b32 %31300, %31299, %31968[Uniformity(Lane)]
        %32231 1/int32 SHL %32145, int32{4}[Uniformity(Program)]
        %32234 1/int32 AND %32231, int32{496}[Uniformity(Program)]
        %32147 4/int32 intr.s_load_dwordx4 %32224, %32234, int32{0}[Uniformity(Program)]
        %31181 1/int32 intr.s_lshl4_add_u32 %31168, int32{786432}[Uniformity(Program)]
        %31183 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31181[Uniformity(Program)]
        %31184 1/int32 CONV %31183[Uniformity(Program)]
        %31185 1/int32 SHUF %32147.w[Uniformity(Program)]
        %31187 1/int32 AND %31185, int32{-524288}[Uniformity(Program)]
        %31188 1/int32 SHL %31170, int32{12}[Uniformity(Program)]
        %31189 1/int32 OR %31187, %31188[Uniformity(Program)]
        %31190 1/int32 OR %31189, %31184[Uniformity(Program)]
        %31970 1/int32 intr.s_cmov_scalar %31170, int32{0}, %31185, %31190, int32{0}[Uniformity(Program)]
        %31192 4/int32 SHUF %32147.xyz-,  %31970.---x[Uniformity(Program)]
        %31194 3/fp32 intr.buffer_load_format_xyz %31969, %31192, %31172, int64{36029896530591744}[Uniformity(Lane)]
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16][Uniformity(Program)]
        %342 1/int32 LD %321[Uniformity(Program)]
        %32153 4/int32 intr.GET_VSHARP %30506[Uniformity(Program)]
        %32227 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32161 4/int32 intr.s_buffer_load_dwordx4 %32153, %32227, int32{0}[Uniformity(Program)]
        %32167 4/fp32 CONV_reinterp %32161[Uniformity(Program)]
        %32228 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32174 1/int32 ADD int32{16}, %32228[Uniformity(Program)]
        %32175 4/int32 intr.s_buffer_load_dwordx4 %32153, %32174, int32{0}[Uniformity(Program)]
        %32181 4/fp32 CONV_reinterp %32175[Uniformity(Program)]
        %32229 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32188 1/int32 ADD int32{32}, %32229[Uniformity(Program)]
        %32189 4/int32 intr.s_buffer_load_dwordx4 %32153, %32188, int32{0}[Uniformity(Program)]
        %32195 4/fp32 CONV_reinterp %32189[Uniformity(Program)]
        %32230 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32202 1/int32 ADD int32{48}, %32230[Uniformity(Program)]
        %32203 4/int32 intr.s_buffer_load_dwordx4 %32153, %32202, int32{0}[Uniformity(Program)]
        %32209 4/fp32 CONV_reinterp %32203[Uniformity(Program)]
        %30924 1/fp32 MUL %32167, %31194[Uniformity(Lane)]
        %30452 1/fp32 SHUF %31194.y[Uniformity(Lane)]
        %30925 1/fp32 MUL %32181, %30452[Uniformity(Lane)]
        %30453 1/fp32 SHUF %31194.z[Uniformity(Lane)]
        %30926 1/fp32 MUL %32195, %30453[Uniformity(Lane)]
        %30927 1/fp32 ADD %32209, %30924[Uniformity(Lane)]
        %30928 1/fp32 ADD %30927, %30925[Uniformity(Lane)]
        %30929 1/fp32 ADD %30928, %30926[Uniformity(Lane)]
        %30454 1/fp32 SHUF %32167.y[Uniformity(Program)]
        %30930 1/fp32 MUL %30454, %31194[Uniformity(Lane)]
        %30455 1/fp32 SHUF %32181.y[Uniformity(Program)]
        %30931 1/fp32 MUL %30452, %30455[Uniformity(Lane)]
        %30457 1/fp32 SHUF %32195.y[Uniformity(Program)]
        %30932 1/fp32 MUL %30453, %30457[Uniformity(Lane)]
        %30459 1/fp32 SHUF %32209.y[Uniformity(Program)]
        %30933 1/fp32 ADD %30459, %30930[Uniformity(Lane)]
        %30934 1/fp32 ADD %30933, %30931[Uniformity(Lane)]
        %30935 1/fp32 ADD %30934, %30932[Uniformity(Lane)]
        %30460 1/fp32 SHUF %32167.z[Uniformity(Program)]
        %30936 1/fp32 MUL %30460, %31194[Uniformity(Lane)]
        %30461 1/fp32 SHUF %32181.z[Uniformity(Program)]
        %30937 1/fp32 MUL %30452, %30461[Uniformity(Lane)]
        %30463 1/fp32 SHUF %32195.z[Uniformity(Program)]
        %30938 1/fp32 MUL %30453, %30463[Uniformity(Lane)]
        %30465 1/fp32 SHUF %32209.z[Uniformity(Program)]
        %30939 1/fp32 ADD %30465, %30936[Uniformity(Lane)]
        %30940 1/fp32 ADD %30939, %30937[Uniformity(Lane)]
        %30941 1/fp32 ADD %30940, %30938[Uniformity(Lane)]
        %30466 1/fp32 SHUF %32167.w[Uniformity(Program)]
        %30942 1/fp32 MUL %30466, %31194[Uniformity(Lane)]
        %30467 1/fp32 SHUF %32181.w[Uniformity(Program)]
        %30943 1/fp32 MUL %30452, %30467[Uniformity(Lane)]
        %30469 1/fp32 SHUF %32195.w[Uniformity(Program)]
        %30944 1/fp32 MUL %30453, %30469[Uniformity(Lane)]
        %30471 1/fp32 SHUF %32209.w[Uniformity(Program)]
        %30945 1/fp32 ADD %30471, %30942[Uniformity(Lane)]
        %30946 1/fp32 ADD %30945, %30943[Uniformity(Lane)]
        %30947 1/fp32 ADD %30946, %30944[Uniformity(Lane)]
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}[Uniformity(Program)]
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}[Uniformity(Program)]
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}[Uniformity(Program)]
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}[Uniformity(Program)]
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30948 1/fp32 MUL %7099, %30929[Uniformity(Lane)]
        %30949 1/fp32 MUL %7101, %30935[Uniformity(Lane)]
        %30950 1/fp32 MUL %7103, %30941[Uniformity(Lane)]
        %30951 1/fp32 MUL %7105, %30947[Uniformity(Lane)]
        %30952 1/fp32 ADD %30948, %30949[Uniformity(Lane)]
        %30953 1/fp32 ADD %30952, %30950[Uniformity(Lane)]
        %30954 1/fp32 ADD %30953, %30951[Uniformity(Lane)]
        %30472 1/fp32 SHUF %7099.y[Uniformity(Program)]
        %30955 1/fp32 MUL %30472, %30929[Uniformity(Lane)]
        %30473 1/fp32 SHUF %7101.y[Uniformity(Program)]
        %30956 1/fp32 MUL %30473, %30935[Uniformity(Lane)]
        %30474 1/fp32 SHUF %7103.y[Uniformity(Program)]
        %30957 1/fp32 MUL %30474, %30941[Uniformity(Lane)]
        %30475 1/fp32 SHUF %7105.y[Uniformity(Program)]
        %30958 1/fp32 MUL %30475, %30947[Uniformity(Lane)]
        %30959 1/fp32 ADD %30955, %30956[Uniformity(Lane)]
        %30960 1/fp32 ADD %30959, %30957[Uniformity(Lane)]
        %30961 1/fp32 ADD %30960, %30958[Uniformity(Lane)]
        %30476 1/fp32 SHUF %7099.z[Uniformity(Program)]
        %30962 1/fp32 MUL %30476, %30929[Uniformity(Lane)]
        %30477 1/fp32 SHUF %7101.z[Uniformity(Program)]
        %30963 1/fp32 MUL %30477, %30935[Uniformity(Lane)]
        %30478 1/fp32 SHUF %7103.z[Uniformity(Program)]
        %30964 1/fp32 MUL %30478, %30941[Uniformity(Lane)]
        %30479 1/fp32 SHUF %7105.z[Uniformity(Program)]
        %30965 1/fp32 MUL %30479, %30947[Uniformity(Lane)]
        %30966 1/fp32 ADD %30962, %30963[Uniformity(Lane)]
        %30967 1/fp32 ADD %30966, %30964[Uniformity(Lane)]
        %30968 1/fp32 ADD %30967, %30965[Uniformity(Lane)]
        %30480 1/fp32 SHUF %7099.w[Uniformity(Program)]
        %30969 1/fp32 MUL %30480, %30929[Uniformity(Lane)]
        %30481 1/fp32 SHUF %7101.w[Uniformity(Program)]
        %30970 1/fp32 MUL %30481, %30935[Uniformity(Lane)]
        %30482 1/fp32 SHUF %7103.w[Uniformity(Program)]
        %30971 1/fp32 MUL %30482, %30941[Uniformity(Lane)]
        %30483 1/fp32 SHUF %7105.w[Uniformity(Program)]
        %30972 1/fp32 MUL %30483, %30947[Uniformity(Lane)]
        %30973 1/fp32 ADD %30969, %30970[Uniformity(Lane)]
        %30974 1/fp32 ADD %30973, %30971[Uniformity(Lane)]
        %30975 1/fp32 ADD %30974, %30972[Uniformity(Lane)]
        %31465 void intr.EXPORT %30954, %30961, %30968, %30975, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31931 void BR [Uniformity(Lane)]
        --> block:223

      block:223 - exit
        <-- block:32138, block:31805
        --> 


--------------------------------------------------------------------------------

>> pass 776/815: validate graph
    validate graph (0045C2BE)
>> pass 777/815: force loop nesting
    force loop nesting (04B28582)
>> pass 778/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 779/815: validate graph
    validate graph (0045C2BE)
>> pass 780/815: loop analysis
    loop analysis (598E85BD)
>> pass 781/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 782/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 783/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 784/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 785/815: r10 cmov splitting
    r10 cmov splitting (0BD15A52)
>> pass 786/815: validate graph
    validate graph (0045C2BE)
>> pass 787/815: validate steps
    validate steps (3749DDC0)


--- have (1 skips)

  %30947 1/fp32 ADD %30946, %30944[Uniformity(Lane)]
  %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}[Uniformity(Program)]

12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];
15   
16       // world transform
17 -     float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;


--- expected

12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];
15   
16       // world transform
17 -     float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19 -     output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;


--- have (1 skips)

  %30975 1/fp32 ADD %30974, %30972[Uniformity(Lane)]
  %31465 void intr.EXPORT %30954, %30961, %30968, %30975, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done

15   
16       // world transform
17       float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

15   
16       // world transform
17       float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;


--- have (1 skips)

  %30975 1/fp32 ADD %30974, %30972[Uniformity(Lane)]
  %31931 void BR [Uniformity(Lane)]

15   
16       // world transform
17       float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;
...
5   */
6   
7   #include "common.pssli"
8   
9   [CxxSymbol("shaders::material_vv")]
10 - VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA)
11   {
12       VS_OUTPUT output;
13   
14       float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex];


--- expected

15   
16       // world transform
17       float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0));
18   
19       output.worldPos = worldPos;
20 -     output.position = mul(m_viewProjectionMatrix, worldPos);
21   
22       // tbn rotation
23       float3x3 worldRotationMatrix;
24       worldRotationMatrix[0] = worldMatrix[0].xyz;
>> pass 788/815: validate graph
    validate graph (0045C2BE)
>> pass 789/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 790/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 791/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 792/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 793/815: interblockregisters
    interblockregisters (6886C745)
>> pass 794/815: validate graph
    validate graph (0045C2BE)
>> pass 795/815: reachability analysis
    reachability analysis (5B231C61)
>> pass 796/815: remove dead code
    remove dead code (B7E6F507)
>> pass 797/815: validate graph
    validate graph (0045C2BE)
>> pass 798/815: removeredundantwritegprs
    removeredundantwritegprs (92D51232)
>> pass 799/815: validate graph
    validate graph (0045C2BE)
>> pass 800/815: print graph
    print graph (90E3E47E)

================================================================================
Platform agnostic CFG (SSA form)
Target: R10 - R10 (rev 1), ISA: R10
Profile: sce_rs_prospero
--------------------------------------------------------------------------------
  %221 constant buffer: default

  %312 constant buffer: 0 name: ViewConstants
    %313 const: roconstant(0) * 4/fp32[4]:column_major - 'm_viewProjectionMatrix' [0,&m_viewProjectionMatrix(78),0,64]
    %314 const: roconstant(0) * 4/fp32[4]:column_major - 'm_inverseViewProjectionMatrix' [0,&m_inverseViewProjectionMatrix(79),0,64]
    %315 const: roconstant(0) * 4/fp32 - 'm_viewPosition' [0,&m_viewPosition(80),0,16]
    %316 const: roconstant(0) * 4/fp32 - 'm_lightDirection' [0,&m_lightDirection(81),0,16]
    %317 const: roconstant(0) * 4/fp32 - 'm_shadowFocusNearFar' [0,&m_shadowFocusNearFar(82),0,16]
    %318 const: roconstant(0) * 4/fp32 - 'm_cascadeFocusFar' [0,&m_cascadeFocusFar(83),0,16]
    %319 const: roconstant(0) * 4/fp32 - 'm_time' [0,&m_time(84),0,16]

  %320 constant buffer: 2 name: DrawConstants
    %321 const: roconstant(0) * 1/int32 - 'm_entityIndex' [0,&m_entityIndex(85),0,4]
    %322 const: roconstant(0) * 1/int32 - 'm_lodIndex' [0,&m_lodIndex(87),0,4]
    %323 const: roconstant(0) * 1/int32 - 'm_debugOption' [0,&m_debugOption(88),0,4]
    %324 const: roconstant(0) * 1/int32 - 'm_unused' [0,&m_unused(89),0,4]

  %325 constant buffer: 5 name: ShadowConstants
    %326 const: roconstant(0) * 4/fp32[4]:column_major[4] - 'm_shadowMatrix' [0,&m_shadowMatrix(92),0,256]

  %30846 texture obj: roconstant(0) * int texture object cube 32bit template type 4/fp32 - 'cubemapTexture' [0,&cubemapTexture(96),0,32]
    'cubemapTexture' - texObj:t0_dead

  %30847 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'brdfLUT' [0,&brdfLUT(97),0,32]
    'brdfLUT' - texObj:t1_dead

  %30848 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'albedoTexture' [0,&albedoTexture(98),0,32]
    'albedoTexture' - texObj:t2_dead

  %30849 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'normalTexture' [0,&normalTexture(99),0,32]
    'normalTexture' - texObj:t3_dead

  %30850 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'roughnessTexture' [0,&roughnessTexture(100),0,32]
    'roughnessTexture' - texObj:t4_dead

  %30851 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'emissiveTexture' [0,&emissiveTexture(101),0,32]
    'emissiveTexture' - texObj:t5_dead

  %30852 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture0' [0,&shadowmapTexture0(102),0,32]
    'shadowmapTexture0' - texObj:t6_dead

  %30853 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture1' [0,&shadowmapTexture1(103),0,32]
    'shadowmapTexture1' - texObj:t7_dead

  %30854 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture2' [0,&shadowmapTexture2(104),0,32]
    'shadowmapTexture2' - texObj:t8_dead

  %30855 texture obj: roconstant(0) * int texture object 2D 32bit template type 4/fp32 - 'shadowmapTexture3' [0,&shadowmapTexture3(105),0,32]
    'shadowmapTexture3' - texObj:t9_dead

  %30856 sampler state: roconstant(0) * sampler state SamplerState - 'samplerWrapLinear' [0,&samplerWrapLinear(107),0,16]
    'samplerWrapLinear' - smpUnit:0_dead

  %30857 sampler state: roconstant(0) * sampler state SamplerCState - 'samplerShadowCompare' [0,&samplerShadowCompare(109),0,16]
    'samplerShadowCompare' - smpUnit:1_dead

  dwarf:
    m_viewProjectionMatrix(78 - 78) -- %313[0:+64]
    m_inverseViewProjectionMatrix(79 - 79) -- %314[0:+64]
    m_viewPosition(80 - 80) -- %315[0:+16]
    m_lightDirection(81 - 81) -- %316[0:+16]
    m_shadowFocusNearFar(82 - 82) -- %317[0:+16]
    m_cascadeFocusFar(83 - 83) -- %318[0:+16]
    m_time(84 - 84) -- %319[0:+16]
    m_entityIndex(85 - 85) -- %321[0:+4]
    m_lodIndex(87 - 87) -- %322[0:+4]
    m_debugOption(88 - 88) -- %323[0:+4]
    m_unused(89 - 89) -- %324[0:+4]
    m_shadowMatrix(92 - 92) -- %326[0:+256]

--------------------------------------------------------------------------------
  func:VS_OUTPUT main(VS_INPUT, ShaderResourceTable)
    arguments:
      none

    dwarf:
      main(2 - 2)
        srt(51 - 51) -- %30506[0:+16]
      m_viewProjectionMatrix(78 - 78) -- %7099[0:+16] %7101[16:+16] %7103[32:+16] %7105[48:+16]

    body:
      block:224 - entry
        <-- 
        --> block:32136

      block:32136
        <-- block:224
        %31295 1/int32 intr.READSPECIALSCALARREG int32{80}[Uniformity(Program)] 's_gs_state'
        %31296 1/int32 LSHR %31295, int32{8}[Uniformity(Program)]
        %31297 1/int32 AND %31296, int32{255}[Uniformity(Program)]
        %31298 1/int32 AND %31295, int32{255}[Uniformity(Program)]
        %32242 void intr.WRITESGPR int32{1024}, %31298, int32{1} has_side_effects dependent_on_side_effects
        %31305 1/int32 SHL %31297, int32{12}[Uniformity(Program)]
        %31306 1/int32 OR %31298, %31305[Uniformity(Program)]
        %31307 void intr.s_sendmsg %31306, int32{9}[Uniformity(Program)] has_side_effects dependent_on_side_effects
        %32235 1/int32 intr.s_sub_i32 int32{64}, %31297[Uniformity(Program)]
        %32238 1/int64 intr.s_lshr_b64 int64{-1}, %32235[Uniformity(Program)]
        %31312 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32238[Uniformity(Lane)] uniform_width
        %31313 1/int1 CMP.ne %31312, int32{0}[Uniformity(Lane)]
        %31314 void BRC %31313[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31440, block:32138

      block:31440
        <-- block:32136
        %31304 1/int32 intr.READSPECIALVECTORREG int32{83}[Uniformity(Lane)] 'v_vtx0_vtx1_offset'
        %31441 void intr.EXPORT %31304, int32{0}, int32{0}, int32{0}, int32{2162708}, int32{0}[Uniformity(Lane)] prim x done
        %31442 void BR [Uniformity(Lane)]
        --> block:32138

      block:32138
        <-- block:31440, block:32136
        %32243 1/int32 intr.READSGPR int32{1024}[ValueTrack(000000000000000000000000________)]
        %32236 1/int32 intr.s_sub_i32 int32{64}, %32243[Uniformity(Program)]
        %32240 1/int64 intr.s_lshr_b64 int64{-1}, %32236[Uniformity(Program)]
        %31437 1/int32 intr.v_cndmask_b32 int32{0}, int32{1}, %32240[Uniformity(Lane)] uniform_width
        %31438 1/int1 CMP.ne %31437, int32{0}[Uniformity(Lane)]
        %31439 void BRC %31438[flatten:force][switch:default][Uniformity(Lane)]
        --> block:31805, block:223

      block:31805
        <-- block:32138
        %31299 1/int32 intr.READSPECIALVECTORREG int32{12}[Uniformity(Lane)] 'v_index'
        %31300 1/int32 intr.READSPECIALVECTORREG int32{15}[Uniformity(Lane)] 'v_instance0'
        %31158 2/int32 intr.READ_SHADER_INPUT int32{23}, int32{0}[Uniformity(Program)]
        %31159 2/int32 intr.READ_SHADER_INPUT int32{15}, int32{0}[Uniformity(Program)]
        %32224 1/int64 CONV_reinterp %31159[Uniformity(Program)]
        %32225 1/int64 CONV_reinterp %31158[Uniformity(Program)]
        %32145 1/int32 intr.s_load_dword %32225, int32{0}, int32{0}[Uniformity(Program)]
        %31167 1/int32 LSHR %32145, int32{5}[Uniformity(Program)]
        %31168 1/int32 AND %31167, int32{3}[Uniformity(Program)]
        %31169 1/int32 LSHR %32145, int32{7}[Uniformity(Program)]
        %31170 1/int32 AND %31169, int32{127}[Uniformity(Program)]
        %31171 1/int32 LSHR %32145, int32{14}[Uniformity(Program)]
        %31172 1/int32 AND %31171, int32{4095}[Uniformity(Program)]
        %31173 1/int32 LSHR %32145, int32{26}[Uniformity(Program)]
        %31174 1/int32 AND %31173, int32{1}[Uniformity(Program)]
        %31968 1/int64 intr.v_cmp_eq_u32 %31174, int32{0}[Uniformity(Program)]
        %31969 1/int32 intr.v_cndmask_b32 %31300, %31299, %31968[Uniformity(Lane)]
        %32231 1/int32 SHL %32145, int32{4}[Uniformity(Program)]
        %32234 1/int32 AND %32231, int32{496}[Uniformity(Program)]
        %32147 4/int32 intr.s_load_dwordx4 %32224, %32234, int32{0}[Uniformity(Program)]
        %31181 1/int32 intr.s_lshl4_add_u32 %31168, int32{786432}[Uniformity(Program)]
        %31183 1/int64 intr.s_bfe_u64 int64{1129281643868848644}, %31181[Uniformity(Program)]
        %31184 1/int32 CONV %31183[Uniformity(Program)]
        %31185 1/int32 SHUF %32147.w[Uniformity(Program)]
        %31187 1/int32 AND %31185, int32{-524288}[Uniformity(Program)]
        %31188 1/int32 SHL %31170, int32{12}[Uniformity(Program)]
        %31189 1/int32 OR %31187, %31188[Uniformity(Program)]
        %31190 1/int32 OR %31189, %31184[Uniformity(Program)]
        %31970 1/int32 intr.s_cmov_scalar %31170, int32{0}, %31185, %31190, int32{0}[Uniformity(Program)]
        %31192 4/int32 SHUF %32147.xyz-,  %31970.---x[Uniformity(Program)]
        %31194 3/fp32 intr.buffer_load_format_xyz %31969, %31192, %31172, int64{36029896530591744}[Uniformity(Lane)]
        %30505 4/int32 intr.READ_SHADER_INPUT int32{5}, int32{0}, int32{0}[Uniformity(Program)]
        %30506 structured buffer (read only) cache flags: 0x000000000 4/fp32[4]:column_major intr.CREATE_PSSL_OBJECT %30505 [0,srt(51),0,16][Uniformity(Program)]
        %342 1/int32 LD %321[Uniformity(Program)]
        %32153 4/int32 intr.GET_VSHARP %30506[Uniformity(Program)]
        %32227 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32161 4/int32 intr.s_buffer_load_dwordx4 %32153, %32227, int32{0}[Uniformity(Program)]
        %32167 4/fp32 CONV_reinterp %32161[Uniformity(Program)]
        %32228 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32174 1/int32 ADD int32{16}, %32228[Uniformity(Program)]
        %32175 4/int32 intr.s_buffer_load_dwordx4 %32153, %32174, int32{0}[Uniformity(Program)]
        %32181 4/fp32 CONV_reinterp %32175[Uniformity(Program)]
        %32229 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32188 1/int32 ADD int32{32}, %32229[Uniformity(Program)]
        %32189 4/int32 intr.s_buffer_load_dwordx4 %32153, %32188, int32{0}[Uniformity(Program)]
        %32195 4/fp32 CONV_reinterp %32189[Uniformity(Program)]
        %32230 1/int32 SHL %342, int32{6}[Uniformity(Program)]
        %32202 1/int32 ADD int32{48}, %32230[Uniformity(Program)]
        %32203 4/int32 intr.s_buffer_load_dwordx4 %32153, %32202, int32{0}[Uniformity(Program)]
        %32209 4/fp32 CONV_reinterp %32203[Uniformity(Program)]
        %30924 1/fp32 MUL %32167, %31194[Uniformity(Lane)]
        %30452 1/fp32 SHUF %31194.y[Uniformity(Lane)]
        %30925 1/fp32 MUL %32181, %30452[Uniformity(Lane)]
        %30453 1/fp32 SHUF %31194.z[Uniformity(Lane)]
        %30926 1/fp32 MUL %32195, %30453[Uniformity(Lane)]
        %30927 1/fp32 ADD %32209, %30924[Uniformity(Lane)]
        %30928 1/fp32 ADD %30927, %30925[Uniformity(Lane)]
        %30929 1/fp32 ADD %30928, %30926[Uniformity(Lane)]
        %30454 1/fp32 SHUF %32167.y[Uniformity(Program)]
        %30930 1/fp32 MUL %30454, %31194[Uniformity(Lane)]
        %30455 1/fp32 SHUF %32181.y[Uniformity(Program)]
        %30931 1/fp32 MUL %30452, %30455[Uniformity(Lane)]
        %30457 1/fp32 SHUF %32195.y[Uniformity(Program)]
        %30932 1/fp32 MUL %30453, %30457[Uniformity(Lane)]
        %30459 1/fp32 SHUF %32209.y[Uniformity(Program)]
        %30933 1/fp32 ADD %30459, %30930[Uniformity(Lane)]
        %30934 1/fp32 ADD %30933, %30931[Uniformity(Lane)]
        %30935 1/fp32 ADD %30934, %30932[Uniformity(Lane)]
        %30460 1/fp32 SHUF %32167.z[Uniformity(Program)]
        %30936 1/fp32 MUL %30460, %31194[Uniformity(Lane)]
        %30461 1/fp32 SHUF %32181.z[Uniformity(Program)]
        %30937 1/fp32 MUL %30452, %30461[Uniformity(Lane)]
        %30463 1/fp32 SHUF %32195.z[Uniformity(Program)]
        %30938 1/fp32 MUL %30453, %30463[Uniformity(Lane)]
        %30465 1/fp32 SHUF %32209.z[Uniformity(Program)]
        %30939 1/fp32 ADD %30465, %30936[Uniformity(Lane)]
        %30940 1/fp32 ADD %30939, %30937[Uniformity(Lane)]
        %30941 1/fp32 ADD %30940, %30938[Uniformity(Lane)]
        %30466 1/fp32 SHUF %32167.w[Uniformity(Program)]
        %30942 1/fp32 MUL %30466, %31194[Uniformity(Lane)]
        %30467 1/fp32 SHUF %32181.w[Uniformity(Program)]
        %30943 1/fp32 MUL %30452, %30467[Uniformity(Lane)]
        %30469 1/fp32 SHUF %32195.w[Uniformity(Program)]
        %30944 1/fp32 MUL %30453, %30469[Uniformity(Lane)]
        %30471 1/fp32 SHUF %32209.w[Uniformity(Program)]
        %30945 1/fp32 ADD %30471, %30942[Uniformity(Lane)]
        %30946 1/fp32 ADD %30945, %30943[Uniformity(Lane)]
        %30947 1/fp32 ADD %30946, %30944[Uniformity(Lane)]
        %7098 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{0}[Uniformity(Program)]
        %7099 4/fp32 LD %7098 [0,m_viewProjectionMatrix(78),0,16][Uniformity(Program)]
        %7100 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{1}[Uniformity(Program)]
        %7101 4/fp32 LD %7100 [0,m_viewProjectionMatrix(78),16,16][Uniformity(Program)]
        %7102 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{2}[Uniformity(Program)]
        %7103 4/fp32 LD %7102 [0,m_viewProjectionMatrix(78),32,16][Uniformity(Program)]
        %7104 roconstant(0) * 4/fp32 GETELEMPTR %313, int32{0}, int32{3}[Uniformity(Program)]
        %7105 4/fp32 LD %7104 [0,m_viewProjectionMatrix(78),48,16][Uniformity(Program)]
        %30948 1/fp32 MUL %7099, %30929[Uniformity(Lane)]
        %30949 1/fp32 MUL %7101, %30935[Uniformity(Lane)]
        %30950 1/fp32 MUL %7103, %30941[Uniformity(Lane)]
        %30951 1/fp32 MUL %7105, %30947[Uniformity(Lane)]
        %30952 1/fp32 ADD %30948, %30949[Uniformity(Lane)]
        %30953 1/fp32 ADD %30952, %30950[Uniformity(Lane)]
        %30954 1/fp32 ADD %30953, %30951[Uniformity(Lane)]
        %30472 1/fp32 SHUF %7099.y[Uniformity(Program)]
        %30955 1/fp32 MUL %30472, %30929[Uniformity(Lane)]
        %30473 1/fp32 SHUF %7101.y[Uniformity(Program)]
        %30956 1/fp32 MUL %30473, %30935[Uniformity(Lane)]
        %30474 1/fp32 SHUF %7103.y[Uniformity(Program)]
        %30957 1/fp32 MUL %30474, %30941[Uniformity(Lane)]
        %30475 1/fp32 SHUF %7105.y[Uniformity(Program)]
        %30958 1/fp32 MUL %30475, %30947[Uniformity(Lane)]
        %30959 1/fp32 ADD %30955, %30956[Uniformity(Lane)]
        %30960 1/fp32 ADD %30959, %30957[Uniformity(Lane)]
        %30961 1/fp32 ADD %30960, %30958[Uniformity(Lane)]
        %30476 1/fp32 SHUF %7099.z[Uniformity(Program)]
        %30962 1/fp32 MUL %30476, %30929[Uniformity(Lane)]
        %30477 1/fp32 SHUF %7101.z[Uniformity(Program)]
        %30963 1/fp32 MUL %30477, %30935[Uniformity(Lane)]
        %30478 1/fp32 SHUF %7103.z[Uniformity(Program)]
        %30964 1/fp32 MUL %30478, %30941[Uniformity(Lane)]
        %30479 1/fp32 SHUF %7105.z[Uniformity(Program)]
        %30965 1/fp32 MUL %30479, %30947[Uniformity(Lane)]
        %30966 1/fp32 ADD %30962, %30963[Uniformity(Lane)]
        %30967 1/fp32 ADD %30966, %30964[Uniformity(Lane)]
        %30968 1/fp32 ADD %30967, %30965[Uniformity(Lane)]
        %30480 1/fp32 SHUF %7099.w[Uniformity(Program)]
        %30969 1/fp32 MUL %30480, %30929[Uniformity(Lane)]
        %30481 1/fp32 SHUF %7101.w[Uniformity(Program)]
        %30970 1/fp32 MUL %30481, %30935[Uniformity(Lane)]
        %30482 1/fp32 SHUF %7103.w[Uniformity(Program)]
        %30971 1/fp32 MUL %30482, %30941[Uniformity(Lane)]
        %30483 1/fp32 SHUF %7105.w[Uniformity(Program)]
        %30972 1/fp32 MUL %30483, %30947[Uniformity(Lane)]
        %30973 1/fp32 ADD %30969, %30970[Uniformity(Lane)]
        %30974 1/fp32 ADD %30973, %30971[Uniformity(Lane)]
        %30975 1/fp32 ADD %30974, %30972[Uniformity(Lane)]
        %31465 void intr.EXPORT %30954, %30961, %30968, %30975, int32{3080204}, int32{0}[Uniformity(Lane)] pos0 x y z w done
        %31931 void BR [Uniformity(Lane)]
        --> block:223

      block:223 - exit
        <-- block:32138, block:31805
        --> 


--------------------------------------------------------------------------------

>> pass 801/815: validate graph
    validate graph (0045C2BE)
>> pass 802/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 803/815: uninline sub-routines
    uninline sub-routines (7C5E3842)
>> pass 804/815: dominance analysis
    dominance analysis (2F8E7FB9)
>> pass 805/815: validate graph
    validate graph (0045C2BE)
>> pass 806/815: loop analysis
    loop analysis (598E85BD)
>> pass 807/815: gated SSA analysis
    gated SSA analysis (69421C7A)
>> pass 808/815: sub-routine analysis
    sub-routine analysis (6B38D731)
>> pass 809/815: divergence analysis
    divergence analysis (FABDAFF7)
>> pass 810/815: structural analysis
    structural analysis (A71DE301)
>> pass 811/815: scalar analysis
    scalar analysis (6B88E817)
>> pass 812/815: R10CompileHwCode
    R10CompileHwCode (4028FCBE)

Transform List (block32136):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

Transform List (block31440):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

Transform List (block32138):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

Transform List (block31805):
>> transform 0/43: remove redundant MOVs
    remove redundant MOVs (7B06F906)
>> transform 1/43: select MAD
    select MAD (CC9ED0A4)
>> transform 2/43: coalesce static memory offsets
    coalesce static memory offsets (79F30FB6)
>> transform 3/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 4/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 5/43: optimize rmw memory access
    optimize rmw memory access (96DC3C00)
>> transform 6/43: select mimg instructions (t)
    select mimg instructions (t) (7C563B53)
>> transform 7/43: scalarize(t)
    scalarize(t) (259C0E79)
>> transform 8/43: split load and store nodes
    split load and store nodes (B21721AD)
>> transform 9/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 10/43: simplify short(t)
    simplify short(t) (35ED8800)
>> transform 11/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 12/43: select instructions (t)
    select instructions (t) (7F515E64)
>> transform 13/43: simplify extract coeffs(t)
    simplify extract coeffs(t) (AEF0ECFF)
>> transform 14/43: simplify bundles (t)
    simplify bundles (t) (AA0FBEA7)
>> transform 15/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 16/43: remove scalar moves (t)
    remove scalar moves (t) (1263FA60)
>> transform 17/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 18/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 19/43: select vop modifiers (t)
    select vop modifiers (t) (13D3883C)
>> transform 20/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 21/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 22/43: merge add+cmp
    merge add+cmp (C38EEADD)
>> transform 23/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 24/43: optimize mimg (t)
    optimize mimg (t) (A361180E)
>> transform 25/43: optimize mt buffer loads (t)
    optimize mt buffer loads (t) (D2401717)
>> transform 26/43: optimize condition code
    optimize condition code (CEDF8398)
>> transform 27/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 28/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 29/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 30/43: break redundant dependencies (t)
    break redundant dependencies (t) (FA538E53)
>> transform 31/43: coalesce memory access (t)
    coalesce memory access (t) (2791AFC8)
>> transform 32/43: coalesce lds and gds access (t)
    coalesce lds and gds access (t) (CF5E00D4)
>> transform 33/43: peephole optimizer (t)
    peephole optimizer (t) (77F93A08)
>> transform 34/43: eliminate common expressions
    eliminate common expressions (1B73B995)
>> transform 35/43: combine opsel (t)
    combine opsel (t) (D6E3CB3F)
>> transform 36/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 37/43: select madmix (t)
    select madmix (t) (5F6B0EFC)
>> transform 38/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 39/43: optimize read registers (t)
    optimize read registers (t) (4B92E72C)
>> transform 40/43: lower uninitialized nodes (t)
    lower uninitialized nodes (t) (7F2B00EA)
>> transform 41/43: canonicalize cndmask t)
    canonicalize cndmask t) (F0557343)
>> transform 42/43: eliminate dead node
    eliminate dead node (192079B9)
>> transform 43/43: merge R10CmovScalarNode nodes (t)
    merge R10CmovScalarNode nodes (t) (40BB2459)

--------------------------------------------------------------------------------
>> assembler pass 0/47: merge blocks

--------------------------------------------------------------------------------
>> assembler pass 1/47: fix sgpr alignment

--------------------------------------------------------------------------------
>> assembler pass 2/47: optimize nsa

--------------------------------------------------------------------------------
>> assembler pass 3/47: move coalescing using interference graph

--------------------------------------------------------------------------------
>> assembler pass 4/47: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 5/47: Remove unecessary v_readfirstlane_b32 + lds_direct instructions

--------------------------------------------------------------------------------
>> assembler pass 6/47: reschedule instructions in basic block before register allocation to decrease register pressure

--------------------------------------------------------------------------------
>> assembler pass 7/47: schedule latency: reschedule instructions to hide instruction latency

--------------------------------------------------------------------------------
>> assembler pass 8/47: schedule cache thrashing: reschedule instructions to increase cache hit on loads

--------------------------------------------------------------------------------
>> assembler pass 9/47: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 10/47: lower pseudo ops

--------------------------------------------------------------------------------
>> assembler pass 11/47: optimize range moves

--------------------------------------------------------------------------------
>> assembler pass 12/47: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 13/47: basic block optimization on asm

--------------------------------------------------------------------------------
>> assembler pass 14/47: copy propagation

--------------------------------------------------------------------------------
>> assembler pass 15/47: allocate vcc

--------------------------------------------------------------------------------
>> assembler pass 16/47: assign sub-registers

--------------------------------------------------------------------------------
>> assembler pass 17/47: opsel movs optimization

--------------------------------------------------------------------------------
>> assembler pass 18/47: dpp movs optimization

--------------------------------------------------------------------------------
>> assembler pass 19/47: vop pk vectorizer

--------------------------------------------------------------------------------
>> assembler pass 20/47: allocate sub-registers

--------------------------------------------------------------------------------
>> assembler pass 21/47: optimize sop/vop encoding

--------------------------------------------------------------------------------
>> assembler pass 22/47: legalize instructions

--------------------------------------------------------------------------------
>> assembler pass 23/47: legalize pops

--------------------------------------------------------------------------------
>> assembler pass 24/47: Remove unecessary v_readfirstlane_b32 + lds_direct instructions

--------------------------------------------------------------------------------
>> assembler pass 25/47: move coalescing using interference graph

--------------------------------------------------------------------------------
>> assembler pass 26/47: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 27/47: reschedule instructions in basic block before register allocation to improve latency hiding

--------------------------------------------------------------------------------
>> assembler pass 28/47: allocate vcc

--------------------------------------------------------------------------------
>> assembler pass 29/47: allocateregisters

--------------------------------------------------------------------------------
>> assembler pass 30/47: postralowerpseudoinst

--------------------------------------------------------------------------------
>> assembler pass 31/47: copy propagation

--------------------------------------------------------------------------------
>> assembler pass 32/47: dead code elimination

--------------------------------------------------------------------------------
>> assembler pass 33/47: loop invariant code motion

--------------------------------------------------------------------------------
>> assembler pass 34/47: optimize m0

--------------------------------------------------------------------------------
>> assembler pass 35/47: optimize sop/vop encoding

--------------------------------------------------------------------------------
>> assembler pass 36/47: schedule cache thrashing: reschedule instructions to increase cache hit on loads

--------------------------------------------------------------------------------
>> assembler pass 37/47: expand summary

--------------------------------------------------------------------------------
>> assembler pass 38/47: insert_waits

--------------------------------------------------------------------------------
>> assembler pass 39/47: finalize exports

--------------------------------------------------------------------------------
>> assembler pass 40/47: insert manual dependencies

--------------------------------------------------------------------------------
>> assembler pass 41/47: remove vcc stalls with v_sad_u32

--------------------------------------------------------------------------------
>> assembler pass 42/47: validate hw instructions

--------------------------------------------------------------------------------
>> assembler pass 43/47: resolve labels

--------------------------------------------------------------------------------
>> assembler pass 44/47: calculate register count

--------------------------------------------------------------------------------
>> assembler pass 45/47: generate debug info

--------------------------------------------------------------------------------
>> assembler pass 46/47: generate_vs_info
>> pass 813/815: validate graph
    validate graph (0045C2BE)
>> pass 814/815: r10 validate hw code
    r10 validate hw code (878340BD)
>> pass 815/815: validate graph
    validate graph (0045C2BE)
// guid: 282fd6f100000000
// githash: 0xbaadc0de
// compiler version: development version
// profile: vertex
// srt: yes
// variant: vertex
// code-size: 768
// header-size: 368
.pragma argument(target=common; chiprev=trinity-proto2)
.shader
  type(GS)
  sgpr_count(46)
  vgpr_count(12)
  user_sgpr_count(16)
  cxxsymbol("shaders::material_vv")
  wavemode(wave64)
  set_shader_type("geometry")  // v_primitive_id in v2
  num_prims(64)
  num_verts(64)
  amp_factor(1)
  passthrough(1)
  gs_vgpr_component_count(3)
  es_vgpr_component_count(3)
  prim_shader(vs)
  float_mode(kFloatModeRoundNearestEven|kFloatModeFlushDenormIn|kFloatModeFlushDenormOut, kFloatModeRoundNearestEven|kFloatModeAllowDenormIn|kFloatModeAllowDenormOut)
  dx10_clamp(1)
  user_sgpr_usage([0:3], kShaderInputUsageImmShaderResourceTable, 0) // s[8:11]
  user_sgpr_usage([4:7], kShaderInputUsageImmConstBuffer, 0) // s[12:15]
  user_sgpr_usage([8:11], kShaderInputUsageImmConstBuffer, 2) // s[16:19]
  user_sgpr_usage([12:13], kShaderInputUsagePtrVertexBufferTable, 0) // s[20:21]
  user_sgpr_usage([14:15], kShaderInputUsagePtrVertexAttribDescTable, 0) // s[22:23]
  vertex_input_semantic(v[9:11], 0, "kTypeFloat3")

  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  s_inst_prefetch 0x3                                                    // 00000000: SOPP, BFA00003, 
  s_bfe_u32 vcc1, s3, #0x80008                                           // 00000004: SOP2, 93EBFF03 00080008, 
  s_and_b32 s0, s3, #0xff                                                // 0000000C: SOP2, 8700FF03 000000FF, 
  s_lshl_b32 vcc0, vcc1, 12                                              // 00000014: SOP2, 8F6A8C6B, 
  s_or_b32 m0, s0, vcc0                                                  // 00000018: SOP2, 887C6A00,  1cy stall (vcc0)
  s_nop 0x0                                                              // 0000001C: SOPP, BF800000, 
  s_sendmsg sendmsg(kMsgGsAllocReq)                                      // 00000020: SOPP, BF900009,  7cy stall (sa_m0)
  s_sub_i32 vcc0, 64, vcc1                                               // 00000024: SOP2, 81EA6BC0, 
  s_lshr_b64 exec[0:1], -1, vcc0                                         // 00000028: SOP2, 90FE6AC1,  1cy stall (vcc0)
  exp prim, v0, off, off, off done row_en                                // 0000002C: EXP, F8000941 00000000, 
  s_sub_i32 vcc0, 64, s0                                                 // 00000034: SOP2, 81EA00C0, 
  s_waitcnt expcnt(0)                                                    // 00000038: SOPP, BF8CFF0F, 
  s_lshr_b64 exec[0:1], -1, vcc0                                         // 0000003C: SOP2, 90FE6AC1, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\common.pssli */
  /* 50: float3 position : POSITION; */
  s_load_dword s22, s[22:23], null                                       // 00000040: SMEM, F400058B FA000000, 
  s_mov_b32 s4, #0x22c0204                                               // 00000048: SOP1, BE8403FF 022C0204, 
  s_mov_b32 s5, #0xfac03ac                                               // 00000050: SOP1, BE8503FF 0FAC03AC, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_buffer_load_dword s16, s[16:19], null                                // 00000058: SMEM, F4200408 FA000000,  6cy stall (sa_sdst)
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  s_buffer_load_dwordx16 s[24:39], s[12:15], null                        // 00000060: SMEM, F4300606 FA000000, 
  s_waitcnt lgkmcnt(0)                                                   // 00000068: SOPP, BF8CC07F, 34cy stall (lgkm_cnt)
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\common.pssli */
  /* 50: float3 position : POSITION; */
  s_lshl_b32 vcc1, s22, 4                                                // 0000006C: SOP2, 8F6B8416, 
  s_bfe_u32 vcc0, s22, #0x1001a                                          // 00000070: SOP2, 93EAFF16 0001001A, 
  s_and_b32 vcc1, vcc1, #0x1f0                                           // 00000078: SOP2, 876BFF6B 000001F0, 
  s_cmp_eq_u32 0, vcc0                                                   // 00000080: SOPC, BF066A80, 
  s_load_dwordx4 s[0:3], s[20:21], vcc1                                  // 00000084: SMEM, F408000A D6000000,  8cy stall (sa_sdst)
  s_cselect_b64 s[6:7], exec[0:1], 0                                     // 0000008C: SOP2, 8586807E, 
  s_bfe_u32 s12, s22, #0x70007                                           // 00000090: SOP2, 938CFF16 00070007, 
  s_bfe_u32 vcc0, s22, #0x20005                                          // 00000098: SOP2, 93EAFF16 00020005, 
  s_lshl_b32 s13, s12, 12                                                // 000000A0: SOP2, 8F0D8C0C, 
  s_lshl4_add_u32 vcc1, vcc0, #0xc0000                                   // 000000A4: SOP2, 98EBFF6A 000C0000, 
  s_waitcnt lgkmcnt(0)                                                   // 000000AC: SOPP, BF8CC07F, 26cy stall (lgkm_cnt)
  s_and_b32 vcc0, s3, #0xfff80000                                        // 000000B0: SOP2, 876AFF03 FFF80000, 
  s_bfe_u64 s[4:5], s[4:5], vcc1                                         // 000000B8: SOP2, 94846B04, 
  s_or_b32 vcc0, vcc0, s13                                               // 000000BC: SOP2, 886A0D6A, 
  v_cndmask_b32 v0, v8, v5, s[6:7]                                       // 000000C0: VOP3, D5010000 001A0B08, 
  s_or_b32 vcc0, vcc0, s4                                                // 000000C8: SOP2, 886A046A,  5cy stall (va_ssrc with SGPR/VCC)
  s_bfe_u32 vcc1, s22, #0xc000e                                          // 000000CC: SOP2, 93EBFF16 000C000E, 
  s_cmp_eq_u32 s12, 0                                                    // 000000D4: SOPC, BF06800C, 
  s_nop 0x0                                                              // 000000D8: SOPP, BF800000, 
  s_cselect_b32 s3, s3, vcc0                                             // 000000DC: SOP2, 85036A03, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_lshl_b32 vcc0, s16, 6                                                // 000000E0: SOP2, 8F6A8610, 
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\common.pssli */
  /* 50: float3 position : POSITION; */
  buffer_load_format_xyz v[0:2], v0, s[0:3], vcc1 idxen                  // 000000E4: MUBUF, E0082000 6B000000,  8cy stall (sa_sdst)
  /* C:\Users\gbdixonalex\AppData\Local\Temp\k0ihaajh.qi1\Users\gbdixonalex\Desktop\material_vv.pssl */
  /* 14: float4x4 worldMatrix = srt.m_worldMatrix[m_entityIndex]; */
  s_buffer_load_dwordx16 s[0:15], s[8:11], vcc0                          // 000000EC: SMEM, F4300004 D4000000, 
  s_waitcnt vmcnt(0) & lgkmcnt(0)                                        // 000000F4: SOPP, BF8C0070, 88cy stall (vm_cnt)
  /* 17: float4 worldPos = mul(worldMatrix, float4(input.position.xyz, 1.0)); */
  v_mad_f32 v4, s0, v0, s12                                              // 000000F8: VOP3, D5410004 00320000, 
  v_mad_f32 v5, s1, v0, s13                                              // 00000100: VOP3, D5410005 00360001, 
  v_mad_f32 v6, s2, v0, s14                                              // 00000108: VOP3, D5410006 003A0002, 
  v_mad_f32 v0, s3, v0, s15                                              // 00000110: VOP3, D5410000 003E0003, 
  v_mac_f32 v4, s4, v1                                                   // 00000118: VOP2, 3E080204, 
  v_mad_f32 v3, v1, s5, v5                                               // 0000011C: VOP3, D5410003 04140B01, 
  v_mac_f32 v6, s6, v1                                                   // 00000124: VOP2, 3E0C0206, 
  v_mac_f32 v0, s7, v1                                                   // 00000128: VOP2, 3E000207, 
  v_mac_f32 v4, s8, v2                                                   // 0000012C: VOP2, 3E080408, 
  v_mac_f32 v3, s9, v2                                                   // 00000130: VOP2, 3E060409, 
  v_mad_f32 v1, v2, s10, v6                                              // 00000134: VOP3, D5410001 04181502, 
  v_mac_f32 v0, s11, v2                                                  // 0000013C: VOP2, 3E00040B, 
  /* 20:     output.position = mul(m_viewProjectionMatrix, worldPos); */
  v_mul_f32 v5, s24, v4                                                  // 00000140: VOP2, 100A0818, 
  v_mul_f32 v6, s27, v4                                                  // 00000144: VOP2, 100C081B, 
  v_mul_f32 v2, s26, v4                                                  // 00000148: VOP2, 1004081A, 
  v_mul_f32 v7, s25, v4                                                  // 0000014C: VOP2, 100E0819, 
  v_mad_f32 v4, s28, v3, v5                                              // 00000150: VOP3, D5410004 0416061C, 
  v_mad_f32 v5, s31, v3, v6                                              // 00000158: VOP3, D5410005 041A061F, 
  v_mac_f32 v2, s30, v3                                                  // 00000160: VOP2, 3E04061E, 
  v_mac_f32 v7, s29, v3                                                  // 00000164: VOP2, 3E0E061D, 
  v_mac_f32 v4, s32, v1                                                  // 00000168: VOP2, 3E080220, 
  v_mac_f32 v5, s35, v1                                                  // 0000016C: VOP2, 3E0A0223, 
  v_mac_f32 v2, s34, v1                                                  // 00000170: VOP2, 3E040222, 
  v_mac_f32 v7, s33, v1                                                  // 00000174: VOP2, 3E0E0221, 
  v_mad_f32 v3, s36, v0, v4                                              // 00000178: VOP3, D5410003 04120024, 
  v_mac_f32 v5, s39, v0                                                  // 00000180: VOP2, 3E0A0027, 
  v_mac_f32 v2, s38, v0                                                  // 00000184: VOP2, 3E040026, 
  v_mac_f32 v7, s37, v0                                                  // 00000188: VOP2, 3E0E0025, 
  /* 10: VS_OUTPUT main(VS_INPUT input, ShaderResourceTable srt : S_SRT_DATA) */
  exp pos0, v3, v7, v2, v5 done row_en                                   // 0000018C: EXP, F80008CF 05020703, 13cy stall (va_vdst)
  /* 36: } */
  s_endpgm                                                               // 00000194: SOPP, BF810000, 

/*
=== resources:
0) class: srt        slot: 0   name:srt            type: ShaderResourceTable
1) class: cb         slot: 0   name:ViewConstants  type: ConstantBuffer<ViewConstants>
2) class: cb         slot: 2   name:DrawConstants  type: ConstantBuffer<DrawConstants>
3) class: input      slot: 0   name:input.position semantic: POSITION index: 0 type: float3
4) class: output     slot: 0   name:main.position  semantic: S_POSITION index: 0 type: float4

=== user-types:
struct MaterialProperties  { // size=32
 float4 m_albedoColor;    // offset:0, unused
 float4 m_emissiveColor;  // offset:16, unused
};

struct MaterialSRT  { // size=96
 RegularBuffer<unsigned int> m_materialFlags;             // offset:0, unused
 RegularBuffer<MaterialProperties> m_materialProperties;  // offset:16, unused
 RegularBuffer<Texture2D<float4>> m_albedoTexture;        // offset:32, unused
 RegularBuffer<Texture2D<float4>> m_normalTexture;        // offset:48, unused
 RegularBuffer<Texture2D<float4>> m_roughnessTexture;     // offset:64, unused
 RegularBuffer<Texture2D<float4>> m_emissiveTexture;      // offset:80, unused
};

struct ShaderResourceTable  { // size=24
 RegularBuffer<float4x4> m_worldMatrix;  // offset:0
 MaterialSRT* m_material;                // offset:16, unused
};

struct ViewConstants  { // size=208
 float4x4 m_viewProjectionMatrix;         // offset:0
 float4x4 m_inverseViewProjectionMatrix;  // offset:64, unused
 float4 m_viewPosition;                   // offset:128, unused
 float4 m_lightDirection;                 // offset:144, unused
 float4 m_shadowFocusNearFar;             // offset:160, unused
 float4 m_cascadeFocusFar;                // offset:176, unused
 float4 m_time;                           // offset:192, unused
};

struct DrawConstants  { // size=16
 unsigned int m_entityIndex;  // offset:0
 int m_lodIndex;              // offset:4, unused
 unsigned int m_debugOption;  // offset:8, unused
 unsigned int m_unused;       // offset:12, unused
};

*/