var searchIndex = JSON.parse('{\
"hello_world":{"doc":"","t":[3,11,11,12,11,11,5,12,11,11,11],"n":["Vertex","borrow","borrow_mut","color","from","into","main","position","try_from","try_into","type_id"],"q":["hello_world","","","","","","","","","",""],"d":["","","","","","","","","","",""],"i":[0,1,1,1,1,1,0,1,1,1,1],"f":[null,[[]],[[]],null,[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Vertex"]]},\
"hotline":{"doc":"","t":[0,0,0,13,13,13,13,13,8,16,3,4,13,3,3,8,16,4,13,13,13,18,18,13,13,3,13,3,4,8,3,13,13,3,4,4,13,13,13,13,8,16,3,4,13,13,3,4,13,13,13,13,13,13,18,18,13,13,13,13,13,8,16,3,13,13,3,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,8,16,8,16,3,13,13,4,18,18,13,13,4,4,3,3,8,13,16,13,3,3,3,13,13,4,4,8,16,3,8,16,13,13,13,3,4,3,3,18,13,13,13,18,13,13,13,13,3,13,13,13,12,12,12,12,5,5,12,11,11,12,5,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,11,11,11,11,10,10,10,10,10,10,10,10,10,12,0,12,10,12,12,12,12,12,11,11,12,10,10,12,11,11,10,12,11,11,11,11,12,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,10,10,10,10,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,12,12,12,12,12,12,11,11,10,11,11,12,12,12,12,12,11,11,10,12,12,10,12,12,12,11,11,12,12,10,12,12,12,5,12,12,12,11,11,10,10,10,10,10,12,12,12,12,12,12,5,5,12,5,12,12,12,12,12,12,11,11,11,11,10,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,12,11,12,11,5,11,11,11,12,5,8,3,3,8,16,3,11,11,11,11,11,11,10,11,11,10,10,10,11,11,11,10,10,10,12,11,11,11,12,12,12,10,10,10,12,11,11,11,11,11,11,11,11,11,11,10,12,0,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["gfx","image","os","All","Always","Anisotropic","BGRA8n","Border","Buffer","Buffer","BufferInfo","BufferUsage","Clamp","ClearColour","ClearDepthStencil","CmdBuf","CmdBuf","ComparisonFunc","Compute","ConstantBuffer","ConstantBuffer","DEBUG","DEPTH_STENCIL_TARGET","DataSize","DepthStencil","DescriptorLayout","DescriptorLayout","DescriptorTableInfo","DescriptorTableType","Device","DeviceInfo","Direct3D12","Equal","Error","ErrorType","Format","Fragment","Fragment","Greater","GreaterEqual","Heap","Heap","HeapInfo","HeapType","Index","IndexBuffer","InputElementInfo","InputSlotClass","Less","LessEqual","Linear","Metal","Mirror","MirrorOnce","NONE","NONE","Never","NotEqual","NulError","PerInstance","PerVertex","Pipeline","Pipeline","PipelineInfo","Point","Present","PushConstantInfo","R16f","R16i","R16n","R16u","R32f","R32i","R32u","RENDER_TARGET","RG32f","RG32i","RG32u","RGB32f","RGB32i","RGB32u","RGBA16f","RGBA16i","RGBA16u","RGBA32f","RGBA32i","RGBA32u","RGBA8i","RGBA8n","RGBA8u","ReadBackData","ReadBackRequest","ReadBackRequest","RenderPass","RenderPass","RenderPassInfo","RenderTarget","RenderTarget","ResourceState","SHADER_RESOURCE","SKIP_OPTIMIZATION","Sampler","Sampler","SamplerAddressMode","SamplerFilter","SamplerInfo","ScissorRect","Shader","Shader","Shader","ShaderCompile","ShaderCompileFlags","ShaderCompileInfo","ShaderInfo","ShaderResource","ShaderResource","ShaderType","ShaderVisibility","SwapChain","SwapChain","SwapChainInfo","Texture","Texture","Texture1D","Texture2D","Texture3D","TextureInfo","TextureType","TextureUsage","TransitionBarrier","UNORDERED_ACCESS","Unknown","UnorderedAccess","UnorderedAccess","VIDEO_DECODE_TARGET","Vertex","Vertex","Vertex","VertexConstantBuffer","Viewport","Vulkan","WebGPU","Wrap","a","address_u","address_v","address_w","align","align_pow2","aligned_byte_offset","all","all","array_levels","as_u8_slice","b","begin_render_pass","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","block_size_for_format","border_colour","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmp","cmp","comparison","compile_info","complement","complement","contains","contains","create","create_buffer","create_cmd_buf","create_heap","create_pipeline","create_render_pass","create_shader","create_swap_chain","create_texture","cs","d3d12","data","debug_set_descriptor_heap","depth","depth","depth_stencil_heap_size","depth_stencil_target","descriptor_layout","difference","difference","discard","draw_indexed_instanced","draw_instanced","ds_clear","empty","empty","end_render_pass","entry_point","eq","eq","eq","eq","error_type","execute","extend","extend","filter","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","fs","g","get_backbuffer_index","get_backbuffer_pass","get_backbuffer_texture","get_data","get_srv_index","get_srv_index","hash","hash","hash","heap_type","height","height","index","input_layout","input_slot","input_slot_class","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_complete","is_empty","is_empty","left","max_aniso","max_depth","max_lod","min_depth","min_lod","mip_levels","mip_lod_bias","msg","ne","ne","new_frame","not","not","num_buffers","num_descriptors","num_descriptors","num_elements","num_values","partial_cmp","partial_cmp","push_constants","push_constants","r","read_back_backbuffer","register_space","register_space","register_space","remove","remove","render_target_heap_size","render_targets","reset","resolve","right","row_pitch","row_pitch_for_format","rt_clear","samples","semantic","set","set","set_index_buffer","set_pipeline_state","set_scissor_rect","set_vertex_buffer","set_viewport","shader_heap_size","shader_register","shader_register","shader_register","shader_type","size","size_for_format","slice_as_u8_slice","slice_pitch","slice_pitch_for_format","state_after","state_before","static_samplers","stencil","step_rate","stride","sub","sub","sub_assign","sub_assign","swap","symmetric_difference","symmetric_difference","table_type","tables","target","tex_type","texture","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","top","transition_barrier","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","update","usage","usage","visibility","visibility","visibility","vs","width","width","x","y","Buffer","CmdBuf","Device","Heap","Pipeline","ReadBackRequest","RenderPass","Shader","SwapChain","Texture","begin_render_pass","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","close","create","create_buffer","create_cmd_buf","create_heap","create_pipeline","create_render_pass","create_shader","create_swap_chain","create_texture","debug_set_descriptor_heap","draw_indexed_instanced","draw_instanced","end_render_pass","execute","fence_value","from","from","from","from","from","from","from","from","from","from","get_backbuffer_index","get_backbuffer_pass","get_backbuffer_texture","get_data","get_srv_index","get_srv_index","into","into","into","into","into","into","into","into","into","into","is_complete","new_frame","push_constants","read_back_backbuffer","reset","resource","row_pitch","set_index_buffer","set_pipeline_state","set_scissor_rect","set_vertex_buffer","set_viewport","size","slice_pitch","swap","to_owned","to_owned","transition_barrier","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","ImageData","borrow","borrow_mut","components","data","from","height","into","load_from_file","try_from","try_into","type_id","width","write_to_file","App","AppInfo","Rect","Window","Window","WindowInfo","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bring_to_front","clone","clone_into","close","create","create_window","from","from","from","get_rect","get_size","get_viewport_rect","height","into","into","into","name","num_buffers","rect","run","set_rect","set_size","title","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","width","win32","window","x","y","App","Window","borrow","borrow","borrow_mut","borrow_mut","bring_to_front","close","create","create_window","drop","drop","from","from","get_native_handle","get_rect","get_size","get_viewport_rect","into","into","run","set_rect","set_size","try_from","try_from","try_into","try_into","type_id","type_id","update"],"q":["hotline","","","hotline::gfxhotline::gfx::d3d12","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotline::image","","","","","","","","","","","","","","hotline::os","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hotline::os::win32","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Graphics and compute module.","Image reading/writing module support for (png, jpg, bmp, …","Operating system module.","","","","","","An opaque Buffer type used for vertex, index, constant or …","","Information to create a buffer through …","Describes how a buffer will be used on the GPU.","","Values to clear colour render targets at the start of a …","Values to clear depth stencil buffers during a <code>RenderPass</code>","Responsible for buffering graphics commands. Internally it …","","Used for comparison ops in depth testing, samplers.","","Used for cbuffers","","Generates shader with debug info","Used as a depth stencil render target","","","Descriptor layout is required to create a pipeline it …","","Describes a range of resources for access on the GPU.","Describes the type of descriptor table to create.","A GPU device is used to create GPU resources, the device …","Information to create a device, it contains default heaps …","","","Errors passed back from FFI calls to various gfx backends","Error types for different gfx backends and FFI calls","Format for resource types (textures / buffers). n = …","","","","","An opaque shader heap type, use to create views of …","","Information to create a desciptor heap… <code>Device</code> will …","Options for heap types","","Bindable as an index buffer","Describe a single element of an <code>InputLayoutInfo</code>","Describes the frequency of which elements are fetched from …","","","","","","","No flags, default compilation","Texture will be only used for data storage and not used on …","","","","","","An opaque Pipeline type set blend, depth stencil, raster …","","Information to create a pipeline through …","","Used for swap chain textures only, required before calling …","Describes space in the shader to send data to via …","","","","","","","","Used as a colour render target","","","","","","","","","","","","","","","","Results from an issued ReadBackRequest","Used to readback data from the GPU, once the request is …","","An opaque RenderPass containing an optional set of colour …","","Information to create a render pass","","Used for texture only to be written to from fragment …","All possible resource states, some for buffers and some …","Texture will be sampled in a shader","Skips optimization for easier debuggability, deterministic …","Used for texture samplers","","Address mode for the sampler (controls wrapping and …","Filtering mode for the sampler (controls bilinear and …","Info to create a sampler state object to sample textures …","Structure to specify scissor rect coordinates on a <code>CmdBuf</code>.","An opaque Shader type","For shader resource view, constant buffer or unordered …","","","Shader compilation flags","Information required to compile a shader from source code.","Information to create a shader through …","Used for textures or structured buffers","Readable from shaders","The stage to which a shader will bind itself.","Describes the visibility of which shader stages can access …","A swap chain is connected to a window, controls fences and …","","Information to pass to <code>Device::create_swap_chain</code>","An opaque Texture type","","","","","Information to create a pipeline through …","Describes the dimension of a texture","Textures can be used in one or more of the following ways","Transitions are required to be performed to switch …","Used as a read-writable resource in compute shaders","","Used for read-write textures","Access for read/write from shaders","Used as a target for hardware assisted video decoding …","","","","Bindable as a vertex or constant buffer for use in shaders","Structure to specify viewport coordinates on a <code>CmdBuf</code>.","","","","","","","","Aligns value to the alignment specified by align. value …","Aligns value to the alignment specified by align. value …","","Returns the set containing all flags.","Returns the set containing all flags.","","Take any sized type and return a u8 slice. This can be …","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Returns the ‘block size’ (texel, compressed block of …","Colour is rgba8 packed into a u32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional info to compile from source, if this is none then …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","Compute Shader","Implemets this interface with a Direct3D12 backend.","Slice of data bytes","debug funcs will be removed","Clear value for the depth buffer. Use <code>None</code> to preserve …","","space for depth stencil targets","A texture which was created with depth stencil flags","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","(must also specify None to clear). This can save having to …","","","Depth value (in view) to clear depth stencil, use None to …","Returns an empty set of flags.","Returns an empty set of flags.","","The name of the entry point function in the shader to …","","","","","","","","","","Flags to pass to the compiler.","","","","","","","","","","","","","must be BGRA8n, RGBA8n or RGBA16f","","GPU format to interperet the data","Data format of the buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","Fragment Shader","","","","","","Return the index to access in a shader ie) buffers[index]…","Return the index to access in a shader ie) textures[index]…","","","","","Height of the viewport rectangle (Y is down).","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","Maximum depth of the viewport. Ranges between 0 and 1.","","Minimum depth of the viewport. Ranges between 0 and 1.","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Number of descriptors in this table, use <code>None</code> for unbounded","The number of array elements","Number of 32-bit values to push","","","","","","","Register space to bind to (supplied in shader)","Register space to bind to (supplied in shader)","Register space to bind to (supplied in shader)","Removes the specified flags in-place.","Removes the specified flags in-place.","space for colour render targets","Array of textures which have been created with render …","","Choose to resolve multi-sample AA targets,","","Pitch of a row of data","Returns the row pitch of an image in bytes: width * block …","Colour to clear render target when the pass starts, use …","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","space for shader resource views, constant buffers and …","Register index to bind to (supplied in shader)","Register index to bind to (supplied in shader)","Register index to bind to (supplied in shader)","Type of the shader (Vertex, Fragment, Compute, etc…).","Total size of data (should be == data.len())","Return the size in bytes of a 3 dimensional resource: …","Take any sized silce and convert to a slice of u8","Pitch of a slice (3D texture or array level, cubemap face …","Returns the slice pitch of an image in bytes: width * …","","","","Clear value for the stencil buffer. Use <code>None</code> to preserve …","","The stride of a vertex or structure in bytes.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Type of resources in this table","","The target you wish to compile for, this is paltform …","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Indicates how the buffer will be used on the GPU.","","The shader stage the resources will be accessible to","The shader stage the constants will be accessible to","The shader stage the sampler will be accessible to","Vertex Shader","Width of the viewport rectangle.","","Top left x coordinate.","Top left y coordinate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of components per-pixel (RGBA = 4)","Vector of linear image data tightly packed","","Vertical dimension of the image in texels","","Loads an image from file returning information in the …","","","","Horizontal dimension of the image in texels","Writes a buffer of image data to a file. The type of image …","An interface which all platforms need to implement for …","Information to describe the Application properties","Describes a rectangle starting at the top left corner …","An instance of an operating system window","","Filled out to specify various window parameters when a …","","","","","","","","","","Close the window","Create an application instance","Create a new operating system window","","","","Returns the window position and size inside rect","Returns the size of the window as tuple","Returns a gfx friendly full window rect to use as …","Height of the window starting at y","","","","Name of the application","Specify the number of buffers in the swap chain","Specify the position and size of the window","Call to update windows and os state each frame, when false …","Set the window position and size in 1","Set only the size of the window","Title appears in the title bar of the window","","","","","","","","","","","Must be called each frame to handle resizes","Width of the window starting at x","Implements this interface for windows win32 platfrom","Set to true to create a default window","Top left position x","Top left position y","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,3,4,5,0,6,0,0,5,0,0,0,6,0,7,8,9,10,11,12,13,0,12,0,0,0,0,12,2,0,0,0,7,1,2,2,0,6,0,0,9,14,0,0,2,2,3,12,5,5,10,11,2,2,12,15,15,0,6,0,3,14,0,4,4,4,4,4,4,4,11,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,6,0,6,0,13,14,0,11,10,8,13,0,0,0,0,0,13,6,12,0,0,0,8,14,0,0,0,6,0,0,6,16,16,16,0,0,0,0,11,4,8,14,11,9,7,1,14,0,12,12,5,17,18,18,18,0,0,19,10,11,20,0,17,21,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,18,22,23,24,25,26,27,28,29,8,30,19,15,31,32,33,34,35,12,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,22,23,24,25,26,27,28,29,8,30,19,15,31,32,33,34,35,12,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,37,34,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,21,10,11,18,26,10,11,10,11,6,6,6,6,6,6,6,6,6,31,0,35,21,32,20,23,33,31,10,11,33,21,21,33,10,11,21,27,13,10,1,11,22,6,10,11,18,27,22,12,10,10,10,10,10,11,11,11,11,11,25,19,35,38,20,22,22,22,23,24,25,26,27,28,29,8,30,19,15,31,32,33,34,35,12,36,36,37,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,10,11,10,11,10,11,10,11,31,17,39,39,39,40,41,42,10,1,11,24,36,20,19,31,19,19,10,11,10,11,10,11,22,23,24,25,26,27,28,29,8,30,19,15,31,32,33,34,35,12,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,10,11,40,10,11,37,18,36,18,36,18,20,18,22,10,11,39,10,11,25,24,29,38,30,10,11,21,28,17,21,29,30,18,10,11,23,33,21,33,37,35,0,33,20,19,10,11,21,21,21,21,21,23,29,30,18,26,35,0,0,35,0,34,34,28,32,19,38,10,11,10,11,39,10,11,29,28,27,20,34,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,10,11,37,21,22,23,24,25,26,27,28,29,8,30,19,15,31,32,33,34,35,12,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,22,23,24,25,26,27,28,29,8,30,19,15,31,32,33,34,35,12,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,22,23,24,25,26,27,28,29,8,30,19,15,31,32,33,34,35,12,36,37,4,13,38,9,7,10,1,18,3,5,2,20,16,11,17,14,10,11,39,38,20,29,30,18,31,36,20,36,36,0,0,0,0,0,0,0,0,0,0,43,44,45,46,43,47,48,49,50,51,52,44,45,46,43,47,48,49,50,51,52,51,52,51,52,43,44,44,44,44,44,44,44,44,44,43,43,43,43,44,52,44,45,46,43,47,48,49,50,51,52,45,45,45,52,47,51,44,45,46,43,47,48,49,50,51,52,52,45,43,43,43,52,52,43,43,43,43,43,52,52,45,51,52,43,44,45,46,43,47,48,49,50,51,52,44,45,46,43,47,48,49,50,51,52,44,45,46,43,47,48,49,50,51,52,45,0,53,53,53,53,53,53,53,0,53,53,53,53,0,0,0,0,0,54,0,55,56,57,55,56,57,58,57,57,58,54,54,55,56,57,58,58,58,57,55,56,57,55,55,56,54,58,58,56,57,55,56,57,55,56,57,55,56,57,58,57,0,55,57,57,0,0,59,60,59,60,60,60,59,59,59,60,59,60,60,60,60,60,59,60,59,60,60,59,60,59,60,59,60,60],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],null,[[]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[["shadercompileflags",3]]],[[["textureusage",3]]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[["format",4]],["u32",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["viewport",3]],[[],["scissorrect",3]],[[],["format",4]],[[],["heaptype",4]],[[],["bufferinfo",3]],[[],["bufferusage",4]],[[],["shadertype",4]],[[],["shadercompileflags",3]],[[],["shadervisibility",4]],[[],["samplerinfo",3]],[[],["samplerfilter",4]],[[],["sampleraddressmode",4]],[[],["comparisonfunc",4]],[[],["textureinfo",3]],[[],["texturetype",4]],[[],["textureusage",3]],[[],["clearcolour",3]],[[],["resourcestate",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["shadercompileflags",3]],["ordering",4]],[[["textureusage",3]],["ordering",4]],null,null,[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["deviceinfo",3]]],[[["bufferinfo",3],["option",4]],[["result",4,["error"]],["error",3]]],[[["u32",15]]],[[["heapinfo",3]]],[[["pipelineinfo",3]],[["result",4,["error"]],["error",3]]],[[["renderpassinfo",3]]],[[["shaderinfo",3]],[["result",4,["error"]],["error",3]]],[[["window",3],["swapchaininfo",3]]],[[["option",4],["textureinfo",3]],[["result",4,["error"]],["error",3]]],null,null,null,[[]],null,null,null,null,null,[[]],[[]],null,[[["i32",15],["u32",15]]],[[["u32",15]]],null,[[]],[[]],[[]],null,[[["heaptype",4]],["bool",15]],[[["shadercompileflags",3]],["bool",15]],[[["shadervisibility",4]],["bool",15]],[[["textureusage",3]],["bool",15]],null,[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,null,null,null,[[["error",3]],["error",3]],[[["nulerror",3]],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["rect",3,["i32"]]],["viewport",3]],[[]],[[["i32",15],["rect",3,["i32"]]],["scissorrect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,[[],["i32",15]],[[]],[[]],[[],[["str",15],["result",4,["readbackdata","str"]],["readbackdata",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[["shadercompileflags",3]],["bool",15]],[[["textureusage",3]],["bool",15]],[[]],[[]],[[]],null,null,null,null,null,[[["shadercompileflags",3]],[["ordering",4],["option",4,["ordering"]]]],[[["textureusage",3]],[["ordering",4],["option",4,["ordering"]]]],[[["u32",15]]],null,null,[[]],null,null,null,[[]],[[]],null,null,[[]],null,null,null,[[["u64",15],["format",4]],["u64",15]],null,null,null,[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[["scissorrect",3]]],[[["u32",15]]],[[["viewport",3]]],null,null,null,null,null,null,[[["u64",15],["format",4],["u32",15]],["u64",15]],[[]],null,[[["u64",15],["format",4]],["u64",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["transitionbarrier",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["window",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["renderpass",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["texture",3]],[[],["readbackrequest",3]],[[]],[[]],[[["swapchain",3]]],[[["deviceinfo",3]],["device",3]],[[["bufferinfo",3],["option",4]],[["error",3],["buffer",3],["result",4,["buffer","error"]]]],[[["u32",15]],["cmdbuf",3]],[[["heapinfo",3]],["heap",3]],[[["pipelineinfo",3]],[["pipeline",3],["result",4,["pipeline","error"]],["error",3]]],[[["renderpassinfo",3]],["renderpass",3]],[[["shaderinfo",3]],[["error",3],["result",4,["shader","error"]],["shader",3]]],[[["swapchaininfo",3],["window",3]],["swapchain",3]],[[["textureinfo",3],["option",4]],[["error",3],["result",4,["texture","error"]],["texture",3]]],[[["device",3]]],[[["i32",15],["u32",15]]],[[["u32",15]]],[[]],[[["cmdbuf",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["renderpass",3]],[[],["texture",3]],[[],[["result",4,["readbackdata","str"]],["readbackdata",3],["str",15]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["swapchain",3]],["bool",15]],[[]],[[["u32",15]]],[[["swapchain",3]],["readbackrequest",3]],[[["swapchain",3]]],null,null,[[["buffer",3]]],[[["pipeline",3]]],[[["scissorrect",3]]],[[["buffer",3],["u32",15]]],[[["viewport",3]]],null,null,[[["device",3]]],[[]],[[]],[[["transitionbarrier",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["device",3],["cmdbuf",3],["window",3]]],null,[[]],[[]],null,null,[[]],null,[[]],[[["string",3]],["imagedata",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["u64",15],["u32",15],["string",3]],[["string",3],["result",4,["string"]]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[]],[[]],[[["appinfo",3]]],[[["windowinfo",3]]],[[]],[[]],[[]],[[],[["rect",3,["i32"]],["i32",15]]],[[]],[[],[["rect",3,["i32"]],["i32",15]]],null,[[]],[[]],[[]],null,null,null,[[],["bool",15]],[[["rect",3,["i32"]],["i32",15]]],[[["i32",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["appinfo",3]]],[[["windowinfo",3]],["window",3]],[[]],[[]],[[]],[[]],[[],["hwnd",3]],[[],[["rect",3,["i32"]],["i32",15]]],[[]],[[],[["rect",3,["i32"]],["i32",15]]],[[]],[[]],[[],["bool",15]],[[["rect",3,["i32"]],["i32",15]]],[[["i32",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[4,"ShaderVisibility"],[4,"ComparisonFunc"],[4,"SamplerFilter"],[4,"Format"],[4,"SamplerAddressMode"],[8,"Device"],[4,"ShaderType"],[4,"DescriptorTableType"],[4,"BufferUsage"],[3,"ShaderCompileFlags"],[3,"TextureUsage"],[4,"ErrorType"],[4,"HeapType"],[4,"ResourceState"],[4,"InputSlotClass"],[4,"TextureType"],[3,"ClearColour"],[3,"SamplerInfo"],[3,"InputElementInfo"],[3,"TextureInfo"],[8,"CmdBuf"],[3,"Error"],[3,"DeviceInfo"],[3,"HeapInfo"],[3,"SwapChainInfo"],[3,"ShaderInfo"],[3,"ShaderCompileInfo"],[3,"DescriptorLayout"],[3,"DescriptorTableInfo"],[3,"PushConstantInfo"],[3,"PipelineInfo"],[3,"ClearDepthStencil"],[3,"RenderPassInfo"],[3,"TransitionBarrier"],[3,"ReadBackData"],[3,"Viewport"],[3,"ScissorRect"],[3,"BufferInfo"],[8,"SwapChain"],[8,"ReadBackRequest"],[8,"Buffer"],[8,"Texture"],[3,"CmdBuf"],[3,"Device"],[3,"SwapChain"],[3,"Pipeline"],[3,"Buffer"],[3,"Shader"],[3,"RenderPass"],[3,"Heap"],[3,"Texture"],[3,"ReadBackRequest"],[3,"ImageData"],[8,"App"],[3,"AppInfo"],[3,"WindowInfo"],[3,"Rect"],[8,"Window"],[3,"App"],[3,"Window"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};